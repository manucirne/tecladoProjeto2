
RTOS-WIFI-SDCARD-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011fbc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00411fbc  00411fbc  00021fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a28  20400000  00411fc4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00010030  20400a28  004129ec  00030a28  2**2
                  ALLOC
  4 .stack        00002000  20410a58  00422a1c  00030a28  2**0
                  ALLOC
  5 .heap         00000200  20412a58  00424a1c  00030a28  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00030a28  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00030a56  2**0
                  CONTENTS, READONLY
  8 .debug_info   00044bc7  00000000  00000000  00030aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000888a  00000000  00000000  00075676  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001cd3f  00000000  00000000  0007df00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001aa8  00000000  00000000  0009ac3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002038  00000000  00000000  0009c6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002e74d  00000000  00000000  0009e71f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000241bd  00000000  00000000  000cce6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a3447  00000000  00000000  000f1029  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005ec4  00000000  00000000  00194470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 2a 41 20 01 89 40 00 ff 88 40 00 ff 88 40 00     X*A ..@...@...@.
  400010:	ff 88 40 00 ff 88 40 00 ff 88 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	81 35 40 00 ff 88 40 00 00 00 00 00 21 36 40 00     .5@...@.....!6@.
  40003c:	89 36 40 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     .6@...@...@...@.
  40004c:	ff 88 40 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     ..@...@...@...@.
  40005c:	ff 88 40 00 ff 88 40 00 00 00 00 00 19 84 40 00     ..@...@.......@.
  40006c:	2d 84 40 00 41 84 40 00 ff 88 40 00 ff 88 40 00     -.@.A.@...@...@.
  40007c:	ff 88 40 00 55 84 40 00 69 84 40 00 ff 88 40 00     ..@.U.@.i.@...@.
  40008c:	ff 88 40 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     ..@...@...@...@.
  40009c:	ff 88 40 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     ..@...@...@...@.
  4000ac:	ff 88 40 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     ..@...@...@...@.
  4000bc:	ff 88 40 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     ..@...@...@...@.
  4000cc:	ff 88 40 00 00 00 00 00 ff 88 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ff 88 40 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     ..@...@...@...@.
  4000ec:	ff 88 40 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     ..@...@...@...@.
  4000fc:	ff 88 40 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     ..@...@...@...@.
  40010c:	ff 88 40 00 ff 88 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ff 88 40 00 ff 88 40 00 ff 88 40 00     ......@...@...@.
  40012c:	ff 88 40 00 ff 88 40 00 00 00 00 00 ff 88 40 00     ..@...@.......@.
  40013c:	ff 88 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400a28 	.word	0x20400a28
  40015c:	00000000 	.word	0x00000000
  400160:	00411fc4 	.word	0x00411fc4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00411fc4 	.word	0x00411fc4
  4001a0:	20400a2c 	.word	0x20400a2c
  4001a4:	00411fc4 	.word	0x00411fc4
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001b6:	3300      	adds	r3, #0
  4001b8:	bf18      	it	ne
  4001ba:	2301      	movne	r3, #1
  4001bc:	7c4a      	ldrb	r2, [r1, #17]
  4001be:	6809      	ldr	r1, [r1, #0]
  4001c0:	4803      	ldr	r0, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c2:	7800      	ldrb	r0, [r0, #0]
  4001c4:	4c03      	ldr	r4, [pc, #12]	; (4001d4 <sd_mmc_configure_slot+0x28>)
  4001c6:	47a0      	blx	r4
  4001c8:	bd10      	pop	{r4, pc}
  4001ca:	bf00      	nop
  4001cc:	20400a44 	.word	0x20400a44
  4001d0:	20400a4d 	.word	0x20400a4d
  4001d4:	00401191 	.word	0x00401191

004001d8 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d8:	b108      	cbz	r0, 4001de <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001da:	2004      	movs	r0, #4
  4001dc:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001de:	4b32      	ldr	r3, [pc, #200]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001e0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001e2:	4b32      	ldr	r3, [pc, #200]	; (4002ac <sd_mmc_select_slot+0xd4>)
  4001e4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001e8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4001ec:	f002 021f 	and.w	r2, r2, #31
  4001f0:	2301      	movs	r3, #1
  4001f2:	fa03 f202 	lsl.w	r2, r3, r2
  4001f6:	420a      	tst	r2, r1
  4001f8:	d010      	beq.n	40021c <sd_mmc_select_slot+0x44>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001fc:	7b9b      	ldrb	r3, [r3, #14]
  4001fe:	2b01      	cmp	r3, #1
  400200:	d004      	beq.n	40020c <sd_mmc_select_slot+0x34>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400202:	2204      	movs	r2, #4
  400204:	4b28      	ldr	r3, [pc, #160]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400206:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400208:	2002      	movs	r0, #2
  40020a:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  40020c:	4b28      	ldr	r3, [pc, #160]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  40020e:	781b      	ldrb	r3, [r3, #0]
  400210:	2b00      	cmp	r3, #0
  400212:	d0f6      	beq.n	400202 <sd_mmc_select_slot+0x2a>
		SysTick->CTRL = 0;
  400214:	2200      	movs	r2, #0
  400216:	4b27      	ldr	r3, [pc, #156]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400218:	601a      	str	r2, [r3, #0]
  40021a:	e7f2      	b.n	400202 <sd_mmc_select_slot+0x2a>
{
  40021c:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  40021e:	4b22      	ldr	r3, [pc, #136]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400220:	7b9b      	ldrb	r3, [r3, #14]
  400222:	2b04      	cmp	r3, #4
  400224:	d005      	beq.n	400232 <sd_mmc_select_slot+0x5a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400226:	2b01      	cmp	r3, #1
  400228:	d019      	beq.n	40025e <sd_mmc_select_slot+0x86>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40022a:	2b03      	cmp	r3, #3
  40022c:	d12c      	bne.n	400288 <sd_mmc_select_slot+0xb0>
		return SD_MMC_ERR_UNUSABLE;
  40022e:	2003      	movs	r0, #3
  400230:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400232:	2201      	movs	r2, #1
  400234:	4b1c      	ldr	r3, [pc, #112]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400236:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  400238:	4b1e      	ldr	r3, [pc, #120]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	b93b      	cbnz	r3, 40024e <sd_mmc_select_slot+0x76>
		sd_mmc_sam_systick_used = true;
  40023e:	4b1c      	ldr	r3, [pc, #112]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400240:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400242:	4b1c      	ldr	r3, [pc, #112]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400244:	491c      	ldr	r1, [pc, #112]	; (4002b8 <sd_mmc_select_slot+0xe0>)
  400246:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400248:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40024a:	2002      	movs	r0, #2
  40024c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40024e:	2200      	movs	r2, #0
  400250:	4b17      	ldr	r3, [pc, #92]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400252:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400254:	4819      	ldr	r0, [pc, #100]	; (4002bc <sd_mmc_select_slot+0xe4>)
  400256:	4b1a      	ldr	r3, [pc, #104]	; (4002c0 <sd_mmc_select_slot+0xe8>)
  400258:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40025a:	2002      	movs	r0, #2
  40025c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40025e:	4b14      	ldr	r3, [pc, #80]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400260:	781b      	ldrb	r3, [r3, #0]
  400262:	b13b      	cbz	r3, 400274 <sd_mmc_select_slot+0x9c>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400264:	4b13      	ldr	r3, [pc, #76]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40026c:	d01a      	beq.n	4002a4 <sd_mmc_select_slot+0xcc>
		SysTick->CTRL = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b10      	ldr	r3, [pc, #64]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400272:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400274:	4b0c      	ldr	r3, [pc, #48]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400276:	2202      	movs	r2, #2
  400278:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40027a:	4a12      	ldr	r2, [pc, #72]	; (4002c4 <sd_mmc_select_slot+0xec>)
  40027c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40027e:	2201      	movs	r2, #1
  400280:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400282:	2200      	movs	r2, #0
  400284:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  400288:	2200      	movs	r2, #0
  40028a:	4b0f      	ldr	r3, [pc, #60]	; (4002c8 <sd_mmc_select_slot+0xf0>)
  40028c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40028e:	4c06      	ldr	r4, [pc, #24]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400290:	4b0e      	ldr	r3, [pc, #56]	; (4002cc <sd_mmc_select_slot+0xf4>)
  400292:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400294:	4b0e      	ldr	r3, [pc, #56]	; (4002d0 <sd_mmc_select_slot+0xf8>)
  400296:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400298:	7ba0      	ldrb	r0, [r4, #14]
  40029a:	2802      	cmp	r0, #2
  40029c:	bf14      	ite	ne
  40029e:	2000      	movne	r0, #0
  4002a0:	2001      	moveq	r0, #1
  4002a2:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  4002a4:	2002      	movs	r0, #2
  4002a6:	bd10      	pop	{r4, pc}
  4002a8:	2040000c 	.word	0x2040000c
  4002ac:	00200707 	.word	0x00200707
  4002b0:	20400a4c 	.word	0x20400a4c
  4002b4:	e000e010 	.word	0xe000e010
  4002b8:	023c3460 	.word	0x023c3460
  4002bc:	0303af6b 	.word	0x0303af6b
  4002c0:	20400001 	.word	0x20400001
  4002c4:	00061a80 	.word	0x00061a80
  4002c8:	20400a4d 	.word	0x20400a4d
  4002cc:	20400a44 	.word	0x20400a44
  4002d0:	004001ad 	.word	0x004001ad

004002d4 <sdio_cmd52>:
{
  4002d4:	b538      	push	{r3, r4, r5, lr}
  4002d6:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4002d8:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002da:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4002de:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4002e2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4002e6:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002e8:	4311      	orrs	r1, r2
  4002ea:	f241 3034 	movw	r0, #4916	; 0x1334
  4002ee:	4b05      	ldr	r3, [pc, #20]	; (400304 <sdio_cmd52+0x30>)
  4002f0:	4798      	blx	r3
  4002f2:	4605      	mov	r5, r0
  4002f4:	b908      	cbnz	r0, 4002fa <sdio_cmd52+0x26>
}
  4002f6:	4628      	mov	r0, r5
  4002f8:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  4002fa:	4b03      	ldr	r3, [pc, #12]	; (400308 <sdio_cmd52+0x34>)
  4002fc:	4798      	blx	r3
  4002fe:	7020      	strb	r0, [r4, #0]
	return true;
  400300:	e7f9      	b.n	4002f6 <sdio_cmd52+0x22>
  400302:	bf00      	nop
  400304:	00401279 	.word	0x00401279
  400308:	0040129d 	.word	0x0040129d

0040030c <sd_mmc_cmd9_mci>:
{
  40030c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40030e:	4b09      	ldr	r3, [pc, #36]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	8999      	ldrh	r1, [r3, #12]
  400314:	0409      	lsls	r1, r1, #16
  400316:	f641 3009 	movw	r0, #6921	; 0x1b09
  40031a:	4b07      	ldr	r3, [pc, #28]	; (400338 <sd_mmc_cmd9_mci+0x2c>)
  40031c:	4798      	blx	r3
  40031e:	4604      	mov	r4, r0
  400320:	b908      	cbnz	r0, 400326 <sd_mmc_cmd9_mci+0x1a>
}
  400322:	4620      	mov	r0, r4
  400324:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400326:	4b03      	ldr	r3, [pc, #12]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400328:	6818      	ldr	r0, [r3, #0]
  40032a:	3012      	adds	r0, #18
  40032c:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_cmd9_mci+0x30>)
  40032e:	4798      	blx	r3
	return true;
  400330:	e7f7      	b.n	400322 <sd_mmc_cmd9_mci+0x16>
  400332:	bf00      	nop
  400334:	20400a44 	.word	0x20400a44
  400338:	00401279 	.word	0x00401279
  40033c:	004012a5 	.word	0x004012a5

00400340 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400340:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400342:	4b04      	ldr	r3, [pc, #16]	; (400354 <sd_mmc_deselect_slot+0x14>)
  400344:	781b      	ldrb	r3, [r3, #0]
  400346:	b103      	cbz	r3, 40034a <sd_mmc_deselect_slot+0xa>
  400348:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40034a:	2000      	movs	r0, #0
  40034c:	4b02      	ldr	r3, [pc, #8]	; (400358 <sd_mmc_deselect_slot+0x18>)
  40034e:	4798      	blx	r3
	}
}
  400350:	e7fa      	b.n	400348 <sd_mmc_deselect_slot+0x8>
  400352:	bf00      	nop
  400354:	20400a4d 	.word	0x20400a4d
  400358:	00401255 	.word	0x00401255

0040035c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40035c:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  40035e:	2010      	movs	r0, #16
  400360:	4b05      	ldr	r3, [pc, #20]	; (400378 <sd_mmc_init+0x1c>)
  400362:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400364:	2204      	movs	r2, #4
  400366:	4b05      	ldr	r3, [pc, #20]	; (40037c <sd_mmc_init+0x20>)
  400368:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40036a:	22ff      	movs	r2, #255	; 0xff
  40036c:	4b04      	ldr	r3, [pc, #16]	; (400380 <sd_mmc_init+0x24>)
  40036e:	701a      	strb	r2, [r3, #0]
	driver_init();
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <sd_mmc_init+0x28>)
  400372:	4798      	blx	r3
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	00408621 	.word	0x00408621
  40037c:	2040000c 	.word	0x2040000c
  400380:	20400a4d 	.word	0x20400a4d
  400384:	00401155 	.word	0x00401155

00400388 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40038c:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40038e:	4ba7      	ldr	r3, [pc, #668]	; (40062c <sd_mmc_check+0x2a4>)
  400390:	4798      	blx	r3
  400392:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400394:	2801      	cmp	r0, #1
  400396:	d005      	beq.n	4003a4 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400398:	4ba5      	ldr	r3, [pc, #660]	; (400630 <sd_mmc_check+0x2a8>)
  40039a:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  40039c:	4620      	mov	r0, r4
  40039e:	b015      	add	sp, #84	; 0x54
  4003a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4003a4:	ae14      	add	r6, sp, #80	; 0x50
  4003a6:	2308      	movs	r3, #8
  4003a8:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4003ac:	4ba1      	ldr	r3, [pc, #644]	; (400634 <sd_mmc_check+0x2ac>)
  4003ae:	681b      	ldr	r3, [r3, #0]
  4003b0:	2701      	movs	r7, #1
  4003b2:	73df      	strb	r7, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4003b4:	2500      	movs	r5, #0
  4003b6:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  4003b8:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  4003ba:	4b9f      	ldr	r3, [pc, #636]	; (400638 <sd_mmc_check+0x2b0>)
  4003bc:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003be:	9600      	str	r6, [sp, #0]
  4003c0:	462b      	mov	r3, r5
  4003c2:	2206      	movs	r2, #6
  4003c4:	4629      	mov	r1, r5
  4003c6:	4638      	mov	r0, r7
  4003c8:	4e9c      	ldr	r6, [pc, #624]	; (40063c <sd_mmc_check+0x2b4>)
  4003ca:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003cc:	4629      	mov	r1, r5
  4003ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003d2:	4b9b      	ldr	r3, [pc, #620]	; (400640 <sd_mmc_check+0x2b8>)
  4003d4:	4798      	blx	r3
  4003d6:	b930      	cbnz	r0, 4003e6 <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4003d8:	4b96      	ldr	r3, [pc, #600]	; (400634 <sd_mmc_check+0x2ac>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	2403      	movs	r4, #3
  4003de:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  4003e0:	4b93      	ldr	r3, [pc, #588]	; (400630 <sd_mmc_check+0x2a8>)
  4003e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4003e4:	e7da      	b.n	40039c <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003ea:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ee:	4b94      	ldr	r3, [pc, #592]	; (400640 <sd_mmc_check+0x2b8>)
  4003f0:	4798      	blx	r3
  4003f2:	2800      	cmp	r0, #0
  4003f4:	f040 8093 	bne.w	40051e <sd_mmc_check+0x196>
	*v2 = 0;
  4003f8:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4003fc:	2100      	movs	r1, #0
  4003fe:	f244 5005 	movw	r0, #17669	; 0x4505
  400402:	4b8f      	ldr	r3, [pc, #572]	; (400640 <sd_mmc_check+0x2b8>)
  400404:	4798      	blx	r3
  400406:	2800      	cmp	r0, #0
  400408:	f040 8097 	bne.w	40053a <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40040c:	4b89      	ldr	r3, [pc, #548]	; (400634 <sd_mmc_check+0x2ac>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	7bdb      	ldrb	r3, [r3, #15]
  400412:	f013 0f01 	tst.w	r3, #1
  400416:	f040 80b5 	bne.w	400584 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40041a:	2100      	movs	r1, #0
  40041c:	f245 1003 	movw	r0, #20739	; 0x5103
  400420:	4b87      	ldr	r3, [pc, #540]	; (400640 <sd_mmc_check+0x2b8>)
  400422:	4798      	blx	r3
  400424:	2800      	cmp	r0, #0
  400426:	d0d7      	beq.n	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400428:	4d82      	ldr	r5, [pc, #520]	; (400634 <sd_mmc_check+0x2ac>)
  40042a:	682e      	ldr	r6, [r5, #0]
  40042c:	4b85      	ldr	r3, [pc, #532]	; (400644 <sd_mmc_check+0x2bc>)
  40042e:	4798      	blx	r3
  400430:	0c00      	lsrs	r0, r0, #16
  400432:	81b0      	strh	r0, [r6, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400434:	682b      	ldr	r3, [r5, #0]
  400436:	7bdb      	ldrb	r3, [r3, #15]
  400438:	f013 0f01 	tst.w	r3, #1
  40043c:	d034      	beq.n	4004a8 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  40043e:	4b82      	ldr	r3, [pc, #520]	; (400648 <sd_mmc_check+0x2c0>)
  400440:	4798      	blx	r3
  400442:	2800      	cmp	r0, #0
  400444:	d0c8      	beq.n	4003d8 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400446:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400448:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40044a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40044e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400452:	497e      	ldr	r1, [pc, #504]	; (40064c <sd_mmc_check+0x2c4>)
  400454:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40045c:	fb02 f201 	mul.w	r2, r2, r1
  400460:	497b      	ldr	r1, [pc, #492]	; (400650 <sd_mmc_check+0x2c8>)
  400462:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400466:	fb02 f201 	mul.w	r2, r2, r1
  40046a:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40046c:	7c9a      	ldrb	r2, [r3, #18]
  40046e:	0992      	lsrs	r2, r2, #6
  400470:	f040 820c 	bne.w	40088c <sd_mmc_check+0x504>
  400474:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400476:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400478:	7e1a      	ldrb	r2, [r3, #24]
  40047a:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40047c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400480:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400484:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400486:	7ed9      	ldrb	r1, [r3, #27]
  400488:	0049      	lsls	r1, r1, #1
  40048a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40048e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400492:	3201      	adds	r2, #1
  400494:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400498:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40049a:	408a      	lsls	r2, r1
  40049c:	7dd9      	ldrb	r1, [r3, #23]
  40049e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4004a2:	408a      	lsls	r2, r1
				/ 1024;
  4004a4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4004a6:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4004a8:	4b62      	ldr	r3, [pc, #392]	; (400634 <sd_mmc_check+0x2ac>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	8999      	ldrh	r1, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4004ae:	0409      	lsls	r1, r1, #16
  4004b0:	f243 1007 	movw	r0, #12551	; 0x3107
  4004b4:	4b62      	ldr	r3, [pc, #392]	; (400640 <sd_mmc_check+0x2b8>)
  4004b6:	4798      	blx	r3
  4004b8:	2800      	cmp	r0, #0
  4004ba:	d08d      	beq.n	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4004bc:	4b5d      	ldr	r3, [pc, #372]	; (400634 <sd_mmc_check+0x2ac>)
  4004be:	681b      	ldr	r3, [r3, #0]
  4004c0:	7bda      	ldrb	r2, [r3, #15]
  4004c2:	f012 0f01 	tst.w	r2, #1
  4004c6:	f040 81ee 	bne.w	4008a6 <sd_mmc_check+0x51e>
	if (IS_SDIO()) {
  4004ca:	4b5a      	ldr	r3, [pc, #360]	; (400634 <sd_mmc_check+0x2ac>)
  4004cc:	681b      	ldr	r3, [r3, #0]
  4004ce:	7bdb      	ldrb	r3, [r3, #15]
  4004d0:	f013 0f04 	tst.w	r3, #4
  4004d4:	f000 829d 	beq.w	400a12 <sd_mmc_check+0x68a>
  4004d8:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4004da:	2700      	movs	r7, #0
  4004dc:	4e57      	ldr	r6, [pc, #348]	; (40063c <sd_mmc_check+0x2b4>)
  4004de:	f1a5 0309 	sub.w	r3, r5, #9
  4004e2:	aa03      	add	r2, sp, #12
  4004e4:	4413      	add	r3, r2
  4004e6:	9300      	str	r3, [sp, #0]
  4004e8:	463b      	mov	r3, r7
  4004ea:	462a      	mov	r2, r5
  4004ec:	4639      	mov	r1, r7
  4004ee:	4638      	mov	r0, r7
  4004f0:	47b0      	blx	r6
		addr_old++;
  4004f2:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4004f4:	2d0d      	cmp	r5, #13
  4004f6:	d1f2      	bne.n	4004de <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4004f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4004fc:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400500:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400504:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400508:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40050c:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400510:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400514:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400516:	f04f 0800 	mov.w	r8, #0
  40051a:	4f48      	ldr	r7, [pc, #288]	; (40063c <sd_mmc_check+0x2b4>)
  40051c:	e23a      	b.n	400994 <sd_mmc_check+0x60c>
	resp = driver_get_response();
  40051e:	4b49      	ldr	r3, [pc, #292]	; (400644 <sd_mmc_check+0x2bc>)
  400520:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400522:	f1b0 3fff 	cmp.w	r0, #4294967295
  400526:	f000 834a 	beq.w	400bbe <sd_mmc_check+0x836>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40052a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40052e:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400532:	f47f af51 	bne.w	4003d8 <sd_mmc_check+0x50>
	*v2 = 1;
  400536:	46b9      	mov	r9, r7
  400538:	e760      	b.n	4003fc <sd_mmc_check+0x74>
	resp = driver_get_response();
  40053a:	4b42      	ldr	r3, [pc, #264]	; (400644 <sd_mmc_check+0x2bc>)
  40053c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  400542:	f43f af63 	beq.w	40040c <sd_mmc_check+0x84>
  400546:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40054a:	f244 5805 	movw	r8, #17669	; 0x4505
  40054e:	4e3c      	ldr	r6, [pc, #240]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400550:	4f3c      	ldr	r7, [pc, #240]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400552:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  400556:	4640      	mov	r0, r8
  400558:	47b0      	blx	r6
  40055a:	2800      	cmp	r0, #0
  40055c:	f43f af3c 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400560:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400562:	2800      	cmp	r0, #0
  400564:	db02      	blt.n	40056c <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  400566:	3d01      	subs	r5, #1
  400568:	d1f3      	bne.n	400552 <sd_mmc_check+0x1ca>
  40056a:	e735      	b.n	4003d8 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  40056c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400570:	d104      	bne.n	40057c <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400572:	4b30      	ldr	r3, [pc, #192]	; (400634 <sd_mmc_check+0x2ac>)
  400574:	681b      	ldr	r3, [r3, #0]
  400576:	2204      	movs	r2, #4
  400578:	73da      	strb	r2, [r3, #15]
  40057a:	e74e      	b.n	40041a <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40057c:	4b2d      	ldr	r3, [pc, #180]	; (400634 <sd_mmc_check+0x2ac>)
  40057e:	681b      	ldr	r3, [r3, #0]
  400580:	2205      	movs	r2, #5
  400582:	73da      	strb	r2, [r3, #15]
  400584:	f1b9 0f00 	cmp.w	r9, #0
  400588:	4f32      	ldr	r7, [pc, #200]	; (400654 <sd_mmc_check+0x2cc>)
  40058a:	bf14      	ite	ne
  40058c:	46b9      	movne	r9, r7
  40058e:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  400592:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400596:	f04f 0800 	mov.w	r8, #0
  40059a:	4e29      	ldr	r6, [pc, #164]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  40059c:	4f29      	ldr	r7, [pc, #164]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40059e:	4641      	mov	r1, r8
  4005a0:	f241 1037 	movw	r0, #4407	; 0x1137
  4005a4:	47b0      	blx	r6
  4005a6:	b148      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4005a8:	4649      	mov	r1, r9
  4005aa:	f244 5029 	movw	r0, #17705	; 0x4529
  4005ae:	47b0      	blx	r6
  4005b0:	b120      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		resp = driver_get_response();
  4005b2:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005b4:	2800      	cmp	r0, #0
  4005b6:	db20      	blt.n	4005fa <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4005b8:	3d01      	subs	r5, #1
  4005ba:	d1f0      	bne.n	40059e <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4005bc:	4b1d      	ldr	r3, [pc, #116]	; (400634 <sd_mmc_check+0x2ac>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	2202      	movs	r2, #2
  4005c2:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4005c4:	2100      	movs	r1, #0
  4005c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4005ca:	4b1d      	ldr	r3, [pc, #116]	; (400640 <sd_mmc_check+0x2b8>)
  4005cc:	4798      	blx	r3
  4005ce:	2800      	cmp	r0, #0
  4005d0:	f43f af02 	beq.w	4003d8 <sd_mmc_check+0x50>
  4005d4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005d8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400654 <sd_mmc_check+0x2cc>
  4005dc:	4e18      	ldr	r6, [pc, #96]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4005de:	4f19      	ldr	r7, [pc, #100]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005e0:	4641      	mov	r1, r8
  4005e2:	f244 5001 	movw	r0, #17665	; 0x4501
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f43f aef5 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4005ee:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005f0:	2800      	cmp	r0, #0
  4005f2:	db31      	blt.n	400658 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4005f4:	3d01      	subs	r5, #1
  4005f6:	d1f3      	bne.n	4005e0 <sd_mmc_check+0x258>
  4005f8:	e6ee      	b.n	4003d8 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4005fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4005fe:	d005      	beq.n	40060c <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400600:	4b0c      	ldr	r3, [pc, #48]	; (400634 <sd_mmc_check+0x2ac>)
  400602:	681a      	ldr	r2, [r3, #0]
  400604:	7bd3      	ldrb	r3, [r2, #15]
  400606:	f043 0308 	orr.w	r3, r3, #8
  40060a:	73d3      	strb	r3, [r2, #15]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40060c:	4b09      	ldr	r3, [pc, #36]	; (400634 <sd_mmc_check+0x2ac>)
  40060e:	681b      	ldr	r3, [r3, #0]
  400610:	7bdb      	ldrb	r3, [r3, #15]
  400612:	f013 0f01 	tst.w	r3, #1
  400616:	f43f af00 	beq.w	40041a <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40061a:	2100      	movs	r1, #0
  40061c:	f645 3002 	movw	r0, #23298	; 0x5b02
  400620:	4b07      	ldr	r3, [pc, #28]	; (400640 <sd_mmc_check+0x2b8>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f47f aef8 	bne.w	40041a <sd_mmc_check+0x92>
  40062a:	e6d5      	b.n	4003d8 <sd_mmc_check+0x50>
  40062c:	004001d9 	.word	0x004001d9
  400630:	00400341 	.word	0x00400341
  400634:	20400a44 	.word	0x20400a44
  400638:	00401257 	.word	0x00401257
  40063c:	004002d5 	.word	0x004002d5
  400640:	00401279 	.word	0x00401279
  400644:	0040129d 	.word	0x0040129d
  400648:	0040030d 	.word	0x0040030d
  40064c:	0041061c 	.word	0x0041061c
  400650:	00410638 	.word	0x00410638
  400654:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400658:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40065c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400660:	d027      	beq.n	4006b2 <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400662:	2100      	movs	r1, #0
  400664:	f645 3002 	movw	r0, #23298	; 0x5b02
  400668:	4ba5      	ldr	r3, [pc, #660]	; (400900 <sd_mmc_check+0x578>)
  40066a:	4798      	blx	r3
  40066c:	2800      	cmp	r0, #0
  40066e:	f43f aeb3 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  400672:	4ba4      	ldr	r3, [pc, #656]	; (400904 <sd_mmc_check+0x57c>)
  400674:	681b      	ldr	r3, [r3, #0]
  400676:	2201      	movs	r2, #1
  400678:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40067a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40067e:	f241 1003 	movw	r0, #4355	; 0x1103
  400682:	4b9f      	ldr	r3, [pc, #636]	; (400900 <sd_mmc_check+0x578>)
  400684:	4798      	blx	r3
  400686:	2800      	cmp	r0, #0
  400688:	f43f aea6 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  40068c:	4b9e      	ldr	r3, [pc, #632]	; (400908 <sd_mmc_check+0x580>)
  40068e:	4798      	blx	r3
  400690:	2800      	cmp	r0, #0
  400692:	f43f aea1 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400696:	4b9b      	ldr	r3, [pc, #620]	; (400904 <sd_mmc_check+0x57c>)
  400698:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40069a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  40069c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4006a0:	3b01      	subs	r3, #1
  4006a2:	2b03      	cmp	r3, #3
  4006a4:	d80c      	bhi.n	4006c0 <sd_mmc_check+0x338>
  4006a6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4006aa:	00cd      	.short	0x00cd
  4006ac:	00d300d0 	.word	0x00d300d0
  4006b0:	00d6      	.short	0x00d6
				sd_mmc_card->type |= CARD_TYPE_HC;
  4006b2:	4b94      	ldr	r3, [pc, #592]	; (400904 <sd_mmc_check+0x57c>)
  4006b4:	681a      	ldr	r2, [r3, #0]
  4006b6:	7bd3      	ldrb	r3, [r2, #15]
  4006b8:	f043 0308 	orr.w	r3, r3, #8
  4006bc:	73d3      	strb	r3, [r2, #15]
  4006be:	e7d0      	b.n	400662 <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4006c0:	2312      	movs	r3, #18
  4006c2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4006c6:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4006ca:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4006ce:	498f      	ldr	r1, [pc, #572]	; (40090c <sd_mmc_check+0x584>)
  4006d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4006d8:	fb03 f301 	mul.w	r3, r3, r1
  4006dc:	498c      	ldr	r1, [pc, #560]	; (400910 <sd_mmc_check+0x588>)
  4006de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4006e2:	fb03 f301 	mul.w	r3, r3, r1
  4006e6:	6013      	str	r3, [r2, #0]
  4006e8:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006ea:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ec:	7e13      	ldrb	r3, [r2, #24]
  4006ee:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006f0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4006f4:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4006f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4006fc:	f640 71ff 	movw	r1, #4095	; 0xfff
  400700:	428b      	cmp	r3, r1
  400702:	d00f      	beq.n	400724 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400704:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400706:	7ed1      	ldrb	r1, [r2, #27]
  400708:	0049      	lsls	r1, r1, #1
  40070a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40070e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400710:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400714:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400716:	408b      	lsls	r3, r1
  400718:	7dd1      	ldrb	r1, [r2, #23]
  40071a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40071e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400720:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400722:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400724:	8991      	ldrh	r1, [r2, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400726:	0409      	lsls	r1, r1, #16
  400728:	f243 1007 	movw	r0, #12551	; 0x3107
  40072c:	4b74      	ldr	r3, [pc, #464]	; (400900 <sd_mmc_check+0x578>)
  40072e:	4798      	blx	r3
  400730:	2800      	cmp	r0, #0
  400732:	f43f ae51 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400736:	4b73      	ldr	r3, [pc, #460]	; (400904 <sd_mmc_check+0x57c>)
  400738:	681b      	ldr	r3, [r3, #0]
  40073a:	7c1b      	ldrb	r3, [r3, #16]
  40073c:	2b3f      	cmp	r3, #63	; 0x3f
  40073e:	f240 8097 	bls.w	400870 <sd_mmc_check+0x4e8>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400742:	2100      	movs	r1, #0
  400744:	9100      	str	r1, [sp, #0]
  400746:	2301      	movs	r3, #1
  400748:	f44f 7200 	mov.w	r2, #512	; 0x200
  40074c:	4871      	ldr	r0, [pc, #452]	; (400914 <sd_mmc_check+0x58c>)
  40074e:	4d72      	ldr	r5, [pc, #456]	; (400918 <sd_mmc_check+0x590>)
  400750:	47a8      	blx	r5
  400752:	2800      	cmp	r0, #0
  400754:	f43f ae40 	beq.w	4003d8 <sd_mmc_check+0x50>
  400758:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40075a:	4e70      	ldr	r6, [pc, #448]	; (40091c <sd_mmc_check+0x594>)
  40075c:	a803      	add	r0, sp, #12
  40075e:	47b0      	blx	r6
  400760:	2800      	cmp	r0, #0
  400762:	f43f ae39 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400766:	3501      	adds	r5, #1
  400768:	b2ad      	uxth	r5, r5
  40076a:	2d32      	cmp	r5, #50	; 0x32
  40076c:	d1f6      	bne.n	40075c <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  40076e:	9e03      	ldr	r6, [sp, #12]
  400770:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400774:	4b63      	ldr	r3, [pc, #396]	; (400904 <sd_mmc_check+0x57c>)
  400776:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400778:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40077a:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40077c:	7e1b      	ldrb	r3, [r3, #24]
  40077e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400780:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400784:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400788:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40078c:	f640 72ff 	movw	r2, #4095	; 0xfff
  400790:	4293      	cmp	r3, r2
  400792:	d10e      	bne.n	4007b2 <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400794:	4f61      	ldr	r7, [pc, #388]	; (40091c <sd_mmc_check+0x594>)
  400796:	a804      	add	r0, sp, #16
  400798:	47b8      	blx	r7
  40079a:	2800      	cmp	r0, #0
  40079c:	f43f ae1c 	beq.w	4003d8 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4007a0:	3501      	adds	r5, #1
  4007a2:	b2ad      	uxth	r5, r5
  4007a4:	2d35      	cmp	r5, #53	; 0x35
  4007a6:	d9f6      	bls.n	400796 <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4007a8:	4b56      	ldr	r3, [pc, #344]	; (400904 <sd_mmc_check+0x57c>)
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	9b04      	ldr	r3, [sp, #16]
  4007ae:	085b      	lsrs	r3, r3, #1
  4007b0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4007b2:	4f5a      	ldr	r7, [pc, #360]	; (40091c <sd_mmc_check+0x594>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4007b4:	2d7f      	cmp	r5, #127	; 0x7f
  4007b6:	d951      	bls.n	40085c <sd_mmc_check+0x4d4>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4007b8:	4b59      	ldr	r3, [pc, #356]	; (400920 <sd_mmc_check+0x598>)
  4007ba:	7818      	ldrb	r0, [r3, #0]
  4007bc:	4b59      	ldr	r3, [pc, #356]	; (400924 <sd_mmc_check+0x59c>)
  4007be:	4798      	blx	r3
  4007c0:	2803      	cmp	r0, #3
  4007c2:	d91d      	bls.n	400800 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4007c4:	4b56      	ldr	r3, [pc, #344]	; (400920 <sd_mmc_check+0x598>)
  4007c6:	7818      	ldrb	r0, [r3, #0]
  4007c8:	4b56      	ldr	r3, [pc, #344]	; (400924 <sd_mmc_check+0x59c>)
  4007ca:	4798      	blx	r3
  4007cc:	4605      	mov	r5, r0
	switch (bus_width) {
  4007ce:	2804      	cmp	r0, #4
  4007d0:	d04c      	beq.n	40086c <sd_mmc_check+0x4e4>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4007d2:	4b55      	ldr	r3, [pc, #340]	; (400928 <sd_mmc_check+0x5a0>)
  4007d4:	4955      	ldr	r1, [pc, #340]	; (40092c <sd_mmc_check+0x5a4>)
  4007d6:	2808      	cmp	r0, #8
  4007d8:	bf18      	it	ne
  4007da:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4007dc:	f243 1006 	movw	r0, #12550	; 0x3106
  4007e0:	4b47      	ldr	r3, [pc, #284]	; (400900 <sd_mmc_check+0x578>)
  4007e2:	4798      	blx	r3
  4007e4:	2800      	cmp	r0, #0
  4007e6:	f43f adf7 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007ea:	4b51      	ldr	r3, [pc, #324]	; (400930 <sd_mmc_check+0x5a8>)
  4007ec:	4798      	blx	r3
  4007ee:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007f2:	f47f adf1 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4007f6:	4b43      	ldr	r3, [pc, #268]	; (400904 <sd_mmc_check+0x57c>)
  4007f8:	681b      	ldr	r3, [r3, #0]
  4007fa:	745d      	strb	r5, [r3, #17]
			sd_mmc_configure_slot();
  4007fc:	4b4d      	ldr	r3, [pc, #308]	; (400934 <sd_mmc_check+0x5ac>)
  4007fe:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400800:	4b4d      	ldr	r3, [pc, #308]	; (400938 <sd_mmc_check+0x5b0>)
  400802:	4798      	blx	r3
  400804:	b1be      	cbz	r6, 400836 <sd_mmc_check+0x4ae>
  400806:	b1b0      	cbz	r0, 400836 <sd_mmc_check+0x4ae>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400808:	494c      	ldr	r1, [pc, #304]	; (40093c <sd_mmc_check+0x5b4>)
  40080a:	f243 1006 	movw	r0, #12550	; 0x3106
  40080e:	4b3c      	ldr	r3, [pc, #240]	; (400900 <sd_mmc_check+0x578>)
  400810:	4798      	blx	r3
  400812:	2800      	cmp	r0, #0
  400814:	f43f ade0 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400818:	4b45      	ldr	r3, [pc, #276]	; (400930 <sd_mmc_check+0x5a8>)
  40081a:	4798      	blx	r3
  40081c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400820:	f47f adda 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400824:	4b37      	ldr	r3, [pc, #220]	; (400904 <sd_mmc_check+0x57c>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2201      	movs	r2, #1
  40082a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  40082e:	4a44      	ldr	r2, [pc, #272]	; (400940 <sd_mmc_check+0x5b8>)
  400830:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400832:	4b40      	ldr	r3, [pc, #256]	; (400934 <sd_mmc_check+0x5ac>)
  400834:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400836:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400838:	f44f 7800 	mov.w	r8, #512	; 0x200
  40083c:	f241 1710 	movw	r7, #4368	; 0x1110
  400840:	4e2f      	ldr	r6, [pc, #188]	; (400900 <sd_mmc_check+0x578>)
  400842:	e01d      	b.n	400880 <sd_mmc_check+0x4f8>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400844:	2314      	movs	r3, #20
  400846:	7413      	strb	r3, [r2, #16]
  400848:	e73c      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40084a:	2322      	movs	r3, #34	; 0x22
  40084c:	7413      	strb	r3, [r2, #16]
  40084e:	e739      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400850:	2330      	movs	r3, #48	; 0x30
  400852:	7413      	strb	r3, [r2, #16]
  400854:	e736      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400856:	2340      	movs	r3, #64	; 0x40
  400858:	7413      	strb	r3, [r2, #16]
  40085a:	e733      	b.n	4006c4 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  40085c:	a804      	add	r0, sp, #16
  40085e:	47b8      	blx	r7
  400860:	2800      	cmp	r0, #0
  400862:	f43f adb9 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400866:	3501      	adds	r5, #1
  400868:	b2ad      	uxth	r5, r5
  40086a:	e7a3      	b.n	4007b4 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40086c:	4935      	ldr	r1, [pc, #212]	; (400944 <sd_mmc_check+0x5bc>)
  40086e:	e7b5      	b.n	4007dc <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  400870:	4b30      	ldr	r3, [pc, #192]	; (400934 <sd_mmc_check+0x5ac>)
  400872:	4798      	blx	r3
  400874:	e7df      	b.n	400836 <sd_mmc_check+0x4ae>
  400876:	3d01      	subs	r5, #1
	while (retry--) {
  400878:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  40087c:	f43f adac 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400880:	4641      	mov	r1, r8
  400882:	4638      	mov	r0, r7
  400884:	47b0      	blx	r6
  400886:	2800      	cmp	r0, #0
  400888:	d0f5      	beq.n	400876 <sd_mmc_check+0x4ee>
  40088a:	e10e      	b.n	400aaa <sd_mmc_check+0x722>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40088c:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40088e:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400890:	7e5a      	ldrb	r2, [r3, #25]
  400892:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400894:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  400898:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  40089a:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  40089e:	3201      	adds	r2, #1
  4008a0:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4008a2:	605a      	str	r2, [r3, #4]
  4008a4:	e600      	b.n	4004a8 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4008a6:	8999      	ldrh	r1, [r3, #12]
  4008a8:	0409      	lsls	r1, r1, #16
  4008aa:	f241 1037 	movw	r0, #4407	; 0x1137
  4008ae:	4b14      	ldr	r3, [pc, #80]	; (400900 <sd_mmc_check+0x578>)
  4008b0:	4798      	blx	r3
  4008b2:	2800      	cmp	r0, #0
  4008b4:	f43f ad90 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4008b8:	2301      	movs	r3, #1
  4008ba:	9300      	str	r3, [sp, #0]
  4008bc:	2208      	movs	r2, #8
  4008be:	2100      	movs	r1, #0
  4008c0:	4821      	ldr	r0, [pc, #132]	; (400948 <sd_mmc_check+0x5c0>)
  4008c2:	4d15      	ldr	r5, [pc, #84]	; (400918 <sd_mmc_check+0x590>)
  4008c4:	47a8      	blx	r5
  4008c6:	2800      	cmp	r0, #0
  4008c8:	f43f ad86 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4008cc:	2101      	movs	r1, #1
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	4b1e      	ldr	r3, [pc, #120]	; (40094c <sd_mmc_check+0x5c4>)
  4008d2:	4798      	blx	r3
  4008d4:	2800      	cmp	r0, #0
  4008d6:	f43f ad7f 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4008da:	4b1d      	ldr	r3, [pc, #116]	; (400950 <sd_mmc_check+0x5c8>)
  4008dc:	4798      	blx	r3
  4008de:	2800      	cmp	r0, #0
  4008e0:	f43f ad7a 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4008e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008e8:	f003 030f 	and.w	r3, r3, #15
  4008ec:	2b01      	cmp	r3, #1
  4008ee:	d036      	beq.n	40095e <sd_mmc_check+0x5d6>
  4008f0:	b383      	cbz	r3, 400954 <sd_mmc_check+0x5cc>
  4008f2:	2b02      	cmp	r3, #2
  4008f4:	d038      	beq.n	400968 <sd_mmc_check+0x5e0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4008f6:	4b03      	ldr	r3, [pc, #12]	; (400904 <sd_mmc_check+0x57c>)
  4008f8:	681b      	ldr	r3, [r3, #0]
  4008fa:	2210      	movs	r2, #16
  4008fc:	741a      	strb	r2, [r3, #16]
  4008fe:	e5e4      	b.n	4004ca <sd_mmc_check+0x142>
  400900:	00401279 	.word	0x00401279
  400904:	20400a44 	.word	0x20400a44
  400908:	0040030d 	.word	0x0040030d
  40090c:	0041061c 	.word	0x0041061c
  400910:	004105dc 	.word	0x004105dc
  400914:	00081108 	.word	0x00081108
  400918:	004012d5 	.word	0x004012d5
  40091c:	0040139d 	.word	0x0040139d
  400920:	20400a4d 	.word	0x20400a4d
  400924:	00401181 	.word	0x00401181
  400928:	01b70000 	.word	0x01b70000
  40092c:	01b70200 	.word	0x01b70200
  400930:	0040129d 	.word	0x0040129d
  400934:	004001ad 	.word	0x004001ad
  400938:	0040118b 	.word	0x0040118b
  40093c:	03b90100 	.word	0x03b90100
  400940:	03197500 	.word	0x03197500
  400944:	01b70100 	.word	0x01b70100
  400948:	00081133 	.word	0x00081133
  40094c:	00401411 	.word	0x00401411
  400950:	00401509 	.word	0x00401509
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400954:	4b9b      	ldr	r3, [pc, #620]	; (400bc4 <sd_mmc_check+0x83c>)
  400956:	681b      	ldr	r3, [r3, #0]
  400958:	2210      	movs	r2, #16
  40095a:	741a      	strb	r2, [r3, #16]
  40095c:	e5b5      	b.n	4004ca <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40095e:	4b99      	ldr	r3, [pc, #612]	; (400bc4 <sd_mmc_check+0x83c>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	221a      	movs	r2, #26
  400964:	741a      	strb	r2, [r3, #16]
  400966:	e5b0      	b.n	4004ca <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400968:	f89d 3012 	ldrb.w	r3, [sp, #18]
  40096c:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  40096e:	4b95      	ldr	r3, [pc, #596]	; (400bc4 <sd_mmc_check+0x83c>)
  400970:	681b      	ldr	r3, [r3, #0]
  400972:	bf14      	ite	ne
  400974:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400976:	2220      	moveq	r2, #32
  400978:	741a      	strb	r2, [r3, #16]
  40097a:	e5a6      	b.n	4004ca <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  40097c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400980:	2b00      	cmp	r3, #0
  400982:	f43f ad29 	beq.w	4003d8 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400986:	3302      	adds	r3, #2
  400988:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  40098a:	f509 7380 	add.w	r3, r9, #256	; 0x100
  40098e:	429e      	cmp	r6, r3
  400990:	f63f ad22 	bhi.w	4003d8 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400994:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400996:	ab04      	add	r3, sp, #16
  400998:	442b      	add	r3, r5
  40099a:	9300      	str	r3, [sp, #0]
  40099c:	4643      	mov	r3, r8
  40099e:	1972      	adds	r2, r6, r5
  4009a0:	4641      	mov	r1, r8
  4009a2:	4640      	mov	r0, r8
  4009a4:	47b8      	blx	r7
  4009a6:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  4009a8:	2d03      	cmp	r5, #3
  4009aa:	d1f4      	bne.n	400996 <sd_mmc_check+0x60e>
		if (buf[0] == SDIO_CISTPL_END) {
  4009ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009b0:	2bff      	cmp	r3, #255	; 0xff
  4009b2:	f43f ad11 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4009b6:	2b22      	cmp	r3, #34	; 0x22
  4009b8:	d1e0      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d1dc      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009c2:	ad04      	add	r5, sp, #16
  4009c4:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4009c8:	f04f 0800 	mov.w	r8, #0
  4009cc:	4f7e      	ldr	r7, [pc, #504]	; (400bc8 <sd_mmc_check+0x840>)
  4009ce:	9500      	str	r5, [sp, #0]
  4009d0:	4643      	mov	r3, r8
  4009d2:	4632      	mov	r2, r6
  4009d4:	4641      	mov	r1, r8
  4009d6:	4640      	mov	r0, r8
  4009d8:	47b8      	blx	r7
		addr_new++;
  4009da:	3601      	adds	r6, #1
  4009dc:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  4009de:	454e      	cmp	r6, r9
  4009e0:	d1f5      	bne.n	4009ce <sd_mmc_check+0x646>
	tplfe_max_tran_speed = buf[5];
  4009e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4009e6:	2b32      	cmp	r3, #50	; 0x32
  4009e8:	bf28      	it	cs
  4009ea:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  4009ec:	4a75      	ldr	r2, [pc, #468]	; (400bc4 <sd_mmc_check+0x83c>)
  4009ee:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4009f0:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4009f4:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4009f8:	4974      	ldr	r1, [pc, #464]	; (400bcc <sd_mmc_check+0x844>)
  4009fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a02:	fb03 f301 	mul.w	r3, r3, r1
  400a06:	4972      	ldr	r1, [pc, #456]	; (400bd0 <sd_mmc_check+0x848>)
  400a08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400a0c:	fb03 f301 	mul.w	r3, r3, r1
  400a10:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400a12:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x84c>)
  400a14:	7818      	ldrb	r0, [r3, #0]
  400a16:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x850>)
  400a18:	4798      	blx	r3
  400a1a:	2803      	cmp	r0, #3
  400a1c:	d922      	bls.n	400a64 <sd_mmc_check+0x6dc>
		if (IS_SDIO()) {
  400a1e:	4b69      	ldr	r3, [pc, #420]	; (400bc4 <sd_mmc_check+0x83c>)
  400a20:	681b      	ldr	r3, [r3, #0]
  400a22:	7bdb      	ldrb	r3, [r3, #15]
  400a24:	f013 0f04 	tst.w	r3, #4
  400a28:	d146      	bne.n	400ab8 <sd_mmc_check+0x730>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a2a:	4b66      	ldr	r3, [pc, #408]	; (400bc4 <sd_mmc_check+0x83c>)
  400a2c:	681b      	ldr	r3, [r3, #0]
  400a2e:	7bda      	ldrb	r2, [r3, #15]
  400a30:	f012 0f01 	tst.w	r2, #1
  400a34:	d014      	beq.n	400a60 <sd_mmc_check+0x6d8>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a36:	8999      	ldrh	r1, [r3, #12]
  400a38:	0409      	lsls	r1, r1, #16
  400a3a:	f241 1037 	movw	r0, #4407	; 0x1137
  400a3e:	4b67      	ldr	r3, [pc, #412]	; (400bdc <sd_mmc_check+0x854>)
  400a40:	4798      	blx	r3
  400a42:	2800      	cmp	r0, #0
  400a44:	f43f acc8 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400a48:	2102      	movs	r1, #2
  400a4a:	f241 1006 	movw	r0, #4358	; 0x1106
  400a4e:	4b63      	ldr	r3, [pc, #396]	; (400bdc <sd_mmc_check+0x854>)
  400a50:	4798      	blx	r3
  400a52:	2800      	cmp	r0, #0
  400a54:	f43f acc0 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400a58:	4b5a      	ldr	r3, [pc, #360]	; (400bc4 <sd_mmc_check+0x83c>)
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	2204      	movs	r2, #4
  400a5e:	745a      	strb	r2, [r3, #17]
		sd_mmc_configure_slot();
  400a60:	4b5f      	ldr	r3, [pc, #380]	; (400be0 <sd_mmc_check+0x858>)
  400a62:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400a64:	4b5f      	ldr	r3, [pc, #380]	; (400be4 <sd_mmc_check+0x85c>)
  400a66:	4798      	blx	r3
  400a68:	b180      	cbz	r0, 400a8c <sd_mmc_check+0x704>
		if (IS_SDIO()) {
  400a6a:	4b56      	ldr	r3, [pc, #344]	; (400bc4 <sd_mmc_check+0x83c>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	7bdb      	ldrb	r3, [r3, #15]
  400a70:	f013 0f04 	tst.w	r3, #4
  400a74:	d141      	bne.n	400afa <sd_mmc_check+0x772>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a76:	4b53      	ldr	r3, [pc, #332]	; (400bc4 <sd_mmc_check+0x83c>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	7bda      	ldrb	r2, [r3, #15]
  400a7c:	f012 0f01 	tst.w	r2, #1
  400a80:	d002      	beq.n	400a88 <sd_mmc_check+0x700>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a82:	7c1b      	ldrb	r3, [r3, #16]
  400a84:	2b10      	cmp	r3, #16
  400a86:	d85e      	bhi.n	400b46 <sd_mmc_check+0x7be>
		sd_mmc_configure_slot();
  400a88:	4b55      	ldr	r3, [pc, #340]	; (400be0 <sd_mmc_check+0x858>)
  400a8a:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a8c:	4b4d      	ldr	r3, [pc, #308]	; (400bc4 <sd_mmc_check+0x83c>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	7bdb      	ldrb	r3, [r3, #15]
  400a92:	f013 0f01 	tst.w	r3, #1
  400a96:	d008      	beq.n	400aaa <sd_mmc_check+0x722>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400a98:	f44f 7100 	mov.w	r1, #512	; 0x200
  400a9c:	f241 1010 	movw	r0, #4368	; 0x1110
  400aa0:	4b4e      	ldr	r3, [pc, #312]	; (400bdc <sd_mmc_check+0x854>)
  400aa2:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400aa4:	2800      	cmp	r0, #0
  400aa6:	f43f ac97 	beq.w	4003d8 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400aaa:	4b46      	ldr	r3, [pc, #280]	; (400bc4 <sd_mmc_check+0x83c>)
  400aac:	681b      	ldr	r3, [r3, #0]
  400aae:	2200      	movs	r2, #0
  400ab0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400ab2:	4b4d      	ldr	r3, [pc, #308]	; (400be8 <sd_mmc_check+0x860>)
  400ab4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400ab6:	e471      	b.n	40039c <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400ab8:	ab04      	add	r3, sp, #16
  400aba:	9300      	str	r3, [sp, #0]
  400abc:	2300      	movs	r3, #0
  400abe:	2208      	movs	r2, #8
  400ac0:	4619      	mov	r1, r3
  400ac2:	4618      	mov	r0, r3
  400ac4:	4d40      	ldr	r5, [pc, #256]	; (400bc8 <sd_mmc_check+0x840>)
  400ac6:	47a8      	blx	r5
  400ac8:	2800      	cmp	r0, #0
  400aca:	f43f ac85 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400ace:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400ad2:	2b00      	cmp	r3, #0
  400ad4:	daa9      	bge.n	400a2a <sd_mmc_check+0x6a2>
	u8_value = SDIO_BUSWIDTH_4B;
  400ad6:	ab14      	add	r3, sp, #80	; 0x50
  400ad8:	2202      	movs	r2, #2
  400ada:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400ade:	9300      	str	r3, [sp, #0]
  400ae0:	2301      	movs	r3, #1
  400ae2:	2207      	movs	r2, #7
  400ae4:	2100      	movs	r1, #0
  400ae6:	4618      	mov	r0, r3
  400ae8:	47a8      	blx	r5
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ac74 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400af0:	4b34      	ldr	r3, [pc, #208]	; (400bc4 <sd_mmc_check+0x83c>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	2204      	movs	r2, #4
  400af6:	745a      	strb	r2, [r3, #17]
  400af8:	e797      	b.n	400a2a <sd_mmc_check+0x6a2>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400afa:	ab04      	add	r3, sp, #16
  400afc:	9300      	str	r3, [sp, #0]
  400afe:	2300      	movs	r3, #0
  400b00:	2213      	movs	r2, #19
  400b02:	4619      	mov	r1, r3
  400b04:	4618      	mov	r0, r3
  400b06:	4d30      	ldr	r5, [pc, #192]	; (400bc8 <sd_mmc_check+0x840>)
  400b08:	47a8      	blx	r5
  400b0a:	2800      	cmp	r0, #0
  400b0c:	f43f ac64 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400b10:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400b14:	f013 0f01 	tst.w	r3, #1
  400b18:	d0ad      	beq.n	400a76 <sd_mmc_check+0x6ee>
	u8_value = SDIO_EHS;
  400b1a:	ab14      	add	r3, sp, #80	; 0x50
  400b1c:	2202      	movs	r2, #2
  400b1e:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400b22:	9300      	str	r3, [sp, #0]
  400b24:	2301      	movs	r3, #1
  400b26:	2213      	movs	r2, #19
  400b28:	2100      	movs	r1, #0
  400b2a:	4618      	mov	r0, r3
  400b2c:	47a8      	blx	r5
  400b2e:	2800      	cmp	r0, #0
  400b30:	f43f ac52 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400b34:	4b23      	ldr	r3, [pc, #140]	; (400bc4 <sd_mmc_check+0x83c>)
  400b36:	681b      	ldr	r3, [r3, #0]
  400b38:	2201      	movs	r2, #1
  400b3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400b3e:	681a      	ldr	r2, [r3, #0]
  400b40:	0052      	lsls	r2, r2, #1
  400b42:	601a      	str	r2, [r3, #0]
  400b44:	e797      	b.n	400a76 <sd_mmc_check+0x6ee>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400b46:	2540      	movs	r5, #64	; 0x40
  400b48:	462a      	mov	r2, r5
  400b4a:	2100      	movs	r1, #0
  400b4c:	a804      	add	r0, sp, #16
  400b4e:	4b27      	ldr	r3, [pc, #156]	; (400bec <sd_mmc_check+0x864>)
  400b50:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400b52:	2301      	movs	r3, #1
  400b54:	9300      	str	r3, [sp, #0]
  400b56:	462a      	mov	r2, r5
  400b58:	4925      	ldr	r1, [pc, #148]	; (400bf0 <sd_mmc_check+0x868>)
  400b5a:	4826      	ldr	r0, [pc, #152]	; (400bf4 <sd_mmc_check+0x86c>)
  400b5c:	4d26      	ldr	r5, [pc, #152]	; (400bf8 <sd_mmc_check+0x870>)
  400b5e:	47a8      	blx	r5
  400b60:	2800      	cmp	r0, #0
  400b62:	f43f ac39 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400b66:	2101      	movs	r1, #1
  400b68:	a804      	add	r0, sp, #16
  400b6a:	4b24      	ldr	r3, [pc, #144]	; (400bfc <sd_mmc_check+0x874>)
  400b6c:	4798      	blx	r3
  400b6e:	2800      	cmp	r0, #0
  400b70:	f43f ac32 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400b74:	4b22      	ldr	r3, [pc, #136]	; (400c00 <sd_mmc_check+0x878>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f ac2d 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400b7e:	4b21      	ldr	r3, [pc, #132]	; (400c04 <sd_mmc_check+0x87c>)
  400b80:	4798      	blx	r3
  400b82:	f010 0f80 	tst.w	r0, #128	; 0x80
  400b86:	f47f ac27 	bne.w	4003d8 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400b8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400b8e:	f003 030f 	and.w	r3, r3, #15
  400b92:	2b0f      	cmp	r3, #15
  400b94:	f43f af78 	beq.w	400a88 <sd_mmc_check+0x700>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400b98:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400b9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ba0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ba4:	f47f ac18 	bne.w	4003d8 <sd_mmc_check+0x50>
	driver_send_clock();
  400ba8:	4b17      	ldr	r3, [pc, #92]	; (400c08 <sd_mmc_check+0x880>)
  400baa:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400bac:	4b05      	ldr	r3, [pc, #20]	; (400bc4 <sd_mmc_check+0x83c>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	2201      	movs	r2, #1
  400bb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400bb6:	681a      	ldr	r2, [r3, #0]
  400bb8:	0052      	lsls	r2, r2, #1
  400bba:	601a      	str	r2, [r3, #0]
  400bbc:	e764      	b.n	400a88 <sd_mmc_check+0x700>
	*v2 = 0;
  400bbe:	f04f 0900 	mov.w	r9, #0
  400bc2:	e41b      	b.n	4003fc <sd_mmc_check+0x74>
  400bc4:	20400a44 	.word	0x20400a44
  400bc8:	004002d5 	.word	0x004002d5
  400bcc:	0041061c 	.word	0x0041061c
  400bd0:	00410638 	.word	0x00410638
  400bd4:	20400a4d 	.word	0x20400a4d
  400bd8:	00401181 	.word	0x00401181
  400bdc:	00401279 	.word	0x00401279
  400be0:	004001ad 	.word	0x004001ad
  400be4:	0040118b 	.word	0x0040118b
  400be8:	00400341 	.word	0x00400341
  400bec:	0040982d 	.word	0x0040982d
  400bf0:	80ffff01 	.word	0x80ffff01
  400bf4:	00081106 	.word	0x00081106
  400bf8:	004012d5 	.word	0x004012d5
  400bfc:	00401411 	.word	0x00401411
  400c00:	00401509 	.word	0x00401509
  400c04:	0040129d 	.word	0x0040129d
  400c08:	00401257 	.word	0x00401257

00400c0c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c0c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c0e:	4b05      	ldr	r3, [pc, #20]	; (400c24 <sd_mmc_get_type+0x18>)
  400c10:	4798      	blx	r3
  400c12:	b108      	cbz	r0, 400c18 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400c14:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c16:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c18:	4b03      	ldr	r3, [pc, #12]	; (400c28 <sd_mmc_get_type+0x1c>)
  400c1a:	4798      	blx	r3
	return sd_mmc_card->type;
  400c1c:	4b03      	ldr	r3, [pc, #12]	; (400c2c <sd_mmc_get_type+0x20>)
  400c1e:	681b      	ldr	r3, [r3, #0]
  400c20:	7bd8      	ldrb	r0, [r3, #15]
  400c22:	bd08      	pop	{r3, pc}
  400c24:	004001d9 	.word	0x004001d9
  400c28:	00400341 	.word	0x00400341
  400c2c:	20400a44 	.word	0x20400a44

00400c30 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400c30:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c32:	4b05      	ldr	r3, [pc, #20]	; (400c48 <sd_mmc_get_capacity+0x18>)
  400c34:	4798      	blx	r3
  400c36:	b108      	cbz	r0, 400c3c <sd_mmc_get_capacity+0xc>
		return 0;
  400c38:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400c3a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c3c:	4b03      	ldr	r3, [pc, #12]	; (400c4c <sd_mmc_get_capacity+0x1c>)
  400c3e:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400c40:	4b03      	ldr	r3, [pc, #12]	; (400c50 <sd_mmc_get_capacity+0x20>)
  400c42:	681b      	ldr	r3, [r3, #0]
  400c44:	6858      	ldr	r0, [r3, #4]
  400c46:	bd08      	pop	{r3, pc}
  400c48:	004001d9 	.word	0x004001d9
  400c4c:	00400341 	.word	0x00400341
  400c50:	20400a44 	.word	0x20400a44

00400c54 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400c54:	2000      	movs	r0, #0
  400c56:	4770      	bx	lr

00400c58 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c5c:	b082      	sub	sp, #8
  400c5e:	468a      	mov	sl, r1
  400c60:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400c62:	4b26      	ldr	r3, [pc, #152]	; (400cfc <sd_mmc_init_read_blocks+0xa4>)
  400c64:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400c66:	4680      	mov	r8, r0
  400c68:	b118      	cbz	r0, 400c72 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400c6a:	4640      	mov	r0, r8
  400c6c:	b002      	add	sp, #8
  400c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c72:	4c23      	ldr	r4, [pc, #140]	; (400d00 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c74:	4e23      	ldr	r6, [pc, #140]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c76:	4d24      	ldr	r5, [pc, #144]	; (400d08 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c78:	4f24      	ldr	r7, [pc, #144]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c7a:	6833      	ldr	r3, [r6, #0]
  400c7c:	8999      	ldrh	r1, [r3, #12]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c7e:	0409      	lsls	r1, r1, #16
  400c80:	f241 100d 	movw	r0, #4365	; 0x110d
  400c84:	47a8      	blx	r5
  400c86:	b128      	cbz	r0, 400c94 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c88:	47b8      	blx	r7
  400c8a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400c8e:	d117      	bne.n	400cc0 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400c90:	3c01      	subs	r4, #1
  400c92:	d1f2      	bne.n	400c7a <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400c94:	4b1e      	ldr	r3, [pc, #120]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400c96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400c98:	f04f 0805 	mov.w	r8, #5
  400c9c:	e7e5      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400c9e:	4b1b      	ldr	r3, [pc, #108]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
  400ca0:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ca2:	4b1c      	ldr	r3, [pc, #112]	; (400d14 <sd_mmc_init_read_blocks+0xbc>)
  400ca4:	4003      	ands	r3, r0
  400ca6:	b933      	cbnz	r3, 400cb6 <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <sd_mmc_init_read_blocks+0xc0>)
  400caa:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400cae:	4b1b      	ldr	r3, [pc, #108]	; (400d1c <sd_mmc_init_read_blocks+0xc4>)
  400cb0:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400cb4:	e7d9      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400cb6:	4b16      	ldr	r3, [pc, #88]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cb8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400cba:	f04f 0805 	mov.w	r8, #5
  400cbe:	e7d4      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400cc0:	4b17      	ldr	r3, [pc, #92]	; (400d20 <sd_mmc_init_read_blocks+0xc8>)
  400cc2:	4818      	ldr	r0, [pc, #96]	; (400d24 <sd_mmc_init_read_blocks+0xcc>)
  400cc4:	f1b9 0f01 	cmp.w	r9, #1
  400cc8:	bf98      	it	ls
  400cca:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400ccc:	4b0d      	ldr	r3, [pc, #52]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
  400cce:	681b      	ldr	r3, [r3, #0]
  400cd0:	7bdb      	ldrb	r3, [r3, #15]
  400cd2:	f013 0f08 	tst.w	r3, #8
  400cd6:	d101      	bne.n	400cdc <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400cd8:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400cdc:	2301      	movs	r3, #1
  400cde:	9300      	str	r3, [sp, #0]
  400ce0:	464b      	mov	r3, r9
  400ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ce6:	4651      	mov	r1, sl
  400ce8:	4c0f      	ldr	r4, [pc, #60]	; (400d28 <sd_mmc_init_read_blocks+0xd0>)
  400cea:	47a0      	blx	r4
  400cec:	2800      	cmp	r0, #0
  400cee:	d1d6      	bne.n	400c9e <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400cf0:	4b07      	ldr	r3, [pc, #28]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cf2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400cf4:	f04f 0805 	mov.w	r8, #5
  400cf8:	e7b7      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
  400cfa:	bf00      	nop
  400cfc:	004001d9 	.word	0x004001d9
  400d00:	00030d41 	.word	0x00030d41
  400d04:	20400a44 	.word	0x20400a44
  400d08:	00401279 	.word	0x00401279
  400d0c:	0040129d 	.word	0x0040129d
  400d10:	00400341 	.word	0x00400341
  400d14:	e4580000 	.word	0xe4580000
  400d18:	20400a48 	.word	0x20400a48
  400d1c:	20400a4a 	.word	0x20400a4a
  400d20:	00081111 	.word	0x00081111
  400d24:	00101112 	.word	0x00101112
  400d28:	004012d5 	.word	0x004012d5

00400d2c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d2c:	b510      	push	{r4, lr}
  400d2e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400d30:	4b06      	ldr	r3, [pc, #24]	; (400d4c <sd_mmc_start_read_blocks+0x20>)
  400d32:	4798      	blx	r3
  400d34:	b920      	cbnz	r0, 400d40 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d36:	2200      	movs	r2, #0
  400d38:	4b05      	ldr	r3, [pc, #20]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d3a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d3c:	2005      	movs	r0, #5
  400d3e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d40:	4a03      	ldr	r2, [pc, #12]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d42:	8813      	ldrh	r3, [r2, #0]
  400d44:	1b1c      	subs	r4, r3, r4
  400d46:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d48:	2000      	movs	r0, #0
}
  400d4a:	bd10      	pop	{r4, pc}
  400d4c:	00401411 	.word	0x00401411
  400d50:	20400a48 	.word	0x20400a48

00400d54 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400d54:	b510      	push	{r4, lr}
  400d56:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400d58:	4b13      	ldr	r3, [pc, #76]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d5a:	4798      	blx	r3
  400d5c:	b908      	cbnz	r0, 400d62 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400d5e:	2005      	movs	r0, #5
  400d60:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400d62:	b184      	cbz	r4, 400d86 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400d64:	2200      	movs	r2, #0
  400d66:	4b11      	ldr	r3, [pc, #68]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d68:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d6a:	4b11      	ldr	r3, [pc, #68]	; (400db0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d6c:	881b      	ldrh	r3, [r3, #0]
  400d6e:	2b01      	cmp	r3, #1
  400d70:	d00f      	beq.n	400d92 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d72:	2100      	movs	r1, #0
  400d74:	f243 100c 	movw	r0, #12556	; 0x310c
  400d78:	4b0e      	ldr	r3, [pc, #56]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d7a:	4798      	blx	r3
  400d7c:	b168      	cbz	r0, 400d9a <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400d7e:	4b0e      	ldr	r3, [pc, #56]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d80:	4798      	blx	r3
	return SD_MMC_OK;
  400d82:	2000      	movs	r0, #0
  400d84:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400d86:	4b09      	ldr	r3, [pc, #36]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d88:	881b      	ldrh	r3, [r3, #0]
  400d8a:	2b00      	cmp	r3, #0
  400d8c:	d0ed      	beq.n	400d6a <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400d8e:	2000      	movs	r0, #0
}
  400d90:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400d92:	4b09      	ldr	r3, [pc, #36]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d94:	4798      	blx	r3
		return SD_MMC_OK;
  400d96:	2000      	movs	r0, #0
  400d98:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400d9a:	2100      	movs	r1, #0
  400d9c:	f243 100c 	movw	r0, #12556	; 0x310c
  400da0:	4b04      	ldr	r3, [pc, #16]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400da2:	4798      	blx	r3
  400da4:	e7eb      	b.n	400d7e <sd_mmc_wait_end_of_read_blocks+0x2a>
  400da6:	bf00      	nop
  400da8:	00401509 	.word	0x00401509
  400dac:	20400a48 	.word	0x20400a48
  400db0:	20400a4a 	.word	0x20400a4a
  400db4:	00401279 	.word	0x00401279
  400db8:	00400341 	.word	0x00400341

00400dbc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400dbc:	b570      	push	{r4, r5, r6, lr}
  400dbe:	b082      	sub	sp, #8
  400dc0:	460e      	mov	r6, r1
  400dc2:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400dc4:	4b16      	ldr	r3, [pc, #88]	; (400e20 <sd_mmc_init_write_blocks+0x64>)
  400dc6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400dc8:	4604      	mov	r4, r0
  400dca:	b9b8      	cbnz	r0, 400dfc <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400dcc:	4b15      	ldr	r3, [pc, #84]	; (400e24 <sd_mmc_init_write_blocks+0x68>)
  400dce:	4816      	ldr	r0, [pc, #88]	; (400e28 <sd_mmc_init_write_blocks+0x6c>)
  400dd0:	2d01      	cmp	r5, #1
  400dd2:	bf98      	it	ls
  400dd4:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dd6:	4b15      	ldr	r3, [pc, #84]	; (400e2c <sd_mmc_init_write_blocks+0x70>)
  400dd8:	681b      	ldr	r3, [r3, #0]
  400dda:	7bdb      	ldrb	r3, [r3, #15]
  400ddc:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400de0:	bf08      	it	eq
  400de2:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400de4:	2301      	movs	r3, #1
  400de6:	9300      	str	r3, [sp, #0]
  400de8:	462b      	mov	r3, r5
  400dea:	f44f 7200 	mov.w	r2, #512	; 0x200
  400dee:	4631      	mov	r1, r6
  400df0:	4e0f      	ldr	r6, [pc, #60]	; (400e30 <sd_mmc_init_write_blocks+0x74>)
  400df2:	47b0      	blx	r6
  400df4:	b928      	cbnz	r0, 400e02 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400df6:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400df8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400dfa:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400dfc:	4620      	mov	r0, r4
  400dfe:	b002      	add	sp, #8
  400e00:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400e02:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <sd_mmc_init_write_blocks+0x7c>)
  400e04:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400e06:	4b0d      	ldr	r3, [pc, #52]	; (400e3c <sd_mmc_init_write_blocks+0x80>)
  400e08:	4003      	ands	r3, r0
  400e0a:	b923      	cbnz	r3, 400e16 <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400e0c:	4b0c      	ldr	r3, [pc, #48]	; (400e40 <sd_mmc_init_write_blocks+0x84>)
  400e0e:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400e10:	4b0c      	ldr	r3, [pc, #48]	; (400e44 <sd_mmc_init_write_blocks+0x88>)
  400e12:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400e14:	e7f2      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400e16:	4b07      	ldr	r3, [pc, #28]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400e18:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e1a:	2405      	movs	r4, #5
  400e1c:	e7ee      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
  400e1e:	bf00      	nop
  400e20:	004001d9 	.word	0x004001d9
  400e24:	00089118 	.word	0x00089118
  400e28:	00109119 	.word	0x00109119
  400e2c:	20400a44 	.word	0x20400a44
  400e30:	004012d5 	.word	0x004012d5
  400e34:	00400341 	.word	0x00400341
  400e38:	0040129d 	.word	0x0040129d
  400e3c:	e4580000 	.word	0xe4580000
  400e40:	20400a48 	.word	0x20400a48
  400e44:	20400a4a 	.word	0x20400a4a

00400e48 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e48:	b510      	push	{r4, lr}
  400e4a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400e4c:	4b06      	ldr	r3, [pc, #24]	; (400e68 <sd_mmc_start_write_blocks+0x20>)
  400e4e:	4798      	blx	r3
  400e50:	b920      	cbnz	r0, 400e5c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e52:	2200      	movs	r2, #0
  400e54:	4b05      	ldr	r3, [pc, #20]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e58:	2005      	movs	r0, #5
  400e5a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e5c:	4a03      	ldr	r2, [pc, #12]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e5e:	8813      	ldrh	r3, [r2, #0]
  400e60:	1b1c      	subs	r4, r3, r4
  400e62:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e64:	2000      	movs	r0, #0
}
  400e66:	bd10      	pop	{r4, pc}
  400e68:	0040156d 	.word	0x0040156d
  400e6c:	20400a48 	.word	0x20400a48

00400e70 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400e70:	b510      	push	{r4, lr}
  400e72:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400e74:	4b12      	ldr	r3, [pc, #72]	; (400ec0 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400e76:	4798      	blx	r3
  400e78:	b908      	cbnz	r0, 400e7e <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e7a:	2005      	movs	r0, #5
  400e7c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e7e:	b184      	cbz	r4, 400ea2 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e80:	2200      	movs	r2, #0
  400e82:	4b10      	ldr	r3, [pc, #64]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e84:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e86:	4b10      	ldr	r3, [pc, #64]	; (400ec8 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400e88:	881b      	ldrh	r3, [r3, #0]
  400e8a:	2b01      	cmp	r3, #1
  400e8c:	d00f      	beq.n	400eae <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e8e:	2100      	movs	r1, #0
  400e90:	f243 100c 	movw	r0, #12556	; 0x310c
  400e94:	4b0d      	ldr	r3, [pc, #52]	; (400ecc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e96:	4798      	blx	r3
  400e98:	b968      	cbnz	r0, 400eb6 <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400e9a:	4b0d      	ldr	r3, [pc, #52]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e9c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e9e:	2005      	movs	r0, #5
  400ea0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400ea2:	4b08      	ldr	r3, [pc, #32]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400ea4:	881b      	ldrh	r3, [r3, #0]
  400ea6:	2b00      	cmp	r3, #0
  400ea8:	d0ed      	beq.n	400e86 <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400eaa:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400eac:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400eae:	4b08      	ldr	r3, [pc, #32]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb0:	4798      	blx	r3
		return SD_MMC_OK;
  400eb2:	2000      	movs	r0, #0
  400eb4:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400eb6:	4b06      	ldr	r3, [pc, #24]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb8:	4798      	blx	r3
	return SD_MMC_OK;
  400eba:	2000      	movs	r0, #0
  400ebc:	bd10      	pop	{r4, pc}
  400ebe:	bf00      	nop
  400ec0:	00401665 	.word	0x00401665
  400ec4:	20400a48 	.word	0x20400a48
  400ec8:	20400a4a 	.word	0x20400a4a
  400ecc:	00401279 	.word	0x00401279
  400ed0:	00400341 	.word	0x00400341

00400ed4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400ed4:	b510      	push	{r4, lr}
  400ed6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400ed8:	4b0f      	ldr	r3, [pc, #60]	; (400f18 <sd_mmc_test_unit_ready+0x44>)
  400eda:	4798      	blx	r3
  400edc:	2801      	cmp	r0, #1
  400ede:	d018      	beq.n	400f12 <sd_mmc_test_unit_ready+0x3e>
  400ee0:	b118      	cbz	r0, 400eea <sd_mmc_test_unit_ready+0x16>
  400ee2:	2802      	cmp	r0, #2
  400ee4:	d010      	beq.n	400f08 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ee6:	2001      	movs	r0, #1
  400ee8:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400eea:	4b0c      	ldr	r3, [pc, #48]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400eec:	5d1b      	ldrb	r3, [r3, r4]
  400eee:	b10b      	cbz	r3, 400ef4 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400ef0:	2002      	movs	r0, #2
	}
}
  400ef2:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400ef4:	4620      	mov	r0, r4
  400ef6:	4b0a      	ldr	r3, [pc, #40]	; (400f20 <sd_mmc_test_unit_ready+0x4c>)
  400ef8:	4798      	blx	r3
  400efa:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400efe:	2800      	cmp	r0, #0
  400f00:	bf14      	ite	ne
  400f02:	2000      	movne	r0, #0
  400f04:	2002      	moveq	r0, #2
  400f06:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400f08:	2200      	movs	r2, #0
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400f0c:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400f0e:	2002      	movs	r0, #2
  400f10:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400f12:	2003      	movs	r0, #3
  400f14:	bd10      	pop	{r4, pc}
  400f16:	bf00      	nop
  400f18:	00400389 	.word	0x00400389
  400f1c:	20400a50 	.word	0x20400a50
  400f20:	00400c0d 	.word	0x00400c0d

00400f24 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400f24:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400f26:	2000      	movs	r0, #0
  400f28:	4b01      	ldr	r3, [pc, #4]	; (400f30 <sd_mmc_test_unit_ready_0+0xc>)
  400f2a:	4798      	blx	r3
}
  400f2c:	bd08      	pop	{r3, pc}
  400f2e:	bf00      	nop
  400f30:	00400ed5 	.word	0x00400ed5

00400f34 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400f34:	b538      	push	{r3, r4, r5, lr}
  400f36:	4604      	mov	r4, r0
  400f38:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400f3a:	4b04      	ldr	r3, [pc, #16]	; (400f4c <sd_mmc_read_capacity+0x18>)
  400f3c:	4798      	blx	r3
  400f3e:	0040      	lsls	r0, r0, #1
  400f40:	3801      	subs	r0, #1
  400f42:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400f44:	4620      	mov	r0, r4
  400f46:	4b02      	ldr	r3, [pc, #8]	; (400f50 <sd_mmc_read_capacity+0x1c>)
  400f48:	4798      	blx	r3
}
  400f4a:	bd38      	pop	{r3, r4, r5, pc}
  400f4c:	00400c31 	.word	0x00400c31
  400f50:	00400ed5 	.word	0x00400ed5

00400f54 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400f54:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400f56:	4601      	mov	r1, r0
  400f58:	2000      	movs	r0, #0
  400f5a:	4b01      	ldr	r3, [pc, #4]	; (400f60 <sd_mmc_read_capacity_0+0xc>)
  400f5c:	4798      	blx	r3
}
  400f5e:	bd08      	pop	{r3, pc}
  400f60:	00400f35 	.word	0x00400f35

00400f64 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400f64:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400f66:	2000      	movs	r0, #0
  400f68:	4b01      	ldr	r3, [pc, #4]	; (400f70 <sd_mmc_wr_protect_0+0xc>)
  400f6a:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  400f6c:	bd08      	pop	{r3, pc}
  400f6e:	bf00      	nop
  400f70:	00400c55 	.word	0x00400c55

00400f74 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400f74:	b510      	push	{r4, lr}
  400f76:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400f78:	2201      	movs	r2, #1
  400f7a:	4b0a      	ldr	r3, [pc, #40]	; (400fa4 <sd_mmc_mem_2_ram+0x30>)
  400f7c:	4798      	blx	r3
  400f7e:	b120      	cbz	r0, 400f8a <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400f80:	2802      	cmp	r0, #2
  400f82:	bf0c      	ite	eq
  400f84:	2002      	moveq	r0, #2
  400f86:	2001      	movne	r0, #1
  400f88:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400f8a:	2101      	movs	r1, #1
  400f8c:	4620      	mov	r0, r4
  400f8e:	4b06      	ldr	r3, [pc, #24]	; (400fa8 <sd_mmc_mem_2_ram+0x34>)
  400f90:	4798      	blx	r3
  400f92:	b108      	cbz	r0, 400f98 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  400f94:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400f96:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400f98:	4b04      	ldr	r3, [pc, #16]	; (400fac <sd_mmc_mem_2_ram+0x38>)
  400f9a:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400f9c:	3000      	adds	r0, #0
  400f9e:	bf18      	it	ne
  400fa0:	2001      	movne	r0, #1
  400fa2:	bd10      	pop	{r4, pc}
  400fa4:	00400c59 	.word	0x00400c59
  400fa8:	00400d2d 	.word	0x00400d2d
  400fac:	00400d55 	.word	0x00400d55

00400fb0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400fb0:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400fb2:	460a      	mov	r2, r1
  400fb4:	4601      	mov	r1, r0
  400fb6:	2000      	movs	r0, #0
  400fb8:	4b01      	ldr	r3, [pc, #4]	; (400fc0 <sd_mmc_mem_2_ram_0+0x10>)
  400fba:	4798      	blx	r3
}
  400fbc:	bd08      	pop	{r3, pc}
  400fbe:	bf00      	nop
  400fc0:	00400f75 	.word	0x00400f75

00400fc4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400fc4:	b510      	push	{r4, lr}
  400fc6:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400fc8:	2201      	movs	r2, #1
  400fca:	4b0a      	ldr	r3, [pc, #40]	; (400ff4 <sd_mmc_ram_2_mem+0x30>)
  400fcc:	4798      	blx	r3
  400fce:	b120      	cbz	r0, 400fda <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400fd0:	2802      	cmp	r0, #2
  400fd2:	bf0c      	ite	eq
  400fd4:	2002      	moveq	r0, #2
  400fd6:	2001      	movne	r0, #1
  400fd8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400fda:	2101      	movs	r1, #1
  400fdc:	4620      	mov	r0, r4
  400fde:	4b06      	ldr	r3, [pc, #24]	; (400ff8 <sd_mmc_ram_2_mem+0x34>)
  400fe0:	4798      	blx	r3
  400fe2:	b108      	cbz	r0, 400fe8 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  400fe4:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400fe6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400fe8:	4b04      	ldr	r3, [pc, #16]	; (400ffc <sd_mmc_ram_2_mem+0x38>)
  400fea:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400fec:	3000      	adds	r0, #0
  400fee:	bf18      	it	ne
  400ff0:	2001      	movne	r0, #1
  400ff2:	bd10      	pop	{r4, pc}
  400ff4:	00400dbd 	.word	0x00400dbd
  400ff8:	00400e49 	.word	0x00400e49
  400ffc:	00400e71 	.word	0x00400e71

00401000 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401000:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  401002:	460a      	mov	r2, r1
  401004:	4601      	mov	r1, r0
  401006:	2000      	movs	r0, #0
  401008:	4b01      	ldr	r3, [pc, #4]	; (401010 <sd_mmc_ram_2_mem_0+0x10>)
  40100a:	4798      	blx	r3
}
  40100c:	bd08      	pop	{r3, pc}
  40100e:	bf00      	nop
  401010:	00400fc5 	.word	0x00400fc5

00401014 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401014:	b108      	cbz	r0, 40101a <mem_test_unit_ready+0x6>
  401016:	2001      	movs	r0, #1
  401018:	4770      	bx	lr
{
  40101a:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  40101c:	4b01      	ldr	r3, [pc, #4]	; (401024 <mem_test_unit_ready+0x10>)
  40101e:	4798      	blx	r3
  401020:	bd08      	pop	{r3, pc}
  401022:	bf00      	nop
  401024:	00400f25 	.word	0x00400f25

00401028 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401028:	b108      	cbz	r0, 40102e <mem_read_capacity+0x6>
  40102a:	2001      	movs	r0, #1
  40102c:	4770      	bx	lr
{
  40102e:	b508      	push	{r3, lr}
  401030:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401032:	4b01      	ldr	r3, [pc, #4]	; (401038 <mem_read_capacity+0x10>)
  401034:	4798      	blx	r3
  401036:	bd08      	pop	{r3, pc}
  401038:	00400f55 	.word	0x00400f55

0040103c <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  40103c:	fab0 f080 	clz	r0, r0
  401040:	0940      	lsrs	r0, r0, #5
  401042:	4770      	bx	lr

00401044 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401044:	b108      	cbz	r0, 40104a <mem_wr_protect+0x6>
  401046:	2001      	movs	r0, #1
  401048:	4770      	bx	lr
{
  40104a:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  40104c:	4b01      	ldr	r3, [pc, #4]	; (401054 <mem_wr_protect+0x10>)
  40104e:	4798      	blx	r3
  401050:	bd08      	pop	{r3, pc}
  401052:	bf00      	nop
  401054:	00400f65 	.word	0x00400f65

00401058 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401058:	b108      	cbz	r0, 40105e <memory_2_ram+0x6>
  40105a:	2001      	movs	r0, #1
  40105c:	4770      	bx	lr
{
  40105e:	b508      	push	{r3, lr}
  401060:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401062:	4611      	mov	r1, r2
  401064:	4b01      	ldr	r3, [pc, #4]	; (40106c <memory_2_ram+0x14>)
  401066:	4798      	blx	r3
  401068:	bd08      	pop	{r3, pc}
  40106a:	bf00      	nop
  40106c:	00400fb1 	.word	0x00400fb1

00401070 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  401070:	b108      	cbz	r0, 401076 <ram_2_memory+0x6>
  401072:	2001      	movs	r0, #1
  401074:	4770      	bx	lr
{
  401076:	b508      	push	{r3, lr}
  401078:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  40107a:	4611      	mov	r1, r2
  40107c:	4b01      	ldr	r3, [pc, #4]	; (401084 <ram_2_memory+0x14>)
  40107e:	4798      	blx	r3
  401080:	bd08      	pop	{r3, pc}
  401082:	bf00      	nop
  401084:	00401001 	.word	0x00401001

00401088 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  401088:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  40108a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40108e:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401090:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401092:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401094:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401098:	2680      	movs	r6, #128	; 0x80
  40109a:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  40109c:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  40109e:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  4010a0:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  4010a2:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  4010a4:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  4010a6:	2200      	movs	r2, #0
  4010a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  4010aa:	2205      	movs	r2, #5
  4010ac:	601a      	str	r2, [r3, #0]
}
  4010ae:	bc70      	pop	{r4, r5, r6}
  4010b0:	4770      	bx	lr
	...

004010b4 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  4010b4:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  4010b6:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  4010ba:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  4010bc:	f411 7f80 	tst.w	r1, #256	; 0x100
  4010c0:	d004      	beq.n	4010cc <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  4010c2:	f411 6f00 	tst.w	r1, #2048	; 0x800
  4010c6:	d00e      	beq.n	4010e6 <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  4010c8:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  4010cc:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  4010d0:	bf18      	it	ne
  4010d2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  4010d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4010da:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  4010dc:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4010de:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  4010e0:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  4010e4:	e00d      	b.n	401102 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  4010e6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  4010ea:	bf14      	ite	ne
  4010ec:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4010f0:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  4010f4:	e7ea      	b.n	4010cc <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4010f6:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4010fa:	d10c      	bne.n	401116 <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4010fc:	f013 0f01 	tst.w	r3, #1
  401100:	d10d      	bne.n	40111e <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  401102:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401104:	2a00      	cmp	r2, #0
  401106:	d0f6      	beq.n	4010f6 <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401108:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  40110c:	d0f6      	beq.n	4010fc <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  40110e:	4b10      	ldr	r3, [pc, #64]	; (401150 <hsmci_send_cmd_execute+0x9c>)
  401110:	4798      	blx	r3
				return false;
  401112:	2000      	movs	r0, #0
  401114:	bd08      	pop	{r3, pc}
				hsmci_reset();
  401116:	4b0e      	ldr	r3, [pc, #56]	; (401150 <hsmci_send_cmd_execute+0x9c>)
  401118:	4798      	blx	r3
				return false;
  40111a:	2000      	movs	r0, #0
  40111c:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  40111e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  401122:	d103      	bne.n	40112c <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  401124:	2001      	movs	r0, #1
  401126:	bd08      	pop	{r3, pc}
	return true;
  401128:	2001      	movs	r0, #1
  40112a:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  40112c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401132:	f04f 32ff 	mov.w	r2, #4294967295
  401136:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  40113a:	f003 0330 	and.w	r3, r3, #48	; 0x30
  40113e:	2b20      	cmp	r3, #32
  401140:	d0f2      	beq.n	401128 <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  401142:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401144:	3a01      	subs	r2, #1
  401146:	d1f8      	bne.n	40113a <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  401148:	4b01      	ldr	r3, [pc, #4]	; (401150 <hsmci_send_cmd_execute+0x9c>)
  40114a:	4798      	blx	r3
			return false;
  40114c:	2000      	movs	r0, #0
  40114e:	bd08      	pop	{r3, pc}
  401150:	00401089 	.word	0x00401089

00401154 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401154:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  401156:	2012      	movs	r0, #18
  401158:	4c08      	ldr	r4, [pc, #32]	; (40117c <hsmci_init+0x28>)
  40115a:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  40115c:	203a      	movs	r0, #58	; 0x3a
  40115e:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401164:	2272      	movs	r2, #114	; 0x72
  401166:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401168:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40116a:	2211      	movs	r2, #17
  40116c:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  40116e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401172:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401174:	2205      	movs	r2, #5
  401176:	601a      	str	r2, [r3, #0]
  401178:	bd10      	pop	{r4, pc}
  40117a:	bf00      	nop
  40117c:	00408621 	.word	0x00408621

00401180 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401180:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401182:	bf0c      	ite	eq
  401184:	2004      	moveq	r0, #4
  401186:	2000      	movne	r0, #0
  401188:	4770      	bx	lr

0040118a <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  40118a:	2001      	movs	r0, #1
  40118c:	4770      	bx	lr
	...

00401190 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401190:	b37b      	cbz	r3, 4011f2 <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401192:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401196:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40119c:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  40119e:	4b2b      	ldr	r3, [pc, #172]	; (40124c <hsmci_select_device+0xbc>)
  4011a0:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  4011a4:	d337      	bcc.n	401216 <hsmci_select_device+0x86>
{
  4011a6:	b410      	push	{r4}
		div = (mck / speed) - 2;
  4011a8:	4829      	ldr	r0, [pc, #164]	; (401250 <hsmci_select_device+0xc0>)
  4011aa:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  4011ae:	fb01 0113 	mls	r1, r1, r3, r0
  4011b2:	bb29      	cbnz	r1, 401200 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  4011b4:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4011b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4011ba:	6848      	ldr	r0, [r1, #4]
  4011bc:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  4011c0:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4011c2:	684c      	ldr	r4, [r1, #4]
  4011c4:	f3c3 0047 	ubfx	r0, r3, #1, #8
  4011c8:	4320      	orrs	r0, r4
  4011ca:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  4011cc:	f013 0f01 	tst.w	r3, #1
  4011d0:	d018      	beq.n	401204 <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  4011d2:	684b      	ldr	r3, [r1, #4]
  4011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4011d8:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4011da:	2a04      	cmp	r2, #4
  4011dc:	d019      	beq.n	401212 <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4011de:	2a08      	cmp	r2, #8
  4011e0:	bf0c      	ite	eq
  4011e2:	22c0      	moveq	r2, #192	; 0xc0
  4011e4:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4011e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4011ea:	60da      	str	r2, [r3, #12]
}
  4011ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011f0:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  4011f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4011f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  4011f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4011fc:	6543      	str	r3, [r0, #84]	; 0x54
  4011fe:	e7ce      	b.n	40119e <hsmci_select_device+0xe>
			div++;
  401200:	3b01      	subs	r3, #1
  401202:	e7d8      	b.n	4011b6 <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401204:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401208:	684b      	ldr	r3, [r1, #4]
  40120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40120e:	604b      	str	r3, [r1, #4]
  401210:	e7e3      	b.n	4011da <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401212:	2280      	movs	r2, #128	; 0x80
  401214:	e7e7      	b.n	4011e6 <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40121a:	6859      	ldr	r1, [r3, #4]
  40121c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  401220:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401222:	6859      	ldr	r1, [r3, #4]
  401224:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401226:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40122a:	684b      	ldr	r3, [r1, #4]
  40122c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401230:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  401232:	2a04      	cmp	r2, #4
  401234:	d007      	beq.n	401246 <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401236:	2a08      	cmp	r2, #8
  401238:	bf0c      	ite	eq
  40123a:	22c0      	moveq	r2, #192	; 0xc0
  40123c:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40123e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401242:	60da      	str	r2, [r3, #12]
  401244:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401246:	2280      	movs	r2, #128	; 0x80
  401248:	e7f9      	b.n	40123e <hsmci_select_device+0xae>
  40124a:	bf00      	nop
  40124c:	08f0d17f 	.word	0x08f0d17f
  401250:	08f0d180 	.word	0x08f0d180

00401254 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  401254:	4770      	bx	lr

00401256 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40125a:	685a      	ldr	r2, [r3, #4]
  40125c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401260:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401262:	2200      	movs	r2, #0
  401264:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  401266:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40126a:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  40126c:	461a      	mov	r2, r3
  40126e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401270:	f013 0f01 	tst.w	r3, #1
  401274:	d0fb      	beq.n	40126e <hsmci_send_clock+0x18>
}
  401276:	4770      	bx	lr

00401278 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  401278:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40127e:	685a      	ldr	r2, [r3, #4]
  401280:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401284:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  401286:	2400      	movs	r4, #0
  401288:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  40128a:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  40128c:	460a      	mov	r2, r1
  40128e:	4601      	mov	r1, r0
  401290:	4620      	mov	r0, r4
  401292:	4b01      	ldr	r3, [pc, #4]	; (401298 <hsmci_send_cmd+0x20>)
  401294:	4798      	blx	r3
}
  401296:	bd10      	pop	{r4, pc}
  401298:	004010b5 	.word	0x004010b5

0040129c <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  40129c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4012a0:	6a18      	ldr	r0, [r3, #32]
}
  4012a2:	4770      	bx	lr

004012a4 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4012a4:	b410      	push	{r4}
  4012a6:	1d03      	adds	r3, r0, #4
  4012a8:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  4012aa:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4012ae:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  4012b0:	0e11      	lsrs	r1, r2, #24
  4012b2:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  4012b6:	0c11      	lsrs	r1, r2, #16
  4012b8:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  4012bc:	0a11      	lsrs	r1, r2, #8
  4012be:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  4012c2:	f803 2c01 	strb.w	r2, [r3, #-1]
  4012c6:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  4012c8:	4283      	cmp	r3, r0
  4012ca:	d1f0      	bne.n	4012ae <hsmci_get_response_128+0xa>
		response++;
	}
}
  4012cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012d0:	4770      	bx	lr
	...

004012d4 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4012d4:	b570      	push	{r4, r5, r6, lr}
  4012d6:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  4012da:	b384      	cbz	r4, 40133e <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  4012dc:	f44f 7580 	mov.w	r5, #256	; 0x100
  4012e0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4012e4:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4012e6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4012ea:	686c      	ldr	r4, [r5, #4]
  4012ec:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  4012f0:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4012f2:	f012 0f03 	tst.w	r2, #3
  4012f6:	d027      	beq.n	401348 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4012f8:	686c      	ldr	r4, [r5, #4]
  4012fa:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4012fe:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  401300:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  401304:	2c00      	cmp	r4, #0
  401306:	bf14      	ite	ne
  401308:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  40130c:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  401310:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  401314:	d11f      	bne.n	401356 <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  401316:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  40131a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  40131e:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  401320:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  401324:	d12b      	bne.n	40137e <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  401326:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  40132a:	d12b      	bne.n	401384 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  40132c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  401330:	d118      	bne.n	401364 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  401332:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  401336:	bf18      	it	ne
  401338:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  40133c:	e012      	b.n	401364 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  40133e:	2500      	movs	r5, #0
  401340:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401344:	6525      	str	r5, [r4, #80]	; 0x50
  401346:	e7ce      	b.n	4012e6 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401348:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  40134c:	686c      	ldr	r4, [r5, #4]
  40134e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  401352:	606c      	str	r4, [r5, #4]
  401354:	e7d4      	b.n	401300 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  401356:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  40135a:	f3c2 0508 	ubfx	r5, r2, #0, #9
  40135e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  401362:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401364:	2600      	movs	r6, #0
  401366:	4d09      	ldr	r5, [pc, #36]	; (40138c <hsmci_adtc_start+0xb8>)
  401368:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  40136a:	4d09      	ldr	r5, [pc, #36]	; (401390 <hsmci_adtc_start+0xbc>)
  40136c:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  40136e:	4a09      	ldr	r2, [pc, #36]	; (401394 <hsmci_adtc_start+0xc0>)
  401370:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401372:	460a      	mov	r2, r1
  401374:	4601      	mov	r1, r0
  401376:	4620      	mov	r0, r4
  401378:	4b07      	ldr	r3, [pc, #28]	; (401398 <hsmci_adtc_start+0xc4>)
  40137a:	4798      	blx	r3
}
  40137c:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  40137e:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  401382:	e7ef      	b.n	401364 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  401384:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  401388:	e7ec      	b.n	401364 <hsmci_adtc_start+0x90>
  40138a:	bf00      	nop
  40138c:	20400a58 	.word	0x20400a58
  401390:	20400a52 	.word	0x20400a52
  401394:	20400a54 	.word	0x20400a54
  401398:	004010b5 	.word	0x004010b5

0040139c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  40139c:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  40139e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013a2:	4a16      	ldr	r2, [pc, #88]	; (4013fc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4013a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013a6:	4213      	tst	r3, r2
  4013a8:	d11d      	bne.n	4013e6 <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  4013aa:	f013 0f02 	tst.w	r3, #2
  4013ae:	d0f9      	beq.n	4013a4 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  4013b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013b6:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  4013b8:	4a11      	ldr	r2, [pc, #68]	; (401400 <hsmci_read_word+0x64>)
  4013ba:	6813      	ldr	r3, [r2, #0]
  4013bc:	3304      	adds	r3, #4
  4013be:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4013c0:	4a10      	ldr	r2, [pc, #64]	; (401404 <hsmci_read_word+0x68>)
  4013c2:	8811      	ldrh	r1, [r2, #0]
  4013c4:	4a10      	ldr	r2, [pc, #64]	; (401408 <hsmci_read_word+0x6c>)
  4013c6:	8812      	ldrh	r2, [r2, #0]
  4013c8:	fb02 f201 	mul.w	r2, r2, r1
  4013cc:	4293      	cmp	r3, r2
  4013ce:	d312      	bcc.n	4013f6 <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4013d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013d4:	4a09      	ldr	r2, [pc, #36]	; (4013fc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4013d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013d8:	4213      	tst	r3, r2
  4013da:	d108      	bne.n	4013ee <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4013dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4013e0:	d0f9      	beq.n	4013d6 <hsmci_read_word+0x3a>
	return true;
  4013e2:	2001      	movs	r0, #1
  4013e4:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4013e6:	4b09      	ldr	r3, [pc, #36]	; (40140c <hsmci_read_word+0x70>)
  4013e8:	4798      	blx	r3
			return false;
  4013ea:	2000      	movs	r0, #0
  4013ec:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4013ee:	4b07      	ldr	r3, [pc, #28]	; (40140c <hsmci_read_word+0x70>)
  4013f0:	4798      	blx	r3
			return false;
  4013f2:	2000      	movs	r0, #0
  4013f4:	bd08      	pop	{r3, pc}
		return true;
  4013f6:	2001      	movs	r0, #1
}
  4013f8:	bd08      	pop	{r3, pc}
  4013fa:	bf00      	nop
  4013fc:	c0600000 	.word	0xc0600000
  401400:	20400a58 	.word	0x20400a58
  401404:	20400a52 	.word	0x20400a52
  401408:	20400a54 	.word	0x20400a54
  40140c:	00401089 	.word	0x00401089

00401410 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  401410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401414:	b088      	sub	sp, #32
  401416:	4604      	mov	r4, r0
  401418:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  40141a:	2220      	movs	r2, #32
  40141c:	2100      	movs	r1, #0
  40141e:	4668      	mov	r0, sp
  401420:	4b30      	ldr	r3, [pc, #192]	; (4014e4 <hsmci_start_read_blocks+0xd4>)
  401422:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401424:	2201      	movs	r2, #1
  401426:	4b30      	ldr	r3, [pc, #192]	; (4014e8 <hsmci_start_read_blocks+0xd8>)
  401428:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  40142a:	4b30      	ldr	r3, [pc, #192]	; (4014ec <hsmci_start_read_blocks+0xdc>)
  40142c:	881b      	ldrh	r3, [r3, #0]
  40142e:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)dest & 3) {
  401432:	f014 0f03 	tst.w	r4, #3
  401436:	d14a      	bne.n	4014ce <hsmci_start_read_blocks+0xbe>
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401438:	4b2d      	ldr	r3, [pc, #180]	; (4014f0 <hsmci_start_read_blocks+0xe0>)
  40143a:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  40143c:	08ab      	lsrs	r3, r5, #2
  40143e:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401444:	6853      	ldr	r3, [r2, #4]
  401446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40144a:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  40144c:	4b29      	ldr	r3, [pc, #164]	; (4014f4 <hsmci_start_read_blocks+0xe4>)
  40144e:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  401450:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401452:	466a      	mov	r2, sp
  401454:	2100      	movs	r1, #0
  401456:	4824      	ldr	r0, [pc, #144]	; (4014e8 <hsmci_start_read_blocks+0xd8>)
  401458:	4b27      	ldr	r3, [pc, #156]	; (4014f8 <hsmci_start_read_blocks+0xe8>)
  40145a:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40145c:	4b27      	ldr	r3, [pc, #156]	; (4014fc <hsmci_start_read_blocks+0xec>)
  40145e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401462:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401466:	f003 0007 	and.w	r0, r3, #7
  40146a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40146c:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401470:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401474:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  401478:	f3bf 8f4f 	dsb	sy
  40147c:	f04f 34ff 	mov.w	r4, #4294967295
  401480:	fa04 f800 	lsl.w	r8, r4, r0
  401484:	fa07 f000 	lsl.w	r0, r7, r0
  401488:	fa04 f40c 	lsl.w	r4, r4, ip
  40148c:	fa0e fc0c 	lsl.w	ip, lr, ip

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401490:	4e1a      	ldr	r6, [pc, #104]	; (4014fc <hsmci_start_read_blocks+0xec>)
         int32_t tmpways = ways;
  401492:	4672      	mov	r2, lr
  401494:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  401496:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40149a:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  40149e:	3a01      	subs	r2, #1
  4014a0:	4423      	add	r3, r4
  4014a2:	f1b2 3fff 	cmp.w	r2, #4294967295
  4014a6:	d1f6      	bne.n	401496 <hsmci_start_read_blocks+0x86>
        } while(sets--);
  4014a8:	3f01      	subs	r7, #1
  4014aa:	4440      	add	r0, r8
  4014ac:	f1b7 3fff 	cmp.w	r7, #4294967295
  4014b0:	d1ef      	bne.n	401492 <hsmci_start_read_blocks+0x82>
  4014b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4014b6:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4014ba:	2001      	movs	r0, #1
  4014bc:	4b0a      	ldr	r3, [pc, #40]	; (4014e8 <hsmci_start_read_blocks+0xd8>)
  4014be:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  4014c0:	4a0f      	ldr	r2, [pc, #60]	; (401500 <hsmci_start_read_blocks+0xf0>)
  4014c2:	6813      	ldr	r3, [r2, #0]
  4014c4:	442b      	add	r3, r5
  4014c6:	6013      	str	r3, [r2, #0]
	return true;
}
  4014c8:	b008      	add	sp, #32
  4014ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4014ce:	4b0d      	ldr	r3, [pc, #52]	; (401504 <hsmci_start_read_blocks+0xf4>)
  4014d0:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  4014d2:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4014d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4014d8:	6853      	ldr	r3, [r2, #4]
  4014da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4014de:	6053      	str	r3, [r2, #4]
  4014e0:	e7b4      	b.n	40144c <hsmci_start_read_blocks+0x3c>
  4014e2:	bf00      	nop
  4014e4:	0040982d 	.word	0x0040982d
  4014e8:	40078000 	.word	0x40078000
  4014ec:	20400a52 	.word	0x20400a52
  4014f0:	00043001 	.word	0x00043001
  4014f4:	40000200 	.word	0x40000200
  4014f8:	00401795 	.word	0x00401795
  4014fc:	e000ed00 	.word	0xe000ed00
  401500:	20400a58 	.word	0x20400a58
  401504:	00042001 	.word	0x00042001

00401508 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  401508:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40150a:	4b12      	ldr	r3, [pc, #72]	; (401554 <hsmci_wait_end_of_read_blocks+0x4c>)
  40150c:	881b      	ldrh	r3, [r3, #0]
  40150e:	4a12      	ldr	r2, [pc, #72]	; (401558 <hsmci_wait_end_of_read_blocks+0x50>)
  401510:	8812      	ldrh	r2, [r2, #0]
  401512:	fb02 f203 	mul.w	r2, r2, r3
  401516:	4b11      	ldr	r3, [pc, #68]	; (40155c <hsmci_wait_end_of_read_blocks+0x54>)
  401518:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40151a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40151e:	4910      	ldr	r1, [pc, #64]	; (401560 <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401520:	4e10      	ldr	r6, [pc, #64]	; (401564 <hsmci_wait_end_of_read_blocks+0x5c>)
  401522:	e009      	b.n	401538 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  401524:	4b10      	ldr	r3, [pc, #64]	; (401568 <hsmci_wait_end_of_read_blocks+0x60>)
  401526:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401528:	2201      	movs	r2, #1
  40152a:	4b0e      	ldr	r3, [pc, #56]	; (401564 <hsmci_wait_end_of_read_blocks+0x5c>)
  40152c:	621a      	str	r2, [r3, #32]
			return false;
  40152e:	2000      	movs	r0, #0
  401530:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401532:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401536:	d10a      	bne.n	40154e <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401538:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40153a:	420b      	tst	r3, r1
  40153c:	d1f2      	bne.n	401524 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40153e:	42a2      	cmp	r2, r4
  401540:	d9f7      	bls.n	401532 <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401542:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401544:	f015 0f01 	tst.w	r5, #1
  401548:	d0f3      	beq.n	401532 <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  40154a:	2001      	movs	r0, #1
	return true;
}
  40154c:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  40154e:	2001      	movs	r0, #1
  401550:	bd70      	pop	{r4, r5, r6, pc}
  401552:	bf00      	nop
  401554:	20400a52 	.word	0x20400a52
  401558:	20400a54 	.word	0x20400a54
  40155c:	20400a58 	.word	0x20400a58
  401560:	c0600000 	.word	0xc0600000
  401564:	40078000 	.word	0x40078000
  401568:	00401089 	.word	0x00401089

0040156c <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  40156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401570:	b088      	sub	sp, #32
  401572:	4604      	mov	r4, r0
  401574:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401576:	2220      	movs	r2, #32
  401578:	2100      	movs	r1, #0
  40157a:	4668      	mov	r0, sp
  40157c:	4b30      	ldr	r3, [pc, #192]	; (401640 <hsmci_start_write_blocks+0xd4>)
  40157e:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401580:	2201      	movs	r2, #1
  401582:	4b30      	ldr	r3, [pc, #192]	; (401644 <hsmci_start_write_blocks+0xd8>)
  401584:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401586:	4b30      	ldr	r3, [pc, #192]	; (401648 <hsmci_start_write_blocks+0xdc>)
  401588:	881b      	ldrh	r3, [r3, #0]
  40158a:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)src & 3) {
  40158e:	f014 0f03 	tst.w	r4, #3
  401592:	d14a      	bne.n	40162a <hsmci_start_write_blocks+0xbe>
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401594:	4b2d      	ldr	r3, [pc, #180]	; (40164c <hsmci_start_write_blocks+0xe0>)
  401596:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  401598:	08ab      	lsrs	r3, r5, #2
  40159a:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40159c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4015a0:	6853      	ldr	r3, [r2, #4]
  4015a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4015a6:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)src;
  4015a8:	9401      	str	r4, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  4015aa:	4b29      	ldr	r3, [pc, #164]	; (401650 <hsmci_start_write_blocks+0xe4>)
  4015ac:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  4015ae:	466a      	mov	r2, sp
  4015b0:	2100      	movs	r1, #0
  4015b2:	4824      	ldr	r0, [pc, #144]	; (401644 <hsmci_start_write_blocks+0xd8>)
  4015b4:	4b27      	ldr	r3, [pc, #156]	; (401654 <hsmci_start_write_blocks+0xe8>)
  4015b6:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  4015b8:	4b27      	ldr	r3, [pc, #156]	; (401658 <hsmci_start_write_blocks+0xec>)
  4015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4015be:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4015c2:	f003 0007 	and.w	r0, r3, #7
  4015c6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4015c8:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4015cc:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  4015d0:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  4015d4:	f3bf 8f4f 	dsb	sy
  4015d8:	f04f 34ff 	mov.w	r4, #4294967295
  4015dc:	fa04 f800 	lsl.w	r8, r4, r0
  4015e0:	fa07 f000 	lsl.w	r0, r7, r0
  4015e4:	fa04 f40c 	lsl.w	r4, r4, ip
  4015e8:	fa0e fc0c 	lsl.w	ip, lr, ip
              SCB->DCCISW = sw;
  4015ec:	4e1a      	ldr	r6, [pc, #104]	; (401658 <hsmci_start_write_blocks+0xec>)
         int32_t tmpways = ways;
  4015ee:	4672      	mov	r2, lr
  4015f0:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  4015f2:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4015f6:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  4015fa:	3a01      	subs	r2, #1
  4015fc:	4423      	add	r3, r4
  4015fe:	f1b2 3fff 	cmp.w	r2, #4294967295
  401602:	d1f6      	bne.n	4015f2 <hsmci_start_write_blocks+0x86>
        } while(sets--);
  401604:	3f01      	subs	r7, #1
  401606:	4440      	add	r0, r8
  401608:	f1b7 3fff 	cmp.w	r7, #4294967295
  40160c:	d1ef      	bne.n	4015ee <hsmci_start_write_blocks+0x82>
  40160e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401612:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401616:	2001      	movs	r0, #1
  401618:	4b0a      	ldr	r3, [pc, #40]	; (401644 <hsmci_start_write_blocks+0xd8>)
  40161a:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  40161c:	4a0f      	ldr	r2, [pc, #60]	; (40165c <hsmci_start_write_blocks+0xf0>)
  40161e:	6813      	ldr	r3, [r2, #0]
  401620:	442b      	add	r3, r5
  401622:	6013      	str	r3, [r2, #0]
	return true;
}
  401624:	b008      	add	sp, #32
  401626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40162a:	4b0d      	ldr	r3, [pc, #52]	; (401660 <hsmci_start_write_blocks+0xf4>)
  40162c:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  40162e:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401634:	6853      	ldr	r3, [r2, #4]
  401636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40163a:	6053      	str	r3, [r2, #4]
  40163c:	e7b4      	b.n	4015a8 <hsmci_start_write_blocks+0x3c>
  40163e:	bf00      	nop
  401640:	0040982d 	.word	0x0040982d
  401644:	40078000 	.word	0x40078000
  401648:	20400a52 	.word	0x20400a52
  40164c:	00015011 	.word	0x00015011
  401650:	40000200 	.word	0x40000200
  401654:	00401795 	.word	0x00401795
  401658:	e000ed00 	.word	0xe000ed00
  40165c:	20400a58 	.word	0x20400a58
  401660:	00014011 	.word	0x00014011

00401664 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  401664:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401666:	4b12      	ldr	r3, [pc, #72]	; (4016b0 <hsmci_wait_end_of_write_blocks+0x4c>)
  401668:	881b      	ldrh	r3, [r3, #0]
  40166a:	4a12      	ldr	r2, [pc, #72]	; (4016b4 <hsmci_wait_end_of_write_blocks+0x50>)
  40166c:	8812      	ldrh	r2, [r2, #0]
  40166e:	fb02 f203 	mul.w	r2, r2, r3
  401672:	4b11      	ldr	r3, [pc, #68]	; (4016b8 <hsmci_wait_end_of_write_blocks+0x54>)
  401674:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  401676:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40167a:	4910      	ldr	r1, [pc, #64]	; (4016bc <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40167c:	4e10      	ldr	r6, [pc, #64]	; (4016c0 <hsmci_wait_end_of_write_blocks+0x5c>)
  40167e:	e009      	b.n	401694 <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  401680:	4b10      	ldr	r3, [pc, #64]	; (4016c4 <hsmci_wait_end_of_write_blocks+0x60>)
  401682:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401684:	2201      	movs	r2, #1
  401686:	4b0e      	ldr	r3, [pc, #56]	; (4016c0 <hsmci_wait_end_of_write_blocks+0x5c>)
  401688:	621a      	str	r2, [r3, #32]
			return false;
  40168a:	2000      	movs	r0, #0
  40168c:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40168e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401692:	d10a      	bne.n	4016aa <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401694:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401696:	420b      	tst	r3, r1
  401698:	d1f2      	bne.n	401680 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40169a:	42a2      	cmp	r2, r4
  40169c:	d9f7      	bls.n	40168e <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40169e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  4016a0:	f015 0f01 	tst.w	r5, #1
  4016a4:	d0f3      	beq.n	40168e <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  4016a6:	2001      	movs	r0, #1

	return true;
}
  4016a8:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  4016aa:	2001      	movs	r0, #1
  4016ac:	bd70      	pop	{r4, r5, r6, pc}
  4016ae:	bf00      	nop
  4016b0:	20400a52 	.word	0x20400a52
  4016b4:	20400a54 	.word	0x20400a54
  4016b8:	20400a58 	.word	0x20400a58
  4016bc:	c0600000 	.word	0xc0600000
  4016c0:	40078000 	.word	0x40078000
  4016c4:	00401089 	.word	0x00401089

004016c8 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4016c8:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4016ca:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4016cc:	6884      	ldr	r4, [r0, #8]
  4016ce:	42a5      	cmp	r5, r4
  4016d0:	d003      	beq.n	4016da <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4016d2:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4016d4:	6884      	ldr	r4, [r0, #8]
  4016d6:	42ac      	cmp	r4, r5
  4016d8:	d1fb      	bne.n	4016d2 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4016da:	b161      	cbz	r1, 4016f6 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4016dc:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4016e0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4016e4:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4016e8:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4016ec:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4016f0:	bf18      	it	ne
  4016f2:	300c      	addne	r0, #12
  4016f4:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4016f6:	b142      	cbz	r2, 40170a <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4016f8:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4016fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401700:	f3c4 2003 	ubfx	r0, r4, #8, #4
  401704:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401708:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  40170a:	b143      	cbz	r3, 40171e <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40170c:	f3c4 1202 	ubfx	r2, r4, #4, #3
  401710:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401714:	f004 040f 	and.w	r4, r4, #15
  401718:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40171c:	601c      	str	r4, [r3, #0]
	}
}
  40171e:	bc30      	pop	{r4, r5}
  401720:	4770      	bx	lr

00401722 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  401722:	b4f0      	push	{r4, r5, r6, r7}
  401724:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  401726:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401728:	68c4      	ldr	r4, [r0, #12]
  40172a:	42a5      	cmp	r5, r4
  40172c:	d003      	beq.n	401736 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  40172e:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401730:	68c4      	ldr	r4, [r0, #12]
  401732:	42ac      	cmp	r4, r5
  401734:	d1fb      	bne.n	40172e <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  401736:	b199      	cbz	r1, 401760 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401738:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40173c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401740:	f3c4 2703 	ubfx	r7, r4, #8, #4
  401744:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401748:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40174c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401750:	f004 000f 	and.w	r0, r4, #15
  401754:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401758:	2564      	movs	r5, #100	; 0x64
  40175a:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40175e:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  401760:	b142      	cbz	r2, 401774 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401762:	f3c4 5000 	ubfx	r0, r4, #20, #1
  401766:	0081      	lsls	r1, r0, #2
  401768:	4408      	add	r0, r1
  40176a:	f3c4 4103 	ubfx	r1, r4, #16, #4
  40176e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  401772:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  401774:	b143      	cbz	r3, 401788 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401776:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40177a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40177e:	f3c4 6103 	ubfx	r1, r4, #24, #4
  401782:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  401786:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  401788:	b116      	cbz	r6, 401790 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40178a:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40178e:	6034      	str	r4, [r6, #0]
	}
}
  401790:	bcf0      	pop	{r4, r5, r6, r7}
  401792:	4770      	bx	lr

00401794 <xdmac_configure_transfer>:
  401794:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401798:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  40179a:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  40179c:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  40179e:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4017a0:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4017a2:	6813      	ldr	r3, [r2, #0]
  4017a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4017a8:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4017aa:	6913      	ldr	r3, [r2, #16]
  4017ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4017b0:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4017b2:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4017b4:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4017b6:	6993      	ldr	r3, [r2, #24]
  4017b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4017bc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4017c0:	69d3      	ldr	r3, [r2, #28]
  4017c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4017c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4017ca:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4017cc:	678b      	str	r3, [r1, #120]	; 0x78
  4017ce:	4770      	bx	lr

004017d0 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  4017d0:	2801      	cmp	r0, #1
  4017d2:	d901      	bls.n	4017d8 <disk_initialize+0x8>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  4017d4:	2001      	movs	r0, #1
  4017d6:	4770      	bx	lr
{
  4017d8:	b510      	push	{r4, lr}
  4017da:	4604      	mov	r4, r0
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  4017dc:	4b0a      	ldr	r3, [pc, #40]	; (401808 <disk_initialize+0x38>)
  4017de:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  4017e0:	2803      	cmp	r0, #3
  4017e2:	d106      	bne.n	4017f2 <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
  4017e4:	4620      	mov	r0, r4
  4017e6:	4b08      	ldr	r3, [pc, #32]	; (401808 <disk_initialize+0x38>)
  4017e8:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  4017ea:	2803      	cmp	r0, #3
  4017ec:	d101      	bne.n	4017f2 <disk_initialize+0x22>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  4017ee:	2001      	movs	r0, #1
  4017f0:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  4017f2:	b938      	cbnz	r0, 401804 <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  4017f4:	4620      	mov	r0, r4
  4017f6:	4b05      	ldr	r3, [pc, #20]	; (40180c <disk_initialize+0x3c>)
  4017f8:	4798      	blx	r3
  4017fa:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  4017fc:	bf14      	ite	ne
  4017fe:	2004      	movne	r0, #4
  401800:	2000      	moveq	r0, #0
  401802:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  401804:	2001      	movs	r0, #1
}
  401806:	bd10      	pop	{r4, pc}
  401808:	00401015 	.word	0x00401015
  40180c:	00401045 	.word	0x00401045

00401810 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  401810:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  401812:	4b05      	ldr	r3, [pc, #20]	; (401828 <disk_status+0x18>)
  401814:	4798      	blx	r3
  401816:	b120      	cbz	r0, 401822 <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  401818:	2802      	cmp	r0, #2
  40181a:	bf0c      	ite	eq
  40181c:	2003      	moveq	r0, #3
  40181e:	2001      	movne	r0, #1
  401820:	bd08      	pop	{r3, pc}
		return 0;
  401822:	2000      	movs	r0, #0
	}
}
  401824:	bd08      	pop	{r3, pc}
  401826:	bf00      	nop
  401828:	00401015 	.word	0x00401015

0040182c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  40182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401830:	b083      	sub	sp, #12
  401832:	4680      	mov	r8, r0
  401834:	460d      	mov	r5, r1
  401836:	4614      	mov	r4, r2
  401838:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  40183a:	4b15      	ldr	r3, [pc, #84]	; (401890 <disk_read+0x64>)
  40183c:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  40183e:	b918      	cbnz	r0, 401848 <disk_read+0x1c>
		return RES_ERROR;
  401840:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  401842:	b003      	add	sp, #12
  401844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401848:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  40184a:	a901      	add	r1, sp, #4
  40184c:	4640      	mov	r0, r8
  40184e:	4b11      	ldr	r3, [pc, #68]	; (401894 <disk_read+0x68>)
  401850:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  401852:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  401854:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401858:	9b01      	ldr	r3, [sp, #4]
  40185a:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  40185e:	429a      	cmp	r2, r3
  401860:	d901      	bls.n	401866 <disk_read+0x3a>
		return RES_PARERR;
  401862:	2004      	movs	r0, #4
  401864:	e7ed      	b.n	401842 <disk_read+0x16>
	for (i = 0; i < count; i++) {
  401866:	46ba      	mov	sl, r7
  401868:	b177      	cbz	r7, 401888 <disk_read+0x5c>
  40186a:	0276      	lsls	r6, r6, #9
  40186c:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  40186e:	f8df b028 	ldr.w	fp, [pc, #40]	; 401898 <disk_read+0x6c>
  401872:	462a      	mov	r2, r5
  401874:	4621      	mov	r1, r4
  401876:	4640      	mov	r0, r8
  401878:	47d8      	blx	fp
  40187a:	b938      	cbnz	r0, 40188c <disk_read+0x60>
	for (i = 0; i < count; i++) {
  40187c:	3701      	adds	r7, #1
  40187e:	444c      	add	r4, r9
  401880:	4435      	add	r5, r6
  401882:	4557      	cmp	r7, sl
  401884:	d1f5      	bne.n	401872 <disk_read+0x46>
  401886:	e7dc      	b.n	401842 <disk_read+0x16>
	return RES_OK;
  401888:	2000      	movs	r0, #0
  40188a:	e7da      	b.n	401842 <disk_read+0x16>
			return RES_ERROR;
  40188c:	2001      	movs	r0, #1
  40188e:	e7d8      	b.n	401842 <disk_read+0x16>
  401890:	0040103d 	.word	0x0040103d
  401894:	00401029 	.word	0x00401029
  401898:	00401059 	.word	0x00401059

0040189c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  40189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018a0:	b083      	sub	sp, #12
  4018a2:	4680      	mov	r8, r0
  4018a4:	460d      	mov	r5, r1
  4018a6:	4614      	mov	r4, r2
  4018a8:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4018aa:	4b15      	ldr	r3, [pc, #84]	; (401900 <disk_write+0x64>)
  4018ac:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4018ae:	b918      	cbnz	r0, 4018b8 <disk_write+0x1c>
		return RES_ERROR;
  4018b0:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4018b2:	b003      	add	sp, #12
  4018b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018b8:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  4018ba:	a901      	add	r1, sp, #4
  4018bc:	4640      	mov	r0, r8
  4018be:	4b11      	ldr	r3, [pc, #68]	; (401904 <disk_write+0x68>)
  4018c0:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  4018c2:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  4018c4:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  4018c8:	9b01      	ldr	r3, [sp, #4]
  4018ca:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  4018ce:	429a      	cmp	r2, r3
  4018d0:	d901      	bls.n	4018d6 <disk_write+0x3a>
		return RES_PARERR;
  4018d2:	2004      	movs	r0, #4
  4018d4:	e7ed      	b.n	4018b2 <disk_write+0x16>
	for (i = 0; i < count; i++) {
  4018d6:	46ba      	mov	sl, r7
  4018d8:	b177      	cbz	r7, 4018f8 <disk_write+0x5c>
  4018da:	0276      	lsls	r6, r6, #9
  4018dc:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4018de:	f8df b028 	ldr.w	fp, [pc, #40]	; 401908 <disk_write+0x6c>
  4018e2:	462a      	mov	r2, r5
  4018e4:	4621      	mov	r1, r4
  4018e6:	4640      	mov	r0, r8
  4018e8:	47d8      	blx	fp
  4018ea:	b938      	cbnz	r0, 4018fc <disk_write+0x60>
	for (i = 0; i < count; i++) {
  4018ec:	3701      	adds	r7, #1
  4018ee:	444c      	add	r4, r9
  4018f0:	4435      	add	r5, r6
  4018f2:	4557      	cmp	r7, sl
  4018f4:	d1f5      	bne.n	4018e2 <disk_write+0x46>
  4018f6:	e7dc      	b.n	4018b2 <disk_write+0x16>
	return RES_OK;
  4018f8:	2000      	movs	r0, #0
  4018fa:	e7da      	b.n	4018b2 <disk_write+0x16>
			return RES_ERROR;
  4018fc:	2001      	movs	r0, #1
  4018fe:	e7d8      	b.n	4018b2 <disk_write+0x16>
  401900:	0040103d 	.word	0x0040103d
  401904:	00401029 	.word	0x00401029
  401908:	00401071 	.word	0x00401071

0040190c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  40190c:	b510      	push	{r4, lr}
  40190e:	b082      	sub	sp, #8
  401910:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  401912:	2903      	cmp	r1, #3
  401914:	d825      	bhi.n	401962 <disk_ioctl+0x56>
  401916:	e8df f001 	tbb	[pc, r1]
  40191a:	071d      	.short	0x071d
  40191c:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  40191e:	2301      	movs	r3, #1
  401920:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  401922:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  401924:	b002      	add	sp, #8
  401926:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  401928:	a901      	add	r1, sp, #4
  40192a:	4b11      	ldr	r3, [pc, #68]	; (401970 <disk_ioctl+0x64>)
  40192c:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  40192e:	9b01      	ldr	r3, [sp, #4]
  401930:	3301      	adds	r3, #1
  401932:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  401934:	2000      	movs	r0, #0
	break;
  401936:	e7f5      	b.n	401924 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  401938:	4b0e      	ldr	r3, [pc, #56]	; (401974 <disk_ioctl+0x68>)
  40193a:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  40193c:	2808      	cmp	r0, #8
  40193e:	d812      	bhi.n	401966 <disk_ioctl+0x5a>
  401940:	f44f 738b 	mov.w	r3, #278	; 0x116
  401944:	fa23 f000 	lsr.w	r0, r3, r0
				(uc_sector_size != SECTOR_SIZE_2048) &&
  401948:	f010 0f01 	tst.w	r0, #1
  40194c:	d00d      	beq.n	40196a <disk_ioctl+0x5e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  40194e:	2000      	movs	r0, #0
  401950:	7020      	strb	r0, [r4, #0]
	break;
  401952:	e7e7      	b.n	401924 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  401954:	4b08      	ldr	r3, [pc, #32]	; (401978 <disk_ioctl+0x6c>)
  401956:	4798      	blx	r3
  401958:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  40195a:	bf0c      	ite	eq
  40195c:	2000      	moveq	r0, #0
  40195e:	2003      	movne	r0, #3
  401960:	e7e0      	b.n	401924 <disk_ioctl+0x18>
		res = RES_PARERR;
  401962:	2004      	movs	r0, #4
  401964:	e7de      	b.n	401924 <disk_ioctl+0x18>
			return RES_ERROR;
  401966:	2001      	movs	r0, #1
  401968:	e7dc      	b.n	401924 <disk_ioctl+0x18>
  40196a:	2001      	movs	r0, #1
  40196c:	e7da      	b.n	401924 <disk_ioctl+0x18>
  40196e:	bf00      	nop
  401970:	00401029 	.word	0x00401029
  401974:	0040103d 	.word	0x0040103d
  401978:	00401015 	.word	0x00401015

0040197c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  40197c:	b530      	push	{r4, r5, lr}
  40197e:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  401980:	4c11      	ldr	r4, [pc, #68]	; (4019c8 <get_fattime+0x4c>)
  401982:	ab07      	add	r3, sp, #28
  401984:	aa08      	add	r2, sp, #32
  401986:	a909      	add	r1, sp, #36	; 0x24
  401988:	4620      	mov	r0, r4
  40198a:	4d10      	ldr	r5, [pc, #64]	; (4019cc <get_fattime+0x50>)
  40198c:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  40198e:	ab03      	add	r3, sp, #12
  401990:	9300      	str	r3, [sp, #0]
  401992:	ab04      	add	r3, sp, #16
  401994:	aa05      	add	r2, sp, #20
  401996:	a906      	add	r1, sp, #24
  401998:	4620      	mov	r0, r4
  40199a:	4c0d      	ldr	r4, [pc, #52]	; (4019d0 <get_fattime+0x54>)
  40199c:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  40199e:	9b04      	ldr	r3, [sp, #16]
  4019a0:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  4019a2:	9805      	ldr	r0, [sp, #20]
  4019a4:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  4019a8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4019aa:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  4019ae:	9808      	ldr	r0, [sp, #32]
  4019b0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  4019b4:	9807      	ldr	r0, [sp, #28]
  4019b6:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  4019ba:	9806      	ldr	r0, [sp, #24]
  4019bc:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  4019c0:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  4019c4:	b00b      	add	sp, #44	; 0x2c
  4019c6:	bd30      	pop	{r4, r5, pc}
  4019c8:	400e1860 	.word	0x400e1860
  4019cc:	004016c9 	.word	0x004016c9
  4019d0:	00401723 	.word	0x00401723

004019d4 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  4019d4:	b13a      	cbz	r2, 4019e6 <mem_cpy+0x12>
  4019d6:	3801      	subs	r0, #1
  4019d8:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  4019da:	f811 3b01 	ldrb.w	r3, [r1], #1
  4019de:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  4019e2:	4291      	cmp	r1, r2
  4019e4:	d1f9      	bne.n	4019da <mem_cpy+0x6>
  4019e6:	4770      	bx	lr

004019e8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  4019e8:	b122      	cbz	r2, 4019f4 <mem_set+0xc>
  4019ea:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  4019ec:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  4019f0:	4282      	cmp	r2, r0
  4019f2:	d1fb      	bne.n	4019ec <mem_set+0x4>
  4019f4:	4770      	bx	lr

004019f6 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  4019f6:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4019f8:	6983      	ldr	r3, [r0, #24]
  4019fa:	3b02      	subs	r3, #2
  4019fc:	4299      	cmp	r1, r3
  4019fe:	d204      	bcs.n	401a0a <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  401a00:	7883      	ldrb	r3, [r0, #2]
  401a02:	6a80      	ldr	r0, [r0, #40]	; 0x28
  401a04:	fb01 0003 	mla	r0, r1, r3, r0
  401a08:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  401a0a:	2000      	movs	r0, #0
}
  401a0c:	4770      	bx	lr

00401a0e <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  401a0e:	4602      	mov	r2, r0
  401a10:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  401a14:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  401a16:	01c3      	lsls	r3, r0, #7
  401a18:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  401a1c:	f812 0b01 	ldrb.w	r0, [r2], #1
  401a20:	fa50 f383 	uxtab	r3, r0, r3
  401a24:	b2d8      	uxtb	r0, r3
  401a26:	428a      	cmp	r2, r1
  401a28:	d1f5      	bne.n	401a16 <sum_sfn+0x8>
	return sum;
}
  401a2a:	4770      	bx	lr

00401a2c <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  401a2c:	b198      	cbz	r0, 401a56 <validate+0x2a>
{
  401a2e:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  401a30:	7802      	ldrb	r2, [r0, #0]
  401a32:	b90a      	cbnz	r2, 401a38 <validate+0xc>
		return FR_INVALID_OBJECT;
  401a34:	2009      	movs	r0, #9
  401a36:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  401a38:	88c2      	ldrh	r2, [r0, #6]
  401a3a:	428a      	cmp	r2, r1
  401a3c:	d001      	beq.n	401a42 <validate+0x16>
		return FR_INVALID_OBJECT;
  401a3e:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  401a40:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  401a42:	7840      	ldrb	r0, [r0, #1]
  401a44:	4b05      	ldr	r3, [pc, #20]	; (401a5c <validate+0x30>)
  401a46:	4798      	blx	r3
  401a48:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  401a4c:	2800      	cmp	r0, #0
  401a4e:	bf14      	ite	ne
  401a50:	2003      	movne	r0, #3
  401a52:	2000      	moveq	r0, #0
  401a54:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  401a56:	2009      	movs	r0, #9
  401a58:	4770      	bx	lr
  401a5a:	bf00      	nop
  401a5c:	00401811 	.word	0x00401811

00401a60 <check_fs>:
{
  401a60:	b538      	push	{r3, r4, r5, lr}
  401a62:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  401a64:	2301      	movs	r3, #1
  401a66:	460a      	mov	r2, r1
  401a68:	f100 0130 	add.w	r1, r0, #48	; 0x30
  401a6c:	7840      	ldrb	r0, [r0, #1]
  401a6e:	4d1d      	ldr	r5, [pc, #116]	; (401ae4 <check_fs+0x84>)
  401a70:	47a8      	blx	r5
  401a72:	b108      	cbz	r0, 401a78 <check_fs+0x18>
		return 3;
  401a74:	2003      	movs	r0, #3
  401a76:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  401a78:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  401a7c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  401a80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401a84:	b21b      	sxth	r3, r3
  401a86:	4a18      	ldr	r2, [pc, #96]	; (401ae8 <check_fs+0x88>)
  401a88:	4293      	cmp	r3, r2
  401a8a:	d001      	beq.n	401a90 <check_fs+0x30>
		return 2;
  401a8c:	2002      	movs	r0, #2
  401a8e:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  401a90:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  401a94:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  401a98:	041b      	lsls	r3, r3, #16
  401a9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401a9e:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  401aa2:	4313      	orrs	r3, r2
  401aa4:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  401aa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ab0:	4a0e      	ldr	r2, [pc, #56]	; (401aec <check_fs+0x8c>)
  401ab2:	4293      	cmp	r3, r2
  401ab4:	d013      	beq.n	401ade <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  401ab6:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  401aba:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  401abe:	0400      	lsls	r0, r0, #16
  401ac0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  401ac4:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  401ac8:	4318      	orrs	r0, r3
  401aca:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  401ace:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  401ad6:	1a80      	subs	r0, r0, r2
  401ad8:	bf18      	it	ne
  401ada:	2001      	movne	r0, #1
  401adc:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  401ade:	2000      	movs	r0, #0
}
  401ae0:	bd38      	pop	{r3, r4, r5, pc}
  401ae2:	bf00      	nop
  401ae4:	0040182d 	.word	0x0040182d
  401ae8:	ffffaa55 	.word	0xffffaa55
  401aec:	00544146 	.word	0x00544146

00401af0 <chk_mounted>:
{
  401af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  401af2:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  401af4:	781c      	ldrb	r4, [r3, #0]
  401af6:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  401af8:	2c09      	cmp	r4, #9
  401afa:	d80a      	bhi.n	401b12 <chk_mounted+0x22>
  401afc:	785d      	ldrb	r5, [r3, #1]
  401afe:	2d3a      	cmp	r5, #58	; 0x3a
  401b00:	d001      	beq.n	401b06 <chk_mounted+0x16>
  401b02:	2400      	movs	r4, #0
  401b04:	e006      	b.n	401b14 <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
  401b06:	3302      	adds	r3, #2
  401b08:	6003      	str	r3, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  401b0a:	2c07      	cmp	r4, #7
  401b0c:	d902      	bls.n	401b14 <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  401b0e:	200b      	movs	r0, #11
  401b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b12:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  401b14:	4bae      	ldr	r3, [pc, #696]	; (401dd0 <chk_mounted+0x2e0>)
  401b16:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  401b1a:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401b1c:	2d00      	cmp	r5, #0
  401b1e:	f000 813e 	beq.w	401d9e <chk_mounted+0x2ae>
  401b22:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  401b24:	782b      	ldrb	r3, [r5, #0]
  401b26:	b17b      	cbz	r3, 401b48 <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  401b28:	7868      	ldrb	r0, [r5, #1]
  401b2a:	4baa      	ldr	r3, [pc, #680]	; (401dd4 <chk_mounted+0x2e4>)
  401b2c:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  401b2e:	f010 0f01 	tst.w	r0, #1
  401b32:	d109      	bne.n	401b48 <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  401b34:	2e00      	cmp	r6, #0
  401b36:	f000 8134 	beq.w	401da2 <chk_mounted+0x2b2>
  401b3a:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  401b3e:	2800      	cmp	r0, #0
  401b40:	bf0c      	ite	eq
  401b42:	2000      	moveq	r0, #0
  401b44:	200a      	movne	r0, #10
  401b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  401b48:	2300      	movs	r3, #0
  401b4a:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  401b4c:	b2e0      	uxtb	r0, r4
  401b4e:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  401b50:	4ba1      	ldr	r3, [pc, #644]	; (401dd8 <chk_mounted+0x2e8>)
  401b52:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  401b54:	f010 0f01 	tst.w	r0, #1
  401b58:	d001      	beq.n	401b5e <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  401b5a:	2003      	movs	r0, #3
  401b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  401b5e:	b126      	cbz	r6, 401b6a <chk_mounted+0x7a>
  401b60:	f010 0f04 	tst.w	r0, #4
  401b64:	d001      	beq.n	401b6a <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  401b66:	200a      	movs	r0, #10
  401b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401b6a:	2100      	movs	r1, #0
  401b6c:	4628      	mov	r0, r5
  401b6e:	4b9b      	ldr	r3, [pc, #620]	; (401ddc <chk_mounted+0x2ec>)
  401b70:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  401b72:	2801      	cmp	r0, #1
  401b74:	d006      	beq.n	401b84 <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401b76:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  401b78:	2803      	cmp	r0, #3
  401b7a:	f000 8114 	beq.w	401da6 <chk_mounted+0x2b6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401b7e:	b1c8      	cbz	r0, 401bb4 <chk_mounted+0xc4>
  401b80:	200d      	movs	r0, #13
  401b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  401b84:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  401b88:	b90b      	cbnz	r3, 401b8e <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401b8a:	200d      	movs	r0, #13
  401b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  401b8e:	f895 31f9 	ldrb.w	r3, [r5, #505]	; 0x1f9
  401b92:	f895 41f8 	ldrb.w	r4, [r5, #504]	; 0x1f8
  401b96:	0424      	lsls	r4, r4, #16
  401b98:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  401b9c:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  401ba0:	431c      	orrs	r4, r3
  401ba2:	f895 31f7 	ldrb.w	r3, [r5, #503]	; 0x1f7
  401ba6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  401baa:	4621      	mov	r1, r4
  401bac:	4628      	mov	r0, r5
  401bae:	4b8b      	ldr	r3, [pc, #556]	; (401ddc <chk_mounted+0x2ec>)
  401bb0:	4798      	blx	r3
  401bb2:	e7e1      	b.n	401b78 <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  401bb4:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  401bb8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  401bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401bc0:	b21b      	sxth	r3, r3
  401bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401bc6:	d001      	beq.n	401bcc <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  401bc8:	200d      	movs	r0, #13
  401bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  401bcc:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  401bd0:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  401bd4:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  401bd8:	d10d      	bne.n	401bf6 <chk_mounted+0x106>
  401bda:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
  401bde:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  401be2:	0412      	lsls	r2, r2, #16
  401be4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  401be8:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  401bec:	431a      	orrs	r2, r3
  401bee:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
  401bf2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  401bf6:	61ea      	str	r2, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  401bf8:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  401bfc:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  401c00:	f10e 33ff 	add.w	r3, lr, #4294967295
  401c04:	b2db      	uxtb	r3, r3
  401c06:	2b01      	cmp	r3, #1
  401c08:	d901      	bls.n	401c0e <chk_mounted+0x11e>
  401c0a:	200d      	movs	r0, #13
  401c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  401c0e:	f895 603d 	ldrb.w	r6, [r5, #61]	; 0x3d
  401c12:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401c14:	2e00      	cmp	r6, #0
  401c16:	f000 80c8 	beq.w	401daa <chk_mounted+0x2ba>
  401c1a:	1e73      	subs	r3, r6, #1
  401c1c:	4233      	tst	r3, r6
  401c1e:	d001      	beq.n	401c24 <chk_mounted+0x134>
  401c20:	200d      	movs	r0, #13
  401c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  401c24:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  401c28:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
  401c2c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  401c30:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401c32:	f011 0f0f 	tst.w	r1, #15
  401c36:	f040 80ba 	bne.w	401dae <chk_mounted+0x2be>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  401c3a:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  401c3e:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  401c42:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  401c46:	d10d      	bne.n	401c64 <chk_mounted+0x174>
  401c48:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
  401c4c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
  401c50:	041b      	lsls	r3, r3, #16
  401c52:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401c56:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
  401c5a:	4303      	orrs	r3, r0
  401c5c:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  401c60:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  401c64:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
  401c68:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401c6c:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  401c70:	f000 809f 	beq.w	401db2 <chk_mounted+0x2c2>
	fasize *= b;										/* Number of sectors for FAT area */
  401c74:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  401c78:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  401c7c:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401c7e:	4283      	cmp	r3, r0
  401c80:	f0c0 8099 	bcc.w	401db6 <chk_mounted+0x2c6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  401c84:	1a1b      	subs	r3, r3, r0
  401c86:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401c8a:	2b00      	cmp	r3, #0
  401c8c:	f000 8095 	beq.w	401dba <chk_mounted+0x2ca>
	fmt = FS_FAT12;
  401c90:	f640 76f5 	movw	r6, #4085	; 0xff5
  401c94:	42b3      	cmp	r3, r6
  401c96:	bf8c      	ite	hi
  401c98:	2602      	movhi	r6, #2
  401c9a:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  401c9c:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  401ca0:	4563      	cmp	r3, ip
  401ca2:	f200 80a5 	bhi.w	401df0 <chk_mounted+0x300>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401ca6:	3302      	adds	r3, #2
  401ca8:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401caa:	4420      	add	r0, r4
  401cac:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401cae:	443c      	add	r4, r7
  401cb0:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401cb2:	2900      	cmp	r1, #0
  401cb4:	f000 8089 	beq.w	401dca <chk_mounted+0x2da>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  401cb8:	4474      	add	r4, lr
  401cba:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  401cbc:	2e02      	cmp	r6, #2
  401cbe:	d10b      	bne.n	401cd8 <chk_mounted+0x1e8>
  401cc0:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401cc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401cc6:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  401cca:	d37c      	bcc.n	401dc6 <chk_mounted+0x2d6>
	fs->free_clust = 0xFFFFFFFF;
  401ccc:	f04f 33ff 	mov.w	r3, #4294967295
  401cd0:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  401cd2:	2300      	movs	r3, #0
  401cd4:	60eb      	str	r3, [r5, #12]
  401cd6:	e051      	b.n	401d7c <chk_mounted+0x28c>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  401cd8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401cdc:	f003 0301 	and.w	r3, r3, #1
  401ce0:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  401ce4:	e7ed      	b.n	401cc2 <chk_mounted+0x1d2>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401ce6:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  401cea:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  401cee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401cf2:	b21b      	sxth	r3, r3
  401cf4:	4a3a      	ldr	r2, [pc, #232]	; (401de0 <chk_mounted+0x2f0>)
  401cf6:	4293      	cmp	r3, r2
  401cf8:	d14b      	bne.n	401d92 <chk_mounted+0x2a2>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401cfa:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  401cfe:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  401d02:	041b      	lsls	r3, r3, #16
  401d04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d08:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  401d0c:	4313      	orrs	r3, r2
  401d0e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  401d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401d16:	4a33      	ldr	r2, [pc, #204]	; (401de4 <chk_mounted+0x2f4>)
  401d18:	4293      	cmp	r3, r2
  401d1a:	d13c      	bne.n	401d96 <chk_mounted+0x2a6>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  401d1c:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  401d20:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  401d24:	041b      	lsls	r3, r3, #16
  401d26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d2a:	f895 2214 	ldrb.w	r2, [r5, #532]	; 0x214
  401d2e:	4313      	orrs	r3, r2
  401d30:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  401d34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401d38:	4a2b      	ldr	r2, [pc, #172]	; (401de8 <chk_mounted+0x2f8>)
  401d3a:	4293      	cmp	r3, r2
  401d3c:	d12d      	bne.n	401d9a <chk_mounted+0x2aa>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  401d3e:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  401d42:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  401d46:	041b      	lsls	r3, r3, #16
  401d48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d4c:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  401d50:	4313      	orrs	r3, r2
  401d52:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  401d56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401d5a:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  401d5c:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  401d60:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  401d64:	041b      	lsls	r3, r3, #16
  401d66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d6a:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  401d6e:	4313      	orrs	r3, r2
  401d70:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  401d74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401d78:	612b      	str	r3, [r5, #16]
  401d7a:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  401d7c:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  401d7e:	4a1b      	ldr	r2, [pc, #108]	; (401dec <chk_mounted+0x2fc>)
  401d80:	8813      	ldrh	r3, [r2, #0]
  401d82:	3301      	adds	r3, #1
  401d84:	b29b      	uxth	r3, r3
  401d86:	8013      	strh	r3, [r2, #0]
  401d88:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  401d8a:	2000      	movs	r0, #0
  401d8c:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  401d8e:	7128      	strb	r0, [r5, #4]
	return FR_OK;
  401d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d92:	2603      	movs	r6, #3
  401d94:	e7f2      	b.n	401d7c <chk_mounted+0x28c>
  401d96:	2603      	movs	r6, #3
  401d98:	e7f0      	b.n	401d7c <chk_mounted+0x28c>
  401d9a:	2603      	movs	r6, #3
  401d9c:	e7ee      	b.n	401d7c <chk_mounted+0x28c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401d9e:	200c      	movs	r0, #12
  401da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  401da2:	2000      	movs	r0, #0
  401da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  401da6:	2001      	movs	r0, #1
  401da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401daa:	200d      	movs	r0, #13
  401dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401dae:	200d      	movs	r0, #13
  401db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401db2:	200d      	movs	r0, #13
  401db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401db6:	200d      	movs	r0, #13
  401db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401dba:	200d      	movs	r0, #13
  401dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  401dbe:	200d      	movs	r0, #13
  401dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401dc2:	200d      	movs	r0, #13
  401dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  401dc6:	200d      	movs	r0, #13
  401dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401dca:	200d      	movs	r0, #13
  401dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401dce:	bf00      	nop
  401dd0:	20400a5c 	.word	0x20400a5c
  401dd4:	00401811 	.word	0x00401811
  401dd8:	004017d1 	.word	0x004017d1
  401ddc:	00401a61 	.word	0x00401a61
  401de0:	ffffaa55 	.word	0xffffaa55
  401de4:	41615252 	.word	0x41615252
  401de8:	61417272 	.word	0x61417272
  401dec:	20400a7c 	.word	0x20400a7c
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401df0:	3302      	adds	r3, #2
  401df2:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401df4:	4420      	add	r0, r4
  401df6:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401df8:	4427      	add	r7, r4
  401dfa:	622f      	str	r7, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401dfc:	2900      	cmp	r1, #0
  401dfe:	d1e0      	bne.n	401dc2 <chk_mounted+0x2d2>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  401e00:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  401e04:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
  401e08:	0409      	lsls	r1, r1, #16
  401e0a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  401e0e:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
  401e12:	4301      	orrs	r1, r0
  401e14:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  401e18:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  401e1c:	6269      	str	r1, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  401e1e:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401e20:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401e24:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  401e28:	d3c9      	bcc.n	401dbe <chk_mounted+0x2ce>
	fs->free_clust = 0xFFFFFFFF;
  401e2a:	f04f 33ff 	mov.w	r3, #4294967295
  401e2e:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  401e30:	2300      	movs	r3, #0
  401e32:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  401e34:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  401e36:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
  401e3a:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
  401e3e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  401e42:	4422      	add	r2, r4
  401e44:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401e46:	2301      	movs	r3, #1
  401e48:	f105 0130 	add.w	r1, r5, #48	; 0x30
  401e4c:	7868      	ldrb	r0, [r5, #1]
  401e4e:	4c03      	ldr	r4, [pc, #12]	; (401e5c <chk_mounted+0x36c>)
  401e50:	47a0      	blx	r4
  401e52:	2800      	cmp	r0, #0
  401e54:	f43f af47 	beq.w	401ce6 <chk_mounted+0x1f6>
  401e58:	2603      	movs	r6, #3
  401e5a:	e78f      	b.n	401d7c <chk_mounted+0x28c>
  401e5c:	0040182d 	.word	0x0040182d

00401e60 <get_fileinfo>:
{
  401e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	p = fno->fname;
  401e64:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
  401e68:	6903      	ldr	r3, [r0, #16]
  401e6a:	2b00      	cmp	r3, #0
  401e6c:	d05e      	beq.n	401f2c <get_fileinfo+0xcc>
		dir = dj->dir;
  401e6e:	6944      	ldr	r4, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
  401e70:	f894 e00c 	ldrb.w	lr, [r4, #12]
			c = dir[i];
  401e74:	7823      	ldrb	r3, [r4, #0]
			if (c == ' ') break;
  401e76:	2b20      	cmp	r3, #32
  401e78:	d01d      	beq.n	401eb6 <get_fileinfo+0x56>
  401e7a:	4625      	mov	r5, r4
  401e7c:	f101 0711 	add.w	r7, r1, #17
			if (c == NDDE) c = (TCHAR)DDE;
  401e80:	f04f 08e5 	mov.w	r8, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  401e84:	f00e 0c08 	and.w	ip, lr, #8
  401e88:	e008      	b.n	401e9c <get_fileinfo+0x3c>
			if (c == NDDE) c = (TCHAR)DDE;
  401e8a:	4643      	mov	r3, r8
			*p++ = c;
  401e8c:	f802 3b01 	strb.w	r3, [r2], #1
		for (i = 0; i < 8; i++) {	/* Copy name body */
  401e90:	42ba      	cmp	r2, r7
  401e92:	d010      	beq.n	401eb6 <get_fileinfo+0x56>
			c = dir[i];
  401e94:	f815 3f01 	ldrb.w	r3, [r5, #1]!
			if (c == ' ') break;
  401e98:	2b20      	cmp	r3, #32
  401e9a:	d00c      	beq.n	401eb6 <get_fileinfo+0x56>
			if (c == NDDE) c = (TCHAR)DDE;
  401e9c:	2b05      	cmp	r3, #5
  401e9e:	d0f4      	beq.n	401e8a <get_fileinfo+0x2a>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  401ea0:	f1bc 0f00 	cmp.w	ip, #0
  401ea4:	d0f2      	beq.n	401e8c <get_fileinfo+0x2c>
  401ea6:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  401eaa:	b2f6      	uxtb	r6, r6
  401eac:	2e19      	cmp	r6, #25
  401eae:	d8ed      	bhi.n	401e8c <get_fileinfo+0x2c>
  401eb0:	3320      	adds	r3, #32
  401eb2:	b2db      	uxtb	r3, r3
  401eb4:	e7ea      	b.n	401e8c <get_fileinfo+0x2c>
		if (dir[8] != ' ') {		/* Copy name extension */
  401eb6:	7a23      	ldrb	r3, [r4, #8]
  401eb8:	2b20      	cmp	r3, #32
  401eba:	d020      	beq.n	401efe <get_fileinfo+0x9e>
			*p++ = '.';
  401ebc:	1c55      	adds	r5, r2, #1
  401ebe:	232e      	movs	r3, #46	; 0x2e
  401ec0:	7013      	strb	r3, [r2, #0]
				c = dir[i];
  401ec2:	7a23      	ldrb	r3, [r4, #8]
				if (c == ' ') break;
  401ec4:	2b20      	cmp	r3, #32
  401ec6:	d019      	beq.n	401efc <get_fileinfo+0x9c>
  401ec8:	f104 0708 	add.w	r7, r4, #8
  401ecc:	f102 0c04 	add.w	ip, r2, #4
  401ed0:	462a      	mov	r2, r5
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  401ed2:	f00e 0510 	and.w	r5, lr, #16
  401ed6:	e007      	b.n	401ee8 <get_fileinfo+0x88>
				*p++ = c;
  401ed8:	f802 3b01 	strb.w	r3, [r2], #1
			for (i = 8; i < 11; i++) {
  401edc:	4562      	cmp	r2, ip
  401ede:	d00e      	beq.n	401efe <get_fileinfo+0x9e>
				c = dir[i];
  401ee0:	f817 3f01 	ldrb.w	r3, [r7, #1]!
				if (c == ' ') break;
  401ee4:	2b20      	cmp	r3, #32
  401ee6:	d00a      	beq.n	401efe <get_fileinfo+0x9e>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  401ee8:	2d00      	cmp	r5, #0
  401eea:	d0f5      	beq.n	401ed8 <get_fileinfo+0x78>
  401eec:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  401ef0:	b2f6      	uxtb	r6, r6
  401ef2:	2e19      	cmp	r6, #25
  401ef4:	d8f0      	bhi.n	401ed8 <get_fileinfo+0x78>
  401ef6:	3320      	adds	r3, #32
  401ef8:	b2db      	uxtb	r3, r3
  401efa:	e7ed      	b.n	401ed8 <get_fileinfo+0x78>
			*p++ = '.';
  401efc:	462a      	mov	r2, r5
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
  401efe:	7ae3      	ldrb	r3, [r4, #11]
  401f00:	720b      	strb	r3, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
  401f02:	7fe5      	ldrb	r5, [r4, #31]
  401f04:	7fa3      	ldrb	r3, [r4, #30]
  401f06:	041b      	lsls	r3, r3, #16
  401f08:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401f0c:	7f25      	ldrb	r5, [r4, #28]
  401f0e:	432b      	orrs	r3, r5
  401f10:	7f65      	ldrb	r5, [r4, #29]
  401f12:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  401f16:	600b      	str	r3, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
  401f18:	7e65      	ldrb	r5, [r4, #25]
  401f1a:	7e23      	ldrb	r3, [r4, #24]
  401f1c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  401f20:	808b      	strh	r3, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
  401f22:	7de5      	ldrb	r5, [r4, #23]
  401f24:	7da3      	ldrb	r3, [r4, #22]
  401f26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  401f2a:	80cb      	strh	r3, [r1, #6]
	*p = 0;		/* Terminate SFN str by a \0 */
  401f2c:	2300      	movs	r3, #0
  401f2e:	7013      	strb	r3, [r2, #0]
	if (fno->lfname && fno->lfsize) {
  401f30:	698f      	ldr	r7, [r1, #24]
  401f32:	b32f      	cbz	r7, 401f80 <get_fileinfo+0x120>
  401f34:	69cb      	ldr	r3, [r1, #28]
  401f36:	b31b      	cbz	r3, 401f80 <get_fileinfo+0x120>
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
  401f38:	6903      	ldr	r3, [r0, #16]
  401f3a:	b1f3      	cbz	r3, 401f7a <get_fileinfo+0x11a>
  401f3c:	8c02      	ldrh	r2, [r0, #32]
  401f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401f42:	429a      	cmp	r2, r3
  401f44:	d01e      	beq.n	401f84 <get_fileinfo+0x124>
			lfn = dj->lfn;
  401f46:	f8d0 801c 	ldr.w	r8, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  401f4a:	f8b8 0000 	ldrh.w	r0, [r8]
  401f4e:	b1d8      	cbz	r0, 401f88 <get_fileinfo+0x128>
  401f50:	460d      	mov	r5, r1
  401f52:	1e7e      	subs	r6, r7, #1
  401f54:	2400      	movs	r4, #0
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
  401f56:	46a2      	mov	sl, r4
  401f58:	f8df 9038 	ldr.w	r9, [pc, #56]	; 401f94 <get_fileinfo+0x134>
  401f5c:	4651      	mov	r1, sl
  401f5e:	47c8      	blx	r9
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  401f60:	b1a0      	cbz	r0, 401f8c <get_fileinfo+0x12c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  401f62:	69eb      	ldr	r3, [r5, #28]
  401f64:	3b01      	subs	r3, #1
  401f66:	42a3      	cmp	r3, r4
  401f68:	d912      	bls.n	401f90 <get_fileinfo+0x130>
				tp[i++] = (TCHAR)w;
  401f6a:	3401      	adds	r4, #1
  401f6c:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  401f70:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
  401f74:	2800      	cmp	r0, #0
  401f76:	d1f1      	bne.n	401f5c <get_fileinfo+0xfc>
  401f78:	e000      	b.n	401f7c <get_fileinfo+0x11c>
		i = 0;
  401f7a:	2400      	movs	r4, #0
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
  401f7c:	2300      	movs	r3, #0
  401f7e:	553b      	strb	r3, [r7, r4]
  401f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = 0;
  401f84:	2400      	movs	r4, #0
  401f86:	e7f9      	b.n	401f7c <get_fileinfo+0x11c>
  401f88:	2400      	movs	r4, #0
  401f8a:	e7f7      	b.n	401f7c <get_fileinfo+0x11c>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  401f8c:	2400      	movs	r4, #0
  401f8e:	e7f5      	b.n	401f7c <get_fileinfo+0x11c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  401f90:	2400      	movs	r4, #0
  401f92:	e7f3      	b.n	401f7c <get_fileinfo+0x11c>
  401f94:	004033e9 	.word	0x004033e9

00401f98 <move_window>:
{
  401f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  401f9c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  401f9e:	428f      	cmp	r7, r1
  401fa0:	d035      	beq.n	40200e <move_window+0x76>
  401fa2:	460e      	mov	r6, r1
  401fa4:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  401fa6:	7903      	ldrb	r3, [r0, #4]
  401fa8:	b91b      	cbnz	r3, 401fb2 <move_window+0x1a>
		if (sector) {
  401faa:	bb2e      	cbnz	r6, 401ff8 <move_window+0x60>
	return FR_OK;
  401fac:	2000      	movs	r0, #0
  401fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  401fb2:	f100 0830 	add.w	r8, r0, #48	; 0x30
  401fb6:	2301      	movs	r3, #1
  401fb8:	463a      	mov	r2, r7
  401fba:	4641      	mov	r1, r8
  401fbc:	7840      	ldrb	r0, [r0, #1]
  401fbe:	4d18      	ldr	r5, [pc, #96]	; (402020 <move_window+0x88>)
  401fc0:	47a8      	blx	r5
  401fc2:	bb38      	cbnz	r0, 402014 <move_window+0x7c>
			fs->wflag = 0;
  401fc4:	2300      	movs	r3, #0
  401fc6:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  401fc8:	6a23      	ldr	r3, [r4, #32]
  401fca:	69e2      	ldr	r2, [r4, #28]
  401fcc:	4413      	add	r3, r2
  401fce:	429f      	cmp	r7, r3
  401fd0:	d2eb      	bcs.n	401faa <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  401fd2:	78e5      	ldrb	r5, [r4, #3]
  401fd4:	2d01      	cmp	r5, #1
  401fd6:	d9e8      	bls.n	401faa <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  401fd8:	f04f 0a01 	mov.w	sl, #1
  401fdc:	f8df 9040 	ldr.w	r9, [pc, #64]	; 402020 <move_window+0x88>
					wsect += fs->fsize;
  401fe0:	69e3      	ldr	r3, [r4, #28]
  401fe2:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  401fe4:	4653      	mov	r3, sl
  401fe6:	463a      	mov	r2, r7
  401fe8:	4641      	mov	r1, r8
  401fea:	7860      	ldrb	r0, [r4, #1]
  401fec:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  401fee:	3d01      	subs	r5, #1
  401ff0:	b2ed      	uxtb	r5, r5
  401ff2:	2d01      	cmp	r5, #1
  401ff4:	d1f4      	bne.n	401fe0 <move_window+0x48>
  401ff6:	e7d8      	b.n	401faa <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  401ff8:	2301      	movs	r3, #1
  401ffa:	4632      	mov	r2, r6
  401ffc:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402000:	7860      	ldrb	r0, [r4, #1]
  402002:	4d08      	ldr	r5, [pc, #32]	; (402024 <move_window+0x8c>)
  402004:	47a8      	blx	r5
  402006:	b940      	cbnz	r0, 40201a <move_window+0x82>
			fs->winsect = sector;
  402008:	62e6      	str	r6, [r4, #44]	; 0x2c
  40200a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  40200e:	2000      	movs	r0, #0
  402010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402014:	2001      	movs	r0, #1
  402016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  40201a:	2001      	movs	r0, #1
}
  40201c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402020:	0040189d 	.word	0x0040189d
  402024:	0040182d 	.word	0x0040182d

00402028 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402028:	2901      	cmp	r1, #1
  40202a:	d96a      	bls.n	402102 <get_fat+0xda>
{
  40202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  40202e:	6983      	ldr	r3, [r0, #24]
  402030:	4299      	cmp	r1, r3
  402032:	d268      	bcs.n	402106 <get_fat+0xde>
  402034:	460c      	mov	r4, r1
  402036:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  402038:	7803      	ldrb	r3, [r0, #0]
  40203a:	2b02      	cmp	r3, #2
  40203c:	d02f      	beq.n	40209e <get_fat+0x76>
  40203e:	2b03      	cmp	r3, #3
  402040:	d041      	beq.n	4020c6 <get_fat+0x9e>
  402042:	2b01      	cmp	r3, #1
  402044:	d002      	beq.n	40204c <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402046:	f04f 30ff 	mov.w	r0, #4294967295
  40204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  40204c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402050:	6a01      	ldr	r1, [r0, #32]
  402052:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402056:	4b2d      	ldr	r3, [pc, #180]	; (40210c <get_fat+0xe4>)
  402058:	4798      	blx	r3
  40205a:	b110      	cbz	r0, 402062 <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40205c:	f04f 30ff 	mov.w	r0, #4294967295
  402060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  402062:	f3c7 0308 	ubfx	r3, r7, #0, #9
  402066:	4433      	add	r3, r6
  402068:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  40206c:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40206e:	6a31      	ldr	r1, [r6, #32]
  402070:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402074:	4630      	mov	r0, r6
  402076:	4b25      	ldr	r3, [pc, #148]	; (40210c <get_fat+0xe4>)
  402078:	4798      	blx	r3
  40207a:	b110      	cbz	r0, 402082 <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40207c:	f04f 30ff 	mov.w	r0, #4294967295
  402080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  402082:	f3c7 0708 	ubfx	r7, r7, #0, #9
  402086:	19f0      	adds	r0, r6, r7
  402088:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  40208c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  402090:	f014 0f01 	tst.w	r4, #1
  402094:	bf14      	ite	ne
  402096:	0900      	lsrne	r0, r0, #4
  402098:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  40209c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  40209e:	6a01      	ldr	r1, [r0, #32]
  4020a0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  4020a4:	4b19      	ldr	r3, [pc, #100]	; (40210c <get_fat+0xe4>)
  4020a6:	4798      	blx	r3
  4020a8:	b110      	cbz	r0, 4020b0 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4020aa:	f04f 30ff 	mov.w	r0, #4294967295
  4020ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  4020b0:	0060      	lsls	r0, r4, #1
  4020b2:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  4020b6:	4430      	add	r0, r6
  4020b8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4020bc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4020c0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4020c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  4020c6:	6a01      	ldr	r1, [r0, #32]
  4020c8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  4020cc:	4b0f      	ldr	r3, [pc, #60]	; (40210c <get_fat+0xe4>)
  4020ce:	4798      	blx	r3
  4020d0:	b110      	cbz	r0, 4020d8 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4020d2:	f04f 30ff 	mov.w	r0, #4294967295
}
  4020d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  4020d8:	00a0      	lsls	r0, r4, #2
  4020da:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  4020de:	f100 0230 	add.w	r2, r0, #48	; 0x30
  4020e2:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  4020e4:	78d1      	ldrb	r1, [r2, #3]
  4020e6:	7893      	ldrb	r3, [r2, #2]
  4020e8:	041b      	lsls	r3, r3, #16
  4020ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4020ee:	4430      	add	r0, r6
  4020f0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4020f4:	4318      	orrs	r0, r3
  4020f6:	7853      	ldrb	r3, [r2, #1]
  4020f8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4020fc:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  402100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  402102:	2001      	movs	r0, #1
  402104:	4770      	bx	lr
  402106:	2001      	movs	r0, #1
  402108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40210a:	bf00      	nop
  40210c:	00401f99 	.word	0x00401f99

00402110 <dir_sdi>:
{
  402110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402112:	4605      	mov	r5, r0
  402114:	460c      	mov	r4, r1
	dj->index = idx;
  402116:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  402118:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  40211a:	2901      	cmp	r1, #1
  40211c:	d03d      	beq.n	40219a <dir_sdi+0x8a>
  40211e:	6803      	ldr	r3, [r0, #0]
  402120:	699a      	ldr	r2, [r3, #24]
  402122:	4291      	cmp	r1, r2
  402124:	d301      	bcc.n	40212a <dir_sdi+0x1a>
		return FR_INT_ERR;
  402126:	2002      	movs	r0, #2
  402128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  40212a:	b961      	cbnz	r1, 402146 <dir_sdi+0x36>
  40212c:	781a      	ldrb	r2, [r3, #0]
  40212e:	2a03      	cmp	r2, #3
  402130:	d006      	beq.n	402140 <dir_sdi+0x30>
		dj->clust = clst;
  402132:	2200      	movs	r2, #0
  402134:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  402136:	891a      	ldrh	r2, [r3, #8]
  402138:	42a2      	cmp	r2, r4
  40213a:	d821      	bhi.n	402180 <dir_sdi+0x70>
			return FR_INT_ERR;
  40213c:	2002      	movs	r0, #2
  40213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  402140:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  402142:	2900      	cmp	r1, #0
  402144:	d0f5      	beq.n	402132 <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  402146:	789e      	ldrb	r6, [r3, #2]
  402148:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  40214a:	42b4      	cmp	r4, r6
  40214c:	d310      	bcc.n	402170 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  40214e:	4f17      	ldr	r7, [pc, #92]	; (4021ac <dir_sdi+0x9c>)
  402150:	6828      	ldr	r0, [r5, #0]
  402152:	47b8      	blx	r7
  402154:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402156:	f1b0 3fff 	cmp.w	r0, #4294967295
  40215a:	d020      	beq.n	40219e <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  40215c:	2801      	cmp	r0, #1
  40215e:	d920      	bls.n	4021a2 <dir_sdi+0x92>
  402160:	682b      	ldr	r3, [r5, #0]
  402162:	699b      	ldr	r3, [r3, #24]
  402164:	4298      	cmp	r0, r3
  402166:	d21e      	bcs.n	4021a6 <dir_sdi+0x96>
			idx -= ic;
  402168:	1ba4      	subs	r4, r4, r6
  40216a:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  40216c:	42a6      	cmp	r6, r4
  40216e:	d9ef      	bls.n	402150 <dir_sdi+0x40>
		dj->clust = clst;
  402170:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402172:	6828      	ldr	r0, [r5, #0]
  402174:	4b0e      	ldr	r3, [pc, #56]	; (4021b0 <dir_sdi+0xa0>)
  402176:	4798      	blx	r3
  402178:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  40217c:	6128      	str	r0, [r5, #16]
  40217e:	e003      	b.n	402188 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402182:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  402186:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  402188:	682b      	ldr	r3, [r5, #0]
  40218a:	3330      	adds	r3, #48	; 0x30
  40218c:	f004 040f 	and.w	r4, r4, #15
  402190:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  402194:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  402196:	2000      	movs	r0, #0
  402198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  40219a:	2002      	movs	r0, #2
  40219c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40219e:	2001      	movs	r0, #1
  4021a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  4021a2:	2002      	movs	r0, #2
  4021a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021a6:	2002      	movs	r0, #2
}
  4021a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021aa:	bf00      	nop
  4021ac:	00402029 	.word	0x00402029
  4021b0:	004019f7 	.word	0x004019f7

004021b4 <put_fat>:
{
  4021b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4021b8:	2901      	cmp	r1, #1
  4021ba:	f240 808f 	bls.w	4022dc <put_fat+0x128>
  4021be:	6983      	ldr	r3, [r0, #24]
  4021c0:	4299      	cmp	r1, r3
  4021c2:	d301      	bcc.n	4021c8 <put_fat+0x14>
		res = FR_INT_ERR;
  4021c4:	2702      	movs	r7, #2
	return res;
  4021c6:	e08a      	b.n	4022de <put_fat+0x12a>
  4021c8:	4615      	mov	r5, r2
  4021ca:	460c      	mov	r4, r1
  4021cc:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  4021ce:	7803      	ldrb	r3, [r0, #0]
  4021d0:	2b02      	cmp	r3, #2
  4021d2:	d04e      	beq.n	402272 <put_fat+0xbe>
  4021d4:	2b03      	cmp	r3, #3
  4021d6:	d05f      	beq.n	402298 <put_fat+0xe4>
  4021d8:	2b01      	cmp	r3, #1
  4021da:	d003      	beq.n	4021e4 <put_fat+0x30>
			res = FR_INT_ERR;
  4021dc:	2702      	movs	r7, #2
		fs->wflag = 1;
  4021de:	2301      	movs	r3, #1
  4021e0:	7133      	strb	r3, [r6, #4]
  4021e2:	e07c      	b.n	4022de <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  4021e4:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4021e8:	6a01      	ldr	r1, [r0, #32]
  4021ea:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4021ee:	4b3d      	ldr	r3, [pc, #244]	; (4022e4 <put_fat+0x130>)
  4021f0:	4798      	blx	r3
			if (res != FR_OK) break;
  4021f2:	4607      	mov	r7, r0
  4021f4:	2800      	cmp	r0, #0
  4021f6:	d1f2      	bne.n	4021de <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  4021f8:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4021fc:	f014 0f01 	tst.w	r4, #1
  402200:	d01c      	beq.n	40223c <put_fat+0x88>
  402202:	4433      	add	r3, r6
  402204:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  402208:	f002 020f 	and.w	r2, r2, #15
  40220c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  402210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  402214:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402218:	2301      	movs	r3, #1
  40221a:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40221c:	6a31      	ldr	r1, [r6, #32]
  40221e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402222:	4630      	mov	r0, r6
  402224:	4b2f      	ldr	r3, [pc, #188]	; (4022e4 <put_fat+0x130>)
  402226:	4798      	blx	r3
			if (res != FR_OK) break;
  402228:	2800      	cmp	r0, #0
  40222a:	d153      	bne.n	4022d4 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  40222c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402230:	f3c5 1207 	ubfx	r2, r5, #4, #8
  402234:	44b0      	add	r8, r6
  402236:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  40223a:	e7d0      	b.n	4021de <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  40223c:	4433      	add	r3, r6
  40223e:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  402242:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402246:	2301      	movs	r3, #1
  402248:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40224a:	6a31      	ldr	r1, [r6, #32]
  40224c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402250:	4630      	mov	r0, r6
  402252:	4b24      	ldr	r3, [pc, #144]	; (4022e4 <put_fat+0x130>)
  402254:	4798      	blx	r3
			if (res != FR_OK) break;
  402256:	2800      	cmp	r0, #0
  402258:	d13e      	bne.n	4022d8 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  40225a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40225e:	eb06 0308 	add.w	r3, r6, r8
  402262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402266:	f023 030f 	bic.w	r3, r3, #15
  40226a:	f3c5 2203 	ubfx	r2, r5, #8, #4
  40226e:	431a      	orrs	r2, r3
  402270:	e7e0      	b.n	402234 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  402272:	6a01      	ldr	r1, [r0, #32]
  402274:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402278:	4b1a      	ldr	r3, [pc, #104]	; (4022e4 <put_fat+0x130>)
  40227a:	4798      	blx	r3
			if (res != FR_OK) break;
  40227c:	4607      	mov	r7, r0
  40227e:	2800      	cmp	r0, #0
  402280:	d1ad      	bne.n	4021de <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  402282:	0063      	lsls	r3, r4, #1
  402284:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  402288:	4433      	add	r3, r6
  40228a:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  40228e:	f3c5 2207 	ubfx	r2, r5, #8, #8
  402292:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  402296:	e7a2      	b.n	4021de <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  402298:	6a01      	ldr	r1, [r0, #32]
  40229a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  40229e:	4b11      	ldr	r3, [pc, #68]	; (4022e4 <put_fat+0x130>)
  4022a0:	4798      	blx	r3
			if (res != FR_OK) break;
  4022a2:	4607      	mov	r7, r0
  4022a4:	2800      	cmp	r0, #0
  4022a6:	d19a      	bne.n	4021de <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  4022a8:	00a1      	lsls	r1, r4, #2
  4022aa:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  4022ae:	f101 0330 	add.w	r3, r1, #48	; 0x30
  4022b2:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  4022b4:	78da      	ldrb	r2, [r3, #3]
  4022b6:	0612      	lsls	r2, r2, #24
  4022b8:	4431      	add	r1, r6
  4022ba:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  4022be:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  4022c0:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  4022c4:	f3c2 2107 	ubfx	r1, r2, #8, #8
  4022c8:	7059      	strb	r1, [r3, #1]
  4022ca:	0c11      	lsrs	r1, r2, #16
  4022cc:	7099      	strb	r1, [r3, #2]
  4022ce:	0e12      	lsrs	r2, r2, #24
  4022d0:	70da      	strb	r2, [r3, #3]
			break;
  4022d2:	e784      	b.n	4021de <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4022d4:	4607      	mov	r7, r0
  4022d6:	e782      	b.n	4021de <put_fat+0x2a>
  4022d8:	4607      	mov	r7, r0
  4022da:	e780      	b.n	4021de <put_fat+0x2a>
		res = FR_INT_ERR;
  4022dc:	2702      	movs	r7, #2
}
  4022de:	4638      	mov	r0, r7
  4022e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022e4:	00401f99 	.word	0x00401f99

004022e8 <create_chain>:
{
  4022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022ec:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  4022ee:	4688      	mov	r8, r1
  4022f0:	b941      	cbnz	r1, 402304 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  4022f2:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4022f4:	b186      	cbz	r6, 402318 <create_chain+0x30>
  4022f6:	6983      	ldr	r3, [r0, #24]
  4022f8:	429e      	cmp	r6, r3
  4022fa:	bf28      	it	cs
  4022fc:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  4022fe:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402300:	4f27      	ldr	r7, [pc, #156]	; (4023a0 <create_chain+0xb8>)
  402302:	e017      	b.n	402334 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  402304:	4b26      	ldr	r3, [pc, #152]	; (4023a0 <create_chain+0xb8>)
  402306:	4798      	blx	r3
  402308:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40230a:	2801      	cmp	r0, #1
  40230c:	d93e      	bls.n	40238c <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  40230e:	69aa      	ldr	r2, [r5, #24]
  402310:	4290      	cmp	r0, r2
  402312:	d340      	bcc.n	402396 <create_chain+0xae>
		scl = clst;
  402314:	4646      	mov	r6, r8
  402316:	e7f2      	b.n	4022fe <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402318:	2601      	movs	r6, #1
  40231a:	e7f0      	b.n	4022fe <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  40231c:	4621      	mov	r1, r4
  40231e:	4628      	mov	r0, r5
  402320:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  402322:	4603      	mov	r3, r0
  402324:	b170      	cbz	r0, 402344 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  402326:	f1b0 3fff 	cmp.w	r0, #4294967295
  40232a:	d034      	beq.n	402396 <create_chain+0xae>
  40232c:	2801      	cmp	r0, #1
  40232e:	d032      	beq.n	402396 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  402330:	42b4      	cmp	r4, r6
  402332:	d02f      	beq.n	402394 <create_chain+0xac>
		ncl++;							/* Next cluster */
  402334:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  402336:	69ab      	ldr	r3, [r5, #24]
  402338:	429c      	cmp	r4, r3
  40233a:	d3ef      	bcc.n	40231c <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  40233c:	2e01      	cmp	r6, #1
  40233e:	d927      	bls.n	402390 <create_chain+0xa8>
			ncl = 2;
  402340:	2402      	movs	r4, #2
  402342:	e7eb      	b.n	40231c <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  402344:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  402348:	4621      	mov	r1, r4
  40234a:	4628      	mov	r0, r5
  40234c:	4b15      	ldr	r3, [pc, #84]	; (4023a4 <create_chain+0xbc>)
  40234e:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  402350:	4603      	mov	r3, r0
  402352:	b910      	cbnz	r0, 40235a <create_chain+0x72>
  402354:	f1b8 0f00 	cmp.w	r8, #0
  402358:	d10b      	bne.n	402372 <create_chain+0x8a>
	if (res == FR_OK) {
  40235a:	b98b      	cbnz	r3, 402380 <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  40235c:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  40235e:	692b      	ldr	r3, [r5, #16]
  402360:	f1b3 3fff 	cmp.w	r3, #4294967295
  402364:	d01a      	beq.n	40239c <create_chain+0xb4>
			fs->free_clust--;
  402366:	3b01      	subs	r3, #1
  402368:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  40236a:	2301      	movs	r3, #1
  40236c:	716b      	strb	r3, [r5, #5]
  40236e:	4623      	mov	r3, r4
  402370:	e011      	b.n	402396 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  402372:	4622      	mov	r2, r4
  402374:	4641      	mov	r1, r8
  402376:	4628      	mov	r0, r5
  402378:	4b0a      	ldr	r3, [pc, #40]	; (4023a4 <create_chain+0xbc>)
  40237a:	4798      	blx	r3
  40237c:	4603      	mov	r3, r0
  40237e:	e7ec      	b.n	40235a <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402380:	2b01      	cmp	r3, #1
  402382:	bf0c      	ite	eq
  402384:	f04f 33ff 	moveq.w	r3, #4294967295
  402388:	2301      	movne	r3, #1
  40238a:	e004      	b.n	402396 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40238c:	2301      	movs	r3, #1
  40238e:	e002      	b.n	402396 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  402390:	2300      	movs	r3, #0
  402392:	e000      	b.n	402396 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  402394:	2300      	movs	r3, #0
}
  402396:	4618      	mov	r0, r3
  402398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40239c:	4623      	mov	r3, r4
  40239e:	e7fa      	b.n	402396 <create_chain+0xae>
  4023a0:	00402029 	.word	0x00402029
  4023a4:	004021b5 	.word	0x004021b5

004023a8 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4023a8:	2901      	cmp	r1, #1
  4023aa:	d92e      	bls.n	40240a <remove_chain+0x62>
{
  4023ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4023b0:	4604      	mov	r4, r0
  4023b2:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4023b4:	6983      	ldr	r3, [r0, #24]
  4023b6:	4299      	cmp	r1, r3
  4023b8:	d303      	bcc.n	4023c2 <remove_chain+0x1a>
		res = FR_INT_ERR;
  4023ba:	2202      	movs	r2, #2
}
  4023bc:	4610      	mov	r0, r2
  4023be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  4023c2:	4f16      	ldr	r7, [pc, #88]	; (40241c <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  4023c4:	f04f 0900 	mov.w	r9, #0
  4023c8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 402420 <remove_chain+0x78>
  4023cc:	e003      	b.n	4023d6 <remove_chain+0x2e>
  4023ce:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  4023d0:	69a3      	ldr	r3, [r4, #24]
  4023d2:	42ab      	cmp	r3, r5
  4023d4:	d9f2      	bls.n	4023bc <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  4023d6:	4631      	mov	r1, r6
  4023d8:	4620      	mov	r0, r4
  4023da:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  4023dc:	4605      	mov	r5, r0
  4023de:	b1b8      	cbz	r0, 402410 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4023e0:	2801      	cmp	r0, #1
  4023e2:	d017      	beq.n	402414 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4023e4:	f1b0 3fff 	cmp.w	r0, #4294967295
  4023e8:	d016      	beq.n	402418 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  4023ea:	464a      	mov	r2, r9
  4023ec:	4631      	mov	r1, r6
  4023ee:	4620      	mov	r0, r4
  4023f0:	47c0      	blx	r8
			if (res != FR_OK) break;
  4023f2:	4602      	mov	r2, r0
  4023f4:	2800      	cmp	r0, #0
  4023f6:	d1e1      	bne.n	4023bc <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  4023f8:	6923      	ldr	r3, [r4, #16]
  4023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023fe:	d0e6      	beq.n	4023ce <remove_chain+0x26>
				fs->free_clust++;
  402400:	3301      	adds	r3, #1
  402402:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  402404:	2301      	movs	r3, #1
  402406:	7163      	strb	r3, [r4, #5]
  402408:	e7e1      	b.n	4023ce <remove_chain+0x26>
		res = FR_INT_ERR;
  40240a:	2202      	movs	r2, #2
}
  40240c:	4610      	mov	r0, r2
  40240e:	4770      	bx	lr
  402410:	2200      	movs	r2, #0
  402412:	e7d3      	b.n	4023bc <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402414:	2202      	movs	r2, #2
  402416:	e7d1      	b.n	4023bc <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402418:	2201      	movs	r2, #1
  40241a:	e7cf      	b.n	4023bc <remove_chain+0x14>
  40241c:	00402029 	.word	0x00402029
  402420:	004021b5 	.word	0x004021b5

00402424 <dir_next>:
{
  402424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  402428:	88c4      	ldrh	r4, [r0, #6]
  40242a:	3401      	adds	r4, #1
  40242c:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  40242e:	b914      	cbnz	r4, 402436 <dir_next+0x12>
		return FR_NO_FILE;
  402430:	2004      	movs	r0, #4
  402432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  402436:	6903      	ldr	r3, [r0, #16]
  402438:	b913      	cbnz	r3, 402440 <dir_next+0x1c>
		return FR_NO_FILE;
  40243a:	2004      	movs	r0, #4
  40243c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402440:	460e      	mov	r6, r1
  402442:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  402444:	f014 070f 	ands.w	r7, r4, #15
  402448:	d110      	bne.n	40246c <dir_next+0x48>
		dj->sect++;					/* Next sector */
  40244a:	3301      	adds	r3, #1
  40244c:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  40244e:	68c1      	ldr	r1, [r0, #12]
  402450:	b931      	cbnz	r1, 402460 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  402452:	6803      	ldr	r3, [r0, #0]
  402454:	891b      	ldrh	r3, [r3, #8]
  402456:	42a3      	cmp	r3, r4
  402458:	d808      	bhi.n	40246c <dir_next+0x48>
				return FR_NO_FILE;
  40245a:	2004      	movs	r0, #4
  40245c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  402460:	6800      	ldr	r0, [r0, #0]
  402462:	7883      	ldrb	r3, [r0, #2]
  402464:	3b01      	subs	r3, #1
  402466:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  40246a:	d008      	beq.n	40247e <dir_next+0x5a>
	dj->index = i;
  40246c:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  40246e:	682b      	ldr	r3, [r5, #0]
  402470:	3330      	adds	r3, #48	; 0x30
  402472:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  402476:	616b      	str	r3, [r5, #20]
	return FR_OK;
  402478:	2000      	movs	r0, #0
  40247a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  40247e:	4b32      	ldr	r3, [pc, #200]	; (402548 <dir_next+0x124>)
  402480:	4798      	blx	r3
  402482:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  402484:	2801      	cmp	r0, #1
  402486:	d94d      	bls.n	402524 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402488:	f1b0 3fff 	cmp.w	r0, #4294967295
  40248c:	d04d      	beq.n	40252a <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  40248e:	6828      	ldr	r0, [r5, #0]
  402490:	6983      	ldr	r3, [r0, #24]
  402492:	4598      	cmp	r8, r3
  402494:	d33e      	bcc.n	402514 <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  402496:	b916      	cbnz	r6, 40249e <dir_next+0x7a>
  402498:	2004      	movs	r0, #4
  40249a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  40249e:	68e9      	ldr	r1, [r5, #12]
  4024a0:	4b2a      	ldr	r3, [pc, #168]	; (40254c <dir_next+0x128>)
  4024a2:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  4024a4:	4680      	mov	r8, r0
  4024a6:	b910      	cbnz	r0, 4024ae <dir_next+0x8a>
  4024a8:	2007      	movs	r0, #7
  4024aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4024ae:	2801      	cmp	r0, #1
  4024b0:	d03e      	beq.n	402530 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4024b2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4024b6:	d03e      	beq.n	402536 <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4024b8:	2100      	movs	r1, #0
  4024ba:	6828      	ldr	r0, [r5, #0]
  4024bc:	4b24      	ldr	r3, [pc, #144]	; (402550 <dir_next+0x12c>)
  4024be:	4798      	blx	r3
  4024c0:	2800      	cmp	r0, #0
  4024c2:	d13b      	bne.n	40253c <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  4024c4:	6828      	ldr	r0, [r5, #0]
  4024c6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4024ca:	2100      	movs	r1, #0
  4024cc:	3030      	adds	r0, #48	; 0x30
  4024ce:	4b21      	ldr	r3, [pc, #132]	; (402554 <dir_next+0x130>)
  4024d0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  4024d2:	682e      	ldr	r6, [r5, #0]
  4024d4:	4641      	mov	r1, r8
  4024d6:	4630      	mov	r0, r6
  4024d8:	4b1f      	ldr	r3, [pc, #124]	; (402558 <dir_next+0x134>)
  4024da:	4798      	blx	r3
  4024dc:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  4024de:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  4024e0:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4024e4:	46b2      	mov	sl, r6
  4024e6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 402550 <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  4024ea:	682b      	ldr	r3, [r5, #0]
  4024ec:	7899      	ldrb	r1, [r3, #2]
  4024ee:	b2f2      	uxtb	r2, r6
  4024f0:	4291      	cmp	r1, r2
  4024f2:	d90b      	bls.n	40250c <dir_next+0xe8>
						dj->fs->wflag = 1;
  4024f4:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4024f8:	4651      	mov	r1, sl
  4024fa:	6828      	ldr	r0, [r5, #0]
  4024fc:	47c8      	blx	r9
  4024fe:	3601      	adds	r6, #1
  402500:	b9f8      	cbnz	r0, 402542 <dir_next+0x11e>
						dj->fs->winsect++;
  402502:	682a      	ldr	r2, [r5, #0]
  402504:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402506:	3301      	adds	r3, #1
  402508:	62d3      	str	r3, [r2, #44]	; 0x2c
  40250a:	e7ee      	b.n	4024ea <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  40250c:	4616      	mov	r6, r2
  40250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402510:	1b96      	subs	r6, r2, r6
  402512:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  402514:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  402518:	4641      	mov	r1, r8
  40251a:	6828      	ldr	r0, [r5, #0]
  40251c:	4b0e      	ldr	r3, [pc, #56]	; (402558 <dir_next+0x134>)
  40251e:	4798      	blx	r3
  402520:	6128      	str	r0, [r5, #16]
  402522:	e7a3      	b.n	40246c <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  402524:	2002      	movs	r0, #2
  402526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40252a:	2001      	movs	r0, #1
  40252c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  402530:	2002      	movs	r0, #2
  402532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402536:	2001      	movs	r0, #1
  402538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  40253c:	2001      	movs	r0, #1
  40253e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402542:	2001      	movs	r0, #1
}
  402544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402548:	00402029 	.word	0x00402029
  40254c:	004022e9 	.word	0x004022e9
  402550:	00401f99 	.word	0x00401f99
  402554:	004019e9 	.word	0x004019e9
  402558:	004019f7 	.word	0x004019f7

0040255c <dir_find>:
{
  40255c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402560:	b085      	sub	sp, #20
  402562:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  402564:	2100      	movs	r1, #0
  402566:	4b61      	ldr	r3, [pc, #388]	; (4026ec <dir_find+0x190>)
  402568:	4798      	blx	r3
	if (res != FR_OK) return res;
  40256a:	4680      	mov	r8, r0
  40256c:	bb08      	cbnz	r0, 4025b2 <dir_find+0x56>
  40256e:	f04f 0bff 	mov.w	fp, #255	; 0xff
  402572:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  402574:	4f5e      	ldr	r7, [pc, #376]	; (4026f0 <dir_find+0x194>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402576:	46da      	mov	sl, fp
  402578:	e094      	b.n	4026a4 <dir_find+0x148>
			if (a == AM_LFN) {			/* An LFN entry is found */
  40257a:	2a0f      	cmp	r2, #15
  40257c:	d01d      	beq.n	4025ba <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  40257e:	f1b9 0f00 	cmp.w	r9, #0
  402582:	d104      	bne.n	40258e <dir_find+0x32>
  402584:	4620      	mov	r0, r4
  402586:	4b5b      	ldr	r3, [pc, #364]	; (4026f4 <dir_find+0x198>)
  402588:	4798      	blx	r3
  40258a:	4582      	cmp	sl, r0
  40258c:	d011      	beq.n	4025b2 <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40258e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402592:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  402594:	69ab      	ldr	r3, [r5, #24]
  402596:	7ada      	ldrb	r2, [r3, #11]
  402598:	f012 0f01 	tst.w	r2, #1
  40259c:	d179      	bne.n	402692 <dir_find+0x136>
  40259e:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  4025a2:	f814 1b01 	ldrb.w	r1, [r4], #1
  4025a6:	f813 2b01 	ldrb.w	r2, [r3], #1
  4025aa:	4291      	cmp	r1, r2
  4025ac:	d16b      	bne.n	402686 <dir_find+0x12a>
  4025ae:	4284      	cmp	r4, r0
  4025b0:	d1f7      	bne.n	4025a2 <dir_find+0x46>
}
  4025b2:	4640      	mov	r0, r8
  4025b4:	b005      	add	sp, #20
  4025b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  4025ba:	f8d5 801c 	ldr.w	r8, [r5, #28]
  4025be:	f1b8 0f00 	cmp.w	r8, #0
  4025c2:	d068      	beq.n	402696 <dir_find+0x13a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  4025c4:	f016 0f40 	tst.w	r6, #64	; 0x40
  4025c8:	d00c      	beq.n	4025e4 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  4025ca:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  4025ce:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  4025d2:	88eb      	ldrh	r3, [r5, #6]
  4025d4:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4025d6:	f894 b00d 	ldrb.w	fp, [r4, #13]
  4025da:	45d3      	cmp	fp, sl
  4025dc:	d007      	beq.n	4025ee <dir_find+0x92>
  4025de:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4025e2:	e058      	b.n	402696 <dir_find+0x13a>
  4025e4:	45b1      	cmp	r9, r6
  4025e6:	d0f6      	beq.n	4025d6 <dir_find+0x7a>
  4025e8:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4025ec:	e053      	b.n	402696 <dir_find+0x13a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  4025ee:	f894 a000 	ldrb.w	sl, [r4]
  4025f2:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  4025f6:	f10a 3aff 	add.w	sl, sl, #4294967295
  4025fa:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  4025fe:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  402602:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 402700 <dir_find+0x1a4>
  402606:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  40260a:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40260c:	9603      	str	r6, [sp, #12]
  40260e:	f8cd b004 	str.w	fp, [sp, #4]
  402612:	461e      	mov	r6, r3
  402614:	9502      	str	r5, [sp, #8]
  402616:	e00f      	b.n	402638 <dir_find+0xdc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402618:	4618      	mov	r0, r3
  40261a:	4b37      	ldr	r3, [pc, #220]	; (4026f8 <dir_find+0x19c>)
  40261c:	4798      	blx	r3
  40261e:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  402620:	2efe      	cmp	r6, #254	; 0xfe
  402622:	d85a      	bhi.n	4026da <dir_find+0x17e>
  402624:	1c75      	adds	r5, r6, #1
  402626:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  40262a:	4b33      	ldr	r3, [pc, #204]	; (4026f8 <dir_find+0x19c>)
  40262c:	4798      	blx	r3
  40262e:	4583      	cmp	fp, r0
  402630:	d157      	bne.n	4026e2 <dir_find+0x186>
  402632:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  402634:	45d1      	cmp	r9, sl
  402636:	d013      	beq.n	402660 <dir_find+0x104>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  402638:	f819 2b01 	ldrb.w	r2, [r9], #1
  40263c:	18a3      	adds	r3, r4, r2
  40263e:	7859      	ldrb	r1, [r3, #1]
  402640:	5ca3      	ldrb	r3, [r4, r2]
  402642:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  402646:	2800      	cmp	r0, #0
  402648:	d1e6      	bne.n	402618 <dir_find+0xbc>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40264a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40264e:	4293      	cmp	r3, r2
  402650:	d0f0      	beq.n	402634 <dir_find+0xd8>
  402652:	f8dd b004 	ldr.w	fp, [sp, #4]
  402656:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402658:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40265a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40265e:	e01a      	b.n	402696 <dir_find+0x13a>
  402660:	f8dd b004 	ldr.w	fp, [sp, #4]
  402664:	4632      	mov	r2, r6
  402666:	9e03      	ldr	r6, [sp, #12]
  402668:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  40266a:	7823      	ldrb	r3, [r4, #0]
  40266c:	f013 0f40 	tst.w	r3, #64	; 0x40
  402670:	d004      	beq.n	40267c <dir_find+0x120>
  402672:	b118      	cbz	r0, 40267c <dir_find+0x120>
  402674:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  402678:	2b00      	cmp	r3, #0
  40267a:	d1ed      	bne.n	402658 <dir_find+0xfc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40267c:	3e01      	subs	r6, #1
  40267e:	fa5f f986 	uxtb.w	r9, r6
  402682:	46da      	mov	sl, fp
  402684:	e007      	b.n	402696 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402686:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40268a:	e004      	b.n	402696 <dir_find+0x13a>
			ord = 0xFF;
  40268c:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402690:	e001      	b.n	402696 <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402692:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  402696:	2100      	movs	r1, #0
  402698:	4628      	mov	r0, r5
  40269a:	4b18      	ldr	r3, [pc, #96]	; (4026fc <dir_find+0x1a0>)
  40269c:	4798      	blx	r3
	} while (res == FR_OK);
  40269e:	4680      	mov	r8, r0
  4026a0:	2800      	cmp	r0, #0
  4026a2:	d186      	bne.n	4025b2 <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  4026a4:	6929      	ldr	r1, [r5, #16]
  4026a6:	6828      	ldr	r0, [r5, #0]
  4026a8:	47b8      	blx	r7
		if (res != FR_OK) break;
  4026aa:	4680      	mov	r8, r0
  4026ac:	2800      	cmp	r0, #0
  4026ae:	d180      	bne.n	4025b2 <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  4026b0:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  4026b2:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4026b4:	b176      	cbz	r6, 4026d4 <dir_find+0x178>
		a = dir[DIR_Attr] & AM_MASK;
  4026b6:	7ae3      	ldrb	r3, [r4, #11]
  4026b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  4026bc:	2ee5      	cmp	r6, #229	; 0xe5
  4026be:	d0e5      	beq.n	40268c <dir_find+0x130>
  4026c0:	f013 0f08 	tst.w	r3, #8
  4026c4:	f43f af59 	beq.w	40257a <dir_find+0x1e>
  4026c8:	2a0f      	cmp	r2, #15
  4026ca:	f43f af56 	beq.w	40257a <dir_find+0x1e>
			ord = 0xFF;
  4026ce:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4026d2:	e7e0      	b.n	402696 <dir_find+0x13a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4026d4:	f04f 0804 	mov.w	r8, #4
  4026d8:	e76b      	b.n	4025b2 <dir_find+0x56>
  4026da:	f8dd b004 	ldr.w	fp, [sp, #4]
  4026de:	9d02      	ldr	r5, [sp, #8]
  4026e0:	e7ba      	b.n	402658 <dir_find+0xfc>
  4026e2:	f8dd b004 	ldr.w	fp, [sp, #4]
  4026e6:	9d02      	ldr	r5, [sp, #8]
  4026e8:	e7b6      	b.n	402658 <dir_find+0xfc>
  4026ea:	bf00      	nop
  4026ec:	00402111 	.word	0x00402111
  4026f0:	00401f99 	.word	0x00401f99
  4026f4:	00401a0f 	.word	0x00401a0f
  4026f8:	00403429 	.word	0x00403429
  4026fc:	00402425 	.word	0x00402425
  402700:	00410678 	.word	0x00410678

00402704 <dir_register>:
{
  402704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402708:	b089      	sub	sp, #36	; 0x24
  40270a:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  40270c:	6985      	ldr	r5, [r0, #24]
  40270e:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  402712:	220c      	movs	r2, #12
  402714:	4629      	mov	r1, r5
  402716:	a805      	add	r0, sp, #20
  402718:	4ba8      	ldr	r3, [pc, #672]	; (4029bc <dir_register+0x2b8>)
  40271a:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  40271c:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402720:	f013 0f01 	tst.w	r3, #1
  402724:	d079      	beq.n	40281a <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  402726:	2300      	movs	r3, #0
  402728:	72eb      	strb	r3, [r5, #11]
  40272a:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  40272c:	220b      	movs	r2, #11
  40272e:	a905      	add	r1, sp, #20
  402730:	4628      	mov	r0, r5
  402732:	4ba2      	ldr	r3, [pc, #648]	; (4029bc <dir_register+0x2b8>)
  402734:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  402736:	2701      	movs	r7, #1
  402738:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40273a:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  40273e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 4029dc <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  402742:	f8df a278 	ldr.w	sl, [pc, #632]	; 4029bc <dir_register+0x2b8>
  402746:	e032      	b.n	4027ae <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  402748:	463b      	mov	r3, r7
  40274a:	e030      	b.n	4027ae <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  40274c:	4613      	mov	r3, r2
  40274e:	e002      	b.n	402756 <dir_register+0x52>
  402750:	2300      	movs	r3, #0
  402752:	e000      	b.n	402756 <dir_register+0x52>
  402754:	4613      	mov	r3, r2
  402756:	442b      	add	r3, r5
  402758:	e005      	b.n	402766 <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40275a:	4641      	mov	r1, r8
  40275c:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  402760:	1b59      	subs	r1, r3, r5
  402762:	2907      	cmp	r1, #7
  402764:	d807      	bhi.n	402776 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402766:	2a07      	cmp	r2, #7
  402768:	d8f7      	bhi.n	40275a <dir_register+0x56>
  40276a:	a908      	add	r1, sp, #32
  40276c:	4411      	add	r1, r2
  40276e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  402772:	3201      	adds	r2, #1
  402774:	e7f2      	b.n	40275c <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402776:	4620      	mov	r0, r4
  402778:	47c8      	blx	r9
			if (res != FR_OK) break;
  40277a:	4606      	mov	r6, r0
  40277c:	2800      	cmp	r0, #0
  40277e:	d13e      	bne.n	4027fe <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  402780:	3701      	adds	r7, #1
  402782:	b2bf      	uxth	r7, r7
  402784:	2f64      	cmp	r7, #100	; 0x64
  402786:	d038      	beq.n	4027fa <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  402788:	220b      	movs	r2, #11
  40278a:	a905      	add	r1, sp, #20
  40278c:	4628      	mov	r0, r5
  40278e:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  402790:	2f05      	cmp	r7, #5
  402792:	d9d9      	bls.n	402748 <dir_register+0x44>
  402794:	463b      	mov	r3, r7
  402796:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  402798:	03da      	lsls	r2, r3, #15
  40279a:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  40279e:	f831 2b02 	ldrh.w	r2, [r1], #2
  4027a2:	fa12 f383 	uxtah	r3, r2, r3
  4027a6:	b29b      	uxth	r3, r3
  4027a8:	880a      	ldrh	r2, [r1, #0]
  4027aa:	2a00      	cmp	r2, #0
  4027ac:	d1f4      	bne.n	402798 <dir_register+0x94>
  4027ae:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  4027b2:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  4027b4:	f003 000f 	and.w	r0, r3, #15
  4027b8:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  4027bc:	2939      	cmp	r1, #57	; 0x39
  4027be:	bf88      	it	hi
  4027c0:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  4027c4:	3a01      	subs	r2, #1
  4027c6:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  4027ca:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  4027ce:	2b00      	cmp	r3, #0
  4027d0:	d1f0      	bne.n	4027b4 <dir_register+0xb0>
	ns[i] = '~';
  4027d2:	217e      	movs	r1, #126	; 0x7e
  4027d4:	ab08      	add	r3, sp, #32
  4027d6:	4413      	add	r3, r2
  4027d8:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4027dc:	2a00      	cmp	r2, #0
  4027de:	d0b5      	beq.n	40274c <dir_register+0x48>
  4027e0:	782b      	ldrb	r3, [r5, #0]
  4027e2:	2b20      	cmp	r3, #32
  4027e4:	d0b4      	beq.n	402750 <dir_register+0x4c>
  4027e6:	4629      	mov	r1, r5
  4027e8:	2300      	movs	r3, #0
  4027ea:	3301      	adds	r3, #1
  4027ec:	429a      	cmp	r2, r3
  4027ee:	d0b1      	beq.n	402754 <dir_register+0x50>
  4027f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  4027f4:	2820      	cmp	r0, #32
  4027f6:	d1f8      	bne.n	4027ea <dir_register+0xe6>
  4027f8:	e7ad      	b.n	402756 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4027fa:	2607      	movs	r6, #7
  4027fc:	e004      	b.n	402808 <dir_register+0x104>
  4027fe:	2f64      	cmp	r7, #100	; 0x64
  402800:	f000 80ac 	beq.w	40295c <dir_register+0x258>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  402804:	2804      	cmp	r0, #4
  402806:	d003      	beq.n	402810 <dir_register+0x10c>
}
  402808:	4630      	mov	r0, r6
  40280a:	b009      	add	sp, #36	; 0x24
  40280c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  402810:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402814:	72eb      	strb	r3, [r5, #11]
  402816:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  40281a:	f89d 301f 	ldrb.w	r3, [sp, #31]
  40281e:	f013 0f02 	tst.w	r3, #2
  402822:	d014      	beq.n	40284e <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  402824:	f8bb 3000 	ldrh.w	r3, [fp]
  402828:	b17b      	cbz	r3, 40284a <dir_register+0x146>
  40282a:	2300      	movs	r3, #0
  40282c:	3301      	adds	r3, #1
  40282e:	b29b      	uxth	r3, r3
  402830:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  402834:	2a00      	cmp	r2, #0
  402836:	d1f9      	bne.n	40282c <dir_register+0x128>
		ne = (ne + 25) / 13;
  402838:	3319      	adds	r3, #25
  40283a:	4f61      	ldr	r7, [pc, #388]	; (4029c0 <dir_register+0x2bc>)
  40283c:	fb87 2703 	smull	r2, r7, r7, r3
  402840:	17db      	asrs	r3, r3, #31
  402842:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  402846:	b2bf      	uxth	r7, r7
  402848:	e002      	b.n	402850 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  40284a:	2300      	movs	r3, #0
  40284c:	e7f4      	b.n	402838 <dir_register+0x134>
		ne = 1;
  40284e:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  402850:	2100      	movs	r1, #0
  402852:	4620      	mov	r0, r4
  402854:	4b5b      	ldr	r3, [pc, #364]	; (4029c4 <dir_register+0x2c0>)
  402856:	4798      	blx	r3
	if (res != FR_OK) return res;
  402858:	4606      	mov	r6, r0
  40285a:	2800      	cmp	r0, #0
  40285c:	d1d4      	bne.n	402808 <dir_register+0x104>
  40285e:	f04f 0a00 	mov.w	sl, #0
  402862:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  402864:	f8df 8164 	ldr.w	r8, [pc, #356]	; 4029cc <dir_register+0x2c8>
			n = 0;					/* Not a blank entry. Restart to search */
  402868:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  40286a:	f8df 915c 	ldr.w	r9, [pc, #348]	; 4029c8 <dir_register+0x2c4>
  40286e:	e00a      	b.n	402886 <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  402870:	1c6b      	adds	r3, r5, #1
  402872:	b29b      	uxth	r3, r3
  402874:	429f      	cmp	r7, r3
  402876:	d073      	beq.n	402960 <dir_register+0x25c>
  402878:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  40287a:	2101      	movs	r1, #1
  40287c:	4620      	mov	r0, r4
  40287e:	47c8      	blx	r9
	} while (res == FR_OK);
  402880:	4606      	mov	r6, r0
  402882:	2800      	cmp	r0, #0
  402884:	d1c0      	bne.n	402808 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  402886:	6921      	ldr	r1, [r4, #16]
  402888:	6820      	ldr	r0, [r4, #0]
  40288a:	47c0      	blx	r8
		if (res != FR_OK) break;
  40288c:	4606      	mov	r6, r0
  40288e:	2800      	cmp	r0, #0
  402890:	d1ba      	bne.n	402808 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  402892:	6963      	ldr	r3, [r4, #20]
  402894:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  402896:	2be5      	cmp	r3, #229	; 0xe5
  402898:	d000      	beq.n	40289c <dir_register+0x198>
  40289a:	b923      	cbnz	r3, 4028a6 <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  40289c:	2d00      	cmp	r5, #0
  40289e:	d1e7      	bne.n	402870 <dir_register+0x16c>
  4028a0:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  4028a4:	e7e4      	b.n	402870 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  4028a6:	465d      	mov	r5, fp
  4028a8:	e7e7      	b.n	40287a <dir_register+0x176>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4028aa:	4671      	mov	r1, lr
  4028ac:	e070      	b.n	402990 <dir_register+0x28c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  4028ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4028b2:	4293      	cmp	r3, r2
  4028b4:	d002      	beq.n	4028bc <dir_register+0x1b8>
  4028b6:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  4028ba:	b90b      	cbnz	r3, 4028c0 <dir_register+0x1bc>
  4028bc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  4028c0:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  4028c4:	6823      	ldr	r3, [r4, #0]
  4028c6:	2201      	movs	r2, #1
  4028c8:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  4028ca:	4639      	mov	r1, r7
  4028cc:	4620      	mov	r0, r4
  4028ce:	4b3e      	ldr	r3, [pc, #248]	; (4029c8 <dir_register+0x2c4>)
  4028d0:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  4028d2:	4606      	mov	r6, r0
  4028d4:	2800      	cmp	r0, #0
  4028d6:	d197      	bne.n	402808 <dir_register+0x104>
  4028d8:	3d01      	subs	r5, #1
  4028da:	b2ad      	uxth	r5, r5
  4028dc:	b315      	cbz	r5, 402924 <dir_register+0x220>
				res = move_window(dj->fs, dj->sect);
  4028de:	6921      	ldr	r1, [r4, #16]
  4028e0:	6820      	ldr	r0, [r4, #0]
  4028e2:	4b3a      	ldr	r3, [pc, #232]	; (4029cc <dir_register+0x2c8>)
  4028e4:	4798      	blx	r3
				if (res != FR_OK) break;
  4028e6:	4606      	mov	r6, r0
  4028e8:	2800      	cmp	r0, #0
  4028ea:	d18d      	bne.n	402808 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  4028ec:	f8d4 901c 	ldr.w	r9, [r4, #28]
  4028f0:	6960      	ldr	r0, [r4, #20]
  4028f2:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  4028f6:	f89d 3000 	ldrb.w	r3, [sp]
  4028fa:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4028fc:	230f      	movs	r3, #15
  4028fe:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  402900:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  402902:	7687      	strb	r7, [r0, #26]
  402904:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  402906:	f10b 31ff 	add.w	r1, fp, #4294967295
  40290a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  40290e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  402912:	4a2f      	ldr	r2, [pc, #188]	; (4029d0 <dir_register+0x2cc>)
  402914:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  402918:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40291a:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40291e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  402922:	e038      	b.n	402996 <dir_register+0x292>
		res = move_window(dj->fs, dj->sect);
  402924:	6921      	ldr	r1, [r4, #16]
  402926:	6820      	ldr	r0, [r4, #0]
  402928:	4b28      	ldr	r3, [pc, #160]	; (4029cc <dir_register+0x2c8>)
  40292a:	4798      	blx	r3
		if (res == FR_OK) {
  40292c:	4606      	mov	r6, r0
  40292e:	2800      	cmp	r0, #0
  402930:	f47f af6a 	bne.w	402808 <dir_register+0x104>
			dir = dj->dir;
  402934:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  402936:	2220      	movs	r2, #32
  402938:	2100      	movs	r1, #0
  40293a:	4628      	mov	r0, r5
  40293c:	4b25      	ldr	r3, [pc, #148]	; (4029d4 <dir_register+0x2d0>)
  40293e:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  402940:	220b      	movs	r2, #11
  402942:	69a1      	ldr	r1, [r4, #24]
  402944:	4628      	mov	r0, r5
  402946:	4b1d      	ldr	r3, [pc, #116]	; (4029bc <dir_register+0x2b8>)
  402948:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  40294a:	69a3      	ldr	r3, [r4, #24]
  40294c:	7adb      	ldrb	r3, [r3, #11]
  40294e:	f003 0318 	and.w	r3, r3, #24
  402952:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  402954:	6823      	ldr	r3, [r4, #0]
  402956:	2201      	movs	r2, #1
  402958:	711a      	strb	r2, [r3, #4]
  40295a:	e755      	b.n	402808 <dir_register+0x104>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40295c:	2607      	movs	r6, #7
  40295e:	e753      	b.n	402808 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  402960:	2b01      	cmp	r3, #1
  402962:	d9df      	bls.n	402924 <dir_register+0x220>
		res = dir_sdi(dj, is);
  402964:	4651      	mov	r1, sl
  402966:	4620      	mov	r0, r4
  402968:	4b16      	ldr	r3, [pc, #88]	; (4029c4 <dir_register+0x2c0>)
  40296a:	4798      	blx	r3
		if (res == FR_OK) {
  40296c:	4606      	mov	r6, r0
  40296e:	2800      	cmp	r0, #0
  402970:	f47f af4a 	bne.w	402808 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  402974:	69a0      	ldr	r0, [r4, #24]
  402976:	4b18      	ldr	r3, [pc, #96]	; (4029d8 <dir_register+0x2d4>)
  402978:	4798      	blx	r3
  40297a:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  40297c:	2700      	movs	r7, #0
	s = wc = 0;
  40297e:	9701      	str	r7, [sp, #4]
  402980:	e7ad      	b.n	4028de <dir_register+0x1da>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402982:	f892 e000 	ldrb.w	lr, [r2]
  402986:	f800 a00e 	strb.w	sl, [r0, lr]
  40298a:	4486      	add	lr, r0
  40298c:	f88e a001 	strb.w	sl, [lr, #1]
  402990:	3201      	adds	r2, #1
	} while (++s < 13);
  402992:	4542      	cmp	r2, r8
  402994:	d08b      	beq.n	4028ae <dir_register+0x1aa>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402996:	42b3      	cmp	r3, r6
  402998:	d0f3      	beq.n	402982 <dir_register+0x27e>
  40299a:	f101 0e01 	add.w	lr, r1, #1
  40299e:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4029a2:	7811      	ldrb	r1, [r2, #0]
  4029a4:	5443      	strb	r3, [r0, r1]
  4029a6:	4401      	add	r1, r0
  4029a8:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  4029ac:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4029b0:	2b00      	cmp	r3, #0
  4029b2:	f47f af7a 	bne.w	4028aa <dir_register+0x1a6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4029b6:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4029b8:	4633      	mov	r3, r6
  4029ba:	e7e9      	b.n	402990 <dir_register+0x28c>
  4029bc:	004019d5 	.word	0x004019d5
  4029c0:	4ec4ec4f 	.word	0x4ec4ec4f
  4029c4:	00402111 	.word	0x00402111
  4029c8:	00402425 	.word	0x00402425
  4029cc:	00401f99 	.word	0x00401f99
  4029d0:	00410678 	.word	0x00410678
  4029d4:	004019e9 	.word	0x004019e9
  4029d8:	00401a0f 	.word	0x00401a0f
  4029dc:	0040255d 	.word	0x0040255d

004029e0 <dir_read>:
{
  4029e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029e4:	4604      	mov	r4, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
  4029e6:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4029ea:	464e      	mov	r6, r9
	res = FR_NO_FILE;
  4029ec:	2504      	movs	r5, #4
		res = move_window(dj->fs, dj->sect);
  4029ee:	4f3f      	ldr	r7, [pc, #252]	; (402aec <dir_read+0x10c>)
			if (uc != 0xFFFF) return 0;		/* Check filler */
  4029f0:	f64f 78ff 	movw	r8, #65535	; 0xffff
	while (dj->sect) {
  4029f4:	e057      	b.n	402aa6 <dir_read+0xc6>
			if (a == AM_LFN) {			/* An LFN entry is found */
  4029f6:	290f      	cmp	r1, #15
  4029f8:	d145      	bne.n	402a86 <dir_read+0xa6>
				if (c & LLE) {			/* Is it start of LFN sequence? */
  4029fa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4029fe:	d00b      	beq.n	402a18 <dir_read+0x38>
					sum = dir[LDIR_Chksum];
  402a00:	f890 900d 	ldrb.w	r9, [r0, #13]
					c &= ~LLE; ord = c;
  402a04:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
					dj->lfn_idx = dj->index;
  402a08:	88e2      	ldrh	r2, [r4, #6]
  402a0a:	8422      	strh	r2, [r4, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402a0c:	f890 e00d 	ldrb.w	lr, [r0, #13]
  402a10:	45ce      	cmp	lr, r9
  402a12:	d005      	beq.n	402a20 <dir_read+0x40>
  402a14:	26ff      	movs	r6, #255	; 0xff
  402a16:	e040      	b.n	402a9a <dir_read+0xba>
  402a18:	429e      	cmp	r6, r3
  402a1a:	d0f7      	beq.n	402a0c <dir_read+0x2c>
  402a1c:	26ff      	movs	r6, #255	; 0xff
  402a1e:	e03c      	b.n	402a9a <dir_read+0xba>
  402a20:	f8d4 a01c 	ldr.w	sl, [r4, #28]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
  402a24:	7806      	ldrb	r6, [r0, #0]
  402a26:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  402a2a:	3e01      	subs	r6, #1
  402a2c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
  402a30:	eb06 0682 	add.w	r6, r6, r2, lsl #2
  402a34:	492e      	ldr	r1, [pc, #184]	; (402af0 <dir_read+0x110>)
  402a36:	f101 090d 	add.w	r9, r1, #13
	s = 0; wc = 1;
  402a3a:	f04f 0c01 	mov.w	ip, #1
  402a3e:	e003      	b.n	402a48 <dir_read+0x68>
			if (uc != 0xFFFF) return 0;		/* Check filler */
  402a40:	4542      	cmp	r2, r8
  402a42:	d149      	bne.n	402ad8 <dir_read+0xf8>
	} while (++s < 13);						/* Read all character in the entry */
  402a44:	4589      	cmp	r9, r1
  402a46:	d011      	beq.n	402a6c <dir_read+0x8c>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
  402a48:	f811 5b01 	ldrb.w	r5, [r1], #1
  402a4c:	1942      	adds	r2, r0, r5
  402a4e:	f892 b001 	ldrb.w	fp, [r2, #1]
  402a52:	5d42      	ldrb	r2, [r0, r5]
  402a54:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
  402a58:	f1bc 0f00 	cmp.w	ip, #0
  402a5c:	d0f0      	beq.n	402a40 <dir_read+0x60>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
  402a5e:	2efe      	cmp	r6, #254	; 0xfe
  402a60:	d83a      	bhi.n	402ad8 <dir_read+0xf8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  402a62:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
  402a66:	4694      	mov	ip, r2
  402a68:	3601      	adds	r6, #1
  402a6a:	e7eb      	b.n	402a44 <dir_read+0x64>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
  402a6c:	7802      	ldrb	r2, [r0, #0]
  402a6e:	f012 0f40 	tst.w	r2, #64	; 0x40
  402a72:	d004      	beq.n	402a7e <dir_read+0x9e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
  402a74:	2efe      	cmp	r6, #254	; 0xfe
  402a76:	d82f      	bhi.n	402ad8 <dir_read+0xf8>
		lfnbuf[i] = 0;
  402a78:	2200      	movs	r2, #0
  402a7a:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402a7e:	3b01      	subs	r3, #1
  402a80:	b2de      	uxtb	r6, r3
  402a82:	46f1      	mov	r9, lr
  402a84:	e009      	b.n	402a9a <dir_read+0xba>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
  402a86:	b91e      	cbnz	r6, 402a90 <dir_read+0xb0>
  402a88:	4b1a      	ldr	r3, [pc, #104]	; (402af4 <dir_read+0x114>)
  402a8a:	4798      	blx	r3
  402a8c:	4581      	cmp	r9, r0
  402a8e:	d029      	beq.n	402ae4 <dir_read+0x104>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
  402a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402a94:	8423      	strh	r3, [r4, #32]
  402a96:	e025      	b.n	402ae4 <dir_read+0x104>
			ord = 0xFF;
  402a98:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dj, 0);				/* Next entry */
  402a9a:	2100      	movs	r1, #0
  402a9c:	4620      	mov	r0, r4
  402a9e:	4b16      	ldr	r3, [pc, #88]	; (402af8 <dir_read+0x118>)
  402aa0:	4798      	blx	r3
		if (res != FR_OK) break;
  402aa2:	4605      	mov	r5, r0
  402aa4:	b9e0      	cbnz	r0, 402ae0 <dir_read+0x100>
	while (dj->sect) {
  402aa6:	6921      	ldr	r1, [r4, #16]
  402aa8:	b1a1      	cbz	r1, 402ad4 <dir_read+0xf4>
		res = move_window(dj->fs, dj->sect);
  402aaa:	6820      	ldr	r0, [r4, #0]
  402aac:	47b8      	blx	r7
		if (res != FR_OK) break;
  402aae:	4605      	mov	r5, r0
  402ab0:	b9b0      	cbnz	r0, 402ae0 <dir_read+0x100>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  402ab2:	6960      	ldr	r0, [r4, #20]
		c = dir[DIR_Name];
  402ab4:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402ab6:	b193      	cbz	r3, 402ade <dir_read+0xfe>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402ab8:	2be5      	cmp	r3, #229	; 0xe5
  402aba:	d0ed      	beq.n	402a98 <dir_read+0xb8>
  402abc:	2b2e      	cmp	r3, #46	; 0x2e
  402abe:	d0eb      	beq.n	402a98 <dir_read+0xb8>
		a = dir[DIR_Attr] & AM_MASK;
  402ac0:	7ac2      	ldrb	r2, [r0, #11]
  402ac2:	f002 013f 	and.w	r1, r2, #63	; 0x3f
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402ac6:	f012 0f08 	tst.w	r2, #8
  402aca:	d094      	beq.n	4029f6 <dir_read+0x16>
  402acc:	290f      	cmp	r1, #15
  402ace:	d092      	beq.n	4029f6 <dir_read+0x16>
			ord = 0xFF;
  402ad0:	26ff      	movs	r6, #255	; 0xff
  402ad2:	e7e2      	b.n	402a9a <dir_read+0xba>
	if (res != FR_OK) dj->sect = 0;
  402ad4:	b135      	cbz	r5, 402ae4 <dir_read+0x104>
  402ad6:	e003      	b.n	402ae0 <dir_read+0x100>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402ad8:	46f1      	mov	r9, lr
  402ada:	26ff      	movs	r6, #255	; 0xff
  402adc:	e7dd      	b.n	402a9a <dir_read+0xba>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402ade:	2504      	movs	r5, #4
	if (res != FR_OK) dj->sect = 0;
  402ae0:	2300      	movs	r3, #0
  402ae2:	6123      	str	r3, [r4, #16]
}
  402ae4:	4628      	mov	r0, r5
  402ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402aea:	bf00      	nop
  402aec:	00401f99 	.word	0x00401f99
  402af0:	00410678 	.word	0x00410678
  402af4:	00401a0f 	.word	0x00401a0f
  402af8:	00402425 	.word	0x00402425

00402afc <sync>:
{
  402afc:	b570      	push	{r4, r5, r6, lr}
  402afe:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  402b00:	2100      	movs	r1, #0
  402b02:	4b2d      	ldr	r3, [pc, #180]	; (402bb8 <sync+0xbc>)
  402b04:	4798      	blx	r3
	if (res == FR_OK) {
  402b06:	4603      	mov	r3, r0
  402b08:	b950      	cbnz	r0, 402b20 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  402b0a:	7823      	ldrb	r3, [r4, #0]
  402b0c:	2b03      	cmp	r3, #3
  402b0e:	d009      	beq.n	402b24 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  402b10:	2200      	movs	r2, #0
  402b12:	4611      	mov	r1, r2
  402b14:	7860      	ldrb	r0, [r4, #1]
  402b16:	4b29      	ldr	r3, [pc, #164]	; (402bbc <sync+0xc0>)
  402b18:	4798      	blx	r3
	res = move_window(fs, 0);
  402b1a:	1c03      	adds	r3, r0, #0
  402b1c:	bf18      	it	ne
  402b1e:	2301      	movne	r3, #1
}
  402b20:	4618      	mov	r0, r3
  402b22:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  402b24:	7963      	ldrb	r3, [r4, #5]
  402b26:	2b00      	cmp	r3, #0
  402b28:	d0f2      	beq.n	402b10 <sync+0x14>
			fs->winsect = 0;
  402b2a:	2600      	movs	r6, #0
  402b2c:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  402b2e:	f104 0530 	add.w	r5, r4, #48	; 0x30
  402b32:	f44f 7200 	mov.w	r2, #512	; 0x200
  402b36:	4631      	mov	r1, r6
  402b38:	4628      	mov	r0, r5
  402b3a:	4b21      	ldr	r3, [pc, #132]	; (402bc0 <sync+0xc4>)
  402b3c:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  402b3e:	2355      	movs	r3, #85	; 0x55
  402b40:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  402b44:	23aa      	movs	r3, #170	; 0xaa
  402b46:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  402b4a:	2352      	movs	r3, #82	; 0x52
  402b4c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  402b50:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  402b54:	2361      	movs	r3, #97	; 0x61
  402b56:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  402b5a:	2241      	movs	r2, #65	; 0x41
  402b5c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  402b60:	2172      	movs	r1, #114	; 0x72
  402b62:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  402b66:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  402b6a:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  402b6e:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  402b72:	6923      	ldr	r3, [r4, #16]
  402b74:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  402b78:	f3c3 2207 	ubfx	r2, r3, #8, #8
  402b7c:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  402b80:	0c1a      	lsrs	r2, r3, #16
  402b82:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  402b86:	0e1b      	lsrs	r3, r3, #24
  402b88:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  402b8c:	68e3      	ldr	r3, [r4, #12]
  402b8e:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  402b92:	f3c3 2207 	ubfx	r2, r3, #8, #8
  402b96:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  402b9a:	0c1a      	lsrs	r2, r3, #16
  402b9c:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  402ba0:	0e1b      	lsrs	r3, r3, #24
  402ba2:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  402ba6:	2301      	movs	r3, #1
  402ba8:	6962      	ldr	r2, [r4, #20]
  402baa:	4629      	mov	r1, r5
  402bac:	7860      	ldrb	r0, [r4, #1]
  402bae:	4d05      	ldr	r5, [pc, #20]	; (402bc4 <sync+0xc8>)
  402bb0:	47a8      	blx	r5
			fs->fsi_flag = 0;
  402bb2:	7166      	strb	r6, [r4, #5]
  402bb4:	e7ac      	b.n	402b10 <sync+0x14>
  402bb6:	bf00      	nop
  402bb8:	00401f99 	.word	0x00401f99
  402bbc:	0040190d 	.word	0x0040190d
  402bc0:	004019e9 	.word	0x004019e9
  402bc4:	0040189d 	.word	0x0040189d

00402bc8 <follow_path>:
{
  402bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402bcc:	b083      	sub	sp, #12
  402bce:	4682      	mov	sl, r0
  402bd0:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  402bd2:	780b      	ldrb	r3, [r1, #0]
  402bd4:	2b2f      	cmp	r3, #47	; 0x2f
  402bd6:	d00a      	beq.n	402bee <follow_path+0x26>
  402bd8:	2b5c      	cmp	r3, #92	; 0x5c
  402bda:	d008      	beq.n	402bee <follow_path+0x26>
	dj->sclust = 0;						/* Start from the root dir */
  402bdc:	2300      	movs	r3, #0
  402bde:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  402be2:	782b      	ldrb	r3, [r5, #0]
  402be4:	2b1f      	cmp	r3, #31
  402be6:	d904      	bls.n	402bf2 <follow_path+0x2a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402be8:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 402ee8 <follow_path+0x320>
  402bec:	e130      	b.n	402e50 <follow_path+0x288>
		path++;
  402bee:	3501      	adds	r5, #1
  402bf0:	e7f4      	b.n	402bdc <follow_path+0x14>
		res = dir_sdi(dj, 0);
  402bf2:	2100      	movs	r1, #0
  402bf4:	4650      	mov	r0, sl
  402bf6:	4bb6      	ldr	r3, [pc, #728]	; (402ed0 <follow_path+0x308>)
  402bf8:	4798      	blx	r3
  402bfa:	4603      	mov	r3, r0
		dj->dir = 0;
  402bfc:	2200      	movs	r2, #0
  402bfe:	f8ca 2014 	str.w	r2, [sl, #20]
  402c02:	e15a      	b.n	402eba <follow_path+0x2f2>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  402c04:	2b00      	cmp	r3, #0
  402c06:	f040 8152 	bne.w	402eae <follow_path+0x2e6>
		lfn[di++] = w;					/* Store the Unicode char */
  402c0a:	f827 2f02 	strh.w	r2, [r7, #2]!
		w = p[si++];					/* Get a character */
  402c0e:	1c63      	adds	r3, r4, #1
  402c10:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  402c14:	282f      	cmp	r0, #47	; 0x2f
  402c16:	bf18      	it	ne
  402c18:	281f      	cmpne	r0, #31
  402c1a:	d91b      	bls.n	402c54 <follow_path+0x8c>
  402c1c:	285c      	cmp	r0, #92	; 0x5c
  402c1e:	d019      	beq.n	402c54 <follow_path+0x8c>
		if (di >= _MAX_LFN)				/* Reject too long name */
  402c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402c24:	f000 8143 	beq.w	402eae <follow_path+0x2e6>
		w = p[si++];					/* Get a character */
  402c28:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402c2a:	4641      	mov	r1, r8
  402c2c:	47d8      	blx	fp
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  402c2e:	4602      	mov	r2, r0
  402c30:	2800      	cmp	r0, #0
  402c32:	f000 813c 	beq.w	402eae <follow_path+0x2e6>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  402c36:	287f      	cmp	r0, #127	; 0x7f
  402c38:	d8e7      	bhi.n	402c0a <follow_path+0x42>
	while (*str && *str != chr) str++;
  402c3a:	2822      	cmp	r0, #34	; 0x22
  402c3c:	f000 813c 	beq.w	402eb8 <follow_path+0x2f0>
  402c40:	232a      	movs	r3, #42	; 0x2a
  402c42:	49a4      	ldr	r1, [pc, #656]	; (402ed4 <follow_path+0x30c>)
  402c44:	b298      	uxth	r0, r3
  402c46:	4290      	cmp	r0, r2
  402c48:	d0dc      	beq.n	402c04 <follow_path+0x3c>
  402c4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402c4e:	2b00      	cmp	r3, #0
  402c50:	d1f8      	bne.n	402c44 <follow_path+0x7c>
  402c52:	e7da      	b.n	402c0a <follow_path+0x42>
	*path = &p[si];						/* Return pointer to the next segment */
  402c54:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402c56:	2820      	cmp	r0, #32
  402c58:	bf34      	ite	cc
  402c5a:	2604      	movcc	r6, #4
  402c5c:	2600      	movcs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  402c5e:	2c00      	cmp	r4, #0
  402c60:	f000 812a 	beq.w	402eb8 <follow_path+0x2f0>
		w = lfn[di-1];
  402c64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  402c68:	4423      	add	r3, r4
  402c6a:	eb09 0243 	add.w	r2, r9, r3, lsl #1
  402c6e:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  402c72:	2b20      	cmp	r3, #32
  402c74:	d001      	beq.n	402c7a <follow_path+0xb2>
  402c76:	2b2e      	cmp	r3, #46	; 0x2e
  402c78:	d108      	bne.n	402c8c <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
  402c7a:	3c01      	subs	r4, #1
  402c7c:	f000 811c 	beq.w	402eb8 <follow_path+0x2f0>
		w = lfn[di-1];
  402c80:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  402c84:	2b20      	cmp	r3, #32
  402c86:	d0f8      	beq.n	402c7a <follow_path+0xb2>
  402c88:	2b2e      	cmp	r3, #46	; 0x2e
  402c8a:	d0f6      	beq.n	402c7a <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
  402c8c:	0067      	lsls	r7, r4, #1
  402c8e:	2300      	movs	r3, #0
  402c90:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  402c94:	220b      	movs	r2, #11
  402c96:	2120      	movs	r1, #32
  402c98:	f8da 0018 	ldr.w	r0, [sl, #24]
  402c9c:	4b8e      	ldr	r3, [pc, #568]	; (402ed8 <follow_path+0x310>)
  402c9e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  402ca0:	f8b9 3000 	ldrh.w	r3, [r9]
  402ca4:	2b20      	cmp	r3, #32
  402ca6:	d001      	beq.n	402cac <follow_path+0xe4>
  402ca8:	2b2e      	cmp	r3, #46	; 0x2e
  402caa:	d11f      	bne.n	402cec <follow_path+0x124>
  402cac:	4649      	mov	r1, r9
  402cae:	2300      	movs	r3, #0
  402cb0:	3301      	adds	r3, #1
  402cb2:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  402cb6:	2a20      	cmp	r2, #32
  402cb8:	d0fa      	beq.n	402cb0 <follow_path+0xe8>
  402cba:	2a2e      	cmp	r2, #46	; 0x2e
  402cbc:	d0f8      	beq.n	402cb0 <follow_path+0xe8>
	if (si) cf |= NS_LOSS | NS_LFN;
  402cbe:	b10b      	cbz	r3, 402cc4 <follow_path+0xfc>
  402cc0:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  402cc4:	3f02      	subs	r7, #2
  402cc6:	eb09 0207 	add.w	r2, r9, r7
  402cca:	f839 1007 	ldrh.w	r1, [r9, r7]
  402cce:	292e      	cmp	r1, #46	; 0x2e
  402cd0:	d005      	beq.n	402cde <follow_path+0x116>
  402cd2:	3c01      	subs	r4, #1
  402cd4:	d003      	beq.n	402cde <follow_path+0x116>
  402cd6:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  402cda:	292e      	cmp	r1, #46	; 0x2e
  402cdc:	d1f9      	bne.n	402cd2 <follow_path+0x10a>
		dj->fn[i++] = (BYTE)w;
  402cde:	2208      	movs	r2, #8
  402ce0:	9200      	str	r2, [sp, #0]
  402ce2:	f04f 0800 	mov.w	r8, #0
  402ce6:	f8cd 8004 	str.w	r8, [sp, #4]
  402cea:	e004      	b.n	402cf6 <follow_path+0x12e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  402cec:	2300      	movs	r3, #0
  402cee:	e7e9      	b.n	402cc4 <follow_path+0xfc>
			cf |= NS_LOSS | NS_LFN; continue;
  402cf0:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  402cf4:	463b      	mov	r3, r7
  402cf6:	1c5f      	adds	r7, r3, #1
  402cf8:	f839 0013 	ldrh.w	r0, [r9, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  402cfc:	2800      	cmp	r0, #0
  402cfe:	d066      	beq.n	402dce <follow_path+0x206>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  402d00:	2820      	cmp	r0, #32
  402d02:	d0f5      	beq.n	402cf0 <follow_path+0x128>
  402d04:	282e      	cmp	r0, #46	; 0x2e
  402d06:	d101      	bne.n	402d0c <follow_path+0x144>
  402d08:	42a7      	cmp	r7, r4
  402d0a:	d1f1      	bne.n	402cf0 <follow_path+0x128>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  402d0c:	9b00      	ldr	r3, [sp, #0]
  402d0e:	4598      	cmp	r8, r3
  402d10:	d218      	bcs.n	402d44 <follow_path+0x17c>
  402d12:	42a7      	cmp	r7, r4
  402d14:	d016      	beq.n	402d44 <follow_path+0x17c>
		if (w >= 0x80) {				/* Non ASCII char */
  402d16:	287f      	cmp	r0, #127	; 0x7f
  402d18:	d831      	bhi.n	402d7e <follow_path+0x1b6>
	while (*str && *str != chr) str++;
  402d1a:	282b      	cmp	r0, #43	; 0x2b
  402d1c:	d03d      	beq.n	402d9a <follow_path+0x1d2>
  402d1e:	232c      	movs	r3, #44	; 0x2c
  402d20:	496e      	ldr	r1, [pc, #440]	; (402edc <follow_path+0x314>)
  402d22:	b29a      	uxth	r2, r3
  402d24:	4282      	cmp	r2, r0
  402d26:	d043      	beq.n	402db0 <follow_path+0x1e8>
  402d28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402d2c:	2b00      	cmp	r3, #0
  402d2e:	d1f8      	bne.n	402d22 <follow_path+0x15a>
				if (IsUpper(w)) {		/* ASCII large capital */
  402d30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  402d34:	b29b      	uxth	r3, r3
  402d36:	2b19      	cmp	r3, #25
  402d38:	d83d      	bhi.n	402db6 <follow_path+0x1ee>
					b |= 2;
  402d3a:	9b01      	ldr	r3, [sp, #4]
  402d3c:	f043 0302 	orr.w	r3, r3, #2
  402d40:	9301      	str	r3, [sp, #4]
  402d42:	e02d      	b.n	402da0 <follow_path+0x1d8>
			if (ni == 11) {				/* Long extension */
  402d44:	9b00      	ldr	r3, [sp, #0]
  402d46:	2b0b      	cmp	r3, #11
  402d48:	d00f      	beq.n	402d6a <follow_path+0x1a2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  402d4a:	42a7      	cmp	r7, r4
  402d4c:	bf18      	it	ne
  402d4e:	f046 0603 	orrne.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  402d52:	42a7      	cmp	r7, r4
  402d54:	d83b      	bhi.n	402dce <follow_path+0x206>
			b <<= 2; continue;
  402d56:	9b01      	ldr	r3, [sp, #4]
  402d58:	009b      	lsls	r3, r3, #2
  402d5a:	b2db      	uxtb	r3, r3
  402d5c:	9301      	str	r3, [sp, #4]
  402d5e:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  402d60:	220b      	movs	r2, #11
  402d62:	9200      	str	r2, [sp, #0]
  402d64:	f04f 0808 	mov.w	r8, #8
  402d68:	e7c5      	b.n	402cf6 <follow_path+0x12e>
				cf |= NS_LOSS | NS_LFN; break;
  402d6a:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402d6e:	f8da 3018 	ldr.w	r3, [sl, #24]
  402d72:	781a      	ldrb	r2, [r3, #0]
  402d74:	2ae5      	cmp	r2, #229	; 0xe5
  402d76:	d132      	bne.n	402dde <follow_path+0x216>
  402d78:	2205      	movs	r2, #5
  402d7a:	701a      	strb	r2, [r3, #0]
  402d7c:	e02c      	b.n	402dd8 <follow_path+0x210>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  402d7e:	2100      	movs	r1, #0
  402d80:	47d8      	blx	fp
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  402d82:	4603      	mov	r3, r0
  402d84:	2800      	cmp	r0, #0
  402d86:	f000 809f 	beq.w	402ec8 <follow_path+0x300>
  402d8a:	4a55      	ldr	r2, [pc, #340]	; (402ee0 <follow_path+0x318>)
  402d8c:	4413      	add	r3, r2
  402d8e:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  402d92:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402d96:	2800      	cmp	r0, #0
  402d98:	d1bf      	bne.n	402d1a <follow_path+0x152>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  402d9a:	f046 0603 	orr.w	r6, r6, #3
  402d9e:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  402da0:	f8da 3018 	ldr.w	r3, [sl, #24]
  402da4:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  402da8:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  402daa:	f108 0801 	add.w	r8, r8, #1
  402dae:	e7a2      	b.n	402cf6 <follow_path+0x12e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402db0:	2b00      	cmp	r3, #0
  402db2:	d1f2      	bne.n	402d9a <follow_path+0x1d2>
  402db4:	e7bc      	b.n	402d30 <follow_path+0x168>
					if (IsLower(w)) {	/* ASCII small capital */
  402db6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  402dba:	b29b      	uxth	r3, r3
  402dbc:	2b19      	cmp	r3, #25
  402dbe:	d8ef      	bhi.n	402da0 <follow_path+0x1d8>
						b |= 1; w -= 0x20;
  402dc0:	9b01      	ldr	r3, [sp, #4]
  402dc2:	f043 0301 	orr.w	r3, r3, #1
  402dc6:	9301      	str	r3, [sp, #4]
  402dc8:	3820      	subs	r0, #32
  402dca:	b280      	uxth	r0, r0
  402dcc:	e7e8      	b.n	402da0 <follow_path+0x1d8>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402dce:	f8da 3018 	ldr.w	r3, [sl, #24]
  402dd2:	781a      	ldrb	r2, [r3, #0]
  402dd4:	2ae5      	cmp	r2, #229	; 0xe5
  402dd6:	d0cf      	beq.n	402d78 <follow_path+0x1b0>
	if (ni == 8) b <<= 2;
  402dd8:	9b00      	ldr	r3, [sp, #0]
  402dda:	2b08      	cmp	r3, #8
  402ddc:	d052      	beq.n	402e84 <follow_path+0x2bc>
  402dde:	9a01      	ldr	r2, [sp, #4]
  402de0:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  402de4:	2b0c      	cmp	r3, #12
  402de6:	d054      	beq.n	402e92 <follow_path+0x2ca>
  402de8:	f002 0203 	and.w	r2, r2, #3
  402dec:	2a03      	cmp	r2, #3
  402dee:	d050      	beq.n	402e92 <follow_path+0x2ca>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  402df0:	f016 0f02 	tst.w	r6, #2
  402df4:	d10b      	bne.n	402e0e <follow_path+0x246>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  402df6:	9a01      	ldr	r2, [sp, #4]
  402df8:	f002 0903 	and.w	r9, r2, #3
  402dfc:	f1b9 0f01 	cmp.w	r9, #1
  402e00:	bf08      	it	eq
  402e02:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  402e06:	2b04      	cmp	r3, #4
  402e08:	bf08      	it	eq
  402e0a:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  402e0e:	f8da 3018 	ldr.w	r3, [sl, #24]
  402e12:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  402e14:	4650      	mov	r0, sl
  402e16:	4b33      	ldr	r3, [pc, #204]	; (402ee4 <follow_path+0x31c>)
  402e18:	4798      	blx	r3
			ns = *(dj->fn+NS);
  402e1a:	f8da 3018 	ldr.w	r3, [sl, #24]
  402e1e:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  402e20:	4603      	mov	r3, r0
  402e22:	2800      	cmp	r0, #0
  402e24:	d138      	bne.n	402e98 <follow_path+0x2d0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  402e26:	f012 0f04 	tst.w	r2, #4
  402e2a:	d146      	bne.n	402eba <follow_path+0x2f2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  402e2c:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  402e30:	7ada      	ldrb	r2, [r3, #11]
  402e32:	f012 0f10 	tst.w	r2, #16
  402e36:	d038      	beq.n	402eaa <follow_path+0x2e2>
			dj->sclust = LD_CLUST(dir);
  402e38:	7d59      	ldrb	r1, [r3, #21]
  402e3a:	7d1a      	ldrb	r2, [r3, #20]
  402e3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  402e40:	7ed9      	ldrb	r1, [r3, #27]
  402e42:	7e9b      	ldrb	r3, [r3, #26]
  402e44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  402e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402e4c:	f8ca 3008 	str.w	r3, [sl, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  402e50:	782b      	ldrb	r3, [r5, #0]
  402e52:	2b2f      	cmp	r3, #47	; 0x2f
  402e54:	d001      	beq.n	402e5a <follow_path+0x292>
  402e56:	2b5c      	cmp	r3, #92	; 0x5c
  402e58:	d105      	bne.n	402e66 <follow_path+0x29e>
  402e5a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  402e5e:	2b2f      	cmp	r3, #47	; 0x2f
  402e60:	d0fb      	beq.n	402e5a <follow_path+0x292>
  402e62:	2b5c      	cmp	r3, #92	; 0x5c
  402e64:	d0f9      	beq.n	402e5a <follow_path+0x292>
	lfn = dj->lfn;
  402e66:	f8da 901c 	ldr.w	r9, [sl, #28]
		w = p[si++];					/* Get a character */
  402e6a:	7828      	ldrb	r0, [r5, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  402e6c:	282f      	cmp	r0, #47	; 0x2f
  402e6e:	bf18      	it	ne
  402e70:	281f      	cmpne	r0, #31
  402e72:	d91e      	bls.n	402eb2 <follow_path+0x2ea>
  402e74:	285c      	cmp	r0, #92	; 0x5c
  402e76:	d01c      	beq.n	402eb2 <follow_path+0x2ea>
  402e78:	f1a9 0702 	sub.w	r7, r9, #2
  402e7c:	462e      	mov	r6, r5
  402e7e:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402e80:	46a0      	mov	r8, r4
  402e82:	e6d2      	b.n	402c2a <follow_path+0x62>
	if (ni == 8) b <<= 2;
  402e84:	9b01      	ldr	r3, [sp, #4]
  402e86:	ea4f 0983 	mov.w	r9, r3, lsl #2
  402e8a:	fa5f f389 	uxtb.w	r3, r9
  402e8e:	9301      	str	r3, [sp, #4]
  402e90:	e7a5      	b.n	402dde <follow_path+0x216>
		cf |= NS_LFN;
  402e92:	f046 0602 	orr.w	r6, r6, #2
  402e96:	e7ab      	b.n	402df0 <follow_path+0x228>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  402e98:	2804      	cmp	r0, #4
  402e9a:	d10e      	bne.n	402eba <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402e9c:	f002 0204 	and.w	r2, r2, #4
  402ea0:	2a00      	cmp	r2, #0
  402ea2:	bf14      	ite	ne
  402ea4:	4603      	movne	r3, r0
  402ea6:	2305      	moveq	r3, #5
  402ea8:	e007      	b.n	402eba <follow_path+0x2f2>
				res = FR_NO_PATH; break;
  402eaa:	2305      	movs	r3, #5
  402eac:	e005      	b.n	402eba <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402eae:	2306      	movs	r3, #6
	return res;
  402eb0:	e003      	b.n	402eba <follow_path+0x2f2>
	*path = &p[si];						/* Return pointer to the next segment */
  402eb2:	3501      	adds	r5, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402eb4:	281f      	cmp	r0, #31
  402eb6:	d804      	bhi.n	402ec2 <follow_path+0x2fa>
  402eb8:	2306      	movs	r3, #6
}
  402eba:	4618      	mov	r0, r3
  402ebc:	b003      	add	sp, #12
  402ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
  402ec2:	2400      	movs	r4, #0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402ec4:	4626      	mov	r6, r4
  402ec6:	e6ca      	b.n	402c5e <follow_path+0x96>
			cf |= NS_LFN;				/* Force create LFN entry */
  402ec8:	f046 0602 	orr.w	r6, r6, #2
  402ecc:	e765      	b.n	402d9a <follow_path+0x1d2>
  402ece:	bf00      	nop
  402ed0:	00402111 	.word	0x00402111
  402ed4:	00410709 	.word	0x00410709
  402ed8:	004019e9 	.word	0x004019e9
  402edc:	00410715 	.word	0x00410715
  402ee0:	00410688 	.word	0x00410688
  402ee4:	0040255d 	.word	0x0040255d
  402ee8:	004033e9 	.word	0x004033e9

00402eec <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  402eec:	2807      	cmp	r0, #7
  402eee:	d901      	bls.n	402ef4 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  402ef0:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  402ef2:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  402ef4:	4b06      	ldr	r3, [pc, #24]	; (402f10 <f_mount+0x24>)
  402ef6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  402efa:	b10b      	cbz	r3, 402f00 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  402efc:	2200      	movs	r2, #0
  402efe:	701a      	strb	r2, [r3, #0]
	if (fs) {
  402f00:	b109      	cbz	r1, 402f06 <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  402f02:	2300      	movs	r3, #0
  402f04:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  402f06:	4b02      	ldr	r3, [pc, #8]	; (402f10 <f_mount+0x24>)
  402f08:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  402f0c:	2000      	movs	r0, #0
  402f0e:	4770      	bx	lr
  402f10:	20400a5c 	.word	0x20400a5c

00402f14 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  402f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402f18:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  402f1c:	4605      	mov	r5, r0
  402f1e:	9101      	str	r1, [sp, #4]
  402f20:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  402f22:	2300      	movs	r3, #0
  402f24:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  402f26:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  402f2a:	f002 021e 	and.w	r2, r2, #30
  402f2e:	a985      	add	r1, sp, #532	; 0x214
  402f30:	a801      	add	r0, sp, #4
  402f32:	4b58      	ldr	r3, [pc, #352]	; (403094 <f_open+0x180>)
  402f34:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  402f36:	ab82      	add	r3, sp, #520	; 0x208
  402f38:	938b      	str	r3, [sp, #556]	; 0x22c
  402f3a:	ab02      	add	r3, sp, #8
  402f3c:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  402f3e:	b168      	cbz	r0, 402f5c <f_open+0x48>
  402f40:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  402f42:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402f44:	f016 0f1c 	tst.w	r6, #28
  402f48:	d158      	bne.n	402ffc <f_open+0xe8>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  402f4a:	2b00      	cmp	r3, #0
  402f4c:	f040 8096 	bne.w	40307c <f_open+0x168>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  402f50:	7ae3      	ldrb	r3, [r4, #11]
  402f52:	f013 0f10 	tst.w	r3, #16
  402f56:	d062      	beq.n	40301e <f_open+0x10a>
				res = FR_NO_FILE;
  402f58:	2304      	movs	r3, #4
  402f5a:	e08f      	b.n	40307c <f_open+0x168>
		res = follow_path(&dj, path);	/* Follow the file path */
  402f5c:	9901      	ldr	r1, [sp, #4]
  402f5e:	a885      	add	r0, sp, #532	; 0x214
  402f60:	4b4d      	ldr	r3, [pc, #308]	; (403098 <f_open+0x184>)
  402f62:	4798      	blx	r3
  402f64:	4603      	mov	r3, r0
	dir = dj.dir;
  402f66:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (!dir)	/* Current dir itself */
  402f68:	b934      	cbnz	r4, 402f78 <f_open+0x64>
  402f6a:	b928      	cbnz	r0, 402f78 <f_open+0x64>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402f6c:	f016 0f1c 	tst.w	r6, #28
  402f70:	f040 8089 	bne.w	403086 <f_open+0x172>
			res = FR_INVALID_NAME;
  402f74:	2306      	movs	r3, #6
  402f76:	e046      	b.n	403006 <f_open+0xf2>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402f78:	f016 0f1c 	tst.w	r6, #28
  402f7c:	d0e5      	beq.n	402f4a <f_open+0x36>
		if (res != FR_OK) {					/* No file, create new */
  402f7e:	2b00      	cmp	r3, #0
  402f80:	d13c      	bne.n	402ffc <f_open+0xe8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  402f82:	7ae3      	ldrb	r3, [r4, #11]
  402f84:	f013 0f11 	tst.w	r3, #17
  402f88:	d17f      	bne.n	40308a <f_open+0x176>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  402f8a:	f016 0f04 	tst.w	r6, #4
  402f8e:	d17e      	bne.n	40308e <f_open+0x17a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402f90:	f017 0f08 	tst.w	r7, #8
  402f94:	d050      	beq.n	403038 <f_open+0x124>
			dw = get_fattime();					/* Created time */
  402f96:	4b41      	ldr	r3, [pc, #260]	; (40309c <f_open+0x188>)
  402f98:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  402f9a:	73a0      	strb	r0, [r4, #14]
  402f9c:	f3c0 2307 	ubfx	r3, r0, #8, #8
  402fa0:	73e3      	strb	r3, [r4, #15]
  402fa2:	0c03      	lsrs	r3, r0, #16
  402fa4:	7423      	strb	r3, [r4, #16]
  402fa6:	0e00      	lsrs	r0, r0, #24
  402fa8:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  402faa:	2300      	movs	r3, #0
  402fac:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  402fae:	7723      	strb	r3, [r4, #28]
  402fb0:	7763      	strb	r3, [r4, #29]
  402fb2:	77a3      	strb	r3, [r4, #30]
  402fb4:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  402fb6:	7d62      	ldrb	r2, [r4, #21]
  402fb8:	7d26      	ldrb	r6, [r4, #20]
  402fba:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  402fbe:	7ee1      	ldrb	r1, [r4, #27]
  402fc0:	7ea2      	ldrb	r2, [r4, #26]
  402fc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  402fc6:	76a3      	strb	r3, [r4, #26]
  402fc8:	76e3      	strb	r3, [r4, #27]
  402fca:	7523      	strb	r3, [r4, #20]
  402fcc:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  402fce:	9885      	ldr	r0, [sp, #532]	; 0x214
  402fd0:	2301      	movs	r3, #1
  402fd2:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  402fd4:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  402fd8:	d02c      	beq.n	403034 <f_open+0x120>
				dw = dj.fs->winsect;
  402fda:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  402fde:	4631      	mov	r1, r6
  402fe0:	4b2f      	ldr	r3, [pc, #188]	; (4030a0 <f_open+0x18c>)
  402fe2:	4798      	blx	r3
				if (res == FR_OK) {
  402fe4:	4603      	mov	r3, r0
  402fe6:	2800      	cmp	r0, #0
  402fe8:	d148      	bne.n	40307c <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  402fea:	9885      	ldr	r0, [sp, #532]	; 0x214
  402fec:	3e01      	subs	r6, #1
  402fee:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  402ff0:	4641      	mov	r1, r8
  402ff2:	4b2c      	ldr	r3, [pc, #176]	; (4030a4 <f_open+0x190>)
  402ff4:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  402ff6:	4603      	mov	r3, r0
  402ff8:	b1e0      	cbz	r0, 403034 <f_open+0x120>
  402ffa:	e03f      	b.n	40307c <f_open+0x168>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  402ffc:	2b04      	cmp	r3, #4
  402ffe:	d004      	beq.n	40300a <f_open+0xf6>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  403000:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403004:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  403006:	b1db      	cbz	r3, 403040 <f_open+0x12c>
  403008:	e038      	b.n	40307c <f_open+0x168>
				res = dir_register(&dj);
  40300a:	a885      	add	r0, sp, #532	; 0x214
  40300c:	4b26      	ldr	r3, [pc, #152]	; (4030a8 <f_open+0x194>)
  40300e:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  403010:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403014:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403016:	4603      	mov	r3, r0
  403018:	2800      	cmp	r0, #0
  40301a:	d0b9      	beq.n	402f90 <f_open+0x7c>
  40301c:	e02e      	b.n	40307c <f_open+0x168>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  40301e:	f016 0f02 	tst.w	r6, #2
  403022:	d004      	beq.n	40302e <f_open+0x11a>
  403024:	f013 0f01 	tst.w	r3, #1
  403028:	d001      	beq.n	40302e <f_open+0x11a>
					res = FR_DENIED;
  40302a:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  40302c:	e026      	b.n	40307c <f_open+0x168>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  40302e:	f016 0f08 	tst.w	r6, #8
  403032:	d001      	beq.n	403038 <f_open+0x124>
			mode |= FA__WRITTEN;
  403034:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  403038:	9b85      	ldr	r3, [sp, #532]	; 0x214
  40303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40303c:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  40303e:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  403040:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  403042:	7d62      	ldrb	r2, [r4, #21]
  403044:	7d23      	ldrb	r3, [r4, #20]
  403046:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  40304a:	7ee1      	ldrb	r1, [r4, #27]
  40304c:	7ea3      	ldrb	r3, [r4, #26]
  40304e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403056:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  403058:	7fe2      	ldrb	r2, [r4, #31]
  40305a:	7fa3      	ldrb	r3, [r4, #30]
  40305c:	041b      	lsls	r3, r3, #16
  40305e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403062:	7f22      	ldrb	r2, [r4, #28]
  403064:	4313      	orrs	r3, r2
  403066:	7f62      	ldrb	r2, [r4, #29]
  403068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40306c:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  40306e:	2300      	movs	r3, #0
  403070:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  403072:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  403074:	9a85      	ldr	r2, [sp, #532]	; 0x214
  403076:	602a      	str	r2, [r5, #0]
  403078:	88d2      	ldrh	r2, [r2, #6]
  40307a:	80aa      	strh	r2, [r5, #4]
}
  40307c:	4618      	mov	r0, r3
  40307e:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  403082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_INVALID_NAME;
  403086:	2306      	movs	r3, #6
  403088:	e7ba      	b.n	403000 <f_open+0xec>
				res = FR_DENIED;
  40308a:	2307      	movs	r3, #7
  40308c:	e7f6      	b.n	40307c <f_open+0x168>
					res = FR_EXIST;
  40308e:	2308      	movs	r3, #8
  403090:	e7f4      	b.n	40307c <f_open+0x168>
  403092:	bf00      	nop
  403094:	00401af1 	.word	0x00401af1
  403098:	00402bc9 	.word	0x00402bc9
  40309c:	0040197d 	.word	0x0040197d
  4030a0:	004023a9 	.word	0x004023a9
  4030a4:	00401f99 	.word	0x00401f99
  4030a8:	00402705 	.word	0x00402705

004030ac <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  4030ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030b0:	b083      	sub	sp, #12
  4030b2:	4604      	mov	r4, r0
  4030b4:	4689      	mov	r9, r1
  4030b6:	4615      	mov	r5, r2
  4030b8:	4698      	mov	r8, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
  4030ba:	2300      	movs	r3, #0
  4030bc:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);				/* Check validity */
  4030c0:	8881      	ldrh	r1, [r0, #4]
  4030c2:	6800      	ldr	r0, [r0, #0]
  4030c4:	4b58      	ldr	r3, [pc, #352]	; (403228 <f_read+0x17c>)
  4030c6:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  4030c8:	9001      	str	r0, [sp, #4]
  4030ca:	2800      	cmp	r0, #0
  4030cc:	f040 80a8 	bne.w	403220 <f_read+0x174>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
  4030d0:	79a3      	ldrb	r3, [r4, #6]
  4030d2:	f013 0f80 	tst.w	r3, #128	; 0x80
  4030d6:	f040 80a1 	bne.w	40321c <f_read+0x170>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  4030da:	f013 0f01 	tst.w	r3, #1
  4030de:	d102      	bne.n	4030e6 <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  4030e0:	2307      	movs	r3, #7
  4030e2:	9301      	str	r3, [sp, #4]
  4030e4:	e09c      	b.n	403220 <f_read+0x174>
	remain = fp->fsize - fp->fptr;
  4030e6:	68e6      	ldr	r6, [r4, #12]
  4030e8:	68a3      	ldr	r3, [r4, #8]
  4030ea:	1af6      	subs	r6, r6, r3
  4030ec:	42ae      	cmp	r6, r5
  4030ee:	bf28      	it	cs
  4030f0:	462e      	movcs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  4030f2:	2e00      	cmp	r6, #0
  4030f4:	d14c      	bne.n	403190 <f_read+0xe4>
  4030f6:	e093      	b.n	403220 <f_read+0x174>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  4030f8:	6961      	ldr	r1, [r4, #20]
  4030fa:	4b4c      	ldr	r3, [pc, #304]	; (40322c <f_read+0x180>)
  4030fc:	4798      	blx	r3
  4030fe:	e057      	b.n	4031b0 <f_read+0x104>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  403100:	79a3      	ldrb	r3, [r4, #6]
  403102:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403106:	71a3      	strb	r3, [r4, #6]
  403108:	2302      	movs	r3, #2
  40310a:	9301      	str	r3, [sp, #4]
  40310c:	e088      	b.n	403220 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  40310e:	79a3      	ldrb	r3, [r4, #6]
  403110:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403114:	71a3      	strb	r3, [r4, #6]
  403116:	2301      	movs	r3, #1
  403118:	9301      	str	r3, [sp, #4]
  40311a:	e081      	b.n	403220 <f_read+0x174>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40311c:	79a3      	ldrb	r3, [r4, #6]
  40311e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403122:	71a3      	strb	r3, [r4, #6]
  403124:	2302      	movs	r3, #2
  403126:	9301      	str	r3, [sp, #4]
  403128:	e07a      	b.n	403220 <f_read+0x174>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
  40312a:	79a3      	ldrb	r3, [r4, #6]
  40312c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403130:	71a3      	strb	r3, [r4, #6]
  403132:	2301      	movs	r3, #1
  403134:	9301      	str	r3, [sp, #4]
  403136:	e073      	b.n	403220 <f_read+0x174>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
  403138:	f44f 7200 	mov.w	r2, #512	; 0x200
  40313c:	3130      	adds	r1, #48	; 0x30
  40313e:	eb09 2040 	add.w	r0, r9, r0, lsl #9
  403142:	4b3b      	ldr	r3, [pc, #236]	; (403230 <f_read+0x184>)
  403144:	4798      	blx	r3
  403146:	e05f      	b.n	403208 <f_read+0x15c>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
  403148:	61a5      	str	r5, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  40314a:	68a5      	ldr	r5, [r4, #8]
  40314c:	f3c5 0508 	ubfx	r5, r5, #0, #9
  403150:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  403154:	42b5      	cmp	r5, r6
  403156:	bf28      	it	cs
  403158:	4635      	movcs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
  40315a:	69a1      	ldr	r1, [r4, #24]
  40315c:	6820      	ldr	r0, [r4, #0]
  40315e:	4b35      	ldr	r3, [pc, #212]	; (403234 <f_read+0x188>)
  403160:	4798      	blx	r3
  403162:	2800      	cmp	r0, #0
  403164:	d153      	bne.n	40320e <f_read+0x162>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  403166:	68a1      	ldr	r1, [r4, #8]
  403168:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40316c:	3130      	adds	r1, #48	; 0x30
  40316e:	6823      	ldr	r3, [r4, #0]
  403170:	462a      	mov	r2, r5
  403172:	4419      	add	r1, r3
  403174:	4648      	mov	r0, r9
  403176:	4b2e      	ldr	r3, [pc, #184]	; (403230 <f_read+0x184>)
  403178:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  40317a:	44a9      	add	r9, r5
  40317c:	68a3      	ldr	r3, [r4, #8]
  40317e:	442b      	add	r3, r5
  403180:	60a3      	str	r3, [r4, #8]
  403182:	f8d8 3000 	ldr.w	r3, [r8]
  403186:	442b      	add	r3, r5
  403188:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
  40318c:	1b76      	subs	r6, r6, r5
  40318e:	d047      	beq.n	403220 <f_read+0x174>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  403190:	68a2      	ldr	r2, [r4, #8]
  403192:	f3c2 0308 	ubfx	r3, r2, #0, #9
  403196:	2b00      	cmp	r3, #0
  403198:	d1d7      	bne.n	40314a <f_read+0x9e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  40319a:	6820      	ldr	r0, [r4, #0]
  40319c:	7883      	ldrb	r3, [r0, #2]
  40319e:	3b01      	subs	r3, #1
  4031a0:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
  4031a4:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  4031a8:	d108      	bne.n	4031bc <f_read+0x110>
				if (fp->fptr == 0) {			/* On the top of the file? */
  4031aa:	2a00      	cmp	r2, #0
  4031ac:	d1a4      	bne.n	4030f8 <f_read+0x4c>
					clst = fp->sclust;			/* Follow from the origin */
  4031ae:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  4031b0:	2801      	cmp	r0, #1
  4031b2:	d9a5      	bls.n	403100 <f_read+0x54>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4031b4:	f1b0 3fff 	cmp.w	r0, #4294967295
  4031b8:	d0a9      	beq.n	40310e <f_read+0x62>
				fp->clust = clst;				/* Update current cluster */
  4031ba:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  4031bc:	f8d4 a000 	ldr.w	sl, [r4]
  4031c0:	6961      	ldr	r1, [r4, #20]
  4031c2:	4650      	mov	r0, sl
  4031c4:	4b1c      	ldr	r3, [pc, #112]	; (403238 <f_read+0x18c>)
  4031c6:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4031c8:	4605      	mov	r5, r0
  4031ca:	2800      	cmp	r0, #0
  4031cc:	d0a6      	beq.n	40311c <f_read+0x70>
			sect += csect;
  4031ce:	443d      	add	r5, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
  4031d0:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  4031d4:	d0b8      	beq.n	403148 <f_read+0x9c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  4031d6:	f89a 3002 	ldrb.w	r3, [sl, #2]
  4031da:	eb07 020b 	add.w	r2, r7, fp
  4031de:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  4031e0:	bf88      	it	hi
  4031e2:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  4031e6:	fa5f f38b 	uxtb.w	r3, fp
  4031ea:	462a      	mov	r2, r5
  4031ec:	4649      	mov	r1, r9
  4031ee:	f89a 0001 	ldrb.w	r0, [sl, #1]
  4031f2:	4f12      	ldr	r7, [pc, #72]	; (40323c <f_read+0x190>)
  4031f4:	47b8      	blx	r7
  4031f6:	2800      	cmp	r0, #0
  4031f8:	d197      	bne.n	40312a <f_read+0x7e>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
  4031fa:	6821      	ldr	r1, [r4, #0]
  4031fc:	790b      	ldrb	r3, [r1, #4]
  4031fe:	b11b      	cbz	r3, 403208 <f_read+0x15c>
  403200:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
  403202:	1b40      	subs	r0, r0, r5
  403204:	4583      	cmp	fp, r0
  403206:	d897      	bhi.n	403138 <f_read+0x8c>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  403208:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  40320c:	e7b5      	b.n	40317a <f_read+0xce>
			ABORT(fp->fs, FR_DISK_ERR);
  40320e:	79a3      	ldrb	r3, [r4, #6]
  403210:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403214:	71a3      	strb	r3, [r4, #6]
  403216:	2301      	movs	r3, #1
  403218:	9301      	str	r3, [sp, #4]
  40321a:	e001      	b.n	403220 <f_read+0x174>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  40321c:	2302      	movs	r3, #2
  40321e:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
  403220:	9801      	ldr	r0, [sp, #4]
  403222:	b003      	add	sp, #12
  403224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403228:	00401a2d 	.word	0x00401a2d
  40322c:	00402029 	.word	0x00402029
  403230:	004019d5 	.word	0x004019d5
  403234:	00401f99 	.word	0x00401f99
  403238:	004019f7 	.word	0x004019f7
  40323c:	0040182d 	.word	0x0040182d

00403240 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  403240:	b538      	push	{r3, r4, r5, lr}
  403242:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  403244:	8881      	ldrh	r1, [r0, #4]
  403246:	6800      	ldr	r0, [r0, #0]
  403248:	4b1f      	ldr	r3, [pc, #124]	; (4032c8 <f_sync+0x88>)
  40324a:	4798      	blx	r3
	if (res == FR_OK) {
  40324c:	4603      	mov	r3, r0
  40324e:	b918      	cbnz	r0, 403258 <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  403250:	79a2      	ldrb	r2, [r4, #6]
  403252:	f012 0f20 	tst.w	r2, #32
  403256:	d101      	bne.n	40325c <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  403258:	4618      	mov	r0, r3
  40325a:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  40325c:	69e1      	ldr	r1, [r4, #28]
  40325e:	6820      	ldr	r0, [r4, #0]
  403260:	4b1a      	ldr	r3, [pc, #104]	; (4032cc <f_sync+0x8c>)
  403262:	4798      	blx	r3
			if (res == FR_OK) {
  403264:	4603      	mov	r3, r0
  403266:	2800      	cmp	r0, #0
  403268:	d1f6      	bne.n	403258 <f_sync+0x18>
				dir = fp->dir_ptr;
  40326a:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  40326c:	7aeb      	ldrb	r3, [r5, #11]
  40326e:	f043 0320 	orr.w	r3, r3, #32
  403272:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  403274:	68e3      	ldr	r3, [r4, #12]
  403276:	772b      	strb	r3, [r5, #28]
  403278:	89a3      	ldrh	r3, [r4, #12]
  40327a:	0a1b      	lsrs	r3, r3, #8
  40327c:	776b      	strb	r3, [r5, #29]
  40327e:	89e3      	ldrh	r3, [r4, #14]
  403280:	77ab      	strb	r3, [r5, #30]
  403282:	7be3      	ldrb	r3, [r4, #15]
  403284:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  403286:	6923      	ldr	r3, [r4, #16]
  403288:	76ab      	strb	r3, [r5, #26]
  40328a:	8a23      	ldrh	r3, [r4, #16]
  40328c:	0a1b      	lsrs	r3, r3, #8
  40328e:	76eb      	strb	r3, [r5, #27]
  403290:	8a63      	ldrh	r3, [r4, #18]
  403292:	752b      	strb	r3, [r5, #20]
  403294:	8a63      	ldrh	r3, [r4, #18]
  403296:	0a1b      	lsrs	r3, r3, #8
  403298:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  40329a:	4b0d      	ldr	r3, [pc, #52]	; (4032d0 <f_sync+0x90>)
  40329c:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  40329e:	75a8      	strb	r0, [r5, #22]
  4032a0:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4032a4:	75eb      	strb	r3, [r5, #23]
  4032a6:	0c03      	lsrs	r3, r0, #16
  4032a8:	762b      	strb	r3, [r5, #24]
  4032aa:	0e00      	lsrs	r0, r0, #24
  4032ac:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  4032ae:	79a3      	ldrb	r3, [r4, #6]
  4032b0:	f023 0320 	bic.w	r3, r3, #32
  4032b4:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  4032b6:	6823      	ldr	r3, [r4, #0]
  4032b8:	2201      	movs	r2, #1
  4032ba:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  4032bc:	6820      	ldr	r0, [r4, #0]
  4032be:	4b05      	ldr	r3, [pc, #20]	; (4032d4 <f_sync+0x94>)
  4032c0:	4798      	blx	r3
  4032c2:	4603      	mov	r3, r0
  4032c4:	e7c8      	b.n	403258 <f_sync+0x18>
  4032c6:	bf00      	nop
  4032c8:	00401a2d 	.word	0x00401a2d
  4032cc:	00401f99 	.word	0x00401f99
  4032d0:	0040197d 	.word	0x0040197d
  4032d4:	00402afd 	.word	0x00402afd

004032d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  4032d8:	b510      	push	{r4, lr}
  4032da:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  4032dc:	4b03      	ldr	r3, [pc, #12]	; (4032ec <f_close+0x14>)
  4032de:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  4032e0:	4603      	mov	r3, r0
  4032e2:	b908      	cbnz	r0, 4032e8 <f_close+0x10>
  4032e4:	2200      	movs	r2, #0
  4032e6:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  4032e8:	4618      	mov	r0, r3
  4032ea:	bd10      	pop	{r4, pc}
  4032ec:	00403241 	.word	0x00403241

004032f0 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
  4032f0:	b510      	push	{r4, lr}
  4032f2:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
  4032f6:	4604      	mov	r4, r0
  4032f8:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
  4032fa:	2200      	movs	r2, #0
  4032fc:	4601      	mov	r1, r0
  4032fe:	a801      	add	r0, sp, #4
  403300:	4b18      	ldr	r3, [pc, #96]	; (403364 <f_opendir+0x74>)
  403302:	4798      	blx	r3
	if (res == FR_OK) {
  403304:	4603      	mov	r3, r0
  403306:	b118      	cbz	r0, 403310 <f_opendir+0x20>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
  403308:	4618      	mov	r0, r3
  40330a:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
  40330e:	bd10      	pop	{r4, pc}
		INIT_BUF(*dj);
  403310:	ab83      	add	r3, sp, #524	; 0x20c
  403312:	61a3      	str	r3, [r4, #24]
  403314:	ab03      	add	r3, sp, #12
  403316:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
  403318:	9901      	ldr	r1, [sp, #4]
  40331a:	4620      	mov	r0, r4
  40331c:	4b12      	ldr	r3, [pc, #72]	; (403368 <f_opendir+0x78>)
  40331e:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
  403320:	4603      	mov	r3, r0
  403322:	b9c0      	cbnz	r0, 403356 <f_opendir+0x66>
			if (dj->dir) {						/* It is not the root dir */
  403324:	6963      	ldr	r3, [r4, #20]
  403326:	b173      	cbz	r3, 403346 <f_opendir+0x56>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
  403328:	7ada      	ldrb	r2, [r3, #11]
  40332a:	f012 0f10 	tst.w	r2, #16
  40332e:	d016      	beq.n	40335e <f_opendir+0x6e>
					dj->sclust = LD_CLUST(dj->dir);
  403330:	7d59      	ldrb	r1, [r3, #21]
  403332:	7d1a      	ldrb	r2, [r3, #20]
  403334:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403338:	7ed9      	ldrb	r1, [r3, #27]
  40333a:	7e9b      	ldrb	r3, [r3, #26]
  40333c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403344:	60a3      	str	r3, [r4, #8]
				dj->id = dj->fs->id;
  403346:	6823      	ldr	r3, [r4, #0]
  403348:	88db      	ldrh	r3, [r3, #6]
  40334a:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
  40334c:	2100      	movs	r1, #0
  40334e:	4620      	mov	r0, r4
  403350:	4b06      	ldr	r3, [pc, #24]	; (40336c <f_opendir+0x7c>)
  403352:	4798      	blx	r3
  403354:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  403356:	2b04      	cmp	r3, #4
  403358:	bf08      	it	eq
  40335a:	2305      	moveq	r3, #5
  40335c:	e7d4      	b.n	403308 <f_opendir+0x18>
					res = FR_NO_PATH;
  40335e:	2305      	movs	r3, #5
	LEAVE_FF(dj->fs, res);
  403360:	e7d2      	b.n	403308 <f_opendir+0x18>
  403362:	bf00      	nop
  403364:	00401af1 	.word	0x00401af1
  403368:	00402bc9 	.word	0x00402bc9
  40336c:	00402111 	.word	0x00402111

00403370 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  403370:	b570      	push	{r4, r5, r6, lr}
  403372:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
  403376:	4604      	mov	r4, r0
  403378:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
  40337a:	8881      	ldrh	r1, [r0, #4]
  40337c:	6800      	ldr	r0, [r0, #0]
  40337e:	4b15      	ldr	r3, [pc, #84]	; (4033d4 <f_readdir+0x64>)
  403380:	4798      	blx	r3
	if (res == FR_OK) {
  403382:	4605      	mov	r5, r0
  403384:	b958      	cbnz	r0, 40339e <f_readdir+0x2e>
		if (!fno) {
  403386:	b176      	cbz	r6, 4033a6 <f_readdir+0x36>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
  403388:	ab81      	add	r3, sp, #516	; 0x204
  40338a:	61a3      	str	r3, [r4, #24]
  40338c:	ab01      	add	r3, sp, #4
  40338e:	61e3      	str	r3, [r4, #28]
			res = dir_read(dj);				/* Read an directory item */
  403390:	4620      	mov	r0, r4
  403392:	4b11      	ldr	r3, [pc, #68]	; (4033d8 <f_readdir+0x68>)
  403394:	4798      	blx	r3
			if (res == FR_NO_FILE) {		/* Reached end of dir */
  403396:	2804      	cmp	r0, #4
  403398:	d00b      	beq.n	4033b2 <f_readdir+0x42>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
  40339a:	b160      	cbz	r0, 4033b6 <f_readdir+0x46>
			res = dir_read(dj);				/* Read an directory item */
  40339c:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
  40339e:	4628      	mov	r0, r5
  4033a0:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
  4033a4:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
  4033a6:	2100      	movs	r1, #0
  4033a8:	4620      	mov	r0, r4
  4033aa:	4b0c      	ldr	r3, [pc, #48]	; (4033dc <f_readdir+0x6c>)
  4033ac:	4798      	blx	r3
  4033ae:	4605      	mov	r5, r0
  4033b0:	e7f5      	b.n	40339e <f_readdir+0x2e>
				dj->sect = 0;
  4033b2:	2300      	movs	r3, #0
  4033b4:	6123      	str	r3, [r4, #16]
				get_fileinfo(dj, fno);		/* Get the object information */
  4033b6:	4631      	mov	r1, r6
  4033b8:	4620      	mov	r0, r4
  4033ba:	4b09      	ldr	r3, [pc, #36]	; (4033e0 <f_readdir+0x70>)
  4033bc:	4798      	blx	r3
				res = dir_next(dj, 0);		/* Increment index for next */
  4033be:	2100      	movs	r1, #0
  4033c0:	4620      	mov	r0, r4
  4033c2:	4b08      	ldr	r3, [pc, #32]	; (4033e4 <f_readdir+0x74>)
  4033c4:	4798      	blx	r3
				if (res == FR_NO_FILE) {
  4033c6:	2804      	cmp	r0, #4
  4033c8:	d001      	beq.n	4033ce <f_readdir+0x5e>
				res = dir_next(dj, 0);		/* Increment index for next */
  4033ca:	4605      	mov	r5, r0
  4033cc:	e7e7      	b.n	40339e <f_readdir+0x2e>
					dj->sect = 0;
  4033ce:	2300      	movs	r3, #0
  4033d0:	6123      	str	r3, [r4, #16]
  4033d2:	e7e4      	b.n	40339e <f_readdir+0x2e>
  4033d4:	00401a2d 	.word	0x00401a2d
  4033d8:	004029e1 	.word	0x004029e1
  4033dc:	00402111 	.word	0x00402111
  4033e0:	00401e61 	.word	0x00401e61
  4033e4:	00402425 	.word	0x00402425

004033e8 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4033e8:	287f      	cmp	r0, #127	; 0x7f
  4033ea:	d919      	bls.n	403420 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4033ec:	b971      	cbnz	r1, 40340c <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4033ee:	28c7      	cmp	r0, #199	; 0xc7
  4033f0:	d013      	beq.n	40341a <ff_convert+0x32>
  4033f2:	4a0c      	ldr	r2, [pc, #48]	; (403424 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  4033f4:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  4033f6:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  4033fa:	4281      	cmp	r1, r0
  4033fc:	d003      	beq.n	403406 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  4033fe:	3301      	adds	r3, #1
  403400:	b29b      	uxth	r3, r3
  403402:	2b80      	cmp	r3, #128	; 0x80
  403404:	d1f7      	bne.n	4033f6 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  403406:	3380      	adds	r3, #128	; 0x80
  403408:	b2d8      	uxtb	r0, r3
  40340a:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40340c:	28ff      	cmp	r0, #255	; 0xff
  40340e:	d806      	bhi.n	40341e <ff_convert+0x36>
  403410:	3880      	subs	r0, #128	; 0x80
  403412:	4b04      	ldr	r3, [pc, #16]	; (403424 <ff_convert+0x3c>)
  403414:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  403418:	4770      	bx	lr
				if (src == Tbl[c]) break;
  40341a:	2300      	movs	r3, #0
  40341c:	e7f3      	b.n	403406 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40341e:	2000      	movs	r0, #0
		}
	}

	return c;
}
  403420:	4770      	bx	lr
  403422:	bf00      	nop
  403424:	0041071c 	.word	0x0041071c

00403428 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403428:	2861      	cmp	r0, #97	; 0x61
  40342a:	d00e      	beq.n	40344a <ff_wtoupper+0x22>
  40342c:	4908      	ldr	r1, [pc, #32]	; (403450 <ff_wtoupper+0x28>)
  40342e:	2200      	movs	r2, #0
  403430:	3201      	adds	r2, #1
  403432:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  403436:	4283      	cmp	r3, r0
  403438:	d001      	beq.n	40343e <ff_wtoupper+0x16>
  40343a:	2b00      	cmp	r3, #0
  40343c:	d1f8      	bne.n	403430 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40343e:	b11b      	cbz	r3, 403448 <ff_wtoupper+0x20>
  403440:	4b04      	ldr	r3, [pc, #16]	; (403454 <ff_wtoupper+0x2c>)
  403442:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  403446:	4770      	bx	lr
  403448:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40344a:	2200      	movs	r2, #0
  40344c:	e7f8      	b.n	403440 <ff_wtoupper+0x18>
  40344e:	bf00      	nop
  403450:	0041081c 	.word	0x0041081c
  403454:	004109fc 	.word	0x004109fc

00403458 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  403458:	f100 0308 	add.w	r3, r0, #8
  40345c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40345e:	f04f 32ff 	mov.w	r2, #4294967295
  403462:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  403464:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  403466:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  403468:	2300      	movs	r3, #0
  40346a:	6003      	str	r3, [r0, #0]
  40346c:	4770      	bx	lr

0040346e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40346e:	2300      	movs	r3, #0
  403470:	6103      	str	r3, [r0, #16]
  403472:	4770      	bx	lr

00403474 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  403474:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  403476:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  403478:	689a      	ldr	r2, [r3, #8]
  40347a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40347c:	689a      	ldr	r2, [r3, #8]
  40347e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  403480:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  403482:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  403484:	6803      	ldr	r3, [r0, #0]
  403486:	3301      	adds	r3, #1
  403488:	6003      	str	r3, [r0, #0]
  40348a:	4770      	bx	lr

0040348c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40348c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40348e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  403490:	f1b5 3fff 	cmp.w	r5, #4294967295
  403494:	d002      	beq.n	40349c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  403496:	f100 0208 	add.w	r2, r0, #8
  40349a:	e002      	b.n	4034a2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  40349c:	6902      	ldr	r2, [r0, #16]
  40349e:	e004      	b.n	4034aa <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4034a0:	461a      	mov	r2, r3
  4034a2:	6853      	ldr	r3, [r2, #4]
  4034a4:	681c      	ldr	r4, [r3, #0]
  4034a6:	42a5      	cmp	r5, r4
  4034a8:	d2fa      	bcs.n	4034a0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4034aa:	6853      	ldr	r3, [r2, #4]
  4034ac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4034ae:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4034b0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4034b2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4034b4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4034b6:	6803      	ldr	r3, [r0, #0]
  4034b8:	3301      	adds	r3, #1
  4034ba:	6003      	str	r3, [r0, #0]
}
  4034bc:	bc30      	pop	{r4, r5}
  4034be:	4770      	bx	lr

004034c0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4034c0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4034c2:	6842      	ldr	r2, [r0, #4]
  4034c4:	6881      	ldr	r1, [r0, #8]
  4034c6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4034c8:	6882      	ldr	r2, [r0, #8]
  4034ca:	6841      	ldr	r1, [r0, #4]
  4034cc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4034ce:	685a      	ldr	r2, [r3, #4]
  4034d0:	4290      	cmp	r0, r2
  4034d2:	d005      	beq.n	4034e0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4034d4:	2200      	movs	r2, #0
  4034d6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4034d8:	6818      	ldr	r0, [r3, #0]
  4034da:	3801      	subs	r0, #1
  4034dc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4034de:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4034e0:	6882      	ldr	r2, [r0, #8]
  4034e2:	605a      	str	r2, [r3, #4]
  4034e4:	e7f6      	b.n	4034d4 <uxListRemove+0x14>
	...

004034e8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4034e8:	4b0d      	ldr	r3, [pc, #52]	; (403520 <prvTaskExitError+0x38>)
  4034ea:	681b      	ldr	r3, [r3, #0]
  4034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4034f0:	d00a      	beq.n	403508 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4034f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034f6:	b672      	cpsid	i
  4034f8:	f383 8811 	msr	BASEPRI, r3
  4034fc:	f3bf 8f6f 	isb	sy
  403500:	f3bf 8f4f 	dsb	sy
  403504:	b662      	cpsie	i
  403506:	e7fe      	b.n	403506 <prvTaskExitError+0x1e>
  403508:	f04f 0380 	mov.w	r3, #128	; 0x80
  40350c:	b672      	cpsid	i
  40350e:	f383 8811 	msr	BASEPRI, r3
  403512:	f3bf 8f6f 	isb	sy
  403516:	f3bf 8f4f 	dsb	sy
  40351a:	b662      	cpsie	i
  40351c:	e7fe      	b.n	40351c <prvTaskExitError+0x34>
  40351e:	bf00      	nop
  403520:	20400030 	.word	0x20400030

00403524 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  403524:	4806      	ldr	r0, [pc, #24]	; (403540 <prvPortStartFirstTask+0x1c>)
  403526:	6800      	ldr	r0, [r0, #0]
  403528:	6800      	ldr	r0, [r0, #0]
  40352a:	f380 8808 	msr	MSP, r0
  40352e:	b662      	cpsie	i
  403530:	b661      	cpsie	f
  403532:	f3bf 8f4f 	dsb	sy
  403536:	f3bf 8f6f 	isb	sy
  40353a:	df00      	svc	0
  40353c:	bf00      	nop
  40353e:	0000      	.short	0x0000
  403540:	e000ed08 	.word	0xe000ed08

00403544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  403544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 403554 <vPortEnableVFP+0x10>
  403548:	6801      	ldr	r1, [r0, #0]
  40354a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40354e:	6001      	str	r1, [r0, #0]
  403550:	4770      	bx	lr
  403552:	0000      	.short	0x0000
  403554:	e000ed88 	.word	0xe000ed88

00403558 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  403558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40355c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  403560:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  403564:	4b05      	ldr	r3, [pc, #20]	; (40357c <pxPortInitialiseStack+0x24>)
  403566:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40356a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40356e:	f06f 0302 	mvn.w	r3, #2
  403572:	f840 3c24 	str.w	r3, [r0, #-36]
}
  403576:	3844      	subs	r0, #68	; 0x44
  403578:	4770      	bx	lr
  40357a:	bf00      	nop
  40357c:	004034e9 	.word	0x004034e9

00403580 <SVC_Handler>:
	__asm volatile (
  403580:	4b06      	ldr	r3, [pc, #24]	; (40359c <pxCurrentTCBConst2>)
  403582:	6819      	ldr	r1, [r3, #0]
  403584:	6808      	ldr	r0, [r1, #0]
  403586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40358a:	f380 8809 	msr	PSP, r0
  40358e:	f3bf 8f6f 	isb	sy
  403592:	f04f 0000 	mov.w	r0, #0
  403596:	f380 8811 	msr	BASEPRI, r0
  40359a:	4770      	bx	lr

0040359c <pxCurrentTCBConst2>:
  40359c:	2040c28c 	.word	0x2040c28c
  4035a0:	4770      	bx	lr
  4035a2:	bf00      	nop

004035a4 <vPortEnterCritical>:
  4035a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035a8:	b672      	cpsid	i
  4035aa:	f383 8811 	msr	BASEPRI, r3
  4035ae:	f3bf 8f6f 	isb	sy
  4035b2:	f3bf 8f4f 	dsb	sy
  4035b6:	b662      	cpsie	i
	uxCriticalNesting++;
  4035b8:	4a0b      	ldr	r2, [pc, #44]	; (4035e8 <vPortEnterCritical+0x44>)
  4035ba:	6813      	ldr	r3, [r2, #0]
  4035bc:	3301      	adds	r3, #1
  4035be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4035c0:	2b01      	cmp	r3, #1
  4035c2:	d10f      	bne.n	4035e4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4035c4:	4b09      	ldr	r3, [pc, #36]	; (4035ec <vPortEnterCritical+0x48>)
  4035c6:	681b      	ldr	r3, [r3, #0]
  4035c8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4035cc:	d00a      	beq.n	4035e4 <vPortEnterCritical+0x40>
  4035ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035d2:	b672      	cpsid	i
  4035d4:	f383 8811 	msr	BASEPRI, r3
  4035d8:	f3bf 8f6f 	isb	sy
  4035dc:	f3bf 8f4f 	dsb	sy
  4035e0:	b662      	cpsie	i
  4035e2:	e7fe      	b.n	4035e2 <vPortEnterCritical+0x3e>
  4035e4:	4770      	bx	lr
  4035e6:	bf00      	nop
  4035e8:	20400030 	.word	0x20400030
  4035ec:	e000ed04 	.word	0xe000ed04

004035f0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4035f0:	4b0a      	ldr	r3, [pc, #40]	; (40361c <vPortExitCritical+0x2c>)
  4035f2:	681b      	ldr	r3, [r3, #0]
  4035f4:	b953      	cbnz	r3, 40360c <vPortExitCritical+0x1c>
  4035f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035fa:	b672      	cpsid	i
  4035fc:	f383 8811 	msr	BASEPRI, r3
  403600:	f3bf 8f6f 	isb	sy
  403604:	f3bf 8f4f 	dsb	sy
  403608:	b662      	cpsie	i
  40360a:	e7fe      	b.n	40360a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40360c:	3b01      	subs	r3, #1
  40360e:	4a03      	ldr	r2, [pc, #12]	; (40361c <vPortExitCritical+0x2c>)
  403610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  403612:	b90b      	cbnz	r3, 403618 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  403614:	f383 8811 	msr	BASEPRI, r3
  403618:	4770      	bx	lr
  40361a:	bf00      	nop
  40361c:	20400030 	.word	0x20400030

00403620 <PendSV_Handler>:
	__asm volatile
  403620:	f3ef 8009 	mrs	r0, PSP
  403624:	f3bf 8f6f 	isb	sy
  403628:	4b15      	ldr	r3, [pc, #84]	; (403680 <pxCurrentTCBConst>)
  40362a:	681a      	ldr	r2, [r3, #0]
  40362c:	f01e 0f10 	tst.w	lr, #16
  403630:	bf08      	it	eq
  403632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  403636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40363a:	6010      	str	r0, [r2, #0]
  40363c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  403640:	f04f 0080 	mov.w	r0, #128	; 0x80
  403644:	b672      	cpsid	i
  403646:	f380 8811 	msr	BASEPRI, r0
  40364a:	f3bf 8f4f 	dsb	sy
  40364e:	f3bf 8f6f 	isb	sy
  403652:	b662      	cpsie	i
  403654:	f001 f8aa 	bl	4047ac <vTaskSwitchContext>
  403658:	f04f 0000 	mov.w	r0, #0
  40365c:	f380 8811 	msr	BASEPRI, r0
  403660:	bc08      	pop	{r3}
  403662:	6819      	ldr	r1, [r3, #0]
  403664:	6808      	ldr	r0, [r1, #0]
  403666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40366a:	f01e 0f10 	tst.w	lr, #16
  40366e:	bf08      	it	eq
  403670:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  403674:	f380 8809 	msr	PSP, r0
  403678:	f3bf 8f6f 	isb	sy
  40367c:	4770      	bx	lr
  40367e:	bf00      	nop

00403680 <pxCurrentTCBConst>:
  403680:	2040c28c 	.word	0x2040c28c
  403684:	4770      	bx	lr
  403686:	bf00      	nop

00403688 <SysTick_Handler>:
{
  403688:	b508      	push	{r3, lr}
	__asm volatile
  40368a:	f3ef 8311 	mrs	r3, BASEPRI
  40368e:	f04f 0280 	mov.w	r2, #128	; 0x80
  403692:	b672      	cpsid	i
  403694:	f382 8811 	msr	BASEPRI, r2
  403698:	f3bf 8f6f 	isb	sy
  40369c:	f3bf 8f4f 	dsb	sy
  4036a0:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4036a2:	4b05      	ldr	r3, [pc, #20]	; (4036b8 <SysTick_Handler+0x30>)
  4036a4:	4798      	blx	r3
  4036a6:	b118      	cbz	r0, 4036b0 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4036a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4036ac:	4b03      	ldr	r3, [pc, #12]	; (4036bc <SysTick_Handler+0x34>)
  4036ae:	601a      	str	r2, [r3, #0]
	__asm volatile
  4036b0:	2300      	movs	r3, #0
  4036b2:	f383 8811 	msr	BASEPRI, r3
  4036b6:	bd08      	pop	{r3, pc}
  4036b8:	00404419 	.word	0x00404419
  4036bc:	e000ed04 	.word	0xe000ed04

004036c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4036c0:	4a03      	ldr	r2, [pc, #12]	; (4036d0 <vPortSetupTimerInterrupt+0x10>)
  4036c2:	4b04      	ldr	r3, [pc, #16]	; (4036d4 <vPortSetupTimerInterrupt+0x14>)
  4036c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4036c6:	2207      	movs	r2, #7
  4036c8:	3b04      	subs	r3, #4
  4036ca:	601a      	str	r2, [r3, #0]
  4036cc:	4770      	bx	lr
  4036ce:	bf00      	nop
  4036d0:	000927bf 	.word	0x000927bf
  4036d4:	e000e014 	.word	0xe000e014

004036d8 <xPortStartScheduler>:
{
  4036d8:	b500      	push	{lr}
  4036da:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4036dc:	4b25      	ldr	r3, [pc, #148]	; (403774 <xPortStartScheduler+0x9c>)
  4036de:	781a      	ldrb	r2, [r3, #0]
  4036e0:	b2d2      	uxtb	r2, r2
  4036e2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4036e4:	22ff      	movs	r2, #255	; 0xff
  4036e6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4036e8:	781b      	ldrb	r3, [r3, #0]
  4036ea:	b2db      	uxtb	r3, r3
  4036ec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4036f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4036f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4036f8:	4a1f      	ldr	r2, [pc, #124]	; (403778 <xPortStartScheduler+0xa0>)
  4036fa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4036fc:	2207      	movs	r2, #7
  4036fe:	4b1f      	ldr	r3, [pc, #124]	; (40377c <xPortStartScheduler+0xa4>)
  403700:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  403702:	f89d 3003 	ldrb.w	r3, [sp, #3]
  403706:	f013 0f80 	tst.w	r3, #128	; 0x80
  40370a:	d010      	beq.n	40372e <xPortStartScheduler+0x56>
  40370c:	2206      	movs	r2, #6
  40370e:	e000      	b.n	403712 <xPortStartScheduler+0x3a>
  403710:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  403712:	f89d 3003 	ldrb.w	r3, [sp, #3]
  403716:	005b      	lsls	r3, r3, #1
  403718:	b2db      	uxtb	r3, r3
  40371a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40371e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  403722:	1e51      	subs	r1, r2, #1
  403724:	f013 0f80 	tst.w	r3, #128	; 0x80
  403728:	d1f2      	bne.n	403710 <xPortStartScheduler+0x38>
  40372a:	4b14      	ldr	r3, [pc, #80]	; (40377c <xPortStartScheduler+0xa4>)
  40372c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40372e:	4a13      	ldr	r2, [pc, #76]	; (40377c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  403730:	6813      	ldr	r3, [r2, #0]
  403732:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  403734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  403738:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40373a:	9b01      	ldr	r3, [sp, #4]
  40373c:	b2db      	uxtb	r3, r3
  40373e:	4a0d      	ldr	r2, [pc, #52]	; (403774 <xPortStartScheduler+0x9c>)
  403740:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  403742:	4b0f      	ldr	r3, [pc, #60]	; (403780 <xPortStartScheduler+0xa8>)
  403744:	681a      	ldr	r2, [r3, #0]
  403746:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40374a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40374c:	681a      	ldr	r2, [r3, #0]
  40374e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  403752:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  403754:	4b0b      	ldr	r3, [pc, #44]	; (403784 <xPortStartScheduler+0xac>)
  403756:	4798      	blx	r3
	uxCriticalNesting = 0;
  403758:	2200      	movs	r2, #0
  40375a:	4b0b      	ldr	r3, [pc, #44]	; (403788 <xPortStartScheduler+0xb0>)
  40375c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40375e:	4b0b      	ldr	r3, [pc, #44]	; (40378c <xPortStartScheduler+0xb4>)
  403760:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  403762:	4a0b      	ldr	r2, [pc, #44]	; (403790 <xPortStartScheduler+0xb8>)
  403764:	6813      	ldr	r3, [r2, #0]
  403766:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40376a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40376c:	4b09      	ldr	r3, [pc, #36]	; (403794 <xPortStartScheduler+0xbc>)
  40376e:	4798      	blx	r3
	prvTaskExitError();
  403770:	4b09      	ldr	r3, [pc, #36]	; (403798 <xPortStartScheduler+0xc0>)
  403772:	4798      	blx	r3
  403774:	e000e400 	.word	0xe000e400
  403778:	20400a7e 	.word	0x20400a7e
  40377c:	20400a80 	.word	0x20400a80
  403780:	e000ed20 	.word	0xe000ed20
  403784:	004036c1 	.word	0x004036c1
  403788:	20400030 	.word	0x20400030
  40378c:	00403545 	.word	0x00403545
  403790:	e000ef34 	.word	0xe000ef34
  403794:	00403525 	.word	0x00403525
  403798:	004034e9 	.word	0x004034e9

0040379c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40379c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4037a0:	2b0f      	cmp	r3, #15
  4037a2:	d911      	bls.n	4037c8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4037a4:	4a12      	ldr	r2, [pc, #72]	; (4037f0 <vPortValidateInterruptPriority+0x54>)
  4037a6:	5c9b      	ldrb	r3, [r3, r2]
  4037a8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4037aa:	4a12      	ldr	r2, [pc, #72]	; (4037f4 <vPortValidateInterruptPriority+0x58>)
  4037ac:	7812      	ldrb	r2, [r2, #0]
  4037ae:	429a      	cmp	r2, r3
  4037b0:	d90a      	bls.n	4037c8 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4037b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037b6:	b672      	cpsid	i
  4037b8:	f383 8811 	msr	BASEPRI, r3
  4037bc:	f3bf 8f6f 	isb	sy
  4037c0:	f3bf 8f4f 	dsb	sy
  4037c4:	b662      	cpsie	i
  4037c6:	e7fe      	b.n	4037c6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4037c8:	4b0b      	ldr	r3, [pc, #44]	; (4037f8 <vPortValidateInterruptPriority+0x5c>)
  4037ca:	681b      	ldr	r3, [r3, #0]
  4037cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4037d0:	4a0a      	ldr	r2, [pc, #40]	; (4037fc <vPortValidateInterruptPriority+0x60>)
  4037d2:	6812      	ldr	r2, [r2, #0]
  4037d4:	4293      	cmp	r3, r2
  4037d6:	d90a      	bls.n	4037ee <vPortValidateInterruptPriority+0x52>
  4037d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037dc:	b672      	cpsid	i
  4037de:	f383 8811 	msr	BASEPRI, r3
  4037e2:	f3bf 8f6f 	isb	sy
  4037e6:	f3bf 8f4f 	dsb	sy
  4037ea:	b662      	cpsie	i
  4037ec:	e7fe      	b.n	4037ec <vPortValidateInterruptPriority+0x50>
  4037ee:	4770      	bx	lr
  4037f0:	e000e3f0 	.word	0xe000e3f0
  4037f4:	20400a7e 	.word	0x20400a7e
  4037f8:	e000ed0c 	.word	0xe000ed0c
  4037fc:	20400a80 	.word	0x20400a80

00403800 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  403800:	b538      	push	{r3, r4, r5, lr}
  403802:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  403804:	f010 0f07 	tst.w	r0, #7
  403808:	d002      	beq.n	403810 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40380a:	f020 0407 	bic.w	r4, r0, #7
  40380e:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  403810:	4b11      	ldr	r3, [pc, #68]	; (403858 <pvPortMalloc+0x58>)
  403812:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  403814:	4b11      	ldr	r3, [pc, #68]	; (40385c <pvPortMalloc+0x5c>)
  403816:	681b      	ldr	r3, [r3, #0]
  403818:	b193      	cbz	r3, 403840 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40381a:	4b11      	ldr	r3, [pc, #68]	; (403860 <pvPortMalloc+0x60>)
  40381c:	681b      	ldr	r3, [r3, #0]
  40381e:	441c      	add	r4, r3
  403820:	42a3      	cmp	r3, r4
  403822:	d213      	bcs.n	40384c <pvPortMalloc+0x4c>
  403824:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  403828:	4294      	cmp	r4, r2
  40382a:	d80f      	bhi.n	40384c <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  40382c:	4a0b      	ldr	r2, [pc, #44]	; (40385c <pvPortMalloc+0x5c>)
  40382e:	6815      	ldr	r5, [r2, #0]
  403830:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  403832:	4b0b      	ldr	r3, [pc, #44]	; (403860 <pvPortMalloc+0x60>)
  403834:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  403836:	4b0b      	ldr	r3, [pc, #44]	; (403864 <pvPortMalloc+0x64>)
  403838:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40383a:	b14d      	cbz	r5, 403850 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  40383c:	4628      	mov	r0, r5
  40383e:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  403840:	4b09      	ldr	r3, [pc, #36]	; (403868 <pvPortMalloc+0x68>)
  403842:	f023 0307 	bic.w	r3, r3, #7
  403846:	4a05      	ldr	r2, [pc, #20]	; (40385c <pvPortMalloc+0x5c>)
  403848:	6013      	str	r3, [r2, #0]
  40384a:	e7e6      	b.n	40381a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  40384c:	4b05      	ldr	r3, [pc, #20]	; (403864 <pvPortMalloc+0x64>)
  40384e:	4798      	blx	r3
			vApplicationMallocFailedHook();
  403850:	4b06      	ldr	r3, [pc, #24]	; (40386c <pvPortMalloc+0x6c>)
  403852:	4798      	blx	r3
  403854:	2500      	movs	r5, #0
	return pvReturn;
  403856:	e7f1      	b.n	40383c <pvPortMalloc+0x3c>
  403858:	004043fd 	.word	0x004043fd
  40385c:	20400a84 	.word	0x20400a84
  403860:	2040c288 	.word	0x2040c288
  403864:	00404565 	.word	0x00404565
  403868:	20400a90 	.word	0x20400a90
  40386c:	00409053 	.word	0x00409053

00403870 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  403870:	b150      	cbz	r0, 403888 <vPortFree+0x18>
  403872:	f04f 0380 	mov.w	r3, #128	; 0x80
  403876:	b672      	cpsid	i
  403878:	f383 8811 	msr	BASEPRI, r3
  40387c:	f3bf 8f6f 	isb	sy
  403880:	f3bf 8f4f 	dsb	sy
  403884:	b662      	cpsie	i
  403886:	e7fe      	b.n	403886 <vPortFree+0x16>
  403888:	4770      	bx	lr
	...

0040388c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40388c:	b538      	push	{r3, r4, r5, lr}
  40388e:	4604      	mov	r4, r0
  403890:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  403892:	6c02      	ldr	r2, [r0, #64]	; 0x40
  403894:	b95a      	cbnz	r2, 4038ae <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403896:	6803      	ldr	r3, [r0, #0]
  403898:	2b00      	cmp	r3, #0
  40389a:	d12e      	bne.n	4038fa <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40389c:	6840      	ldr	r0, [r0, #4]
  40389e:	4b1b      	ldr	r3, [pc, #108]	; (40390c <prvCopyDataToQueue+0x80>)
  4038a0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4038a2:	2300      	movs	r3, #0
  4038a4:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4038a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4038a8:	3301      	adds	r3, #1
  4038aa:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4038ac:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4038ae:	b96d      	cbnz	r5, 4038cc <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4038b0:	6880      	ldr	r0, [r0, #8]
  4038b2:	4b17      	ldr	r3, [pc, #92]	; (403910 <prvCopyDataToQueue+0x84>)
  4038b4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4038b6:	68a3      	ldr	r3, [r4, #8]
  4038b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4038ba:	4413      	add	r3, r2
  4038bc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4038be:	6862      	ldr	r2, [r4, #4]
  4038c0:	4293      	cmp	r3, r2
  4038c2:	d31c      	bcc.n	4038fe <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4038c4:	6823      	ldr	r3, [r4, #0]
  4038c6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4038c8:	2000      	movs	r0, #0
  4038ca:	e7ec      	b.n	4038a6 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4038cc:	68c0      	ldr	r0, [r0, #12]
  4038ce:	4b10      	ldr	r3, [pc, #64]	; (403910 <prvCopyDataToQueue+0x84>)
  4038d0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4038d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4038d4:	425b      	negs	r3, r3
  4038d6:	68e2      	ldr	r2, [r4, #12]
  4038d8:	441a      	add	r2, r3
  4038da:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4038dc:	6821      	ldr	r1, [r4, #0]
  4038de:	428a      	cmp	r2, r1
  4038e0:	d202      	bcs.n	4038e8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4038e2:	6862      	ldr	r2, [r4, #4]
  4038e4:	4413      	add	r3, r2
  4038e6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4038e8:	2d02      	cmp	r5, #2
  4038ea:	d10a      	bne.n	403902 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4038ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4038ee:	b153      	cbz	r3, 403906 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4038f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4038f2:	3b01      	subs	r3, #1
  4038f4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4038f6:	2000      	movs	r0, #0
  4038f8:	e7d5      	b.n	4038a6 <prvCopyDataToQueue+0x1a>
  4038fa:	2000      	movs	r0, #0
  4038fc:	e7d3      	b.n	4038a6 <prvCopyDataToQueue+0x1a>
  4038fe:	2000      	movs	r0, #0
  403900:	e7d1      	b.n	4038a6 <prvCopyDataToQueue+0x1a>
  403902:	2000      	movs	r0, #0
  403904:	e7cf      	b.n	4038a6 <prvCopyDataToQueue+0x1a>
  403906:	2000      	movs	r0, #0
  403908:	e7cd      	b.n	4038a6 <prvCopyDataToQueue+0x1a>
  40390a:	bf00      	nop
  40390c:	00404bad 	.word	0x00404bad
  403910:	004096f9 	.word	0x004096f9

00403914 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  403914:	b530      	push	{r4, r5, lr}
  403916:	b083      	sub	sp, #12
  403918:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40391a:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  40391c:	b174      	cbz	r4, 40393c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40391e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403922:	429a      	cmp	r2, r3
  403924:	d315      	bcc.n	403952 <prvNotifyQueueSetContainer+0x3e>
  403926:	f04f 0380 	mov.w	r3, #128	; 0x80
  40392a:	b672      	cpsid	i
  40392c:	f383 8811 	msr	BASEPRI, r3
  403930:	f3bf 8f6f 	isb	sy
  403934:	f3bf 8f4f 	dsb	sy
  403938:	b662      	cpsie	i
  40393a:	e7fe      	b.n	40393a <prvNotifyQueueSetContainer+0x26>
  40393c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403940:	b672      	cpsid	i
  403942:	f383 8811 	msr	BASEPRI, r3
  403946:	f3bf 8f6f 	isb	sy
  40394a:	f3bf 8f4f 	dsb	sy
  40394e:	b662      	cpsie	i
  403950:	e7fe      	b.n	403950 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  403952:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403954:	4293      	cmp	r3, r2
  403956:	d803      	bhi.n	403960 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  403958:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40395a:	4628      	mov	r0, r5
  40395c:	b003      	add	sp, #12
  40395e:	bd30      	pop	{r4, r5, pc}
  403960:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  403962:	a901      	add	r1, sp, #4
  403964:	4620      	mov	r0, r4
  403966:	4b0b      	ldr	r3, [pc, #44]	; (403994 <prvNotifyQueueSetContainer+0x80>)
  403968:	4798      	blx	r3
  40396a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40396c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40396e:	f1b3 3fff 	cmp.w	r3, #4294967295
  403972:	d10a      	bne.n	40398a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  403974:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403976:	2b00      	cmp	r3, #0
  403978:	d0ef      	beq.n	40395a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40397a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40397e:	4b06      	ldr	r3, [pc, #24]	; (403998 <prvNotifyQueueSetContainer+0x84>)
  403980:	4798      	blx	r3
  403982:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  403984:	bf18      	it	ne
  403986:	2501      	movne	r5, #1
  403988:	e7e7      	b.n	40395a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40398a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40398c:	3301      	adds	r3, #1
  40398e:	64a3      	str	r3, [r4, #72]	; 0x48
  403990:	e7e3      	b.n	40395a <prvNotifyQueueSetContainer+0x46>
  403992:	bf00      	nop
  403994:	0040388d 	.word	0x0040388d
  403998:	00404981 	.word	0x00404981

0040399c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40399c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40399e:	b172      	cbz	r2, 4039be <prvCopyDataFromQueue+0x22>
{
  4039a0:	b510      	push	{r4, lr}
  4039a2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4039a4:	68c4      	ldr	r4, [r0, #12]
  4039a6:	4414      	add	r4, r2
  4039a8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4039aa:	6840      	ldr	r0, [r0, #4]
  4039ac:	4284      	cmp	r4, r0
  4039ae:	d301      	bcc.n	4039b4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4039b0:	6818      	ldr	r0, [r3, #0]
  4039b2:	60d8      	str	r0, [r3, #12]
  4039b4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4039b6:	68d9      	ldr	r1, [r3, #12]
  4039b8:	4b01      	ldr	r3, [pc, #4]	; (4039c0 <prvCopyDataFromQueue+0x24>)
  4039ba:	4798      	blx	r3
  4039bc:	bd10      	pop	{r4, pc}
  4039be:	4770      	bx	lr
  4039c0:	004096f9 	.word	0x004096f9

004039c4 <prvUnlockQueue>:
{
  4039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4039c6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4039c8:	4b22      	ldr	r3, [pc, #136]	; (403a54 <prvUnlockQueue+0x90>)
  4039ca:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4039cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4039ce:	2b00      	cmp	r3, #0
  4039d0:	dd1b      	ble.n	403a0a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4039d2:	4d21      	ldr	r5, [pc, #132]	; (403a58 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4039d4:	4f21      	ldr	r7, [pc, #132]	; (403a5c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4039d6:	4e22      	ldr	r6, [pc, #136]	; (403a60 <prvUnlockQueue+0x9c>)
  4039d8:	e00b      	b.n	4039f2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4039da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4039dc:	b1ab      	cbz	r3, 403a0a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4039de:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4039e2:	47b0      	blx	r6
  4039e4:	b978      	cbnz	r0, 403a06 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4039e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4039e8:	3b01      	subs	r3, #1
  4039ea:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4039ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4039ee:	2b00      	cmp	r3, #0
  4039f0:	dd0b      	ble.n	403a0a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4039f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4039f4:	2b00      	cmp	r3, #0
  4039f6:	d0f0      	beq.n	4039da <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4039f8:	2100      	movs	r1, #0
  4039fa:	4620      	mov	r0, r4
  4039fc:	47a8      	blx	r5
  4039fe:	2801      	cmp	r0, #1
  403a00:	d1f1      	bne.n	4039e6 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  403a02:	47b8      	blx	r7
  403a04:	e7ef      	b.n	4039e6 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  403a06:	47b8      	blx	r7
  403a08:	e7ed      	b.n	4039e6 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  403a0a:	f04f 33ff 	mov.w	r3, #4294967295
  403a0e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  403a10:	4b14      	ldr	r3, [pc, #80]	; (403a64 <prvUnlockQueue+0xa0>)
  403a12:	4798      	blx	r3
	taskENTER_CRITICAL();
  403a14:	4b0f      	ldr	r3, [pc, #60]	; (403a54 <prvUnlockQueue+0x90>)
  403a16:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  403a18:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403a1a:	2b00      	cmp	r3, #0
  403a1c:	dd14      	ble.n	403a48 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403a1e:	6923      	ldr	r3, [r4, #16]
  403a20:	b193      	cbz	r3, 403a48 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  403a22:	f104 0610 	add.w	r6, r4, #16
  403a26:	4d0e      	ldr	r5, [pc, #56]	; (403a60 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  403a28:	4f0c      	ldr	r7, [pc, #48]	; (403a5c <prvUnlockQueue+0x98>)
  403a2a:	e007      	b.n	403a3c <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  403a2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403a2e:	3b01      	subs	r3, #1
  403a30:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  403a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403a34:	2b00      	cmp	r3, #0
  403a36:	dd07      	ble.n	403a48 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403a38:	6923      	ldr	r3, [r4, #16]
  403a3a:	b12b      	cbz	r3, 403a48 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  403a3c:	4630      	mov	r0, r6
  403a3e:	47a8      	blx	r5
  403a40:	2800      	cmp	r0, #0
  403a42:	d0f3      	beq.n	403a2c <prvUnlockQueue+0x68>
					vTaskMissedYield();
  403a44:	47b8      	blx	r7
  403a46:	e7f1      	b.n	403a2c <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  403a48:	f04f 33ff 	mov.w	r3, #4294967295
  403a4c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  403a4e:	4b05      	ldr	r3, [pc, #20]	; (403a64 <prvUnlockQueue+0xa0>)
  403a50:	4798      	blx	r3
  403a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a54:	004035a5 	.word	0x004035a5
  403a58:	00403915 	.word	0x00403915
  403a5c:	00404add 	.word	0x00404add
  403a60:	00404981 	.word	0x00404981
  403a64:	004035f1 	.word	0x004035f1

00403a68 <xQueueGenericReset>:
{
  403a68:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  403a6a:	b308      	cbz	r0, 403ab0 <xQueueGenericReset+0x48>
  403a6c:	4604      	mov	r4, r0
  403a6e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  403a70:	4b1d      	ldr	r3, [pc, #116]	; (403ae8 <xQueueGenericReset+0x80>)
  403a72:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  403a74:	6822      	ldr	r2, [r4, #0]
  403a76:	6c21      	ldr	r1, [r4, #64]	; 0x40
  403a78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403a7a:	fb03 f301 	mul.w	r3, r3, r1
  403a7e:	18d0      	adds	r0, r2, r3
  403a80:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  403a82:	2000      	movs	r0, #0
  403a84:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  403a86:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  403a88:	1a5b      	subs	r3, r3, r1
  403a8a:	4413      	add	r3, r2
  403a8c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  403a8e:	f04f 33ff 	mov.w	r3, #4294967295
  403a92:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  403a94:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  403a96:	b9fd      	cbnz	r5, 403ad8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403a98:	6923      	ldr	r3, [r4, #16]
  403a9a:	b12b      	cbz	r3, 403aa8 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  403a9c:	f104 0010 	add.w	r0, r4, #16
  403aa0:	4b12      	ldr	r3, [pc, #72]	; (403aec <xQueueGenericReset+0x84>)
  403aa2:	4798      	blx	r3
  403aa4:	2801      	cmp	r0, #1
  403aa6:	d00e      	beq.n	403ac6 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  403aa8:	4b11      	ldr	r3, [pc, #68]	; (403af0 <xQueueGenericReset+0x88>)
  403aaa:	4798      	blx	r3
}
  403aac:	2001      	movs	r0, #1
  403aae:	bd38      	pop	{r3, r4, r5, pc}
  403ab0:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ab4:	b672      	cpsid	i
  403ab6:	f383 8811 	msr	BASEPRI, r3
  403aba:	f3bf 8f6f 	isb	sy
  403abe:	f3bf 8f4f 	dsb	sy
  403ac2:	b662      	cpsie	i
  403ac4:	e7fe      	b.n	403ac4 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  403ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403aca:	4b0a      	ldr	r3, [pc, #40]	; (403af4 <xQueueGenericReset+0x8c>)
  403acc:	601a      	str	r2, [r3, #0]
  403ace:	f3bf 8f4f 	dsb	sy
  403ad2:	f3bf 8f6f 	isb	sy
  403ad6:	e7e7      	b.n	403aa8 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  403ad8:	f104 0010 	add.w	r0, r4, #16
  403adc:	4d06      	ldr	r5, [pc, #24]	; (403af8 <xQueueGenericReset+0x90>)
  403ade:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  403ae0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403ae4:	47a8      	blx	r5
  403ae6:	e7df      	b.n	403aa8 <xQueueGenericReset+0x40>
  403ae8:	004035a5 	.word	0x004035a5
  403aec:	00404981 	.word	0x00404981
  403af0:	004035f1 	.word	0x004035f1
  403af4:	e000ed04 	.word	0xe000ed04
  403af8:	00403459 	.word	0x00403459

00403afc <xQueueGenericCreate>:
{
  403afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  403afe:	b950      	cbnz	r0, 403b16 <xQueueGenericCreate+0x1a>
  403b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b04:	b672      	cpsid	i
  403b06:	f383 8811 	msr	BASEPRI, r3
  403b0a:	f3bf 8f6f 	isb	sy
  403b0e:	f3bf 8f4f 	dsb	sy
  403b12:	b662      	cpsie	i
  403b14:	e7fe      	b.n	403b14 <xQueueGenericCreate+0x18>
  403b16:	4606      	mov	r6, r0
  403b18:	4617      	mov	r7, r2
  403b1a:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  403b1c:	b189      	cbz	r1, 403b42 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403b1e:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  403b22:	3059      	adds	r0, #89	; 0x59
  403b24:	4b12      	ldr	r3, [pc, #72]	; (403b70 <xQueueGenericCreate+0x74>)
  403b26:	4798      	blx	r3
	if( pxNewQueue != NULL )
  403b28:	4604      	mov	r4, r0
  403b2a:	b9e8      	cbnz	r0, 403b68 <xQueueGenericCreate+0x6c>
  403b2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b30:	b672      	cpsid	i
  403b32:	f383 8811 	msr	BASEPRI, r3
  403b36:	f3bf 8f6f 	isb	sy
  403b3a:	f3bf 8f4f 	dsb	sy
  403b3e:	b662      	cpsie	i
  403b40:	e7fe      	b.n	403b40 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  403b42:	2058      	movs	r0, #88	; 0x58
  403b44:	4b0a      	ldr	r3, [pc, #40]	; (403b70 <xQueueGenericCreate+0x74>)
  403b46:	4798      	blx	r3
	if( pxNewQueue != NULL )
  403b48:	4604      	mov	r4, r0
  403b4a:	2800      	cmp	r0, #0
  403b4c:	d0ee      	beq.n	403b2c <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  403b4e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  403b50:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  403b52:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  403b54:	2101      	movs	r1, #1
  403b56:	4620      	mov	r0, r4
  403b58:	4b06      	ldr	r3, [pc, #24]	; (403b74 <xQueueGenericCreate+0x78>)
  403b5a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  403b5c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  403b60:	2300      	movs	r3, #0
  403b62:	6563      	str	r3, [r4, #84]	; 0x54
}
  403b64:	4620      	mov	r0, r4
  403b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  403b68:	f100 0358 	add.w	r3, r0, #88	; 0x58
  403b6c:	6003      	str	r3, [r0, #0]
  403b6e:	e7ef      	b.n	403b50 <xQueueGenericCreate+0x54>
  403b70:	00403801 	.word	0x00403801
  403b74:	00403a69 	.word	0x00403a69

00403b78 <xQueueGenericSend>:
{
  403b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b7c:	b085      	sub	sp, #20
  403b7e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  403b80:	b1b8      	cbz	r0, 403bb2 <xQueueGenericSend+0x3a>
  403b82:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403b84:	b301      	cbz	r1, 403bc8 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403b86:	2b02      	cmp	r3, #2
  403b88:	d02c      	beq.n	403be4 <xQueueGenericSend+0x6c>
  403b8a:	461d      	mov	r5, r3
  403b8c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  403b8e:	4b66      	ldr	r3, [pc, #408]	; (403d28 <xQueueGenericSend+0x1b0>)
  403b90:	4798      	blx	r3
  403b92:	2800      	cmp	r0, #0
  403b94:	d134      	bne.n	403c00 <xQueueGenericSend+0x88>
  403b96:	9b01      	ldr	r3, [sp, #4]
  403b98:	2b00      	cmp	r3, #0
  403b9a:	d038      	beq.n	403c0e <xQueueGenericSend+0x96>
  403b9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ba0:	b672      	cpsid	i
  403ba2:	f383 8811 	msr	BASEPRI, r3
  403ba6:	f3bf 8f6f 	isb	sy
  403baa:	f3bf 8f4f 	dsb	sy
  403bae:	b662      	cpsie	i
  403bb0:	e7fe      	b.n	403bb0 <xQueueGenericSend+0x38>
  403bb2:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bb6:	b672      	cpsid	i
  403bb8:	f383 8811 	msr	BASEPRI, r3
  403bbc:	f3bf 8f6f 	isb	sy
  403bc0:	f3bf 8f4f 	dsb	sy
  403bc4:	b662      	cpsie	i
  403bc6:	e7fe      	b.n	403bc6 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403bc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  403bca:	2a00      	cmp	r2, #0
  403bcc:	d0db      	beq.n	403b86 <xQueueGenericSend+0xe>
  403bce:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bd2:	b672      	cpsid	i
  403bd4:	f383 8811 	msr	BASEPRI, r3
  403bd8:	f3bf 8f6f 	isb	sy
  403bdc:	f3bf 8f4f 	dsb	sy
  403be0:	b662      	cpsie	i
  403be2:	e7fe      	b.n	403be2 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403be4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  403be6:	2a01      	cmp	r2, #1
  403be8:	d0cf      	beq.n	403b8a <xQueueGenericSend+0x12>
  403bea:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bee:	b672      	cpsid	i
  403bf0:	f383 8811 	msr	BASEPRI, r3
  403bf4:	f3bf 8f6f 	isb	sy
  403bf8:	f3bf 8f4f 	dsb	sy
  403bfc:	b662      	cpsie	i
  403bfe:	e7fe      	b.n	403bfe <xQueueGenericSend+0x86>
  403c00:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  403c02:	4e4a      	ldr	r6, [pc, #296]	; (403d2c <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  403c04:	f8df a150 	ldr.w	sl, [pc, #336]	; 403d58 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  403c08:	f8df 912c 	ldr.w	r9, [pc, #300]	; 403d38 <xQueueGenericSend+0x1c0>
  403c0c:	e042      	b.n	403c94 <xQueueGenericSend+0x11c>
  403c0e:	2700      	movs	r7, #0
  403c10:	e7f7      	b.n	403c02 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403c12:	462a      	mov	r2, r5
  403c14:	4641      	mov	r1, r8
  403c16:	4620      	mov	r0, r4
  403c18:	4b45      	ldr	r3, [pc, #276]	; (403d30 <xQueueGenericSend+0x1b8>)
  403c1a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  403c1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403c1e:	b19b      	cbz	r3, 403c48 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  403c20:	4629      	mov	r1, r5
  403c22:	4620      	mov	r0, r4
  403c24:	4b43      	ldr	r3, [pc, #268]	; (403d34 <xQueueGenericSend+0x1bc>)
  403c26:	4798      	blx	r3
  403c28:	2801      	cmp	r0, #1
  403c2a:	d107      	bne.n	403c3c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  403c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403c30:	4b41      	ldr	r3, [pc, #260]	; (403d38 <xQueueGenericSend+0x1c0>)
  403c32:	601a      	str	r2, [r3, #0]
  403c34:	f3bf 8f4f 	dsb	sy
  403c38:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  403c3c:	4b3f      	ldr	r3, [pc, #252]	; (403d3c <xQueueGenericSend+0x1c4>)
  403c3e:	4798      	blx	r3
				return pdPASS;
  403c40:	2001      	movs	r0, #1
}
  403c42:	b005      	add	sp, #20
  403c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403c4a:	b173      	cbz	r3, 403c6a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  403c4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403c50:	4b3b      	ldr	r3, [pc, #236]	; (403d40 <xQueueGenericSend+0x1c8>)
  403c52:	4798      	blx	r3
  403c54:	2801      	cmp	r0, #1
  403c56:	d1f1      	bne.n	403c3c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  403c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403c5c:	4b36      	ldr	r3, [pc, #216]	; (403d38 <xQueueGenericSend+0x1c0>)
  403c5e:	601a      	str	r2, [r3, #0]
  403c60:	f3bf 8f4f 	dsb	sy
  403c64:	f3bf 8f6f 	isb	sy
  403c68:	e7e8      	b.n	403c3c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  403c6a:	2800      	cmp	r0, #0
  403c6c:	d0e6      	beq.n	403c3c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  403c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403c72:	4b31      	ldr	r3, [pc, #196]	; (403d38 <xQueueGenericSend+0x1c0>)
  403c74:	601a      	str	r2, [r3, #0]
  403c76:	f3bf 8f4f 	dsb	sy
  403c7a:	f3bf 8f6f 	isb	sy
  403c7e:	e7dd      	b.n	403c3c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  403c80:	4b2e      	ldr	r3, [pc, #184]	; (403d3c <xQueueGenericSend+0x1c4>)
  403c82:	4798      	blx	r3
					return errQUEUE_FULL;
  403c84:	2000      	movs	r0, #0
  403c86:	e7dc      	b.n	403c42 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  403c88:	4620      	mov	r0, r4
  403c8a:	4b2e      	ldr	r3, [pc, #184]	; (403d44 <xQueueGenericSend+0x1cc>)
  403c8c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  403c8e:	4b2e      	ldr	r3, [pc, #184]	; (403d48 <xQueueGenericSend+0x1d0>)
  403c90:	4798      	blx	r3
  403c92:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  403c94:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  403c96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403c9a:	429a      	cmp	r2, r3
  403c9c:	d3b9      	bcc.n	403c12 <xQueueGenericSend+0x9a>
  403c9e:	2d02      	cmp	r5, #2
  403ca0:	d0b7      	beq.n	403c12 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  403ca2:	9b01      	ldr	r3, [sp, #4]
  403ca4:	2b00      	cmp	r3, #0
  403ca6:	d0eb      	beq.n	403c80 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  403ca8:	b90f      	cbnz	r7, 403cae <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  403caa:	a802      	add	r0, sp, #8
  403cac:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  403cae:	4b23      	ldr	r3, [pc, #140]	; (403d3c <xQueueGenericSend+0x1c4>)
  403cb0:	4798      	blx	r3
		vTaskSuspendAll();
  403cb2:	4b26      	ldr	r3, [pc, #152]	; (403d4c <xQueueGenericSend+0x1d4>)
  403cb4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  403cb6:	47b0      	blx	r6
  403cb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403cba:	f1b3 3fff 	cmp.w	r3, #4294967295
  403cbe:	d101      	bne.n	403cc4 <xQueueGenericSend+0x14c>
  403cc0:	2300      	movs	r3, #0
  403cc2:	6463      	str	r3, [r4, #68]	; 0x44
  403cc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
  403cca:	d101      	bne.n	403cd0 <xQueueGenericSend+0x158>
  403ccc:	2300      	movs	r3, #0
  403cce:	64a3      	str	r3, [r4, #72]	; 0x48
  403cd0:	4b1a      	ldr	r3, [pc, #104]	; (403d3c <xQueueGenericSend+0x1c4>)
  403cd2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  403cd4:	a901      	add	r1, sp, #4
  403cd6:	a802      	add	r0, sp, #8
  403cd8:	4b1d      	ldr	r3, [pc, #116]	; (403d50 <xQueueGenericSend+0x1d8>)
  403cda:	4798      	blx	r3
  403cdc:	b9e0      	cbnz	r0, 403d18 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  403cde:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  403ce0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  403ce4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  403ce6:	4b15      	ldr	r3, [pc, #84]	; (403d3c <xQueueGenericSend+0x1c4>)
  403ce8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  403cea:	45bb      	cmp	fp, r7
  403cec:	d1cc      	bne.n	403c88 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  403cee:	9901      	ldr	r1, [sp, #4]
  403cf0:	f104 0010 	add.w	r0, r4, #16
  403cf4:	4b17      	ldr	r3, [pc, #92]	; (403d54 <xQueueGenericSend+0x1dc>)
  403cf6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  403cf8:	4620      	mov	r0, r4
  403cfa:	4b12      	ldr	r3, [pc, #72]	; (403d44 <xQueueGenericSend+0x1cc>)
  403cfc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403cfe:	4b12      	ldr	r3, [pc, #72]	; (403d48 <xQueueGenericSend+0x1d0>)
  403d00:	4798      	blx	r3
  403d02:	2800      	cmp	r0, #0
  403d04:	d1c5      	bne.n	403c92 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  403d06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403d0a:	f8c9 3000 	str.w	r3, [r9]
  403d0e:	f3bf 8f4f 	dsb	sy
  403d12:	f3bf 8f6f 	isb	sy
  403d16:	e7bc      	b.n	403c92 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  403d18:	4620      	mov	r0, r4
  403d1a:	4b0a      	ldr	r3, [pc, #40]	; (403d44 <xQueueGenericSend+0x1cc>)
  403d1c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403d1e:	4b0a      	ldr	r3, [pc, #40]	; (403d48 <xQueueGenericSend+0x1d0>)
  403d20:	4798      	blx	r3
			return errQUEUE_FULL;
  403d22:	2000      	movs	r0, #0
  403d24:	e78d      	b.n	403c42 <xQueueGenericSend+0xca>
  403d26:	bf00      	nop
  403d28:	00404ae9 	.word	0x00404ae9
  403d2c:	004035a5 	.word	0x004035a5
  403d30:	0040388d 	.word	0x0040388d
  403d34:	00403915 	.word	0x00403915
  403d38:	e000ed04 	.word	0xe000ed04
  403d3c:	004035f1 	.word	0x004035f1
  403d40:	00404981 	.word	0x00404981
  403d44:	004039c5 	.word	0x004039c5
  403d48:	00404565 	.word	0x00404565
  403d4c:	004043fd 	.word	0x004043fd
  403d50:	00404a49 	.word	0x00404a49
  403d54:	0040487d 	.word	0x0040487d
  403d58:	00404a19 	.word	0x00404a19

00403d5c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  403d5c:	2800      	cmp	r0, #0
  403d5e:	d036      	beq.n	403dce <xQueueGenericSendFromISR+0x72>
{
  403d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d64:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403d66:	2900      	cmp	r1, #0
  403d68:	d03c      	beq.n	403de4 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403d6a:	2b02      	cmp	r3, #2
  403d6c:	d048      	beq.n	403e00 <xQueueGenericSendFromISR+0xa4>
  403d6e:	461e      	mov	r6, r3
  403d70:	4615      	mov	r5, r2
  403d72:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403d74:	4b35      	ldr	r3, [pc, #212]	; (403e4c <xQueueGenericSendFromISR+0xf0>)
  403d76:	4798      	blx	r3
	__asm volatile
  403d78:	f3ef 8711 	mrs	r7, BASEPRI
  403d7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d80:	b672      	cpsid	i
  403d82:	f383 8811 	msr	BASEPRI, r3
  403d86:	f3bf 8f6f 	isb	sy
  403d8a:	f3bf 8f4f 	dsb	sy
  403d8e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  403d90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403d92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403d94:	429a      	cmp	r2, r3
  403d96:	d301      	bcc.n	403d9c <xQueueGenericSendFromISR+0x40>
  403d98:	2e02      	cmp	r6, #2
  403d9a:	d14f      	bne.n	403e3c <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403d9c:	4632      	mov	r2, r6
  403d9e:	4641      	mov	r1, r8
  403da0:	4620      	mov	r0, r4
  403da2:	4b2b      	ldr	r3, [pc, #172]	; (403e50 <xQueueGenericSendFromISR+0xf4>)
  403da4:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  403da6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403da8:	f1b3 3fff 	cmp.w	r3, #4294967295
  403dac:	d141      	bne.n	403e32 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  403dae:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403db0:	2b00      	cmp	r3, #0
  403db2:	d033      	beq.n	403e1c <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  403db4:	4631      	mov	r1, r6
  403db6:	4620      	mov	r0, r4
  403db8:	4b26      	ldr	r3, [pc, #152]	; (403e54 <xQueueGenericSendFromISR+0xf8>)
  403dba:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  403dbc:	2d00      	cmp	r5, #0
  403dbe:	d03f      	beq.n	403e40 <xQueueGenericSendFromISR+0xe4>
  403dc0:	2801      	cmp	r0, #1
  403dc2:	d13d      	bne.n	403e40 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  403dc4:	6028      	str	r0, [r5, #0]
	__asm volatile
  403dc6:	f387 8811 	msr	BASEPRI, r7
}
  403dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  403dce:	f04f 0380 	mov.w	r3, #128	; 0x80
  403dd2:	b672      	cpsid	i
  403dd4:	f383 8811 	msr	BASEPRI, r3
  403dd8:	f3bf 8f6f 	isb	sy
  403ddc:	f3bf 8f4f 	dsb	sy
  403de0:	b662      	cpsie	i
  403de2:	e7fe      	b.n	403de2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403de4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  403de6:	2800      	cmp	r0, #0
  403de8:	d0bf      	beq.n	403d6a <xQueueGenericSendFromISR+0xe>
  403dea:	f04f 0380 	mov.w	r3, #128	; 0x80
  403dee:	b672      	cpsid	i
  403df0:	f383 8811 	msr	BASEPRI, r3
  403df4:	f3bf 8f6f 	isb	sy
  403df8:	f3bf 8f4f 	dsb	sy
  403dfc:	b662      	cpsie	i
  403dfe:	e7fe      	b.n	403dfe <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403e00:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  403e02:	2801      	cmp	r0, #1
  403e04:	d0b3      	beq.n	403d6e <xQueueGenericSendFromISR+0x12>
  403e06:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e0a:	b672      	cpsid	i
  403e0c:	f383 8811 	msr	BASEPRI, r3
  403e10:	f3bf 8f6f 	isb	sy
  403e14:	f3bf 8f4f 	dsb	sy
  403e18:	b662      	cpsie	i
  403e1a:	e7fe      	b.n	403e1a <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403e1e:	b18b      	cbz	r3, 403e44 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403e20:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403e24:	4b0c      	ldr	r3, [pc, #48]	; (403e58 <xQueueGenericSendFromISR+0xfc>)
  403e26:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  403e28:	b175      	cbz	r5, 403e48 <xQueueGenericSendFromISR+0xec>
  403e2a:	b168      	cbz	r0, 403e48 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  403e2c:	2001      	movs	r0, #1
  403e2e:	6028      	str	r0, [r5, #0]
  403e30:	e7c9      	b.n	403dc6 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  403e32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403e34:	3301      	adds	r3, #1
  403e36:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  403e38:	2001      	movs	r0, #1
  403e3a:	e7c4      	b.n	403dc6 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  403e3c:	2000      	movs	r0, #0
  403e3e:	e7c2      	b.n	403dc6 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  403e40:	2001      	movs	r0, #1
  403e42:	e7c0      	b.n	403dc6 <xQueueGenericSendFromISR+0x6a>
  403e44:	2001      	movs	r0, #1
  403e46:	e7be      	b.n	403dc6 <xQueueGenericSendFromISR+0x6a>
  403e48:	2001      	movs	r0, #1
  403e4a:	e7bc      	b.n	403dc6 <xQueueGenericSendFromISR+0x6a>
  403e4c:	0040379d 	.word	0x0040379d
  403e50:	0040388d 	.word	0x0040388d
  403e54:	00403915 	.word	0x00403915
  403e58:	00404981 	.word	0x00404981

00403e5c <xQueueGenericReceive>:
{
  403e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e60:	b084      	sub	sp, #16
  403e62:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  403e64:	b198      	cbz	r0, 403e8e <xQueueGenericReceive+0x32>
  403e66:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403e68:	b1e1      	cbz	r1, 403ea4 <xQueueGenericReceive+0x48>
  403e6a:	4698      	mov	r8, r3
  403e6c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  403e6e:	4b61      	ldr	r3, [pc, #388]	; (403ff4 <xQueueGenericReceive+0x198>)
  403e70:	4798      	blx	r3
  403e72:	bb28      	cbnz	r0, 403ec0 <xQueueGenericReceive+0x64>
  403e74:	9b01      	ldr	r3, [sp, #4]
  403e76:	b353      	cbz	r3, 403ece <xQueueGenericReceive+0x72>
  403e78:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e7c:	b672      	cpsid	i
  403e7e:	f383 8811 	msr	BASEPRI, r3
  403e82:	f3bf 8f6f 	isb	sy
  403e86:	f3bf 8f4f 	dsb	sy
  403e8a:	b662      	cpsie	i
  403e8c:	e7fe      	b.n	403e8c <xQueueGenericReceive+0x30>
  403e8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e92:	b672      	cpsid	i
  403e94:	f383 8811 	msr	BASEPRI, r3
  403e98:	f3bf 8f6f 	isb	sy
  403e9c:	f3bf 8f4f 	dsb	sy
  403ea0:	b662      	cpsie	i
  403ea2:	e7fe      	b.n	403ea2 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403ea4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  403ea6:	2a00      	cmp	r2, #0
  403ea8:	d0df      	beq.n	403e6a <xQueueGenericReceive+0xe>
  403eaa:	f04f 0380 	mov.w	r3, #128	; 0x80
  403eae:	b672      	cpsid	i
  403eb0:	f383 8811 	msr	BASEPRI, r3
  403eb4:	f3bf 8f6f 	isb	sy
  403eb8:	f3bf 8f4f 	dsb	sy
  403ebc:	b662      	cpsie	i
  403ebe:	e7fe      	b.n	403ebe <xQueueGenericReceive+0x62>
  403ec0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  403ec2:	4d4d      	ldr	r5, [pc, #308]	; (403ff8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  403ec4:	f8df a160 	ldr.w	sl, [pc, #352]	; 404028 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  403ec8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 404008 <xQueueGenericReceive+0x1ac>
  403ecc:	e04b      	b.n	403f66 <xQueueGenericReceive+0x10a>
  403ece:	2600      	movs	r6, #0
  403ed0:	e7f7      	b.n	403ec2 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  403ed2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  403ed4:	4639      	mov	r1, r7
  403ed6:	4620      	mov	r0, r4
  403ed8:	4b48      	ldr	r3, [pc, #288]	; (403ffc <xQueueGenericReceive+0x1a0>)
  403eda:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  403edc:	f1b8 0f00 	cmp.w	r8, #0
  403ee0:	d11d      	bne.n	403f1e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  403ee2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403ee4:	3b01      	subs	r3, #1
  403ee6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403ee8:	6823      	ldr	r3, [r4, #0]
  403eea:	b913      	cbnz	r3, 403ef2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  403eec:	4b44      	ldr	r3, [pc, #272]	; (404000 <xQueueGenericReceive+0x1a4>)
  403eee:	4798      	blx	r3
  403ef0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403ef2:	6923      	ldr	r3, [r4, #16]
  403ef4:	b16b      	cbz	r3, 403f12 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  403ef6:	f104 0010 	add.w	r0, r4, #16
  403efa:	4b42      	ldr	r3, [pc, #264]	; (404004 <xQueueGenericReceive+0x1a8>)
  403efc:	4798      	blx	r3
  403efe:	2801      	cmp	r0, #1
  403f00:	d107      	bne.n	403f12 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  403f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403f06:	4b40      	ldr	r3, [pc, #256]	; (404008 <xQueueGenericReceive+0x1ac>)
  403f08:	601a      	str	r2, [r3, #0]
  403f0a:	f3bf 8f4f 	dsb	sy
  403f0e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  403f12:	4b3e      	ldr	r3, [pc, #248]	; (40400c <xQueueGenericReceive+0x1b0>)
  403f14:	4798      	blx	r3
				return pdPASS;
  403f16:	2001      	movs	r0, #1
}
  403f18:	b004      	add	sp, #16
  403f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  403f1e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403f22:	2b00      	cmp	r3, #0
  403f24:	d0f5      	beq.n	403f12 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403f26:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403f2a:	4b36      	ldr	r3, [pc, #216]	; (404004 <xQueueGenericReceive+0x1a8>)
  403f2c:	4798      	blx	r3
  403f2e:	2800      	cmp	r0, #0
  403f30:	d0ef      	beq.n	403f12 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  403f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403f36:	4b34      	ldr	r3, [pc, #208]	; (404008 <xQueueGenericReceive+0x1ac>)
  403f38:	601a      	str	r2, [r3, #0]
  403f3a:	f3bf 8f4f 	dsb	sy
  403f3e:	f3bf 8f6f 	isb	sy
  403f42:	e7e6      	b.n	403f12 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  403f44:	4b31      	ldr	r3, [pc, #196]	; (40400c <xQueueGenericReceive+0x1b0>)
  403f46:	4798      	blx	r3
					return errQUEUE_EMPTY;
  403f48:	2000      	movs	r0, #0
  403f4a:	e7e5      	b.n	403f18 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  403f4c:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  403f4e:	6860      	ldr	r0, [r4, #4]
  403f50:	4b2f      	ldr	r3, [pc, #188]	; (404010 <xQueueGenericReceive+0x1b4>)
  403f52:	4798      	blx	r3
						taskEXIT_CRITICAL();
  403f54:	4b2d      	ldr	r3, [pc, #180]	; (40400c <xQueueGenericReceive+0x1b0>)
  403f56:	4798      	blx	r3
  403f58:	e030      	b.n	403fbc <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  403f5a:	4620      	mov	r0, r4
  403f5c:	4b2d      	ldr	r3, [pc, #180]	; (404014 <xQueueGenericReceive+0x1b8>)
  403f5e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  403f60:	4b2d      	ldr	r3, [pc, #180]	; (404018 <xQueueGenericReceive+0x1bc>)
  403f62:	4798      	blx	r3
  403f64:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  403f66:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  403f68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403f6a:	2b00      	cmp	r3, #0
  403f6c:	d1b1      	bne.n	403ed2 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  403f6e:	9b01      	ldr	r3, [sp, #4]
  403f70:	2b00      	cmp	r3, #0
  403f72:	d0e7      	beq.n	403f44 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  403f74:	b90e      	cbnz	r6, 403f7a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  403f76:	a802      	add	r0, sp, #8
  403f78:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  403f7a:	4b24      	ldr	r3, [pc, #144]	; (40400c <xQueueGenericReceive+0x1b0>)
  403f7c:	4798      	blx	r3
		vTaskSuspendAll();
  403f7e:	4b27      	ldr	r3, [pc, #156]	; (40401c <xQueueGenericReceive+0x1c0>)
  403f80:	4798      	blx	r3
		prvLockQueue( pxQueue );
  403f82:	47a8      	blx	r5
  403f84:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403f86:	f1b3 3fff 	cmp.w	r3, #4294967295
  403f8a:	d101      	bne.n	403f90 <xQueueGenericReceive+0x134>
  403f8c:	2300      	movs	r3, #0
  403f8e:	6463      	str	r3, [r4, #68]	; 0x44
  403f90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403f92:	f1b3 3fff 	cmp.w	r3, #4294967295
  403f96:	d101      	bne.n	403f9c <xQueueGenericReceive+0x140>
  403f98:	2300      	movs	r3, #0
  403f9a:	64a3      	str	r3, [r4, #72]	; 0x48
  403f9c:	4b1b      	ldr	r3, [pc, #108]	; (40400c <xQueueGenericReceive+0x1b0>)
  403f9e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  403fa0:	a901      	add	r1, sp, #4
  403fa2:	a802      	add	r0, sp, #8
  403fa4:	4b1e      	ldr	r3, [pc, #120]	; (404020 <xQueueGenericReceive+0x1c4>)
  403fa6:	4798      	blx	r3
  403fa8:	b9e8      	cbnz	r0, 403fe6 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  403faa:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  403fac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  403fae:	4b17      	ldr	r3, [pc, #92]	; (40400c <xQueueGenericReceive+0x1b0>)
  403fb0:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  403fb2:	2e00      	cmp	r6, #0
  403fb4:	d1d1      	bne.n	403f5a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403fb6:	6823      	ldr	r3, [r4, #0]
  403fb8:	2b00      	cmp	r3, #0
  403fba:	d0c7      	beq.n	403f4c <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  403fbc:	9901      	ldr	r1, [sp, #4]
  403fbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403fc2:	4b18      	ldr	r3, [pc, #96]	; (404024 <xQueueGenericReceive+0x1c8>)
  403fc4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  403fc6:	4620      	mov	r0, r4
  403fc8:	4b12      	ldr	r3, [pc, #72]	; (404014 <xQueueGenericReceive+0x1b8>)
  403fca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403fcc:	4b12      	ldr	r3, [pc, #72]	; (404018 <xQueueGenericReceive+0x1bc>)
  403fce:	4798      	blx	r3
  403fd0:	2800      	cmp	r0, #0
  403fd2:	d1c7      	bne.n	403f64 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  403fd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403fd8:	f8c9 3000 	str.w	r3, [r9]
  403fdc:	f3bf 8f4f 	dsb	sy
  403fe0:	f3bf 8f6f 	isb	sy
  403fe4:	e7be      	b.n	403f64 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  403fe6:	4620      	mov	r0, r4
  403fe8:	4b0a      	ldr	r3, [pc, #40]	; (404014 <xQueueGenericReceive+0x1b8>)
  403fea:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403fec:	4b0a      	ldr	r3, [pc, #40]	; (404018 <xQueueGenericReceive+0x1bc>)
  403fee:	4798      	blx	r3
			return errQUEUE_EMPTY;
  403ff0:	2000      	movs	r0, #0
  403ff2:	e791      	b.n	403f18 <xQueueGenericReceive+0xbc>
  403ff4:	00404ae9 	.word	0x00404ae9
  403ff8:	004035a5 	.word	0x004035a5
  403ffc:	0040399d 	.word	0x0040399d
  404000:	00404c69 	.word	0x00404c69
  404004:	00404981 	.word	0x00404981
  404008:	e000ed04 	.word	0xe000ed04
  40400c:	004035f1 	.word	0x004035f1
  404010:	00404b09 	.word	0x00404b09
  404014:	004039c5 	.word	0x004039c5
  404018:	00404565 	.word	0x00404565
  40401c:	004043fd 	.word	0x004043fd
  404020:	00404a49 	.word	0x00404a49
  404024:	0040487d 	.word	0x0040487d
  404028:	00404a19 	.word	0x00404a19

0040402c <vQueueAddToRegistry>:
	{
  40402c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40402e:	4b0b      	ldr	r3, [pc, #44]	; (40405c <vQueueAddToRegistry+0x30>)
  404030:	681b      	ldr	r3, [r3, #0]
  404032:	b153      	cbz	r3, 40404a <vQueueAddToRegistry+0x1e>
  404034:	2301      	movs	r3, #1
  404036:	4c09      	ldr	r4, [pc, #36]	; (40405c <vQueueAddToRegistry+0x30>)
  404038:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  40403c:	b132      	cbz	r2, 40404c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40403e:	3301      	adds	r3, #1
  404040:	2b08      	cmp	r3, #8
  404042:	d1f9      	bne.n	404038 <vQueueAddToRegistry+0xc>
	}
  404044:	f85d 4b04 	ldr.w	r4, [sp], #4
  404048:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40404a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40404c:	4a03      	ldr	r2, [pc, #12]	; (40405c <vQueueAddToRegistry+0x30>)
  40404e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  404052:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404056:	6058      	str	r0, [r3, #4]
				break;
  404058:	e7f4      	b.n	404044 <vQueueAddToRegistry+0x18>
  40405a:	bf00      	nop
  40405c:	2040ca54 	.word	0x2040ca54

00404060 <vQueueWaitForMessageRestricted>:
	{
  404060:	b570      	push	{r4, r5, r6, lr}
  404062:	4604      	mov	r4, r0
  404064:	460d      	mov	r5, r1
  404066:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  404068:	4b0f      	ldr	r3, [pc, #60]	; (4040a8 <vQueueWaitForMessageRestricted+0x48>)
  40406a:	4798      	blx	r3
  40406c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40406e:	f1b3 3fff 	cmp.w	r3, #4294967295
  404072:	d00b      	beq.n	40408c <vQueueWaitForMessageRestricted+0x2c>
  404074:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404076:	f1b3 3fff 	cmp.w	r3, #4294967295
  40407a:	d00a      	beq.n	404092 <vQueueWaitForMessageRestricted+0x32>
  40407c:	4b0b      	ldr	r3, [pc, #44]	; (4040ac <vQueueWaitForMessageRestricted+0x4c>)
  40407e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  404080:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404082:	b14b      	cbz	r3, 404098 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  404084:	4620      	mov	r0, r4
  404086:	4b0a      	ldr	r3, [pc, #40]	; (4040b0 <vQueueWaitForMessageRestricted+0x50>)
  404088:	4798      	blx	r3
  40408a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40408c:	2300      	movs	r3, #0
  40408e:	6463      	str	r3, [r4, #68]	; 0x44
  404090:	e7f0      	b.n	404074 <vQueueWaitForMessageRestricted+0x14>
  404092:	2300      	movs	r3, #0
  404094:	64a3      	str	r3, [r4, #72]	; 0x48
  404096:	e7f1      	b.n	40407c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  404098:	4632      	mov	r2, r6
  40409a:	4629      	mov	r1, r5
  40409c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4040a0:	4b04      	ldr	r3, [pc, #16]	; (4040b4 <vQueueWaitForMessageRestricted+0x54>)
  4040a2:	4798      	blx	r3
  4040a4:	e7ee      	b.n	404084 <vQueueWaitForMessageRestricted+0x24>
  4040a6:	bf00      	nop
  4040a8:	004035a5 	.word	0x004035a5
  4040ac:	004035f1 	.word	0x004035f1
  4040b0:	004039c5 	.word	0x004039c5
  4040b4:	00404901 	.word	0x00404901

004040b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4040b8:	4b08      	ldr	r3, [pc, #32]	; (4040dc <prvResetNextTaskUnblockTime+0x24>)
  4040ba:	681b      	ldr	r3, [r3, #0]
  4040bc:	681b      	ldr	r3, [r3, #0]
  4040be:	b13b      	cbz	r3, 4040d0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4040c0:	4b06      	ldr	r3, [pc, #24]	; (4040dc <prvResetNextTaskUnblockTime+0x24>)
  4040c2:	681b      	ldr	r3, [r3, #0]
  4040c4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4040c6:	68db      	ldr	r3, [r3, #12]
  4040c8:	685a      	ldr	r2, [r3, #4]
  4040ca:	4b05      	ldr	r3, [pc, #20]	; (4040e0 <prvResetNextTaskUnblockTime+0x28>)
  4040cc:	601a      	str	r2, [r3, #0]
  4040ce:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4040d0:	f04f 32ff 	mov.w	r2, #4294967295
  4040d4:	4b02      	ldr	r3, [pc, #8]	; (4040e0 <prvResetNextTaskUnblockTime+0x28>)
  4040d6:	601a      	str	r2, [r3, #0]
  4040d8:	4770      	bx	lr
  4040da:	bf00      	nop
  4040dc:	2040c290 	.word	0x2040c290
  4040e0:	2040c33c 	.word	0x2040c33c

004040e4 <prvAddCurrentTaskToDelayedList>:
{
  4040e4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4040e6:	4b0f      	ldr	r3, [pc, #60]	; (404124 <prvAddCurrentTaskToDelayedList+0x40>)
  4040e8:	681b      	ldr	r3, [r3, #0]
  4040ea:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4040ec:	4b0e      	ldr	r3, [pc, #56]	; (404128 <prvAddCurrentTaskToDelayedList+0x44>)
  4040ee:	681b      	ldr	r3, [r3, #0]
  4040f0:	4298      	cmp	r0, r3
  4040f2:	d30e      	bcc.n	404112 <prvAddCurrentTaskToDelayedList+0x2e>
  4040f4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4040f6:	4b0d      	ldr	r3, [pc, #52]	; (40412c <prvAddCurrentTaskToDelayedList+0x48>)
  4040f8:	6818      	ldr	r0, [r3, #0]
  4040fa:	4b0a      	ldr	r3, [pc, #40]	; (404124 <prvAddCurrentTaskToDelayedList+0x40>)
  4040fc:	6819      	ldr	r1, [r3, #0]
  4040fe:	3104      	adds	r1, #4
  404100:	4b0b      	ldr	r3, [pc, #44]	; (404130 <prvAddCurrentTaskToDelayedList+0x4c>)
  404102:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  404104:	4b0b      	ldr	r3, [pc, #44]	; (404134 <prvAddCurrentTaskToDelayedList+0x50>)
  404106:	681b      	ldr	r3, [r3, #0]
  404108:	429c      	cmp	r4, r3
  40410a:	d201      	bcs.n	404110 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40410c:	4b09      	ldr	r3, [pc, #36]	; (404134 <prvAddCurrentTaskToDelayedList+0x50>)
  40410e:	601c      	str	r4, [r3, #0]
  404110:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  404112:	4b09      	ldr	r3, [pc, #36]	; (404138 <prvAddCurrentTaskToDelayedList+0x54>)
  404114:	6818      	ldr	r0, [r3, #0]
  404116:	4b03      	ldr	r3, [pc, #12]	; (404124 <prvAddCurrentTaskToDelayedList+0x40>)
  404118:	6819      	ldr	r1, [r3, #0]
  40411a:	3104      	adds	r1, #4
  40411c:	4b04      	ldr	r3, [pc, #16]	; (404130 <prvAddCurrentTaskToDelayedList+0x4c>)
  40411e:	4798      	blx	r3
  404120:	bd10      	pop	{r4, pc}
  404122:	bf00      	nop
  404124:	2040c28c 	.word	0x2040c28c
  404128:	2040c384 	.word	0x2040c384
  40412c:	2040c290 	.word	0x2040c290
  404130:	0040348d 	.word	0x0040348d
  404134:	2040c33c 	.word	0x2040c33c
  404138:	2040c294 	.word	0x2040c294

0040413c <xTaskGenericCreate>:
{
  40413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404140:	b083      	sub	sp, #12
  404142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404144:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  404148:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  40414a:	b160      	cbz	r0, 404166 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  40414c:	2d04      	cmp	r5, #4
  40414e:	d915      	bls.n	40417c <xTaskGenericCreate+0x40>
  404150:	f04f 0380 	mov.w	r3, #128	; 0x80
  404154:	b672      	cpsid	i
  404156:	f383 8811 	msr	BASEPRI, r3
  40415a:	f3bf 8f6f 	isb	sy
  40415e:	f3bf 8f4f 	dsb	sy
  404162:	b662      	cpsie	i
  404164:	e7fe      	b.n	404164 <xTaskGenericCreate+0x28>
  404166:	f04f 0380 	mov.w	r3, #128	; 0x80
  40416a:	b672      	cpsid	i
  40416c:	f383 8811 	msr	BASEPRI, r3
  404170:	f3bf 8f6f 	isb	sy
  404174:	f3bf 8f4f 	dsb	sy
  404178:	b662      	cpsie	i
  40417a:	e7fe      	b.n	40417a <xTaskGenericCreate+0x3e>
  40417c:	9001      	str	r0, [sp, #4]
  40417e:	4698      	mov	r8, r3
  404180:	4691      	mov	r9, r2
  404182:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  404184:	b936      	cbnz	r6, 404194 <xTaskGenericCreate+0x58>
  404186:	0090      	lsls	r0, r2, #2
  404188:	4b62      	ldr	r3, [pc, #392]	; (404314 <xTaskGenericCreate+0x1d8>)
  40418a:	4798      	blx	r3
		if( pxStack != NULL )
  40418c:	4606      	mov	r6, r0
  40418e:	2800      	cmp	r0, #0
  404190:	f000 809e 	beq.w	4042d0 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  404194:	2058      	movs	r0, #88	; 0x58
  404196:	4b5f      	ldr	r3, [pc, #380]	; (404314 <xTaskGenericCreate+0x1d8>)
  404198:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40419a:	4604      	mov	r4, r0
  40419c:	2800      	cmp	r0, #0
  40419e:	f000 8094 	beq.w	4042ca <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4041a2:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4041a4:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4041a8:	21a5      	movs	r1, #165	; 0xa5
  4041aa:	4630      	mov	r0, r6
  4041ac:	4b5a      	ldr	r3, [pc, #360]	; (404318 <xTaskGenericCreate+0x1dc>)
  4041ae:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4041b0:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  4041b4:	444e      	add	r6, r9
  4041b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4041b8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4041bc:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4041c0:	783b      	ldrb	r3, [r7, #0]
  4041c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4041c6:	783b      	ldrb	r3, [r7, #0]
  4041c8:	2b00      	cmp	r3, #0
  4041ca:	f040 8084 	bne.w	4042d6 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4041ce:	2700      	movs	r7, #0
  4041d0:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  4041d4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4041d6:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4041d8:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4041da:	f104 0904 	add.w	r9, r4, #4
  4041de:	4648      	mov	r0, r9
  4041e0:	f8df b184 	ldr.w	fp, [pc, #388]	; 404368 <xTaskGenericCreate+0x22c>
  4041e4:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4041e6:	f104 0018 	add.w	r0, r4, #24
  4041ea:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4041ec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4041ee:	f1c5 0305 	rsb	r3, r5, #5
  4041f2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4041f4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4041f6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4041f8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4041fc:	4642      	mov	r2, r8
  4041fe:	9901      	ldr	r1, [sp, #4]
  404200:	4630      	mov	r0, r6
  404202:	4b46      	ldr	r3, [pc, #280]	; (40431c <xTaskGenericCreate+0x1e0>)
  404204:	4798      	blx	r3
  404206:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  404208:	f1ba 0f00 	cmp.w	sl, #0
  40420c:	d001      	beq.n	404212 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40420e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  404212:	4b43      	ldr	r3, [pc, #268]	; (404320 <xTaskGenericCreate+0x1e4>)
  404214:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  404216:	4a43      	ldr	r2, [pc, #268]	; (404324 <xTaskGenericCreate+0x1e8>)
  404218:	6813      	ldr	r3, [r2, #0]
  40421a:	3301      	adds	r3, #1
  40421c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40421e:	4b42      	ldr	r3, [pc, #264]	; (404328 <xTaskGenericCreate+0x1ec>)
  404220:	681b      	ldr	r3, [r3, #0]
  404222:	2b00      	cmp	r3, #0
  404224:	d166      	bne.n	4042f4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  404226:	4b40      	ldr	r3, [pc, #256]	; (404328 <xTaskGenericCreate+0x1ec>)
  404228:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40422a:	6813      	ldr	r3, [r2, #0]
  40422c:	2b01      	cmp	r3, #1
  40422e:	d121      	bne.n	404274 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  404230:	4f3e      	ldr	r7, [pc, #248]	; (40432c <xTaskGenericCreate+0x1f0>)
  404232:	4638      	mov	r0, r7
  404234:	4e3e      	ldr	r6, [pc, #248]	; (404330 <xTaskGenericCreate+0x1f4>)
  404236:	47b0      	blx	r6
  404238:	f107 0014 	add.w	r0, r7, #20
  40423c:	47b0      	blx	r6
  40423e:	f107 0028 	add.w	r0, r7, #40	; 0x28
  404242:	47b0      	blx	r6
  404244:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  404248:	47b0      	blx	r6
  40424a:	f107 0050 	add.w	r0, r7, #80	; 0x50
  40424e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  404250:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40436c <xTaskGenericCreate+0x230>
  404254:	4640      	mov	r0, r8
  404256:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  404258:	4f36      	ldr	r7, [pc, #216]	; (404334 <xTaskGenericCreate+0x1f8>)
  40425a:	4638      	mov	r0, r7
  40425c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  40425e:	4836      	ldr	r0, [pc, #216]	; (404338 <xTaskGenericCreate+0x1fc>)
  404260:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  404262:	4836      	ldr	r0, [pc, #216]	; (40433c <xTaskGenericCreate+0x200>)
  404264:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  404266:	4836      	ldr	r0, [pc, #216]	; (404340 <xTaskGenericCreate+0x204>)
  404268:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  40426a:	4b36      	ldr	r3, [pc, #216]	; (404344 <xTaskGenericCreate+0x208>)
  40426c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  404270:	4b35      	ldr	r3, [pc, #212]	; (404348 <xTaskGenericCreate+0x20c>)
  404272:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  404274:	4a35      	ldr	r2, [pc, #212]	; (40434c <xTaskGenericCreate+0x210>)
  404276:	6813      	ldr	r3, [r2, #0]
  404278:	3301      	adds	r3, #1
  40427a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40427c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40427e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404280:	4a33      	ldr	r2, [pc, #204]	; (404350 <xTaskGenericCreate+0x214>)
  404282:	6811      	ldr	r1, [r2, #0]
  404284:	2301      	movs	r3, #1
  404286:	4083      	lsls	r3, r0
  404288:	430b      	orrs	r3, r1
  40428a:	6013      	str	r3, [r2, #0]
  40428c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404290:	4649      	mov	r1, r9
  404292:	4b26      	ldr	r3, [pc, #152]	; (40432c <xTaskGenericCreate+0x1f0>)
  404294:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  404298:	4b2e      	ldr	r3, [pc, #184]	; (404354 <xTaskGenericCreate+0x218>)
  40429a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40429c:	4b2e      	ldr	r3, [pc, #184]	; (404358 <xTaskGenericCreate+0x21c>)
  40429e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4042a0:	4b2e      	ldr	r3, [pc, #184]	; (40435c <xTaskGenericCreate+0x220>)
  4042a2:	681b      	ldr	r3, [r3, #0]
  4042a4:	2b00      	cmp	r3, #0
  4042a6:	d031      	beq.n	40430c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4042a8:	4b1f      	ldr	r3, [pc, #124]	; (404328 <xTaskGenericCreate+0x1ec>)
  4042aa:	681b      	ldr	r3, [r3, #0]
  4042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4042ae:	429d      	cmp	r5, r3
  4042b0:	d92e      	bls.n	404310 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  4042b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4042b6:	4b2a      	ldr	r3, [pc, #168]	; (404360 <xTaskGenericCreate+0x224>)
  4042b8:	601a      	str	r2, [r3, #0]
  4042ba:	f3bf 8f4f 	dsb	sy
  4042be:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4042c2:	2001      	movs	r0, #1
}
  4042c4:	b003      	add	sp, #12
  4042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  4042ca:	4630      	mov	r0, r6
  4042cc:	4b25      	ldr	r3, [pc, #148]	; (404364 <xTaskGenericCreate+0x228>)
  4042ce:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4042d0:	f04f 30ff 	mov.w	r0, #4294967295
  4042d4:	e7f6      	b.n	4042c4 <xTaskGenericCreate+0x188>
  4042d6:	463b      	mov	r3, r7
  4042d8:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4042dc:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4042de:	7859      	ldrb	r1, [r3, #1]
  4042e0:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4042e4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4042e8:	2900      	cmp	r1, #0
  4042ea:	f43f af70 	beq.w	4041ce <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4042ee:	42bb      	cmp	r3, r7
  4042f0:	d1f5      	bne.n	4042de <xTaskGenericCreate+0x1a2>
  4042f2:	e76c      	b.n	4041ce <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4042f4:	4b19      	ldr	r3, [pc, #100]	; (40435c <xTaskGenericCreate+0x220>)
  4042f6:	681b      	ldr	r3, [r3, #0]
  4042f8:	2b00      	cmp	r3, #0
  4042fa:	d1bb      	bne.n	404274 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4042fc:	4b0a      	ldr	r3, [pc, #40]	; (404328 <xTaskGenericCreate+0x1ec>)
  4042fe:	681b      	ldr	r3, [r3, #0]
  404300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404302:	429d      	cmp	r5, r3
  404304:	d3b6      	bcc.n	404274 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  404306:	4b08      	ldr	r3, [pc, #32]	; (404328 <xTaskGenericCreate+0x1ec>)
  404308:	601c      	str	r4, [r3, #0]
  40430a:	e7b3      	b.n	404274 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  40430c:	2001      	movs	r0, #1
  40430e:	e7d9      	b.n	4042c4 <xTaskGenericCreate+0x188>
  404310:	2001      	movs	r0, #1
	return xReturn;
  404312:	e7d7      	b.n	4042c4 <xTaskGenericCreate+0x188>
  404314:	00403801 	.word	0x00403801
  404318:	0040982d 	.word	0x0040982d
  40431c:	00403559 	.word	0x00403559
  404320:	004035a5 	.word	0x004035a5
  404324:	2040c2fc 	.word	0x2040c2fc
  404328:	2040c28c 	.word	0x2040c28c
  40432c:	2040c298 	.word	0x2040c298
  404330:	00403459 	.word	0x00403459
  404334:	2040c328 	.word	0x2040c328
  404338:	2040c344 	.word	0x2040c344
  40433c:	2040c370 	.word	0x2040c370
  404340:	2040c35c 	.word	0x2040c35c
  404344:	2040c290 	.word	0x2040c290
  404348:	2040c294 	.word	0x2040c294
  40434c:	2040c308 	.word	0x2040c308
  404350:	2040c310 	.word	0x2040c310
  404354:	00403475 	.word	0x00403475
  404358:	004035f1 	.word	0x004035f1
  40435c:	2040c358 	.word	0x2040c358
  404360:	e000ed04 	.word	0xe000ed04
  404364:	00403871 	.word	0x00403871
  404368:	0040346f 	.word	0x0040346f
  40436c:	2040c314 	.word	0x2040c314

00404370 <vTaskStartScheduler>:
{
  404370:	b510      	push	{r4, lr}
  404372:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  404374:	2300      	movs	r3, #0
  404376:	9303      	str	r3, [sp, #12]
  404378:	9302      	str	r3, [sp, #8]
  40437a:	9301      	str	r3, [sp, #4]
  40437c:	9300      	str	r3, [sp, #0]
  40437e:	2282      	movs	r2, #130	; 0x82
  404380:	4916      	ldr	r1, [pc, #88]	; (4043dc <vTaskStartScheduler+0x6c>)
  404382:	4817      	ldr	r0, [pc, #92]	; (4043e0 <vTaskStartScheduler+0x70>)
  404384:	4c17      	ldr	r4, [pc, #92]	; (4043e4 <vTaskStartScheduler+0x74>)
  404386:	47a0      	blx	r4
		if( xReturn == pdPASS )
  404388:	2801      	cmp	r0, #1
  40438a:	d00b      	beq.n	4043a4 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  40438c:	bb20      	cbnz	r0, 4043d8 <vTaskStartScheduler+0x68>
  40438e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404392:	b672      	cpsid	i
  404394:	f383 8811 	msr	BASEPRI, r3
  404398:	f3bf 8f6f 	isb	sy
  40439c:	f3bf 8f4f 	dsb	sy
  4043a0:	b662      	cpsie	i
  4043a2:	e7fe      	b.n	4043a2 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4043a4:	4b10      	ldr	r3, [pc, #64]	; (4043e8 <vTaskStartScheduler+0x78>)
  4043a6:	4798      	blx	r3
	if( xReturn == pdPASS )
  4043a8:	2801      	cmp	r0, #1
  4043aa:	d1ef      	bne.n	40438c <vTaskStartScheduler+0x1c>
  4043ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4043b0:	b672      	cpsid	i
  4043b2:	f383 8811 	msr	BASEPRI, r3
  4043b6:	f3bf 8f6f 	isb	sy
  4043ba:	f3bf 8f4f 	dsb	sy
  4043be:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4043c0:	f04f 32ff 	mov.w	r2, #4294967295
  4043c4:	4b09      	ldr	r3, [pc, #36]	; (4043ec <vTaskStartScheduler+0x7c>)
  4043c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4043c8:	2201      	movs	r2, #1
  4043ca:	4b09      	ldr	r3, [pc, #36]	; (4043f0 <vTaskStartScheduler+0x80>)
  4043cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4043ce:	2200      	movs	r2, #0
  4043d0:	4b08      	ldr	r3, [pc, #32]	; (4043f4 <vTaskStartScheduler+0x84>)
  4043d2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4043d4:	4b08      	ldr	r3, [pc, #32]	; (4043f8 <vTaskStartScheduler+0x88>)
  4043d6:	4798      	blx	r3
}
  4043d8:	b004      	add	sp, #16
  4043da:	bd10      	pop	{r4, pc}
  4043dc:	00410bdc 	.word	0x00410bdc
  4043e0:	00404715 	.word	0x00404715
  4043e4:	0040413d 	.word	0x0040413d
  4043e8:	00404d55 	.word	0x00404d55
  4043ec:	2040c33c 	.word	0x2040c33c
  4043f0:	2040c358 	.word	0x2040c358
  4043f4:	2040c384 	.word	0x2040c384
  4043f8:	004036d9 	.word	0x004036d9

004043fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4043fc:	4a02      	ldr	r2, [pc, #8]	; (404408 <vTaskSuspendAll+0xc>)
  4043fe:	6813      	ldr	r3, [r2, #0]
  404400:	3301      	adds	r3, #1
  404402:	6013      	str	r3, [r2, #0]
  404404:	4770      	bx	lr
  404406:	bf00      	nop
  404408:	2040c304 	.word	0x2040c304

0040440c <xTaskGetTickCount>:
		xTicks = xTickCount;
  40440c:	4b01      	ldr	r3, [pc, #4]	; (404414 <xTaskGetTickCount+0x8>)
  40440e:	6818      	ldr	r0, [r3, #0]
}
  404410:	4770      	bx	lr
  404412:	bf00      	nop
  404414:	2040c384 	.word	0x2040c384

00404418 <xTaskIncrementTick>:
{
  404418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40441c:	4b42      	ldr	r3, [pc, #264]	; (404528 <xTaskIncrementTick+0x110>)
  40441e:	681b      	ldr	r3, [r3, #0]
  404420:	2b00      	cmp	r3, #0
  404422:	d178      	bne.n	404516 <xTaskIncrementTick+0xfe>
		++xTickCount;
  404424:	4b41      	ldr	r3, [pc, #260]	; (40452c <xTaskIncrementTick+0x114>)
  404426:	681a      	ldr	r2, [r3, #0]
  404428:	3201      	adds	r2, #1
  40442a:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  40442c:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40442e:	b9d6      	cbnz	r6, 404466 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  404430:	4b3f      	ldr	r3, [pc, #252]	; (404530 <xTaskIncrementTick+0x118>)
  404432:	681b      	ldr	r3, [r3, #0]
  404434:	681b      	ldr	r3, [r3, #0]
  404436:	b153      	cbz	r3, 40444e <xTaskIncrementTick+0x36>
  404438:	f04f 0380 	mov.w	r3, #128	; 0x80
  40443c:	b672      	cpsid	i
  40443e:	f383 8811 	msr	BASEPRI, r3
  404442:	f3bf 8f6f 	isb	sy
  404446:	f3bf 8f4f 	dsb	sy
  40444a:	b662      	cpsie	i
  40444c:	e7fe      	b.n	40444c <xTaskIncrementTick+0x34>
  40444e:	4a38      	ldr	r2, [pc, #224]	; (404530 <xTaskIncrementTick+0x118>)
  404450:	6811      	ldr	r1, [r2, #0]
  404452:	4b38      	ldr	r3, [pc, #224]	; (404534 <xTaskIncrementTick+0x11c>)
  404454:	6818      	ldr	r0, [r3, #0]
  404456:	6010      	str	r0, [r2, #0]
  404458:	6019      	str	r1, [r3, #0]
  40445a:	4a37      	ldr	r2, [pc, #220]	; (404538 <xTaskIncrementTick+0x120>)
  40445c:	6813      	ldr	r3, [r2, #0]
  40445e:	3301      	adds	r3, #1
  404460:	6013      	str	r3, [r2, #0]
  404462:	4b36      	ldr	r3, [pc, #216]	; (40453c <xTaskIncrementTick+0x124>)
  404464:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  404466:	4b36      	ldr	r3, [pc, #216]	; (404540 <xTaskIncrementTick+0x128>)
  404468:	681b      	ldr	r3, [r3, #0]
  40446a:	429e      	cmp	r6, r3
  40446c:	d218      	bcs.n	4044a0 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40446e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  404470:	4b34      	ldr	r3, [pc, #208]	; (404544 <xTaskIncrementTick+0x12c>)
  404472:	681b      	ldr	r3, [r3, #0]
  404474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404476:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40447a:	4a33      	ldr	r2, [pc, #204]	; (404548 <xTaskIncrementTick+0x130>)
  40447c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  404480:	2b02      	cmp	r3, #2
  404482:	bf28      	it	cs
  404484:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  404486:	4b31      	ldr	r3, [pc, #196]	; (40454c <xTaskIncrementTick+0x134>)
  404488:	681b      	ldr	r3, [r3, #0]
  40448a:	b90b      	cbnz	r3, 404490 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  40448c:	4b30      	ldr	r3, [pc, #192]	; (404550 <xTaskIncrementTick+0x138>)
  40448e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  404490:	4b30      	ldr	r3, [pc, #192]	; (404554 <xTaskIncrementTick+0x13c>)
  404492:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  404494:	2b00      	cmp	r3, #0
}
  404496:	bf0c      	ite	eq
  404498:	4620      	moveq	r0, r4
  40449a:	2001      	movne	r0, #1
  40449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4044a0:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4044a2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 404530 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4044a6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 404560 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4044aa:	4f2b      	ldr	r7, [pc, #172]	; (404558 <xTaskIncrementTick+0x140>)
  4044ac:	e01f      	b.n	4044ee <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4044ae:	f04f 32ff 	mov.w	r2, #4294967295
  4044b2:	4b23      	ldr	r3, [pc, #140]	; (404540 <xTaskIncrementTick+0x128>)
  4044b4:	601a      	str	r2, [r3, #0]
						break;
  4044b6:	e7db      	b.n	404470 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4044b8:	4a21      	ldr	r2, [pc, #132]	; (404540 <xTaskIncrementTick+0x128>)
  4044ba:	6013      	str	r3, [r2, #0]
							break;
  4044bc:	e7d8      	b.n	404470 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4044be:	f105 0018 	add.w	r0, r5, #24
  4044c2:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4044c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4044c6:	683a      	ldr	r2, [r7, #0]
  4044c8:	2301      	movs	r3, #1
  4044ca:	4083      	lsls	r3, r0
  4044cc:	4313      	orrs	r3, r2
  4044ce:	603b      	str	r3, [r7, #0]
  4044d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4044d4:	4651      	mov	r1, sl
  4044d6:	4b1c      	ldr	r3, [pc, #112]	; (404548 <xTaskIncrementTick+0x130>)
  4044d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4044dc:	4b1f      	ldr	r3, [pc, #124]	; (40455c <xTaskIncrementTick+0x144>)
  4044de:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4044e0:	4b18      	ldr	r3, [pc, #96]	; (404544 <xTaskIncrementTick+0x12c>)
  4044e2:	681b      	ldr	r3, [r3, #0]
  4044e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4044e8:	429a      	cmp	r2, r3
  4044ea:	bf28      	it	cs
  4044ec:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4044ee:	f8d9 3000 	ldr.w	r3, [r9]
  4044f2:	681b      	ldr	r3, [r3, #0]
  4044f4:	2b00      	cmp	r3, #0
  4044f6:	d0da      	beq.n	4044ae <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4044f8:	f8d9 3000 	ldr.w	r3, [r9]
  4044fc:	68db      	ldr	r3, [r3, #12]
  4044fe:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  404500:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  404502:	429e      	cmp	r6, r3
  404504:	d3d8      	bcc.n	4044b8 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  404506:	f105 0a04 	add.w	sl, r5, #4
  40450a:	4650      	mov	r0, sl
  40450c:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40450e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  404510:	2b00      	cmp	r3, #0
  404512:	d1d4      	bne.n	4044be <xTaskIncrementTick+0xa6>
  404514:	e7d6      	b.n	4044c4 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  404516:	4a0d      	ldr	r2, [pc, #52]	; (40454c <xTaskIncrementTick+0x134>)
  404518:	6813      	ldr	r3, [r2, #0]
  40451a:	3301      	adds	r3, #1
  40451c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40451e:	4b0c      	ldr	r3, [pc, #48]	; (404550 <xTaskIncrementTick+0x138>)
  404520:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  404522:	2400      	movs	r4, #0
  404524:	e7b4      	b.n	404490 <xTaskIncrementTick+0x78>
  404526:	bf00      	nop
  404528:	2040c304 	.word	0x2040c304
  40452c:	2040c384 	.word	0x2040c384
  404530:	2040c290 	.word	0x2040c290
  404534:	2040c294 	.word	0x2040c294
  404538:	2040c340 	.word	0x2040c340
  40453c:	004040b9 	.word	0x004040b9
  404540:	2040c33c 	.word	0x2040c33c
  404544:	2040c28c 	.word	0x2040c28c
  404548:	2040c298 	.word	0x2040c298
  40454c:	2040c300 	.word	0x2040c300
  404550:	00409051 	.word	0x00409051
  404554:	2040c388 	.word	0x2040c388
  404558:	2040c310 	.word	0x2040c310
  40455c:	00403475 	.word	0x00403475
  404560:	004034c1 	.word	0x004034c1

00404564 <xTaskResumeAll>:
{
  404564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  404568:	4b38      	ldr	r3, [pc, #224]	; (40464c <xTaskResumeAll+0xe8>)
  40456a:	681b      	ldr	r3, [r3, #0]
  40456c:	b953      	cbnz	r3, 404584 <xTaskResumeAll+0x20>
  40456e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404572:	b672      	cpsid	i
  404574:	f383 8811 	msr	BASEPRI, r3
  404578:	f3bf 8f6f 	isb	sy
  40457c:	f3bf 8f4f 	dsb	sy
  404580:	b662      	cpsie	i
  404582:	e7fe      	b.n	404582 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  404584:	4b32      	ldr	r3, [pc, #200]	; (404650 <xTaskResumeAll+0xec>)
  404586:	4798      	blx	r3
		--uxSchedulerSuspended;
  404588:	4b30      	ldr	r3, [pc, #192]	; (40464c <xTaskResumeAll+0xe8>)
  40458a:	681a      	ldr	r2, [r3, #0]
  40458c:	3a01      	subs	r2, #1
  40458e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  404590:	681b      	ldr	r3, [r3, #0]
  404592:	2b00      	cmp	r3, #0
  404594:	d155      	bne.n	404642 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  404596:	4b2f      	ldr	r3, [pc, #188]	; (404654 <xTaskResumeAll+0xf0>)
  404598:	681b      	ldr	r3, [r3, #0]
  40459a:	2b00      	cmp	r3, #0
  40459c:	d132      	bne.n	404604 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40459e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4045a0:	4b2d      	ldr	r3, [pc, #180]	; (404658 <xTaskResumeAll+0xf4>)
  4045a2:	4798      	blx	r3
}
  4045a4:	4620      	mov	r0, r4
  4045a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4045aa:	68fb      	ldr	r3, [r7, #12]
  4045ac:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4045ae:	f104 0018 	add.w	r0, r4, #24
  4045b2:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4045b4:	f104 0804 	add.w	r8, r4, #4
  4045b8:	4640      	mov	r0, r8
  4045ba:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4045bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4045be:	682a      	ldr	r2, [r5, #0]
  4045c0:	2301      	movs	r3, #1
  4045c2:	4083      	lsls	r3, r0
  4045c4:	4313      	orrs	r3, r2
  4045c6:	602b      	str	r3, [r5, #0]
  4045c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4045cc:	4641      	mov	r1, r8
  4045ce:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4045d2:	4b22      	ldr	r3, [pc, #136]	; (40465c <xTaskResumeAll+0xf8>)
  4045d4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4045d6:	4b22      	ldr	r3, [pc, #136]	; (404660 <xTaskResumeAll+0xfc>)
  4045d8:	681b      	ldr	r3, [r3, #0]
  4045da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4045de:	429a      	cmp	r2, r3
  4045e0:	d20c      	bcs.n	4045fc <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4045e2:	683b      	ldr	r3, [r7, #0]
  4045e4:	2b00      	cmp	r3, #0
  4045e6:	d1e0      	bne.n	4045aa <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4045e8:	4b1e      	ldr	r3, [pc, #120]	; (404664 <xTaskResumeAll+0x100>)
  4045ea:	681b      	ldr	r3, [r3, #0]
  4045ec:	b1db      	cbz	r3, 404626 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4045ee:	4b1d      	ldr	r3, [pc, #116]	; (404664 <xTaskResumeAll+0x100>)
  4045f0:	681b      	ldr	r3, [r3, #0]
  4045f2:	b1c3      	cbz	r3, 404626 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4045f4:	4e1c      	ldr	r6, [pc, #112]	; (404668 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4045f6:	4d1d      	ldr	r5, [pc, #116]	; (40466c <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4045f8:	4c1a      	ldr	r4, [pc, #104]	; (404664 <xTaskResumeAll+0x100>)
  4045fa:	e00e      	b.n	40461a <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4045fc:	2201      	movs	r2, #1
  4045fe:	4b1b      	ldr	r3, [pc, #108]	; (40466c <xTaskResumeAll+0x108>)
  404600:	601a      	str	r2, [r3, #0]
  404602:	e7ee      	b.n	4045e2 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  404604:	4f1a      	ldr	r7, [pc, #104]	; (404670 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  404606:	4e1b      	ldr	r6, [pc, #108]	; (404674 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  404608:	4d1b      	ldr	r5, [pc, #108]	; (404678 <xTaskResumeAll+0x114>)
  40460a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 404680 <xTaskResumeAll+0x11c>
  40460e:	e7e8      	b.n	4045e2 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  404610:	6823      	ldr	r3, [r4, #0]
  404612:	3b01      	subs	r3, #1
  404614:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  404616:	6823      	ldr	r3, [r4, #0]
  404618:	b12b      	cbz	r3, 404626 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40461a:	47b0      	blx	r6
  40461c:	2800      	cmp	r0, #0
  40461e:	d0f7      	beq.n	404610 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  404620:	2301      	movs	r3, #1
  404622:	602b      	str	r3, [r5, #0]
  404624:	e7f4      	b.n	404610 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  404626:	4b11      	ldr	r3, [pc, #68]	; (40466c <xTaskResumeAll+0x108>)
  404628:	681b      	ldr	r3, [r3, #0]
  40462a:	2b01      	cmp	r3, #1
  40462c:	d10b      	bne.n	404646 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404632:	4b12      	ldr	r3, [pc, #72]	; (40467c <xTaskResumeAll+0x118>)
  404634:	601a      	str	r2, [r3, #0]
  404636:	f3bf 8f4f 	dsb	sy
  40463a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40463e:	2401      	movs	r4, #1
  404640:	e7ae      	b.n	4045a0 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  404642:	2400      	movs	r4, #0
  404644:	e7ac      	b.n	4045a0 <xTaskResumeAll+0x3c>
  404646:	2400      	movs	r4, #0
  404648:	e7aa      	b.n	4045a0 <xTaskResumeAll+0x3c>
  40464a:	bf00      	nop
  40464c:	2040c304 	.word	0x2040c304
  404650:	004035a5 	.word	0x004035a5
  404654:	2040c2fc 	.word	0x2040c2fc
  404658:	004035f1 	.word	0x004035f1
  40465c:	00403475 	.word	0x00403475
  404660:	2040c28c 	.word	0x2040c28c
  404664:	2040c300 	.word	0x2040c300
  404668:	00404419 	.word	0x00404419
  40466c:	2040c388 	.word	0x2040c388
  404670:	2040c344 	.word	0x2040c344
  404674:	004034c1 	.word	0x004034c1
  404678:	2040c310 	.word	0x2040c310
  40467c:	e000ed04 	.word	0xe000ed04
  404680:	2040c298 	.word	0x2040c298

00404684 <vTaskDelay>:
	{
  404684:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  404686:	2800      	cmp	r0, #0
  404688:	d029      	beq.n	4046de <vTaskDelay+0x5a>
  40468a:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40468c:	4b18      	ldr	r3, [pc, #96]	; (4046f0 <vTaskDelay+0x6c>)
  40468e:	681b      	ldr	r3, [r3, #0]
  404690:	b153      	cbz	r3, 4046a8 <vTaskDelay+0x24>
  404692:	f04f 0380 	mov.w	r3, #128	; 0x80
  404696:	b672      	cpsid	i
  404698:	f383 8811 	msr	BASEPRI, r3
  40469c:	f3bf 8f6f 	isb	sy
  4046a0:	f3bf 8f4f 	dsb	sy
  4046a4:	b662      	cpsie	i
  4046a6:	e7fe      	b.n	4046a6 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4046a8:	4b12      	ldr	r3, [pc, #72]	; (4046f4 <vTaskDelay+0x70>)
  4046aa:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4046ac:	4b12      	ldr	r3, [pc, #72]	; (4046f8 <vTaskDelay+0x74>)
  4046ae:	681b      	ldr	r3, [r3, #0]
  4046b0:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4046b2:	4b12      	ldr	r3, [pc, #72]	; (4046fc <vTaskDelay+0x78>)
  4046b4:	6818      	ldr	r0, [r3, #0]
  4046b6:	3004      	adds	r0, #4
  4046b8:	4b11      	ldr	r3, [pc, #68]	; (404700 <vTaskDelay+0x7c>)
  4046ba:	4798      	blx	r3
  4046bc:	b948      	cbnz	r0, 4046d2 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4046be:	4b0f      	ldr	r3, [pc, #60]	; (4046fc <vTaskDelay+0x78>)
  4046c0:	681a      	ldr	r2, [r3, #0]
  4046c2:	4910      	ldr	r1, [pc, #64]	; (404704 <vTaskDelay+0x80>)
  4046c4:	680b      	ldr	r3, [r1, #0]
  4046c6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4046c8:	2201      	movs	r2, #1
  4046ca:	4082      	lsls	r2, r0
  4046cc:	ea23 0302 	bic.w	r3, r3, r2
  4046d0:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4046d2:	4620      	mov	r0, r4
  4046d4:	4b0c      	ldr	r3, [pc, #48]	; (404708 <vTaskDelay+0x84>)
  4046d6:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4046d8:	4b0c      	ldr	r3, [pc, #48]	; (40470c <vTaskDelay+0x88>)
  4046da:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4046dc:	b938      	cbnz	r0, 4046ee <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4046de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4046e2:	4b0b      	ldr	r3, [pc, #44]	; (404710 <vTaskDelay+0x8c>)
  4046e4:	601a      	str	r2, [r3, #0]
  4046e6:	f3bf 8f4f 	dsb	sy
  4046ea:	f3bf 8f6f 	isb	sy
  4046ee:	bd10      	pop	{r4, pc}
  4046f0:	2040c304 	.word	0x2040c304
  4046f4:	004043fd 	.word	0x004043fd
  4046f8:	2040c384 	.word	0x2040c384
  4046fc:	2040c28c 	.word	0x2040c28c
  404700:	004034c1 	.word	0x004034c1
  404704:	2040c310 	.word	0x2040c310
  404708:	004040e5 	.word	0x004040e5
  40470c:	00404565 	.word	0x00404565
  404710:	e000ed04 	.word	0xe000ed04

00404714 <prvIdleTask>:
{
  404714:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  404716:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4047a0 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40471a:	4e19      	ldr	r6, [pc, #100]	; (404780 <prvIdleTask+0x6c>)
				taskYIELD();
  40471c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4047a4 <prvIdleTask+0x90>
  404720:	e02a      	b.n	404778 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  404722:	4b18      	ldr	r3, [pc, #96]	; (404784 <prvIdleTask+0x70>)
  404724:	681b      	ldr	r3, [r3, #0]
  404726:	2b01      	cmp	r3, #1
  404728:	d81e      	bhi.n	404768 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40472a:	682b      	ldr	r3, [r5, #0]
  40472c:	2b00      	cmp	r3, #0
  40472e:	d0f8      	beq.n	404722 <prvIdleTask+0xe>
			vTaskSuspendAll();
  404730:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  404732:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  404734:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  404736:	2c00      	cmp	r4, #0
  404738:	d0f7      	beq.n	40472a <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40473a:	4b13      	ldr	r3, [pc, #76]	; (404788 <prvIdleTask+0x74>)
  40473c:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40473e:	68f3      	ldr	r3, [r6, #12]
  404740:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  404742:	1d20      	adds	r0, r4, #4
  404744:	4b11      	ldr	r3, [pc, #68]	; (40478c <prvIdleTask+0x78>)
  404746:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  404748:	4a11      	ldr	r2, [pc, #68]	; (404790 <prvIdleTask+0x7c>)
  40474a:	6813      	ldr	r3, [r2, #0]
  40474c:	3b01      	subs	r3, #1
  40474e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  404750:	682b      	ldr	r3, [r5, #0]
  404752:	3b01      	subs	r3, #1
  404754:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  404756:	4b0f      	ldr	r3, [pc, #60]	; (404794 <prvIdleTask+0x80>)
  404758:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40475a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40475c:	f8df a048 	ldr.w	sl, [pc, #72]	; 4047a8 <prvIdleTask+0x94>
  404760:	47d0      	blx	sl
		vPortFree( pxTCB );
  404762:	4620      	mov	r0, r4
  404764:	47d0      	blx	sl
  404766:	e7e0      	b.n	40472a <prvIdleTask+0x16>
				taskYIELD();
  404768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40476c:	f8c9 3000 	str.w	r3, [r9]
  404770:	f3bf 8f4f 	dsb	sy
  404774:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  404778:	4d07      	ldr	r5, [pc, #28]	; (404798 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40477a:	4f08      	ldr	r7, [pc, #32]	; (40479c <prvIdleTask+0x88>)
  40477c:	e7d5      	b.n	40472a <prvIdleTask+0x16>
  40477e:	bf00      	nop
  404780:	2040c370 	.word	0x2040c370
  404784:	2040c298 	.word	0x2040c298
  404788:	004035a5 	.word	0x004035a5
  40478c:	004034c1 	.word	0x004034c1
  404790:	2040c2fc 	.word	0x2040c2fc
  404794:	004035f1 	.word	0x004035f1
  404798:	2040c30c 	.word	0x2040c30c
  40479c:	00404565 	.word	0x00404565
  4047a0:	004043fd 	.word	0x004043fd
  4047a4:	e000ed04 	.word	0xe000ed04
  4047a8:	00403871 	.word	0x00403871

004047ac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4047ac:	4b2d      	ldr	r3, [pc, #180]	; (404864 <vTaskSwitchContext+0xb8>)
  4047ae:	681b      	ldr	r3, [r3, #0]
  4047b0:	2b00      	cmp	r3, #0
  4047b2:	d12c      	bne.n	40480e <vTaskSwitchContext+0x62>
{
  4047b4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4047b6:	2200      	movs	r2, #0
  4047b8:	4b2b      	ldr	r3, [pc, #172]	; (404868 <vTaskSwitchContext+0xbc>)
  4047ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4047bc:	4b2b      	ldr	r3, [pc, #172]	; (40486c <vTaskSwitchContext+0xc0>)
  4047be:	681b      	ldr	r3, [r3, #0]
  4047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047c2:	681a      	ldr	r2, [r3, #0]
  4047c4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4047c8:	d103      	bne.n	4047d2 <vTaskSwitchContext+0x26>
  4047ca:	685a      	ldr	r2, [r3, #4]
  4047cc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4047d0:	d021      	beq.n	404816 <vTaskSwitchContext+0x6a>
  4047d2:	4b26      	ldr	r3, [pc, #152]	; (40486c <vTaskSwitchContext+0xc0>)
  4047d4:	6818      	ldr	r0, [r3, #0]
  4047d6:	6819      	ldr	r1, [r3, #0]
  4047d8:	3134      	adds	r1, #52	; 0x34
  4047da:	4b25      	ldr	r3, [pc, #148]	; (404870 <vTaskSwitchContext+0xc4>)
  4047dc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4047de:	4b25      	ldr	r3, [pc, #148]	; (404874 <vTaskSwitchContext+0xc8>)
  4047e0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4047e2:	fab3 f383 	clz	r3, r3
  4047e6:	b2db      	uxtb	r3, r3
  4047e8:	f1c3 031f 	rsb	r3, r3, #31
  4047ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4047f0:	4a21      	ldr	r2, [pc, #132]	; (404878 <vTaskSwitchContext+0xcc>)
  4047f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4047f6:	b9ba      	cbnz	r2, 404828 <vTaskSwitchContext+0x7c>
	__asm volatile
  4047f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4047fc:	b672      	cpsid	i
  4047fe:	f383 8811 	msr	BASEPRI, r3
  404802:	f3bf 8f6f 	isb	sy
  404806:	f3bf 8f4f 	dsb	sy
  40480a:	b662      	cpsie	i
  40480c:	e7fe      	b.n	40480c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40480e:	2201      	movs	r2, #1
  404810:	4b15      	ldr	r3, [pc, #84]	; (404868 <vTaskSwitchContext+0xbc>)
  404812:	601a      	str	r2, [r3, #0]
  404814:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  404816:	689a      	ldr	r2, [r3, #8]
  404818:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40481c:	d1d9      	bne.n	4047d2 <vTaskSwitchContext+0x26>
  40481e:	68db      	ldr	r3, [r3, #12]
  404820:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  404824:	d1d5      	bne.n	4047d2 <vTaskSwitchContext+0x26>
  404826:	e7da      	b.n	4047de <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  404828:	4a13      	ldr	r2, [pc, #76]	; (404878 <vTaskSwitchContext+0xcc>)
  40482a:	0099      	lsls	r1, r3, #2
  40482c:	18c8      	adds	r0, r1, r3
  40482e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  404832:	6844      	ldr	r4, [r0, #4]
  404834:	6864      	ldr	r4, [r4, #4]
  404836:	6044      	str	r4, [r0, #4]
  404838:	4419      	add	r1, r3
  40483a:	4602      	mov	r2, r0
  40483c:	3208      	adds	r2, #8
  40483e:	4294      	cmp	r4, r2
  404840:	d009      	beq.n	404856 <vTaskSwitchContext+0xaa>
  404842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404846:	4a0c      	ldr	r2, [pc, #48]	; (404878 <vTaskSwitchContext+0xcc>)
  404848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40484c:	685b      	ldr	r3, [r3, #4]
  40484e:	68da      	ldr	r2, [r3, #12]
  404850:	4b06      	ldr	r3, [pc, #24]	; (40486c <vTaskSwitchContext+0xc0>)
  404852:	601a      	str	r2, [r3, #0]
  404854:	bd10      	pop	{r4, pc}
  404856:	6860      	ldr	r0, [r4, #4]
  404858:	4a07      	ldr	r2, [pc, #28]	; (404878 <vTaskSwitchContext+0xcc>)
  40485a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40485e:	6050      	str	r0, [r2, #4]
  404860:	e7ef      	b.n	404842 <vTaskSwitchContext+0x96>
  404862:	bf00      	nop
  404864:	2040c304 	.word	0x2040c304
  404868:	2040c388 	.word	0x2040c388
  40486c:	2040c28c 	.word	0x2040c28c
  404870:	00409039 	.word	0x00409039
  404874:	2040c310 	.word	0x2040c310
  404878:	2040c298 	.word	0x2040c298

0040487c <vTaskPlaceOnEventList>:
{
  40487c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40487e:	b1e0      	cbz	r0, 4048ba <vTaskPlaceOnEventList+0x3e>
  404880:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  404882:	4d17      	ldr	r5, [pc, #92]	; (4048e0 <vTaskPlaceOnEventList+0x64>)
  404884:	6829      	ldr	r1, [r5, #0]
  404886:	3118      	adds	r1, #24
  404888:	4b16      	ldr	r3, [pc, #88]	; (4048e4 <vTaskPlaceOnEventList+0x68>)
  40488a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40488c:	6828      	ldr	r0, [r5, #0]
  40488e:	3004      	adds	r0, #4
  404890:	4b15      	ldr	r3, [pc, #84]	; (4048e8 <vTaskPlaceOnEventList+0x6c>)
  404892:	4798      	blx	r3
  404894:	b940      	cbnz	r0, 4048a8 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  404896:	682a      	ldr	r2, [r5, #0]
  404898:	4914      	ldr	r1, [pc, #80]	; (4048ec <vTaskPlaceOnEventList+0x70>)
  40489a:	680b      	ldr	r3, [r1, #0]
  40489c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40489e:	2201      	movs	r2, #1
  4048a0:	4082      	lsls	r2, r0
  4048a2:	ea23 0302 	bic.w	r3, r3, r2
  4048a6:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4048a8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4048ac:	d010      	beq.n	4048d0 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4048ae:	4b10      	ldr	r3, [pc, #64]	; (4048f0 <vTaskPlaceOnEventList+0x74>)
  4048b0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4048b2:	4420      	add	r0, r4
  4048b4:	4b0f      	ldr	r3, [pc, #60]	; (4048f4 <vTaskPlaceOnEventList+0x78>)
  4048b6:	4798      	blx	r3
  4048b8:	bd38      	pop	{r3, r4, r5, pc}
  4048ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4048be:	b672      	cpsid	i
  4048c0:	f383 8811 	msr	BASEPRI, r3
  4048c4:	f3bf 8f6f 	isb	sy
  4048c8:	f3bf 8f4f 	dsb	sy
  4048cc:	b662      	cpsie	i
  4048ce:	e7fe      	b.n	4048ce <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4048d0:	4b03      	ldr	r3, [pc, #12]	; (4048e0 <vTaskPlaceOnEventList+0x64>)
  4048d2:	6819      	ldr	r1, [r3, #0]
  4048d4:	3104      	adds	r1, #4
  4048d6:	4808      	ldr	r0, [pc, #32]	; (4048f8 <vTaskPlaceOnEventList+0x7c>)
  4048d8:	4b08      	ldr	r3, [pc, #32]	; (4048fc <vTaskPlaceOnEventList+0x80>)
  4048da:	4798      	blx	r3
  4048dc:	bd38      	pop	{r3, r4, r5, pc}
  4048de:	bf00      	nop
  4048e0:	2040c28c 	.word	0x2040c28c
  4048e4:	0040348d 	.word	0x0040348d
  4048e8:	004034c1 	.word	0x004034c1
  4048ec:	2040c310 	.word	0x2040c310
  4048f0:	2040c384 	.word	0x2040c384
  4048f4:	004040e5 	.word	0x004040e5
  4048f8:	2040c35c 	.word	0x2040c35c
  4048fc:	00403475 	.word	0x00403475

00404900 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  404900:	b1e8      	cbz	r0, 40493e <vTaskPlaceOnEventListRestricted+0x3e>
	{
  404902:	b570      	push	{r4, r5, r6, lr}
  404904:	4615      	mov	r5, r2
  404906:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  404908:	4e16      	ldr	r6, [pc, #88]	; (404964 <vTaskPlaceOnEventListRestricted+0x64>)
  40490a:	6831      	ldr	r1, [r6, #0]
  40490c:	3118      	adds	r1, #24
  40490e:	4b16      	ldr	r3, [pc, #88]	; (404968 <vTaskPlaceOnEventListRestricted+0x68>)
  404910:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  404912:	6830      	ldr	r0, [r6, #0]
  404914:	3004      	adds	r0, #4
  404916:	4b15      	ldr	r3, [pc, #84]	; (40496c <vTaskPlaceOnEventListRestricted+0x6c>)
  404918:	4798      	blx	r3
  40491a:	b940      	cbnz	r0, 40492e <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40491c:	6832      	ldr	r2, [r6, #0]
  40491e:	4914      	ldr	r1, [pc, #80]	; (404970 <vTaskPlaceOnEventListRestricted+0x70>)
  404920:	680b      	ldr	r3, [r1, #0]
  404922:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  404924:	2201      	movs	r2, #1
  404926:	4082      	lsls	r2, r0
  404928:	ea23 0302 	bic.w	r3, r3, r2
  40492c:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40492e:	2d01      	cmp	r5, #1
  404930:	d010      	beq.n	404954 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  404932:	4b10      	ldr	r3, [pc, #64]	; (404974 <vTaskPlaceOnEventListRestricted+0x74>)
  404934:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  404936:	4420      	add	r0, r4
  404938:	4b0f      	ldr	r3, [pc, #60]	; (404978 <vTaskPlaceOnEventListRestricted+0x78>)
  40493a:	4798      	blx	r3
  40493c:	bd70      	pop	{r4, r5, r6, pc}
  40493e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404942:	b672      	cpsid	i
  404944:	f383 8811 	msr	BASEPRI, r3
  404948:	f3bf 8f6f 	isb	sy
  40494c:	f3bf 8f4f 	dsb	sy
  404950:	b662      	cpsie	i
  404952:	e7fe      	b.n	404952 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  404954:	4b03      	ldr	r3, [pc, #12]	; (404964 <vTaskPlaceOnEventListRestricted+0x64>)
  404956:	6819      	ldr	r1, [r3, #0]
  404958:	3104      	adds	r1, #4
  40495a:	4808      	ldr	r0, [pc, #32]	; (40497c <vTaskPlaceOnEventListRestricted+0x7c>)
  40495c:	4b02      	ldr	r3, [pc, #8]	; (404968 <vTaskPlaceOnEventListRestricted+0x68>)
  40495e:	4798      	blx	r3
  404960:	bd70      	pop	{r4, r5, r6, pc}
  404962:	bf00      	nop
  404964:	2040c28c 	.word	0x2040c28c
  404968:	00403475 	.word	0x00403475
  40496c:	004034c1 	.word	0x004034c1
  404970:	2040c310 	.word	0x2040c310
  404974:	2040c384 	.word	0x2040c384
  404978:	004040e5 	.word	0x004040e5
  40497c:	2040c35c 	.word	0x2040c35c

00404980 <xTaskRemoveFromEventList>:
{
  404980:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  404982:	68c3      	ldr	r3, [r0, #12]
  404984:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  404986:	b324      	cbz	r4, 4049d2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  404988:	f104 0518 	add.w	r5, r4, #24
  40498c:	4628      	mov	r0, r5
  40498e:	4b1a      	ldr	r3, [pc, #104]	; (4049f8 <xTaskRemoveFromEventList+0x78>)
  404990:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  404992:	4b1a      	ldr	r3, [pc, #104]	; (4049fc <xTaskRemoveFromEventList+0x7c>)
  404994:	681b      	ldr	r3, [r3, #0]
  404996:	bb3b      	cbnz	r3, 4049e8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  404998:	1d25      	adds	r5, r4, #4
  40499a:	4628      	mov	r0, r5
  40499c:	4b16      	ldr	r3, [pc, #88]	; (4049f8 <xTaskRemoveFromEventList+0x78>)
  40499e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4049a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4049a2:	4a17      	ldr	r2, [pc, #92]	; (404a00 <xTaskRemoveFromEventList+0x80>)
  4049a4:	6811      	ldr	r1, [r2, #0]
  4049a6:	2301      	movs	r3, #1
  4049a8:	4083      	lsls	r3, r0
  4049aa:	430b      	orrs	r3, r1
  4049ac:	6013      	str	r3, [r2, #0]
  4049ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4049b2:	4629      	mov	r1, r5
  4049b4:	4b13      	ldr	r3, [pc, #76]	; (404a04 <xTaskRemoveFromEventList+0x84>)
  4049b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4049ba:	4b13      	ldr	r3, [pc, #76]	; (404a08 <xTaskRemoveFromEventList+0x88>)
  4049bc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4049be:	4b13      	ldr	r3, [pc, #76]	; (404a0c <xTaskRemoveFromEventList+0x8c>)
  4049c0:	681b      	ldr	r3, [r3, #0]
  4049c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4049c6:	429a      	cmp	r2, r3
  4049c8:	d913      	bls.n	4049f2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4049ca:	2001      	movs	r0, #1
  4049cc:	4b10      	ldr	r3, [pc, #64]	; (404a10 <xTaskRemoveFromEventList+0x90>)
  4049ce:	6018      	str	r0, [r3, #0]
  4049d0:	bd38      	pop	{r3, r4, r5, pc}
  4049d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4049d6:	b672      	cpsid	i
  4049d8:	f383 8811 	msr	BASEPRI, r3
  4049dc:	f3bf 8f6f 	isb	sy
  4049e0:	f3bf 8f4f 	dsb	sy
  4049e4:	b662      	cpsie	i
  4049e6:	e7fe      	b.n	4049e6 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4049e8:	4629      	mov	r1, r5
  4049ea:	480a      	ldr	r0, [pc, #40]	; (404a14 <xTaskRemoveFromEventList+0x94>)
  4049ec:	4b06      	ldr	r3, [pc, #24]	; (404a08 <xTaskRemoveFromEventList+0x88>)
  4049ee:	4798      	blx	r3
  4049f0:	e7e5      	b.n	4049be <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4049f2:	2000      	movs	r0, #0
}
  4049f4:	bd38      	pop	{r3, r4, r5, pc}
  4049f6:	bf00      	nop
  4049f8:	004034c1 	.word	0x004034c1
  4049fc:	2040c304 	.word	0x2040c304
  404a00:	2040c310 	.word	0x2040c310
  404a04:	2040c298 	.word	0x2040c298
  404a08:	00403475 	.word	0x00403475
  404a0c:	2040c28c 	.word	0x2040c28c
  404a10:	2040c388 	.word	0x2040c388
  404a14:	2040c344 	.word	0x2040c344

00404a18 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  404a18:	b130      	cbz	r0, 404a28 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  404a1a:	4a09      	ldr	r2, [pc, #36]	; (404a40 <vTaskSetTimeOutState+0x28>)
  404a1c:	6812      	ldr	r2, [r2, #0]
  404a1e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  404a20:	4a08      	ldr	r2, [pc, #32]	; (404a44 <vTaskSetTimeOutState+0x2c>)
  404a22:	6812      	ldr	r2, [r2, #0]
  404a24:	6042      	str	r2, [r0, #4]
  404a26:	4770      	bx	lr
  404a28:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a2c:	b672      	cpsid	i
  404a2e:	f383 8811 	msr	BASEPRI, r3
  404a32:	f3bf 8f6f 	isb	sy
  404a36:	f3bf 8f4f 	dsb	sy
  404a3a:	b662      	cpsie	i
  404a3c:	e7fe      	b.n	404a3c <vTaskSetTimeOutState+0x24>
  404a3e:	bf00      	nop
  404a40:	2040c340 	.word	0x2040c340
  404a44:	2040c384 	.word	0x2040c384

00404a48 <xTaskCheckForTimeOut>:
{
  404a48:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  404a4a:	b1c0      	cbz	r0, 404a7e <xTaskCheckForTimeOut+0x36>
  404a4c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  404a4e:	b309      	cbz	r1, 404a94 <xTaskCheckForTimeOut+0x4c>
  404a50:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  404a52:	4b1d      	ldr	r3, [pc, #116]	; (404ac8 <xTaskCheckForTimeOut+0x80>)
  404a54:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  404a56:	4b1d      	ldr	r3, [pc, #116]	; (404acc <xTaskCheckForTimeOut+0x84>)
  404a58:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  404a5a:	682b      	ldr	r3, [r5, #0]
  404a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
  404a60:	d02e      	beq.n	404ac0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  404a62:	491b      	ldr	r1, [pc, #108]	; (404ad0 <xTaskCheckForTimeOut+0x88>)
  404a64:	6809      	ldr	r1, [r1, #0]
  404a66:	6820      	ldr	r0, [r4, #0]
  404a68:	4288      	cmp	r0, r1
  404a6a:	d002      	beq.n	404a72 <xTaskCheckForTimeOut+0x2a>
  404a6c:	6861      	ldr	r1, [r4, #4]
  404a6e:	428a      	cmp	r2, r1
  404a70:	d228      	bcs.n	404ac4 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  404a72:	6861      	ldr	r1, [r4, #4]
  404a74:	1a50      	subs	r0, r2, r1
  404a76:	4283      	cmp	r3, r0
  404a78:	d817      	bhi.n	404aaa <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  404a7a:	2401      	movs	r4, #1
  404a7c:	e01c      	b.n	404ab8 <xTaskCheckForTimeOut+0x70>
  404a7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a82:	b672      	cpsid	i
  404a84:	f383 8811 	msr	BASEPRI, r3
  404a88:	f3bf 8f6f 	isb	sy
  404a8c:	f3bf 8f4f 	dsb	sy
  404a90:	b662      	cpsie	i
  404a92:	e7fe      	b.n	404a92 <xTaskCheckForTimeOut+0x4a>
  404a94:	f04f 0380 	mov.w	r3, #128	; 0x80
  404a98:	b672      	cpsid	i
  404a9a:	f383 8811 	msr	BASEPRI, r3
  404a9e:	f3bf 8f6f 	isb	sy
  404aa2:	f3bf 8f4f 	dsb	sy
  404aa6:	b662      	cpsie	i
  404aa8:	e7fe      	b.n	404aa8 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  404aaa:	1a9b      	subs	r3, r3, r2
  404aac:	440b      	add	r3, r1
  404aae:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  404ab0:	4620      	mov	r0, r4
  404ab2:	4b08      	ldr	r3, [pc, #32]	; (404ad4 <xTaskCheckForTimeOut+0x8c>)
  404ab4:	4798      	blx	r3
			xReturn = pdFALSE;
  404ab6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  404ab8:	4b07      	ldr	r3, [pc, #28]	; (404ad8 <xTaskCheckForTimeOut+0x90>)
  404aba:	4798      	blx	r3
}
  404abc:	4620      	mov	r0, r4
  404abe:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  404ac0:	2400      	movs	r4, #0
  404ac2:	e7f9      	b.n	404ab8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  404ac4:	2401      	movs	r4, #1
  404ac6:	e7f7      	b.n	404ab8 <xTaskCheckForTimeOut+0x70>
  404ac8:	004035a5 	.word	0x004035a5
  404acc:	2040c384 	.word	0x2040c384
  404ad0:	2040c340 	.word	0x2040c340
  404ad4:	00404a19 	.word	0x00404a19
  404ad8:	004035f1 	.word	0x004035f1

00404adc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  404adc:	2201      	movs	r2, #1
  404ade:	4b01      	ldr	r3, [pc, #4]	; (404ae4 <vTaskMissedYield+0x8>)
  404ae0:	601a      	str	r2, [r3, #0]
  404ae2:	4770      	bx	lr
  404ae4:	2040c388 	.word	0x2040c388

00404ae8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  404ae8:	4b05      	ldr	r3, [pc, #20]	; (404b00 <xTaskGetSchedulerState+0x18>)
  404aea:	681b      	ldr	r3, [r3, #0]
  404aec:	b133      	cbz	r3, 404afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  404aee:	4b05      	ldr	r3, [pc, #20]	; (404b04 <xTaskGetSchedulerState+0x1c>)
  404af0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  404af2:	2b00      	cmp	r3, #0
  404af4:	bf0c      	ite	eq
  404af6:	2002      	moveq	r0, #2
  404af8:	2000      	movne	r0, #0
  404afa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  404afc:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  404afe:	4770      	bx	lr
  404b00:	2040c358 	.word	0x2040c358
  404b04:	2040c304 	.word	0x2040c304

00404b08 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  404b08:	2800      	cmp	r0, #0
  404b0a:	d044      	beq.n	404b96 <vTaskPriorityInherit+0x8e>
	{
  404b0c:	b538      	push	{r3, r4, r5, lr}
  404b0e:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  404b10:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  404b12:	4921      	ldr	r1, [pc, #132]	; (404b98 <vTaskPriorityInherit+0x90>)
  404b14:	6809      	ldr	r1, [r1, #0]
  404b16:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  404b18:	428a      	cmp	r2, r1
  404b1a:	d214      	bcs.n	404b46 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  404b1c:	6981      	ldr	r1, [r0, #24]
  404b1e:	2900      	cmp	r1, #0
  404b20:	db05      	blt.n	404b2e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  404b22:	491d      	ldr	r1, [pc, #116]	; (404b98 <vTaskPriorityInherit+0x90>)
  404b24:	6809      	ldr	r1, [r1, #0]
  404b26:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  404b28:	f1c1 0105 	rsb	r1, r1, #5
  404b2c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  404b2e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404b32:	491a      	ldr	r1, [pc, #104]	; (404b9c <vTaskPriorityInherit+0x94>)
  404b34:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  404b38:	6961      	ldr	r1, [r4, #20]
  404b3a:	4291      	cmp	r1, r2
  404b3c:	d004      	beq.n	404b48 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  404b3e:	4a16      	ldr	r2, [pc, #88]	; (404b98 <vTaskPriorityInherit+0x90>)
  404b40:	6812      	ldr	r2, [r2, #0]
  404b42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  404b44:	62e2      	str	r2, [r4, #44]	; 0x2c
  404b46:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  404b48:	1d25      	adds	r5, r4, #4
  404b4a:	4628      	mov	r0, r5
  404b4c:	4b14      	ldr	r3, [pc, #80]	; (404ba0 <vTaskPriorityInherit+0x98>)
  404b4e:	4798      	blx	r3
  404b50:	b970      	cbnz	r0, 404b70 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  404b52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404b54:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  404b58:	4a10      	ldr	r2, [pc, #64]	; (404b9c <vTaskPriorityInherit+0x94>)
  404b5a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  404b5e:	b93a      	cbnz	r2, 404b70 <vTaskPriorityInherit+0x68>
  404b60:	4810      	ldr	r0, [pc, #64]	; (404ba4 <vTaskPriorityInherit+0x9c>)
  404b62:	6802      	ldr	r2, [r0, #0]
  404b64:	2101      	movs	r1, #1
  404b66:	fa01 f303 	lsl.w	r3, r1, r3
  404b6a:	ea22 0303 	bic.w	r3, r2, r3
  404b6e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  404b70:	4b09      	ldr	r3, [pc, #36]	; (404b98 <vTaskPriorityInherit+0x90>)
  404b72:	681b      	ldr	r3, [r3, #0]
  404b74:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  404b76:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  404b78:	4a0a      	ldr	r2, [pc, #40]	; (404ba4 <vTaskPriorityInherit+0x9c>)
  404b7a:	6811      	ldr	r1, [r2, #0]
  404b7c:	2301      	movs	r3, #1
  404b7e:	4083      	lsls	r3, r0
  404b80:	430b      	orrs	r3, r1
  404b82:	6013      	str	r3, [r2, #0]
  404b84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404b88:	4629      	mov	r1, r5
  404b8a:	4b04      	ldr	r3, [pc, #16]	; (404b9c <vTaskPriorityInherit+0x94>)
  404b8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  404b90:	4b05      	ldr	r3, [pc, #20]	; (404ba8 <vTaskPriorityInherit+0xa0>)
  404b92:	4798      	blx	r3
  404b94:	bd38      	pop	{r3, r4, r5, pc}
  404b96:	4770      	bx	lr
  404b98:	2040c28c 	.word	0x2040c28c
  404b9c:	2040c298 	.word	0x2040c298
  404ba0:	004034c1 	.word	0x004034c1
  404ba4:	2040c310 	.word	0x2040c310
  404ba8:	00403475 	.word	0x00403475

00404bac <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  404bac:	2800      	cmp	r0, #0
  404bae:	d04d      	beq.n	404c4c <xTaskPriorityDisinherit+0xa0>
	{
  404bb0:	b538      	push	{r3, r4, r5, lr}
  404bb2:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  404bb4:	4a27      	ldr	r2, [pc, #156]	; (404c54 <xTaskPriorityDisinherit+0xa8>)
  404bb6:	6812      	ldr	r2, [r2, #0]
  404bb8:	4290      	cmp	r0, r2
  404bba:	d00a      	beq.n	404bd2 <xTaskPriorityDisinherit+0x26>
  404bbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  404bc0:	b672      	cpsid	i
  404bc2:	f383 8811 	msr	BASEPRI, r3
  404bc6:	f3bf 8f6f 	isb	sy
  404bca:	f3bf 8f4f 	dsb	sy
  404bce:	b662      	cpsie	i
  404bd0:	e7fe      	b.n	404bd0 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  404bd2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  404bd4:	b952      	cbnz	r2, 404bec <xTaskPriorityDisinherit+0x40>
  404bd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  404bda:	b672      	cpsid	i
  404bdc:	f383 8811 	msr	BASEPRI, r3
  404be0:	f3bf 8f6f 	isb	sy
  404be4:	f3bf 8f4f 	dsb	sy
  404be8:	b662      	cpsie	i
  404bea:	e7fe      	b.n	404bea <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  404bec:	3a01      	subs	r2, #1
  404bee:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  404bf0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  404bf2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  404bf4:	4288      	cmp	r0, r1
  404bf6:	d02b      	beq.n	404c50 <xTaskPriorityDisinherit+0xa4>
  404bf8:	bb52      	cbnz	r2, 404c50 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  404bfa:	1d25      	adds	r5, r4, #4
  404bfc:	4628      	mov	r0, r5
  404bfe:	4b16      	ldr	r3, [pc, #88]	; (404c58 <xTaskPriorityDisinherit+0xac>)
  404c00:	4798      	blx	r3
  404c02:	b968      	cbnz	r0, 404c20 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  404c04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  404c06:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404c0a:	4b14      	ldr	r3, [pc, #80]	; (404c5c <xTaskPriorityDisinherit+0xb0>)
  404c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404c10:	b933      	cbnz	r3, 404c20 <xTaskPriorityDisinherit+0x74>
  404c12:	4813      	ldr	r0, [pc, #76]	; (404c60 <xTaskPriorityDisinherit+0xb4>)
  404c14:	6803      	ldr	r3, [r0, #0]
  404c16:	2201      	movs	r2, #1
  404c18:	408a      	lsls	r2, r1
  404c1a:	ea23 0302 	bic.w	r3, r3, r2
  404c1e:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  404c20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  404c22:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  404c24:	f1c0 0305 	rsb	r3, r0, #5
  404c28:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  404c2a:	4a0d      	ldr	r2, [pc, #52]	; (404c60 <xTaskPriorityDisinherit+0xb4>)
  404c2c:	6811      	ldr	r1, [r2, #0]
  404c2e:	2401      	movs	r4, #1
  404c30:	fa04 f300 	lsl.w	r3, r4, r0
  404c34:	430b      	orrs	r3, r1
  404c36:	6013      	str	r3, [r2, #0]
  404c38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404c3c:	4629      	mov	r1, r5
  404c3e:	4b07      	ldr	r3, [pc, #28]	; (404c5c <xTaskPriorityDisinherit+0xb0>)
  404c40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  404c44:	4b07      	ldr	r3, [pc, #28]	; (404c64 <xTaskPriorityDisinherit+0xb8>)
  404c46:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  404c48:	4620      	mov	r0, r4
  404c4a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  404c4c:	2000      	movs	r0, #0
  404c4e:	4770      	bx	lr
  404c50:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  404c52:	bd38      	pop	{r3, r4, r5, pc}
  404c54:	2040c28c 	.word	0x2040c28c
  404c58:	004034c1 	.word	0x004034c1
  404c5c:	2040c298 	.word	0x2040c298
  404c60:	2040c310 	.word	0x2040c310
  404c64:	00403475 	.word	0x00403475

00404c68 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  404c68:	4b05      	ldr	r3, [pc, #20]	; (404c80 <pvTaskIncrementMutexHeldCount+0x18>)
  404c6a:	681b      	ldr	r3, [r3, #0]
  404c6c:	b123      	cbz	r3, 404c78 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  404c6e:	4b04      	ldr	r3, [pc, #16]	; (404c80 <pvTaskIncrementMutexHeldCount+0x18>)
  404c70:	681a      	ldr	r2, [r3, #0]
  404c72:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  404c74:	3301      	adds	r3, #1
  404c76:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  404c78:	4b01      	ldr	r3, [pc, #4]	; (404c80 <pvTaskIncrementMutexHeldCount+0x18>)
  404c7a:	6818      	ldr	r0, [r3, #0]
	}
  404c7c:	4770      	bx	lr
  404c7e:	bf00      	nop
  404c80:	2040c28c 	.word	0x2040c28c

00404c84 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  404c84:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  404c86:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  404c88:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  404c8a:	4291      	cmp	r1, r2
  404c8c:	d80c      	bhi.n	404ca8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  404c8e:	1ad2      	subs	r2, r2, r3
  404c90:	6983      	ldr	r3, [r0, #24]
  404c92:	429a      	cmp	r2, r3
  404c94:	d301      	bcc.n	404c9a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  404c96:	2001      	movs	r0, #1
  404c98:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  404c9a:	1d01      	adds	r1, r0, #4
  404c9c:	4b09      	ldr	r3, [pc, #36]	; (404cc4 <prvInsertTimerInActiveList+0x40>)
  404c9e:	6818      	ldr	r0, [r3, #0]
  404ca0:	4b09      	ldr	r3, [pc, #36]	; (404cc8 <prvInsertTimerInActiveList+0x44>)
  404ca2:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  404ca4:	2000      	movs	r0, #0
  404ca6:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  404ca8:	429a      	cmp	r2, r3
  404caa:	d203      	bcs.n	404cb4 <prvInsertTimerInActiveList+0x30>
  404cac:	4299      	cmp	r1, r3
  404cae:	d301      	bcc.n	404cb4 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  404cb0:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  404cb2:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  404cb4:	1d01      	adds	r1, r0, #4
  404cb6:	4b05      	ldr	r3, [pc, #20]	; (404ccc <prvInsertTimerInActiveList+0x48>)
  404cb8:	6818      	ldr	r0, [r3, #0]
  404cba:	4b03      	ldr	r3, [pc, #12]	; (404cc8 <prvInsertTimerInActiveList+0x44>)
  404cbc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  404cbe:	2000      	movs	r0, #0
  404cc0:	bd08      	pop	{r3, pc}
  404cc2:	bf00      	nop
  404cc4:	2040c390 	.word	0x2040c390
  404cc8:	0040348d 	.word	0x0040348d
  404ccc:	2040c38c 	.word	0x2040c38c

00404cd0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  404cd0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  404cd2:	4b15      	ldr	r3, [pc, #84]	; (404d28 <prvCheckForValidListAndQueue+0x58>)
  404cd4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  404cd6:	4b15      	ldr	r3, [pc, #84]	; (404d2c <prvCheckForValidListAndQueue+0x5c>)
  404cd8:	681b      	ldr	r3, [r3, #0]
  404cda:	b113      	cbz	r3, 404ce2 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  404cdc:	4b14      	ldr	r3, [pc, #80]	; (404d30 <prvCheckForValidListAndQueue+0x60>)
  404cde:	4798      	blx	r3
  404ce0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  404ce2:	4d14      	ldr	r5, [pc, #80]	; (404d34 <prvCheckForValidListAndQueue+0x64>)
  404ce4:	4628      	mov	r0, r5
  404ce6:	4e14      	ldr	r6, [pc, #80]	; (404d38 <prvCheckForValidListAndQueue+0x68>)
  404ce8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  404cea:	4c14      	ldr	r4, [pc, #80]	; (404d3c <prvCheckForValidListAndQueue+0x6c>)
  404cec:	4620      	mov	r0, r4
  404cee:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  404cf0:	4b13      	ldr	r3, [pc, #76]	; (404d40 <prvCheckForValidListAndQueue+0x70>)
  404cf2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  404cf4:	4b13      	ldr	r3, [pc, #76]	; (404d44 <prvCheckForValidListAndQueue+0x74>)
  404cf6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  404cf8:	2200      	movs	r2, #0
  404cfa:	2110      	movs	r1, #16
  404cfc:	2005      	movs	r0, #5
  404cfe:	4b12      	ldr	r3, [pc, #72]	; (404d48 <prvCheckForValidListAndQueue+0x78>)
  404d00:	4798      	blx	r3
  404d02:	4b0a      	ldr	r3, [pc, #40]	; (404d2c <prvCheckForValidListAndQueue+0x5c>)
  404d04:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  404d06:	b118      	cbz	r0, 404d10 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  404d08:	4910      	ldr	r1, [pc, #64]	; (404d4c <prvCheckForValidListAndQueue+0x7c>)
  404d0a:	4b11      	ldr	r3, [pc, #68]	; (404d50 <prvCheckForValidListAndQueue+0x80>)
  404d0c:	4798      	blx	r3
  404d0e:	e7e5      	b.n	404cdc <prvCheckForValidListAndQueue+0xc>
  404d10:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d14:	b672      	cpsid	i
  404d16:	f383 8811 	msr	BASEPRI, r3
  404d1a:	f3bf 8f6f 	isb	sy
  404d1e:	f3bf 8f4f 	dsb	sy
  404d22:	b662      	cpsie	i
  404d24:	e7fe      	b.n	404d24 <prvCheckForValidListAndQueue+0x54>
  404d26:	bf00      	nop
  404d28:	004035a5 	.word	0x004035a5
  404d2c:	2040c3c0 	.word	0x2040c3c0
  404d30:	004035f1 	.word	0x004035f1
  404d34:	2040c394 	.word	0x2040c394
  404d38:	00403459 	.word	0x00403459
  404d3c:	2040c3a8 	.word	0x2040c3a8
  404d40:	2040c38c 	.word	0x2040c38c
  404d44:	2040c390 	.word	0x2040c390
  404d48:	00403afd 	.word	0x00403afd
  404d4c:	00410be4 	.word	0x00410be4
  404d50:	0040402d 	.word	0x0040402d

00404d54 <xTimerCreateTimerTask>:
{
  404d54:	b510      	push	{r4, lr}
  404d56:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  404d58:	4b0f      	ldr	r3, [pc, #60]	; (404d98 <xTimerCreateTimerTask+0x44>)
  404d5a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  404d5c:	4b0f      	ldr	r3, [pc, #60]	; (404d9c <xTimerCreateTimerTask+0x48>)
  404d5e:	681b      	ldr	r3, [r3, #0]
  404d60:	b173      	cbz	r3, 404d80 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  404d62:	2300      	movs	r3, #0
  404d64:	9303      	str	r3, [sp, #12]
  404d66:	9302      	str	r3, [sp, #8]
  404d68:	9301      	str	r3, [sp, #4]
  404d6a:	2204      	movs	r2, #4
  404d6c:	9200      	str	r2, [sp, #0]
  404d6e:	f44f 7282 	mov.w	r2, #260	; 0x104
  404d72:	490b      	ldr	r1, [pc, #44]	; (404da0 <xTimerCreateTimerTask+0x4c>)
  404d74:	480b      	ldr	r0, [pc, #44]	; (404da4 <xTimerCreateTimerTask+0x50>)
  404d76:	4c0c      	ldr	r4, [pc, #48]	; (404da8 <xTimerCreateTimerTask+0x54>)
  404d78:	47a0      	blx	r4
	configASSERT( xReturn );
  404d7a:	b108      	cbz	r0, 404d80 <xTimerCreateTimerTask+0x2c>
}
  404d7c:	b004      	add	sp, #16
  404d7e:	bd10      	pop	{r4, pc}
  404d80:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d84:	b672      	cpsid	i
  404d86:	f383 8811 	msr	BASEPRI, r3
  404d8a:	f3bf 8f6f 	isb	sy
  404d8e:	f3bf 8f4f 	dsb	sy
  404d92:	b662      	cpsie	i
  404d94:	e7fe      	b.n	404d94 <xTimerCreateTimerTask+0x40>
  404d96:	bf00      	nop
  404d98:	00404cd1 	.word	0x00404cd1
  404d9c:	2040c3c0 	.word	0x2040c3c0
  404da0:	00410bec 	.word	0x00410bec
  404da4:	00404ed5 	.word	0x00404ed5
  404da8:	0040413d 	.word	0x0040413d

00404dac <xTimerGenericCommand>:
	configASSERT( xTimer );
  404dac:	b1d8      	cbz	r0, 404de6 <xTimerGenericCommand+0x3a>
{
  404dae:	b530      	push	{r4, r5, lr}
  404db0:	b085      	sub	sp, #20
  404db2:	4615      	mov	r5, r2
  404db4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  404db6:	4a15      	ldr	r2, [pc, #84]	; (404e0c <xTimerGenericCommand+0x60>)
  404db8:	6810      	ldr	r0, [r2, #0]
  404dba:	b320      	cbz	r0, 404e06 <xTimerGenericCommand+0x5a>
  404dbc:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  404dbe:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  404dc0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  404dc2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  404dc4:	2905      	cmp	r1, #5
  404dc6:	dc19      	bgt.n	404dfc <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  404dc8:	4b11      	ldr	r3, [pc, #68]	; (404e10 <xTimerGenericCommand+0x64>)
  404dca:	4798      	blx	r3
  404dcc:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  404dce:	f04f 0300 	mov.w	r3, #0
  404dd2:	bf0c      	ite	eq
  404dd4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  404dd6:	461a      	movne	r2, r3
  404dd8:	4669      	mov	r1, sp
  404dda:	480c      	ldr	r0, [pc, #48]	; (404e0c <xTimerGenericCommand+0x60>)
  404ddc:	6800      	ldr	r0, [r0, #0]
  404dde:	4c0d      	ldr	r4, [pc, #52]	; (404e14 <xTimerGenericCommand+0x68>)
  404de0:	47a0      	blx	r4
}
  404de2:	b005      	add	sp, #20
  404de4:	bd30      	pop	{r4, r5, pc}
  404de6:	f04f 0380 	mov.w	r3, #128	; 0x80
  404dea:	b672      	cpsid	i
  404dec:	f383 8811 	msr	BASEPRI, r3
  404df0:	f3bf 8f6f 	isb	sy
  404df4:	f3bf 8f4f 	dsb	sy
  404df8:	b662      	cpsie	i
  404dfa:	e7fe      	b.n	404dfa <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  404dfc:	2300      	movs	r3, #0
  404dfe:	4669      	mov	r1, sp
  404e00:	4c05      	ldr	r4, [pc, #20]	; (404e18 <xTimerGenericCommand+0x6c>)
  404e02:	47a0      	blx	r4
  404e04:	e7ed      	b.n	404de2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  404e06:	2000      	movs	r0, #0
	return xReturn;
  404e08:	e7eb      	b.n	404de2 <xTimerGenericCommand+0x36>
  404e0a:	bf00      	nop
  404e0c:	2040c3c0 	.word	0x2040c3c0
  404e10:	00404ae9 	.word	0x00404ae9
  404e14:	00403b79 	.word	0x00403b79
  404e18:	00403d5d 	.word	0x00403d5d

00404e1c <prvSampleTimeNow>:
{
  404e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404e20:	b082      	sub	sp, #8
  404e22:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  404e24:	4b24      	ldr	r3, [pc, #144]	; (404eb8 <prvSampleTimeNow+0x9c>)
  404e26:	4798      	blx	r3
  404e28:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  404e2a:	4b24      	ldr	r3, [pc, #144]	; (404ebc <prvSampleTimeNow+0xa0>)
  404e2c:	681b      	ldr	r3, [r3, #0]
  404e2e:	4298      	cmp	r0, r3
  404e30:	d31b      	bcc.n	404e6a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  404e32:	2300      	movs	r3, #0
  404e34:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  404e38:	4b20      	ldr	r3, [pc, #128]	; (404ebc <prvSampleTimeNow+0xa0>)
  404e3a:	601f      	str	r7, [r3, #0]
}
  404e3c:	4638      	mov	r0, r7
  404e3e:	b002      	add	sp, #8
  404e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  404e44:	2100      	movs	r1, #0
  404e46:	9100      	str	r1, [sp, #0]
  404e48:	460b      	mov	r3, r1
  404e4a:	4652      	mov	r2, sl
  404e4c:	4620      	mov	r0, r4
  404e4e:	4c1c      	ldr	r4, [pc, #112]	; (404ec0 <prvSampleTimeNow+0xa4>)
  404e50:	47a0      	blx	r4
				configASSERT( xResult );
  404e52:	b960      	cbnz	r0, 404e6e <prvSampleTimeNow+0x52>
  404e54:	f04f 0380 	mov.w	r3, #128	; 0x80
  404e58:	b672      	cpsid	i
  404e5a:	f383 8811 	msr	BASEPRI, r3
  404e5e:	f3bf 8f6f 	isb	sy
  404e62:	f3bf 8f4f 	dsb	sy
  404e66:	b662      	cpsie	i
  404e68:	e7fe      	b.n	404e68 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  404e6a:	4d16      	ldr	r5, [pc, #88]	; (404ec4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404e6c:	4e16      	ldr	r6, [pc, #88]	; (404ec8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  404e6e:	682b      	ldr	r3, [r5, #0]
  404e70:	681a      	ldr	r2, [r3, #0]
  404e72:	b1c2      	cbz	r2, 404ea6 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  404e74:	68db      	ldr	r3, [r3, #12]
  404e76:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  404e7a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404e7c:	f104 0904 	add.w	r9, r4, #4
  404e80:	4648      	mov	r0, r9
  404e82:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  404e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404e86:	4620      	mov	r0, r4
  404e88:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  404e8a:	69e3      	ldr	r3, [r4, #28]
  404e8c:	2b01      	cmp	r3, #1
  404e8e:	d1ee      	bne.n	404e6e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  404e90:	69a3      	ldr	r3, [r4, #24]
  404e92:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  404e94:	459a      	cmp	sl, r3
  404e96:	d2d5      	bcs.n	404e44 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  404e98:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  404e9a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  404e9c:	4649      	mov	r1, r9
  404e9e:	6828      	ldr	r0, [r5, #0]
  404ea0:	4b0a      	ldr	r3, [pc, #40]	; (404ecc <prvSampleTimeNow+0xb0>)
  404ea2:	4798      	blx	r3
  404ea4:	e7e3      	b.n	404e6e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  404ea6:	4a0a      	ldr	r2, [pc, #40]	; (404ed0 <prvSampleTimeNow+0xb4>)
  404ea8:	6810      	ldr	r0, [r2, #0]
  404eaa:	4906      	ldr	r1, [pc, #24]	; (404ec4 <prvSampleTimeNow+0xa8>)
  404eac:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  404eae:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  404eb0:	2301      	movs	r3, #1
  404eb2:	f8c8 3000 	str.w	r3, [r8]
  404eb6:	e7bf      	b.n	404e38 <prvSampleTimeNow+0x1c>
  404eb8:	0040440d 	.word	0x0040440d
  404ebc:	2040c3bc 	.word	0x2040c3bc
  404ec0:	00404dad 	.word	0x00404dad
  404ec4:	2040c38c 	.word	0x2040c38c
  404ec8:	004034c1 	.word	0x004034c1
  404ecc:	0040348d 	.word	0x0040348d
  404ed0:	2040c390 	.word	0x2040c390

00404ed4 <prvTimerTask>:
{
  404ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404ed8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  404eda:	4e75      	ldr	r6, [pc, #468]	; (4050b0 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  404edc:	4f75      	ldr	r7, [pc, #468]	; (4050b4 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  404ede:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4050dc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404ee2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4050e0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  404ee6:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  404ee8:	681a      	ldr	r2, [r3, #0]
  404eea:	2a00      	cmp	r2, #0
  404eec:	f000 80ce 	beq.w	40508c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  404ef0:	68db      	ldr	r3, [r3, #12]
  404ef2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  404ef4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  404ef6:	a804      	add	r0, sp, #16
  404ef8:	4b6f      	ldr	r3, [pc, #444]	; (4050b8 <prvTimerTask+0x1e4>)
  404efa:	4798      	blx	r3
  404efc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  404efe:	9b04      	ldr	r3, [sp, #16]
  404f00:	2b00      	cmp	r3, #0
  404f02:	d144      	bne.n	404f8e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  404f04:	42a0      	cmp	r0, r4
  404f06:	d212      	bcs.n	404f2e <prvTimerTask+0x5a>
  404f08:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  404f0a:	1b61      	subs	r1, r4, r5
  404f0c:	4b6b      	ldr	r3, [pc, #428]	; (4050bc <prvTimerTask+0x1e8>)
  404f0e:	6818      	ldr	r0, [r3, #0]
  404f10:	4b6b      	ldr	r3, [pc, #428]	; (4050c0 <prvTimerTask+0x1ec>)
  404f12:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  404f14:	4b6b      	ldr	r3, [pc, #428]	; (4050c4 <prvTimerTask+0x1f0>)
  404f16:	4798      	blx	r3
  404f18:	2800      	cmp	r0, #0
  404f1a:	d13a      	bne.n	404f92 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  404f1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  404f20:	f8c9 3000 	str.w	r3, [r9]
  404f24:	f3bf 8f4f 	dsb	sy
  404f28:	f3bf 8f6f 	isb	sy
  404f2c:	e031      	b.n	404f92 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  404f2e:	4b65      	ldr	r3, [pc, #404]	; (4050c4 <prvTimerTask+0x1f0>)
  404f30:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  404f32:	6833      	ldr	r3, [r6, #0]
  404f34:	68db      	ldr	r3, [r3, #12]
  404f36:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404f3a:	f10a 0004 	add.w	r0, sl, #4
  404f3e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  404f40:	f8da 301c 	ldr.w	r3, [sl, #28]
  404f44:	2b01      	cmp	r3, #1
  404f46:	d004      	beq.n	404f52 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  404f48:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404f4c:	4650      	mov	r0, sl
  404f4e:	4798      	blx	r3
  404f50:	e01f      	b.n	404f92 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  404f52:	f8da 1018 	ldr.w	r1, [sl, #24]
  404f56:	4623      	mov	r3, r4
  404f58:	462a      	mov	r2, r5
  404f5a:	4421      	add	r1, r4
  404f5c:	4650      	mov	r0, sl
  404f5e:	4d5a      	ldr	r5, [pc, #360]	; (4050c8 <prvTimerTask+0x1f4>)
  404f60:	47a8      	blx	r5
  404f62:	2801      	cmp	r0, #1
  404f64:	d1f0      	bne.n	404f48 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  404f66:	2100      	movs	r1, #0
  404f68:	9100      	str	r1, [sp, #0]
  404f6a:	460b      	mov	r3, r1
  404f6c:	4622      	mov	r2, r4
  404f6e:	4650      	mov	r0, sl
  404f70:	4c56      	ldr	r4, [pc, #344]	; (4050cc <prvTimerTask+0x1f8>)
  404f72:	47a0      	blx	r4
			configASSERT( xResult );
  404f74:	2800      	cmp	r0, #0
  404f76:	d1e7      	bne.n	404f48 <prvTimerTask+0x74>
  404f78:	f04f 0380 	mov.w	r3, #128	; 0x80
  404f7c:	b672      	cpsid	i
  404f7e:	f383 8811 	msr	BASEPRI, r3
  404f82:	f3bf 8f6f 	isb	sy
  404f86:	f3bf 8f4f 	dsb	sy
  404f8a:	b662      	cpsie	i
  404f8c:	e7fe      	b.n	404f8c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  404f8e:	4b4d      	ldr	r3, [pc, #308]	; (4050c4 <prvTimerTask+0x1f0>)
  404f90:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  404f92:	4d4a      	ldr	r5, [pc, #296]	; (4050bc <prvTimerTask+0x1e8>)
  404f94:	4c4e      	ldr	r4, [pc, #312]	; (4050d0 <prvTimerTask+0x1fc>)
  404f96:	e006      	b.n	404fa6 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  404f98:	9907      	ldr	r1, [sp, #28]
  404f9a:	9806      	ldr	r0, [sp, #24]
  404f9c:	9b05      	ldr	r3, [sp, #20]
  404f9e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  404fa0:	9b04      	ldr	r3, [sp, #16]
  404fa2:	2b00      	cmp	r3, #0
  404fa4:	da09      	bge.n	404fba <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  404fa6:	2300      	movs	r3, #0
  404fa8:	461a      	mov	r2, r3
  404faa:	a904      	add	r1, sp, #16
  404fac:	6828      	ldr	r0, [r5, #0]
  404fae:	47a0      	blx	r4
  404fb0:	2800      	cmp	r0, #0
  404fb2:	d098      	beq.n	404ee6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  404fb4:	9b04      	ldr	r3, [sp, #16]
  404fb6:	2b00      	cmp	r3, #0
  404fb8:	dbee      	blt.n	404f98 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  404fba:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  404fbe:	f8da 3014 	ldr.w	r3, [sl, #20]
  404fc2:	b113      	cbz	r3, 404fca <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404fc4:	f10a 0004 	add.w	r0, sl, #4
  404fc8:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  404fca:	a803      	add	r0, sp, #12
  404fcc:	4b3a      	ldr	r3, [pc, #232]	; (4050b8 <prvTimerTask+0x1e4>)
  404fce:	4798      	blx	r3
			switch( xMessage.xMessageID )
  404fd0:	9b04      	ldr	r3, [sp, #16]
  404fd2:	2b09      	cmp	r3, #9
  404fd4:	d8e7      	bhi.n	404fa6 <prvTimerTask+0xd2>
  404fd6:	a201      	add	r2, pc, #4	; (adr r2, 404fdc <prvTimerTask+0x108>)
  404fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404fdc:	00405005 	.word	0x00405005
  404fe0:	00405005 	.word	0x00405005
  404fe4:	00405005 	.word	0x00405005
  404fe8:	00404fa7 	.word	0x00404fa7
  404fec:	00405059 	.word	0x00405059
  404ff0:	00405085 	.word	0x00405085
  404ff4:	00405005 	.word	0x00405005
  404ff8:	00405005 	.word	0x00405005
  404ffc:	00404fa7 	.word	0x00404fa7
  405000:	00405059 	.word	0x00405059
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  405004:	9c05      	ldr	r4, [sp, #20]
  405006:	f8da 1018 	ldr.w	r1, [sl, #24]
  40500a:	4623      	mov	r3, r4
  40500c:	4602      	mov	r2, r0
  40500e:	4421      	add	r1, r4
  405010:	4650      	mov	r0, sl
  405012:	4c2d      	ldr	r4, [pc, #180]	; (4050c8 <prvTimerTask+0x1f4>)
  405014:	47a0      	blx	r4
  405016:	2801      	cmp	r0, #1
  405018:	d1bc      	bne.n	404f94 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40501a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40501e:	4650      	mov	r0, sl
  405020:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  405022:	f8da 301c 	ldr.w	r3, [sl, #28]
  405026:	2b01      	cmp	r3, #1
  405028:	d1b4      	bne.n	404f94 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40502a:	f8da 2018 	ldr.w	r2, [sl, #24]
  40502e:	2100      	movs	r1, #0
  405030:	9100      	str	r1, [sp, #0]
  405032:	460b      	mov	r3, r1
  405034:	9805      	ldr	r0, [sp, #20]
  405036:	4402      	add	r2, r0
  405038:	4650      	mov	r0, sl
  40503a:	4c24      	ldr	r4, [pc, #144]	; (4050cc <prvTimerTask+0x1f8>)
  40503c:	47a0      	blx	r4
							configASSERT( xResult );
  40503e:	2800      	cmp	r0, #0
  405040:	d1a8      	bne.n	404f94 <prvTimerTask+0xc0>
  405042:	f04f 0380 	mov.w	r3, #128	; 0x80
  405046:	b672      	cpsid	i
  405048:	f383 8811 	msr	BASEPRI, r3
  40504c:	f3bf 8f6f 	isb	sy
  405050:	f3bf 8f4f 	dsb	sy
  405054:	b662      	cpsie	i
  405056:	e7fe      	b.n	405056 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  405058:	9905      	ldr	r1, [sp, #20]
  40505a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40505e:	b131      	cbz	r1, 40506e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  405060:	4603      	mov	r3, r0
  405062:	4602      	mov	r2, r0
  405064:	4401      	add	r1, r0
  405066:	4650      	mov	r0, sl
  405068:	4c17      	ldr	r4, [pc, #92]	; (4050c8 <prvTimerTask+0x1f4>)
  40506a:	47a0      	blx	r4
  40506c:	e792      	b.n	404f94 <prvTimerTask+0xc0>
  40506e:	f04f 0380 	mov.w	r3, #128	; 0x80
  405072:	b672      	cpsid	i
  405074:	f383 8811 	msr	BASEPRI, r3
  405078:	f3bf 8f6f 	isb	sy
  40507c:	f3bf 8f4f 	dsb	sy
  405080:	b662      	cpsie	i
  405082:	e7fe      	b.n	405082 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  405084:	4650      	mov	r0, sl
  405086:	4b13      	ldr	r3, [pc, #76]	; (4050d4 <prvTimerTask+0x200>)
  405088:	4798      	blx	r3
  40508a:	e783      	b.n	404f94 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  40508c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40508e:	a804      	add	r0, sp, #16
  405090:	4b09      	ldr	r3, [pc, #36]	; (4050b8 <prvTimerTask+0x1e4>)
  405092:	4798      	blx	r3
  405094:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  405096:	9b04      	ldr	r3, [sp, #16]
  405098:	2b00      	cmp	r3, #0
  40509a:	f47f af78 	bne.w	404f8e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40509e:	4b0e      	ldr	r3, [pc, #56]	; (4050d8 <prvTimerTask+0x204>)
  4050a0:	681b      	ldr	r3, [r3, #0]
  4050a2:	681a      	ldr	r2, [r3, #0]
  4050a4:	fab2 f282 	clz	r2, r2
  4050a8:	0952      	lsrs	r2, r2, #5
  4050aa:	2400      	movs	r4, #0
  4050ac:	e72d      	b.n	404f0a <prvTimerTask+0x36>
  4050ae:	bf00      	nop
  4050b0:	2040c38c 	.word	0x2040c38c
  4050b4:	004043fd 	.word	0x004043fd
  4050b8:	00404e1d 	.word	0x00404e1d
  4050bc:	2040c3c0 	.word	0x2040c3c0
  4050c0:	00404061 	.word	0x00404061
  4050c4:	00404565 	.word	0x00404565
  4050c8:	00404c85 	.word	0x00404c85
  4050cc:	00404dad 	.word	0x00404dad
  4050d0:	00403e5d 	.word	0x00403e5d
  4050d4:	00403871 	.word	0x00403871
  4050d8:	2040c390 	.word	0x2040c390
  4050dc:	e000ed04 	.word	0xe000ed04
  4050e0:	004034c1 	.word	0x004034c1

004050e4 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  4050e4:	2810      	cmp	r0, #16
  4050e6:	d108      	bne.n	4050fa <chip_isr+0x16>
  4050e8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4050ec:	d105      	bne.n	4050fa <chip_isr+0x16>
{
  4050ee:	b508      	push	{r3, lr}
		if (gpfIsr) {
  4050f0:	4b02      	ldr	r3, [pc, #8]	; (4050fc <chip_isr+0x18>)
  4050f2:	681b      	ldr	r3, [r3, #0]
  4050f4:	b103      	cbz	r3, 4050f8 <chip_isr+0x14>
			gpfIsr();
  4050f6:	4798      	blx	r3
  4050f8:	bd08      	pop	{r3, pc}
  4050fa:	4770      	bx	lr
  4050fc:	2040c3c4 	.word	0x2040c3c4

00405100 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  405100:	b150      	cbz	r0, 405118 <nm_bsp_sleep+0x18>
{
  405102:	b570      	push	{r4, r5, r6, lr}
  405104:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  405106:	4e05      	ldr	r6, [pc, #20]	; (40511c <nm_bsp_sleep+0x1c>)
  405108:	4d05      	ldr	r5, [pc, #20]	; (405120 <nm_bsp_sleep+0x20>)
  40510a:	4630      	mov	r0, r6
  40510c:	47a8      	blx	r5
	while(u32TimeMsec--) {
  40510e:	3c01      	subs	r4, #1
  405110:	f1b4 3fff 	cmp.w	r4, #4294967295
  405114:	d1f9      	bne.n	40510a <nm_bsp_sleep+0xa>
  405116:	bd70      	pop	{r4, r5, r6, pc}
  405118:	4770      	bx	lr
  40511a:	bf00      	nop
  40511c:	00031635 	.word	0x00031635
  405120:	20400001 	.word	0x20400001

00405124 <nm_bsp_reset>:
{
  405124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  405128:	4f09      	ldr	r7, [pc, #36]	; (405150 <nm_bsp_reset+0x2c>)
  40512a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40512e:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  405132:	4d08      	ldr	r5, [pc, #32]	; (405154 <nm_bsp_reset+0x30>)
  405134:	2608      	movs	r6, #8
  405136:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  405138:	2064      	movs	r0, #100	; 0x64
  40513a:	4c07      	ldr	r4, [pc, #28]	; (405158 <nm_bsp_reset+0x34>)
  40513c:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40513e:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  405142:	2064      	movs	r0, #100	; 0x64
  405144:	47a0      	blx	r4
  405146:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  405148:	2064      	movs	r0, #100	; 0x64
  40514a:	47a0      	blx	r4
  40514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405150:	400e1200 	.word	0x400e1200
  405154:	400e1000 	.word	0x400e1000
  405158:	00405101 	.word	0x00405101

0040515c <nm_bsp_init>:
{
  40515c:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  40515e:	2200      	movs	r2, #0
  405160:	4b14      	ldr	r3, [pc, #80]	; (4051b4 <nm_bsp_init+0x58>)
  405162:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  405164:	200a      	movs	r0, #10
  405166:	4c14      	ldr	r4, [pc, #80]	; (4051b8 <nm_bsp_init+0x5c>)
  405168:	47a0      	blx	r4
  40516a:	200b      	movs	r0, #11
  40516c:	47a0      	blx	r4
  40516e:	200c      	movs	r0, #12
  405170:	47a0      	blx	r4
  405172:	2010      	movs	r0, #16
  405174:	47a0      	blx	r4
  405176:	2011      	movs	r0, #17
  405178:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40517a:	4b10      	ldr	r3, [pc, #64]	; (4051bc <nm_bsp_init+0x60>)
  40517c:	2208      	movs	r2, #8
  40517e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405180:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405184:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405186:	4a0e      	ldr	r2, [pc, #56]	; (4051c0 <nm_bsp_init+0x64>)
  405188:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40518c:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40518e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405192:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405194:	2204      	movs	r2, #4
  405196:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405198:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40519c:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  40519e:	4b09      	ldr	r3, [pc, #36]	; (4051c4 <nm_bsp_init+0x68>)
  4051a0:	681b      	ldr	r3, [r3, #0]
  4051a2:	f013 0f01 	tst.w	r3, #1
  4051a6:	d001      	beq.n	4051ac <nm_bsp_init+0x50>
  4051a8:	4b06      	ldr	r3, [pc, #24]	; (4051c4 <nm_bsp_init+0x68>)
  4051aa:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  4051ac:	4b06      	ldr	r3, [pc, #24]	; (4051c8 <nm_bsp_init+0x6c>)
  4051ae:	4798      	blx	r3
}
  4051b0:	2000      	movs	r0, #0
  4051b2:	bd10      	pop	{r4, pc}
  4051b4:	2040c3c4 	.word	0x2040c3c4
  4051b8:	00408621 	.word	0x00408621
  4051bc:	400e1000 	.word	0x400e1000
  4051c0:	400e1200 	.word	0x400e1200
  4051c4:	e000e010 	.word	0xe000e010
  4051c8:	00405125 	.word	0x00405125

004051cc <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  4051cc:	b530      	push	{r4, r5, lr}
  4051ce:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  4051d0:	4b14      	ldr	r3, [pc, #80]	; (405224 <nm_bsp_register_isr+0x58>)
  4051d2:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  4051d4:	2010      	movs	r0, #16
  4051d6:	4b14      	ldr	r3, [pc, #80]	; (405228 <nm_bsp_register_isr+0x5c>)
  4051d8:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  4051da:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4051de:	207c      	movs	r0, #124	; 0x7c
  4051e0:	4b12      	ldr	r3, [pc, #72]	; (40522c <nm_bsp_register_isr+0x60>)
  4051e2:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  4051e4:	4c12      	ldr	r4, [pc, #72]	; (405230 <nm_bsp_register_isr+0x64>)
  4051e6:	2201      	movs	r2, #1
  4051e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4051ec:	4620      	mov	r0, r4
  4051ee:	4b11      	ldr	r3, [pc, #68]	; (405234 <nm_bsp_register_isr+0x68>)
  4051f0:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4051f2:	4b11      	ldr	r3, [pc, #68]	; (405238 <nm_bsp_register_isr+0x6c>)
  4051f4:	9300      	str	r3, [sp, #0]
  4051f6:	2351      	movs	r3, #81	; 0x51
  4051f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4051fc:	2110      	movs	r1, #16
  4051fe:	4620      	mov	r0, r4
  405200:	4d0e      	ldr	r5, [pc, #56]	; (40523c <nm_bsp_register_isr+0x70>)
  405202:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  405204:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405208:	4620      	mov	r0, r4
  40520a:	4b0d      	ldr	r3, [pc, #52]	; (405240 <nm_bsp_register_isr+0x74>)
  40520c:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40520e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405212:	4b0c      	ldr	r3, [pc, #48]	; (405244 <nm_bsp_register_isr+0x78>)
  405214:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  405216:	2200      	movs	r2, #0
  405218:	2110      	movs	r1, #16
  40521a:	4620      	mov	r0, r4
  40521c:	4b0a      	ldr	r3, [pc, #40]	; (405248 <nm_bsp_register_isr+0x7c>)
  40521e:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  405220:	b003      	add	sp, #12
  405222:	bd30      	pop	{r4, r5, pc}
  405224:	2040c3c4 	.word	0x2040c3c4
  405228:	00408621 	.word	0x00408621
  40522c:	00408229 	.word	0x00408229
  405230:	400e1400 	.word	0x400e1400
  405234:	004080ed 	.word	0x004080ed
  405238:	004050e5 	.word	0x004050e5
  40523c:	004083a9 	.word	0x004083a9
  405240:	00408219 	.word	0x00408219
  405244:	e000e100 	.word	0xe000e100
  405248:	0040847d 	.word	0x0040847d

0040524c <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  40524c:	b508      	push	{r3, lr}
	if (u8Enable) {
  40524e:	b928      	cbnz	r0, 40525c <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  405250:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405254:	4804      	ldr	r0, [pc, #16]	; (405268 <nm_bsp_interrupt_ctrl+0x1c>)
  405256:	4b05      	ldr	r3, [pc, #20]	; (40526c <nm_bsp_interrupt_ctrl+0x20>)
  405258:	4798      	blx	r3
  40525a:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40525c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405260:	4801      	ldr	r0, [pc, #4]	; (405268 <nm_bsp_interrupt_ctrl+0x1c>)
  405262:	4b03      	ldr	r3, [pc, #12]	; (405270 <nm_bsp_interrupt_ctrl+0x24>)
  405264:	4798      	blx	r3
  405266:	bd08      	pop	{r3, pc}
  405268:	400e1400 	.word	0x400e1400
  40526c:	0040821d 	.word	0x0040821d
  405270:	00408219 	.word	0x00408219

00405274 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  405274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  405276:	4c39      	ldr	r4, [pc, #228]	; (40535c <nm_bus_init+0xe8>)
  405278:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40527c:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40527e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  405282:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  405284:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405286:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40528a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40528c:	430b      	orrs	r3, r1
  40528e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405290:	6f63      	ldr	r3, [r4, #116]	; 0x74
  405292:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  405296:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  405298:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40529c:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40529e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4052a2:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4052a4:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4052a6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4052aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4052ac:	4313      	orrs	r3, r2
  4052ae:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4052b0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4052b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4052b6:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4052b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  4052bc:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4052be:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4052c2:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4052c4:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4052c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4052ca:	6f20      	ldr	r0, [r4, #112]	; 0x70
  4052cc:	4318      	orrs	r0, r3
  4052ce:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4052d0:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4052d2:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  4052d6:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4052d8:	6061      	str	r1, [r4, #4]
  4052da:	6062      	str	r2, [r4, #4]
  4052dc:	6063      	str	r3, [r4, #4]
  4052de:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  4052e2:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  4052e4:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  4052e6:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  4052e8:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  4052ea:	4d1d      	ldr	r5, [pc, #116]	; (405360 <nm_bus_init+0xec>)
  4052ec:	4628      	mov	r0, r5
  4052ee:	4b1d      	ldr	r3, [pc, #116]	; (405364 <nm_bus_init+0xf0>)
  4052f0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4052f2:	2302      	movs	r3, #2
  4052f4:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4052f6:	2380      	movs	r3, #128	; 0x80
  4052f8:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4052fa:	686b      	ldr	r3, [r5, #4]
  4052fc:	f043 0301 	orr.w	r3, r3, #1
  405300:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  405302:	686b      	ldr	r3, [r5, #4]
  405304:	f043 0310 	orr.w	r3, r3, #16
  405308:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  40530a:	2101      	movs	r1, #1
  40530c:	4628      	mov	r0, r5
  40530e:	4b16      	ldr	r3, [pc, #88]	; (405368 <nm_bus_init+0xf4>)
  405310:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  405312:	2200      	movs	r2, #0
  405314:	2101      	movs	r1, #1
  405316:	4628      	mov	r0, r5
  405318:	4b14      	ldr	r3, [pc, #80]	; (40536c <nm_bus_init+0xf8>)
  40531a:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  40531c:	2201      	movs	r2, #1
  40531e:	4611      	mov	r1, r2
  405320:	4628      	mov	r0, r5
  405322:	4b13      	ldr	r3, [pc, #76]	; (405370 <nm_bus_init+0xfc>)
  405324:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  405326:	2200      	movs	r2, #0
  405328:	2101      	movs	r1, #1
  40532a:	4628      	mov	r0, r5
  40532c:	4b11      	ldr	r3, [pc, #68]	; (405374 <nm_bus_init+0x100>)
  40532e:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  405330:	4911      	ldr	r1, [pc, #68]	; (405378 <nm_bus_init+0x104>)
  405332:	4812      	ldr	r0, [pc, #72]	; (40537c <nm_bus_init+0x108>)
  405334:	4b12      	ldr	r3, [pc, #72]	; (405380 <nm_bus_init+0x10c>)
  405336:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  405338:	b2c2      	uxtb	r2, r0
  40533a:	2101      	movs	r1, #1
  40533c:	4628      	mov	r0, r5
  40533e:	4b11      	ldr	r3, [pc, #68]	; (405384 <nm_bus_init+0x110>)
  405340:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  405342:	2300      	movs	r3, #0
  405344:	461a      	mov	r2, r3
  405346:	2101      	movs	r1, #1
  405348:	4628      	mov	r0, r5
  40534a:	4f0f      	ldr	r7, [pc, #60]	; (405388 <nm_bus_init+0x114>)
  40534c:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40534e:	2301      	movs	r3, #1
  405350:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  405352:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  405354:	4b0d      	ldr	r3, [pc, #52]	; (40538c <nm_bus_init+0x118>)
  405356:	4798      	blx	r3
#endif
	return result;
}
  405358:	2000      	movs	r0, #0
  40535a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40535c:	400e1400 	.word	0x400e1400
  405360:	40008000 	.word	0x40008000
  405364:	00408675 	.word	0x00408675
  405368:	004086a1 	.word	0x004086a1
  40536c:	0040871b 	.word	0x0040871b
  405370:	00408739 	.word	0x00408739
  405374:	00408757 	.word	0x00408757
  405378:	11e1a300 	.word	0x11e1a300
  40537c:	02dc6c00 	.word	0x02dc6c00
  405380:	0040876b 	.word	0x0040876b
  405384:	00408781 	.word	0x00408781
  405388:	004087a9 	.word	0x004087a9
  40538c:	00405125 	.word	0x00405125

00405390 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  405390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405394:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  405396:	2803      	cmp	r0, #3
  405398:	d144      	bne.n	405424 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40539a:	680e      	ldr	r6, [r1, #0]
  40539c:	684d      	ldr	r5, [r1, #4]
  40539e:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  4053a0:	2300      	movs	r3, #0
  4053a2:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  4053a6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  4053aa:	b186      	cbz	r6, 4053ce <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  4053ac:	2d00      	cmp	r5, #0
  4053ae:	d136      	bne.n	40541e <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  4053b0:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4053b4:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  4053b6:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  4053b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4053bc:	4b20      	ldr	r3, [pc, #128]	; (405440 <nm_bus_ioctl+0xb0>)
  4053be:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  4053c0:	b32c      	cbz	r4, 40540e <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  4053c2:	4f20      	ldr	r7, [pc, #128]	; (405444 <nm_bus_ioctl+0xb4>)
  4053c4:	f8df b094 	ldr.w	fp, [pc, #148]	; 40545c <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  4053c8:	f8df a094 	ldr.w	sl, [pc, #148]	; 405460 <nm_bus_ioctl+0xd0>
  4053cc:	e006      	b.n	4053dc <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4053ce:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  4053d2:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  4053d6:	ae01      	add	r6, sp, #4
  4053d8:	e7ee      	b.n	4053b8 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  4053da:	b1c4      	cbz	r4, 40540e <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  4053dc:	2300      	movs	r3, #0
  4053de:	461a      	mov	r2, r3
  4053e0:	7831      	ldrb	r1, [r6, #0]
  4053e2:	4638      	mov	r0, r7
  4053e4:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  4053e6:	f10d 0205 	add.w	r2, sp, #5
  4053ea:	f10d 0106 	add.w	r1, sp, #6
  4053ee:	4638      	mov	r0, r7
  4053f0:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4053f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4053f6:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  4053f8:	3c01      	subs	r4, #1
  4053fa:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4053fc:	f1b8 0f00 	cmp.w	r8, #0
  405400:	d100      	bne.n	405404 <nm_bus_ioctl+0x74>
			pu8Miso++;
  405402:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  405404:	f1b9 0f00 	cmp.w	r9, #0
  405408:	d1e7      	bne.n	4053da <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  40540a:	3601      	adds	r6, #1
  40540c:	e7e5      	b.n	4053da <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  40540e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405412:	4b0b      	ldr	r3, [pc, #44]	; (405440 <nm_bus_ioctl+0xb0>)
  405414:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  405416:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  405418:	b003      	add	sp, #12
  40541a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  40541e:	f06f 0005 	mvn.w	r0, #5
		break;
  405422:	e7f9      	b.n	405418 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  405424:	f240 121f 	movw	r2, #287	; 0x11f
  405428:	4907      	ldr	r1, [pc, #28]	; (405448 <nm_bus_ioctl+0xb8>)
  40542a:	4808      	ldr	r0, [pc, #32]	; (40544c <nm_bus_ioctl+0xbc>)
  40542c:	4c08      	ldr	r4, [pc, #32]	; (405450 <nm_bus_ioctl+0xc0>)
  40542e:	47a0      	blx	r4
  405430:	4808      	ldr	r0, [pc, #32]	; (405454 <nm_bus_ioctl+0xc4>)
  405432:	47a0      	blx	r4
  405434:	4808      	ldr	r0, [pc, #32]	; (405458 <nm_bus_ioctl+0xc8>)
  405436:	47a0      	blx	r4
			s8Ret = -1;
  405438:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  40543c:	e7ec      	b.n	405418 <nm_bus_ioctl+0x88>
  40543e:	bf00      	nop
  405440:	400e1400 	.word	0x400e1400
  405444:	40008000 	.word	0x40008000
  405448:	00410bf4 	.word	0x00410bf4
  40544c:	00410c04 	.word	0x00410c04
  405450:	004096d1 	.word	0x004096d1
  405454:	00410c18 	.word	0x00410c18
  405458:	004118e8 	.word	0x004118e8
  40545c:	004086e7 	.word	0x004086e7
  405460:	004086b7 	.word	0x004086b7

00405464 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  405464:	2202      	movs	r2, #2
  405466:	4b0e      	ldr	r3, [pc, #56]	; (4054a0 <nm_bus_deinit+0x3c>)
  405468:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40546a:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  40546e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  405472:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  405476:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405478:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40547c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  405480:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405482:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405486:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40548a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40548c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405494:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405496:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40549a:	2000      	movs	r0, #0
  40549c:	4770      	bx	lr
  40549e:	bf00      	nop
  4054a0:	40008000 	.word	0x40008000

004054a4 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  4054a4:	b13a      	cbz	r2, 4054b6 <m2m_memcpy+0x12>
  4054a6:	3901      	subs	r1, #1
  4054a8:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  4054aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4054ae:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  4054b2:	4290      	cmp	r0, r2
  4054b4:	d1f9      	bne.n	4054aa <m2m_memcpy+0x6>
  4054b6:	4770      	bx	lr

004054b8 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  4054b8:	b122      	cbz	r2, 4054c4 <m2m_memset+0xc>
  4054ba:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  4054bc:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  4054c0:	4290      	cmp	r0, r2
  4054c2:	d1fb      	bne.n	4054bc <m2m_memset+0x4>
  4054c4:	4770      	bx	lr

004054c6 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  4054c6:	7803      	ldrb	r3, [r0, #0]
  4054c8:	b143      	cbz	r3, 4054dc <m2m_strlen+0x16>
  4054ca:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  4054cc:	3301      	adds	r3, #1
  4054ce:	b29b      	uxth	r3, r3
	while(*pcStr)
  4054d0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4054d4:	2a00      	cmp	r2, #0
  4054d6:	d1f9      	bne.n	4054cc <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  4054d8:	4618      	mov	r0, r3
  4054da:	4770      	bx	lr
	uint16	u16StrLen = 0;
  4054dc:	2300      	movs	r3, #0
  4054de:	e7fb      	b.n	4054d8 <m2m_strlen+0x12>

004054e0 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  4054e0:	4a02      	ldr	r2, [pc, #8]	; (4054ec <isr+0xc>)
  4054e2:	7813      	ldrb	r3, [r2, #0]
  4054e4:	3301      	adds	r3, #1
  4054e6:	b2db      	uxtb	r3, r3
  4054e8:	7013      	strb	r3, [r2, #0]
  4054ea:	4770      	bx	lr
  4054ec:	2040c3cb 	.word	0x2040c3cb

004054f0 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4054f0:	4770      	bx	lr
	...

004054f4 <hif_set_rx_done>:
{
  4054f4:	b500      	push	{lr}
  4054f6:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  4054f8:	2001      	movs	r0, #1
  4054fa:	4b0b      	ldr	r3, [pc, #44]	; (405528 <hif_set_rx_done+0x34>)
  4054fc:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4054fe:	a901      	add	r1, sp, #4
  405500:	f241 0070 	movw	r0, #4208	; 0x1070
  405504:	4b09      	ldr	r3, [pc, #36]	; (40552c <hif_set_rx_done+0x38>)
  405506:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  405508:	4603      	mov	r3, r0
  40550a:	b118      	cbz	r0, 405514 <hif_set_rx_done+0x20>
}
  40550c:	4618      	mov	r0, r3
  40550e:	b003      	add	sp, #12
  405510:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  405514:	9901      	ldr	r1, [sp, #4]
  405516:	f041 0102 	orr.w	r1, r1, #2
  40551a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  40551c:	f241 0070 	movw	r0, #4208	; 0x1070
  405520:	4b03      	ldr	r3, [pc, #12]	; (405530 <hif_set_rx_done+0x3c>)
  405522:	4798      	blx	r3
  405524:	4603      	mov	r3, r0
  405526:	e7f1      	b.n	40550c <hif_set_rx_done+0x18>
  405528:	0040524d 	.word	0x0040524d
  40552c:	00406811 	.word	0x00406811
  405530:	0040681d 	.word	0x0040681d

00405534 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  405534:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  405536:	4b12      	ldr	r3, [pc, #72]	; (405580 <hif_chip_wake+0x4c>)
  405538:	781b      	ldrb	r3, [r3, #0]
  40553a:	b94b      	cbnz	r3, 405550 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  40553c:	4b11      	ldr	r3, [pc, #68]	; (405584 <hif_chip_wake+0x50>)
  40553e:	781b      	ldrb	r3, [r3, #0]
  405540:	b2db      	uxtb	r3, r3
  405542:	2b03      	cmp	r3, #3
  405544:	d00c      	beq.n	405560 <hif_chip_wake+0x2c>
  405546:	4b0f      	ldr	r3, [pc, #60]	; (405584 <hif_chip_wake+0x50>)
  405548:	781b      	ldrb	r3, [r3, #0]
  40554a:	b2db      	uxtb	r3, r3
  40554c:	2b04      	cmp	r3, #4
  40554e:	d007      	beq.n	405560 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  405550:	4a0b      	ldr	r2, [pc, #44]	; (405580 <hif_chip_wake+0x4c>)
  405552:	7813      	ldrb	r3, [r2, #0]
  405554:	3301      	adds	r3, #1
  405556:	b2db      	uxtb	r3, r3
  405558:	7013      	strb	r3, [r2, #0]
  40555a:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  40555c:	4618      	mov	r0, r3
  40555e:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  405560:	4b09      	ldr	r3, [pc, #36]	; (405588 <hif_chip_wake+0x54>)
  405562:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  405564:	4603      	mov	r3, r0
  405566:	2800      	cmp	r0, #0
  405568:	d1f8      	bne.n	40555c <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  40556a:	f245 6178 	movw	r1, #22136	; 0x5678
  40556e:	f241 0074 	movw	r0, #4212	; 0x1074
  405572:	4b06      	ldr	r3, [pc, #24]	; (40558c <hif_chip_wake+0x58>)
  405574:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  405576:	4603      	mov	r3, r0
  405578:	2800      	cmp	r0, #0
  40557a:	d0e9      	beq.n	405550 <hif_chip_wake+0x1c>
  40557c:	e7ee      	b.n	40555c <hif_chip_wake+0x28>
  40557e:	bf00      	nop
  405580:	2040c3c9 	.word	0x2040c3c9
  405584:	2040c3c8 	.word	0x2040c3c8
  405588:	00406381 	.word	0x00406381
  40558c:	0040681d 	.word	0x0040681d

00405590 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  405590:	4b1e      	ldr	r3, [pc, #120]	; (40560c <hif_chip_sleep+0x7c>)
  405592:	781b      	ldrb	r3, [r3, #0]
  405594:	b123      	cbz	r3, 4055a0 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  405596:	4a1d      	ldr	r2, [pc, #116]	; (40560c <hif_chip_sleep+0x7c>)
  405598:	7813      	ldrb	r3, [r2, #0]
  40559a:	3b01      	subs	r3, #1
  40559c:	b2db      	uxtb	r3, r3
  40559e:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  4055a0:	4b1a      	ldr	r3, [pc, #104]	; (40560c <hif_chip_sleep+0x7c>)
  4055a2:	781b      	ldrb	r3, [r3, #0]
  4055a4:	2b00      	cmp	r3, #0
  4055a6:	d12e      	bne.n	405606 <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4055a8:	4b19      	ldr	r3, [pc, #100]	; (405610 <hif_chip_sleep+0x80>)
  4055aa:	781b      	ldrb	r3, [r3, #0]
  4055ac:	b2db      	uxtb	r3, r3
  4055ae:	2b03      	cmp	r3, #3
  4055b0:	d006      	beq.n	4055c0 <hif_chip_sleep+0x30>
  4055b2:	4b17      	ldr	r3, [pc, #92]	; (405610 <hif_chip_sleep+0x80>)
  4055b4:	781b      	ldrb	r3, [r3, #0]
  4055b6:	b2db      	uxtb	r3, r3
  4055b8:	2b04      	cmp	r3, #4
  4055ba:	d001      	beq.n	4055c0 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  4055bc:	2300      	movs	r3, #0
  4055be:	e023      	b.n	405608 <hif_chip_sleep+0x78>
{
  4055c0:	b500      	push	{lr}
  4055c2:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  4055c4:	2300      	movs	r3, #0
  4055c6:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  4055c8:	f244 3121 	movw	r1, #17185	; 0x4321
  4055cc:	f241 0074 	movw	r0, #4212	; 0x1074
  4055d0:	4b10      	ldr	r3, [pc, #64]	; (405614 <hif_chip_sleep+0x84>)
  4055d2:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4055d4:	4603      	mov	r3, r0
  4055d6:	b118      	cbz	r0, 4055e0 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  4055d8:	4618      	mov	r0, r3
  4055da:	b003      	add	sp, #12
  4055dc:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  4055e0:	a901      	add	r1, sp, #4
  4055e2:	2001      	movs	r0, #1
  4055e4:	4b0c      	ldr	r3, [pc, #48]	; (405618 <hif_chip_sleep+0x88>)
  4055e6:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4055e8:	4603      	mov	r3, r0
  4055ea:	2800      	cmp	r0, #0
  4055ec:	d1f4      	bne.n	4055d8 <hif_chip_sleep+0x48>
			if(reg&0x2)
  4055ee:	9901      	ldr	r1, [sp, #4]
  4055f0:	f011 0f02 	tst.w	r1, #2
  4055f4:	d0f0      	beq.n	4055d8 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  4055f6:	f021 0102 	bic.w	r1, r1, #2
  4055fa:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4055fc:	2001      	movs	r0, #1
  4055fe:	4b05      	ldr	r3, [pc, #20]	; (405614 <hif_chip_sleep+0x84>)
  405600:	4798      	blx	r3
  405602:	4603      	mov	r3, r0
  405604:	e7e8      	b.n	4055d8 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  405606:	2300      	movs	r3, #0
}
  405608:	4618      	mov	r0, r3
  40560a:	4770      	bx	lr
  40560c:	2040c3c9 	.word	0x2040c3c9
  405610:	2040c3c8 	.word	0x2040c3c8
  405614:	0040681d 	.word	0x0040681d
  405618:	00406811 	.word	0x00406811

0040561c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  40561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405620:	b087      	sub	sp, #28
  405622:	4607      	mov	r7, r0
  405624:	4688      	mov	r8, r1
  405626:	4692      	mov	sl, r2
  405628:	4699      	mov	r9, r3
  40562a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40562c:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  405630:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  405634:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  405638:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  40563c:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  405640:	2308      	movs	r3, #8
  405642:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  405646:	2c00      	cmp	r4, #0
  405648:	f000 809f 	beq.w	40578a <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  40564c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  405650:	fa16 f383 	uxtah	r3, r6, r3
  405654:	442b      	add	r3, r5
  405656:	b29b      	uxth	r3, r3
  405658:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  40565c:	4b5c      	ldr	r3, [pc, #368]	; (4057d0 <hif_send+0x1b4>)
  40565e:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  405660:	4683      	mov	fp, r0
  405662:	2800      	cmp	r0, #0
  405664:	f040 80a2 	bne.w	4057ac <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  405668:	2300      	movs	r3, #0
  40566a:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  40566c:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  405670:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  405672:	9b02      	ldr	r3, [sp, #8]
  405674:	431f      	orrs	r7, r3
  405676:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  405678:	9b02      	ldr	r3, [sp, #8]
  40567a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  40567e:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  405680:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  405684:	9b02      	ldr	r3, [sp, #8]
  405686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40568a:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40568c:	9902      	ldr	r1, [sp, #8]
  40568e:	f241 008c 	movw	r0, #4236	; 0x108c
  405692:	4b50      	ldr	r3, [pc, #320]	; (4057d4 <hif_send+0x1b8>)
  405694:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  405696:	4683      	mov	fp, r0
  405698:	2800      	cmp	r0, #0
  40569a:	f040 8091 	bne.w	4057c0 <hif_send+0x1a4>


		reg = 0;
  40569e:	2300      	movs	r3, #0
  4056a0:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  4056a2:	9b02      	ldr	r3, [sp, #8]
  4056a4:	f043 0302 	orr.w	r3, r3, #2
  4056a8:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  4056aa:	9902      	ldr	r1, [sp, #8]
  4056ac:	f241 0078 	movw	r0, #4216	; 0x1078
  4056b0:	4b48      	ldr	r3, [pc, #288]	; (4057d4 <hif_send+0x1b8>)
  4056b2:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4056b4:	4683      	mov	fp, r0
  4056b6:	2800      	cmp	r0, #0
  4056b8:	f040 8082 	bne.w	4057c0 <hif_send+0x1a4>
		dma_addr = 0;
  4056bc:	2300      	movs	r3, #0
  4056be:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  4056c0:	f8ad 3006 	strh.w	r3, [sp, #6]
  4056c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4056c8:	b29b      	uxth	r3, r3
  4056ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4056ce:	d216      	bcs.n	4056fe <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  4056d0:	f241 0878 	movw	r8, #4216	; 0x1078
  4056d4:	4f40      	ldr	r7, [pc, #256]	; (4057d8 <hif_send+0x1bc>)
  4056d6:	a902      	add	r1, sp, #8
  4056d8:	4640      	mov	r0, r8
  4056da:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  4056dc:	b978      	cbnz	r0, 4056fe <hif_send+0xe2>
			if (!(reg & 0x2))
  4056de:	9b02      	ldr	r3, [sp, #8]
  4056e0:	f013 0f02 	tst.w	r3, #2
  4056e4:	d059      	beq.n	40579a <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  4056e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4056ea:	3301      	adds	r3, #1
  4056ec:	b29b      	uxth	r3, r3
  4056ee:	f8ad 3006 	strh.w	r3, [sp, #6]
  4056f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4056f6:	b29b      	uxth	r3, r3
  4056f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4056fc:	d3eb      	bcc.n	4056d6 <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4056fe:	9b03      	ldr	r3, [sp, #12]
  405700:	2b00      	cmp	r3, #0
  405702:	d061      	beq.n	4057c8 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  405704:	9b03      	ldr	r3, [sp, #12]
  405706:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  405708:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40570c:	b29b      	uxth	r3, r3
  40570e:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  405712:	9804      	ldr	r0, [sp, #16]
  405714:	2208      	movs	r2, #8
  405716:	a905      	add	r1, sp, #20
  405718:	4b30      	ldr	r3, [pc, #192]	; (4057dc <hif_send+0x1c0>)
  40571a:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  40571c:	4683      	mov	fp, r0
  40571e:	2800      	cmp	r0, #0
  405720:	d14e      	bne.n	4057c0 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  405722:	9b04      	ldr	r3, [sp, #16]
  405724:	3308      	adds	r3, #8
  405726:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  405728:	f1ba 0f00 	cmp.w	sl, #0
  40572c:	d00a      	beq.n	405744 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  40572e:	9804      	ldr	r0, [sp, #16]
  405730:	464a      	mov	r2, r9
  405732:	4651      	mov	r1, sl
  405734:	4b29      	ldr	r3, [pc, #164]	; (4057dc <hif_send+0x1c0>)
  405736:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  405738:	4683      	mov	fp, r0
  40573a:	2800      	cmp	r0, #0
  40573c:	d140      	bne.n	4057c0 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  40573e:	9b04      	ldr	r3, [sp, #16]
  405740:	444b      	add	r3, r9
  405742:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  405744:	b17c      	cbz	r4, 405766 <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  405746:	9b04      	ldr	r3, [sp, #16]
  405748:	eba5 0509 	sub.w	r5, r5, r9
  40574c:	441d      	add	r5, r3
  40574e:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  405750:	9804      	ldr	r0, [sp, #16]
  405752:	4632      	mov	r2, r6
  405754:	4621      	mov	r1, r4
  405756:	4b21      	ldr	r3, [pc, #132]	; (4057dc <hif_send+0x1c0>)
  405758:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  40575a:	4683      	mov	fp, r0
  40575c:	2800      	cmp	r0, #0
  40575e:	d12f      	bne.n	4057c0 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  405760:	9b04      	ldr	r3, [sp, #16]
  405762:	441e      	add	r6, r3
  405764:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  405766:	9b03      	ldr	r3, [sp, #12]
  405768:	009b      	lsls	r3, r3, #2
  40576a:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  40576c:	9b02      	ldr	r3, [sp, #8]
  40576e:	f043 0302 	orr.w	r3, r3, #2
  405772:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  405774:	9902      	ldr	r1, [sp, #8]
  405776:	f241 006c 	movw	r0, #4204	; 0x106c
  40577a:	4b16      	ldr	r3, [pc, #88]	; (4057d4 <hif_send+0x1b8>)
  40577c:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  40577e:	4683      	mov	fp, r0
  405780:	b9f0      	cbnz	r0, 4057c0 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  405782:	4b17      	ldr	r3, [pc, #92]	; (4057e0 <hif_send+0x1c4>)
  405784:	4798      	blx	r3
  405786:	4683      	mov	fp, r0
  405788:	e01a      	b.n	4057c0 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  40578a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40578e:	fa19 f383 	uxtah	r3, r9, r3
  405792:	b29b      	uxth	r3, r3
  405794:	f8ad 3016 	strh.w	r3, [sp, #22]
  405798:	e760      	b.n	40565c <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  40579a:	a903      	add	r1, sp, #12
  40579c:	4811      	ldr	r0, [pc, #68]	; (4057e4 <hif_send+0x1c8>)
  40579e:	4b0e      	ldr	r3, [pc, #56]	; (4057d8 <hif_send+0x1bc>)
  4057a0:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4057a2:	2800      	cmp	r0, #0
  4057a4:	d0ab      	beq.n	4056fe <hif_send+0xe2>
					dma_addr = 0;
  4057a6:	2300      	movs	r3, #0
  4057a8:	9303      	str	r3, [sp, #12]
  4057aa:	e7a8      	b.n	4056fe <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  4057ac:	f240 129f 	movw	r2, #415	; 0x19f
  4057b0:	490d      	ldr	r1, [pc, #52]	; (4057e8 <hif_send+0x1cc>)
  4057b2:	480e      	ldr	r0, [pc, #56]	; (4057ec <hif_send+0x1d0>)
  4057b4:	4c0e      	ldr	r4, [pc, #56]	; (4057f0 <hif_send+0x1d4>)
  4057b6:	47a0      	blx	r4
  4057b8:	480e      	ldr	r0, [pc, #56]	; (4057f4 <hif_send+0x1d8>)
  4057ba:	47a0      	blx	r4
  4057bc:	480e      	ldr	r0, [pc, #56]	; (4057f8 <hif_send+0x1dc>)
  4057be:	47a0      	blx	r4

ERR1:
	return ret;
}
  4057c0:	4658      	mov	r0, fp
  4057c2:	b007      	add	sp, #28
  4057c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  4057c8:	f06f 0b02 	mvn.w	fp, #2
  4057cc:	e7f8      	b.n	4057c0 <hif_send+0x1a4>
  4057ce:	bf00      	nop
  4057d0:	00405535 	.word	0x00405535
  4057d4:	0040681d 	.word	0x0040681d
  4057d8:	00406811 	.word	0x00406811
  4057dc:	00406885 	.word	0x00406885
  4057e0:	00405591 	.word	0x00405591
  4057e4:	00150400 	.word	0x00150400
  4057e8:	00410c30 	.word	0x00410c30
  4057ec:	00410c04 	.word	0x00410c04
  4057f0:	004096d1 	.word	0x004096d1
  4057f4:	00410e84 	.word	0x00410e84
  4057f8:	004118e8 	.word	0x004118e8

004057fc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4057fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405800:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  405802:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 405afc <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  405806:	4fa2      	ldr	r7, [pc, #648]	; (405a90 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  405808:	4ea2      	ldr	r6, [pc, #648]	; (405a94 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  40580a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 405b00 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  40580e:	e0d5      	b.n	4059bc <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  405810:	2204      	movs	r2, #4
  405812:	a904      	add	r1, sp, #16
  405814:	9805      	ldr	r0, [sp, #20]
  405816:	4ba0      	ldr	r3, [pc, #640]	; (405a98 <hif_handle_isr+0x29c>)
  405818:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  40581a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40581e:	b29b      	uxth	r3, r3
  405820:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  405824:	4604      	mov	r4, r0
  405826:	2800      	cmp	r0, #0
  405828:	d130      	bne.n	40588c <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  40582a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40582e:	b29b      	uxth	r3, r3
  405830:	429d      	cmp	r5, r3
  405832:	d005      	beq.n	405840 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  405834:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  405838:	b29b      	uxth	r3, r3
  40583a:	1aeb      	subs	r3, r5, r3
  40583c:	2b04      	cmp	r3, #4
  40583e:	dc33      	bgt.n	4058a8 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  405840:	f89d 3010 	ldrb.w	r3, [sp, #16]
  405844:	b2db      	uxtb	r3, r3
  405846:	2b01      	cmp	r3, #1
  405848:	d047      	beq.n	4058da <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  40584a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40584e:	b2db      	uxtb	r3, r3
  405850:	2b02      	cmp	r3, #2
  405852:	d05f      	beq.n	405914 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  405854:	f89d 3010 	ldrb.w	r3, [sp, #16]
  405858:	b2db      	uxtb	r3, r3
  40585a:	2b04      	cmp	r3, #4
  40585c:	d068      	beq.n	405930 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  40585e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  405862:	b2db      	uxtb	r3, r3
  405864:	2b06      	cmp	r3, #6
  405866:	d071      	beq.n	40594c <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  405868:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40586c:	b2db      	uxtb	r3, r3
  40586e:	2b07      	cmp	r3, #7
  405870:	d07a      	beq.n	405968 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  405872:	f240 2202 	movw	r2, #514	; 0x202
  405876:	4641      	mov	r1, r8
  405878:	4630      	mov	r0, r6
  40587a:	4c88      	ldr	r4, [pc, #544]	; (405a9c <hif_handle_isr+0x2a0>)
  40587c:	47a0      	blx	r4
  40587e:	4888      	ldr	r0, [pc, #544]	; (405aa0 <hif_handle_isr+0x2a4>)
  405880:	47a0      	blx	r4
  405882:	4888      	ldr	r0, [pc, #544]	; (405aa4 <hif_handle_isr+0x2a8>)
  405884:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  405886:	f06f 0405 	mvn.w	r4, #5
  40588a:	e096      	b.n	4059ba <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  40588c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  405890:	4641      	mov	r1, r8
  405892:	4630      	mov	r0, r6
  405894:	4d81      	ldr	r5, [pc, #516]	; (405a9c <hif_handle_isr+0x2a0>)
  405896:	47a8      	blx	r5
  405898:	4883      	ldr	r0, [pc, #524]	; (405aa8 <hif_handle_isr+0x2ac>)
  40589a:	47a8      	blx	r5
  40589c:	4881      	ldr	r0, [pc, #516]	; (405aa4 <hif_handle_isr+0x2a8>)
  40589e:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4058a0:	2001      	movs	r0, #1
  4058a2:	4b82      	ldr	r3, [pc, #520]	; (405aac <hif_handle_isr+0x2b0>)
  4058a4:	4798      	blx	r3
  4058a6:	e088      	b.n	4059ba <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  4058a8:	f240 12df 	movw	r2, #479	; 0x1df
  4058ac:	4641      	mov	r1, r8
  4058ae:	4630      	mov	r0, r6
  4058b0:	4c7a      	ldr	r4, [pc, #488]	; (405a9c <hif_handle_isr+0x2a0>)
  4058b2:	47a0      	blx	r4
  4058b4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4058b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4058bc:	f89d 1011 	ldrb.w	r1, [sp, #17]
  4058c0:	9100      	str	r1, [sp, #0]
  4058c2:	b292      	uxth	r2, r2
  4058c4:	4629      	mov	r1, r5
  4058c6:	487a      	ldr	r0, [pc, #488]	; (405ab0 <hif_handle_isr+0x2b4>)
  4058c8:	47a0      	blx	r4
  4058ca:	4876      	ldr	r0, [pc, #472]	; (405aa4 <hif_handle_isr+0x2a8>)
  4058cc:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  4058ce:	2001      	movs	r0, #1
  4058d0:	4b76      	ldr	r3, [pc, #472]	; (405aac <hif_handle_isr+0x2b0>)
  4058d2:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  4058d4:	f06f 0405 	mvn.w	r4, #5
  4058d8:	e06f      	b.n	4059ba <hif_handle_isr+0x1be>
						if(pfWifiCb)
  4058da:	4b76      	ldr	r3, [pc, #472]	; (405ab4 <hif_handle_isr+0x2b8>)
  4058dc:	681b      	ldr	r3, [r3, #0]
  4058de:	b143      	cbz	r3, 4058f2 <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4058e0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4058e4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4058e8:	3908      	subs	r1, #8
  4058ea:	9a05      	ldr	r2, [sp, #20]
  4058ec:	3208      	adds	r2, #8
  4058ee:	b289      	uxth	r1, r1
  4058f0:	4798      	blx	r3
					if(!gu8HifSizeDone)
  4058f2:	4b71      	ldr	r3, [pc, #452]	; (405ab8 <hif_handle_isr+0x2bc>)
  4058f4:	781b      	ldrb	r3, [r3, #0]
  4058f6:	2b00      	cmp	r3, #0
  4058f8:	d15c      	bne.n	4059b4 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  4058fa:	f240 2209 	movw	r2, #521	; 0x209
  4058fe:	4641      	mov	r1, r8
  405900:	4630      	mov	r0, r6
  405902:	4c66      	ldr	r4, [pc, #408]	; (405a9c <hif_handle_isr+0x2a0>)
  405904:	47a0      	blx	r4
  405906:	486d      	ldr	r0, [pc, #436]	; (405abc <hif_handle_isr+0x2c0>)
  405908:	47a0      	blx	r4
  40590a:	4866      	ldr	r0, [pc, #408]	; (405aa4 <hif_handle_isr+0x2a8>)
  40590c:	47a0      	blx	r4
						ret = hif_set_rx_done();
  40590e:	4b6c      	ldr	r3, [pc, #432]	; (405ac0 <hif_handle_isr+0x2c4>)
  405910:	4798      	blx	r3
  405912:	e04f      	b.n	4059b4 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  405914:	4b6b      	ldr	r3, [pc, #428]	; (405ac4 <hif_handle_isr+0x2c8>)
  405916:	681b      	ldr	r3, [r3, #0]
  405918:	2b00      	cmp	r3, #0
  40591a:	d0ea      	beq.n	4058f2 <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  40591c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  405920:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  405924:	3908      	subs	r1, #8
  405926:	9a05      	ldr	r2, [sp, #20]
  405928:	3208      	adds	r2, #8
  40592a:	b289      	uxth	r1, r1
  40592c:	4798      	blx	r3
  40592e:	e7e0      	b.n	4058f2 <hif_handle_isr+0xf6>
						if(pfOtaCb)
  405930:	4b65      	ldr	r3, [pc, #404]	; (405ac8 <hif_handle_isr+0x2cc>)
  405932:	681b      	ldr	r3, [r3, #0]
  405934:	2b00      	cmp	r3, #0
  405936:	d0dc      	beq.n	4058f2 <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  405938:	f89d 0011 	ldrb.w	r0, [sp, #17]
  40593c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  405940:	3908      	subs	r1, #8
  405942:	9a05      	ldr	r2, [sp, #20]
  405944:	3208      	adds	r2, #8
  405946:	b289      	uxth	r1, r1
  405948:	4798      	blx	r3
  40594a:	e7d2      	b.n	4058f2 <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  40594c:	4b5f      	ldr	r3, [pc, #380]	; (405acc <hif_handle_isr+0x2d0>)
  40594e:	681b      	ldr	r3, [r3, #0]
  405950:	2b00      	cmp	r3, #0
  405952:	d0ce      	beq.n	4058f2 <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  405954:	f89d 0011 	ldrb.w	r0, [sp, #17]
  405958:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40595c:	3908      	subs	r1, #8
  40595e:	9a05      	ldr	r2, [sp, #20]
  405960:	3208      	adds	r2, #8
  405962:	b289      	uxth	r1, r1
  405964:	4798      	blx	r3
  405966:	e7c4      	b.n	4058f2 <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  405968:	4b59      	ldr	r3, [pc, #356]	; (405ad0 <hif_handle_isr+0x2d4>)
  40596a:	681b      	ldr	r3, [r3, #0]
  40596c:	2b00      	cmp	r3, #0
  40596e:	d0c0      	beq.n	4058f2 <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  405970:	f89d 0011 	ldrb.w	r0, [sp, #17]
  405974:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  405978:	3908      	subs	r1, #8
  40597a:	9a05      	ldr	r2, [sp, #20]
  40597c:	3208      	adds	r2, #8
  40597e:	b289      	uxth	r1, r1
  405980:	4798      	blx	r3
  405982:	e7b6      	b.n	4058f2 <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  405984:	f240 2211 	movw	r2, #529	; 0x211
  405988:	4641      	mov	r1, r8
  40598a:	4630      	mov	r0, r6
  40598c:	4c43      	ldr	r4, [pc, #268]	; (405a9c <hif_handle_isr+0x2a0>)
  40598e:	47a0      	blx	r4
  405990:	4850      	ldr	r0, [pc, #320]	; (405ad4 <hif_handle_isr+0x2d8>)
  405992:	47a0      	blx	r4
  405994:	4843      	ldr	r0, [pc, #268]	; (405aa4 <hif_handle_isr+0x2a8>)
  405996:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  405998:	f06f 0401 	mvn.w	r4, #1
  40599c:	e02f      	b.n	4059fe <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  40599e:	f44f 7206 	mov.w	r2, #536	; 0x218
  4059a2:	4641      	mov	r1, r8
  4059a4:	4630      	mov	r0, r6
  4059a6:	4c3d      	ldr	r4, [pc, #244]	; (405a9c <hif_handle_isr+0x2a0>)
  4059a8:	47a0      	blx	r4
  4059aa:	9903      	ldr	r1, [sp, #12]
  4059ac:	484a      	ldr	r0, [pc, #296]	; (405ad8 <hif_handle_isr+0x2dc>)
  4059ae:	47a0      	blx	r4
  4059b0:	483c      	ldr	r0, [pc, #240]	; (405aa4 <hif_handle_isr+0x2a8>)
  4059b2:	47a0      	blx	r4
	ret = hif_chip_sleep();
  4059b4:	4b49      	ldr	r3, [pc, #292]	; (405adc <hif_handle_isr+0x2e0>)
  4059b6:	4798      	blx	r3
  4059b8:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  4059ba:	bb04      	cbnz	r4, 4059fe <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  4059bc:	f899 3000 	ldrb.w	r3, [r9]
  4059c0:	2b00      	cmp	r3, #0
  4059c2:	f000 809f 	beq.w	405b04 <hif_handle_isr+0x308>
		gu8Interrupt--;
  4059c6:	f899 3000 	ldrb.w	r3, [r9]
  4059ca:	3b01      	subs	r3, #1
  4059cc:	b2db      	uxtb	r3, r3
  4059ce:	f889 3000 	strb.w	r3, [r9]
  4059d2:	e01f      	b.n	405a14 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  4059d4:	f240 221e 	movw	r2, #542	; 0x21e
  4059d8:	4641      	mov	r1, r8
  4059da:	4630      	mov	r0, r6
  4059dc:	4d2f      	ldr	r5, [pc, #188]	; (405a9c <hif_handle_isr+0x2a0>)
  4059de:	47a8      	blx	r5
  4059e0:	483f      	ldr	r0, [pc, #252]	; (405ae0 <hif_handle_isr+0x2e4>)
  4059e2:	47a8      	blx	r5
  4059e4:	482f      	ldr	r0, [pc, #188]	; (405aa4 <hif_handle_isr+0x2a8>)
  4059e6:	47a8      	blx	r5
  4059e8:	e009      	b.n	4059fe <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4059ea:	f44f 7209 	mov.w	r2, #548	; 0x224
  4059ee:	4641      	mov	r1, r8
  4059f0:	4630      	mov	r0, r6
  4059f2:	4d2a      	ldr	r5, [pc, #168]	; (405a9c <hif_handle_isr+0x2a0>)
  4059f4:	47a8      	blx	r5
  4059f6:	483b      	ldr	r0, [pc, #236]	; (405ae4 <hif_handle_isr+0x2e8>)
  4059f8:	47a8      	blx	r5
  4059fa:	482a      	ldr	r0, [pc, #168]	; (405aa4 <hif_handle_isr+0x2a8>)
  4059fc:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4059fe:	f240 2243 	movw	r2, #579	; 0x243
  405a02:	4939      	ldr	r1, [pc, #228]	; (405ae8 <hif_handle_isr+0x2ec>)
  405a04:	4630      	mov	r0, r6
  405a06:	4d25      	ldr	r5, [pc, #148]	; (405a9c <hif_handle_isr+0x2a0>)
  405a08:	47a8      	blx	r5
  405a0a:	4621      	mov	r1, r4
  405a0c:	4837      	ldr	r0, [pc, #220]	; (405aec <hif_handle_isr+0x2f0>)
  405a0e:	47a8      	blx	r5
  405a10:	4824      	ldr	r0, [pc, #144]	; (405aa4 <hif_handle_isr+0x2a8>)
  405a12:	47a8      	blx	r5
	ret = hif_chip_wake();
  405a14:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  405a16:	4604      	mov	r4, r0
  405a18:	2800      	cmp	r0, #0
  405a1a:	d1e6      	bne.n	4059ea <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  405a1c:	a903      	add	r1, sp, #12
  405a1e:	f241 0070 	movw	r0, #4208	; 0x1070
  405a22:	4b33      	ldr	r3, [pc, #204]	; (405af0 <hif_handle_isr+0x2f4>)
  405a24:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  405a26:	4604      	mov	r4, r0
  405a28:	2800      	cmp	r0, #0
  405a2a:	d1d3      	bne.n	4059d4 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  405a2c:	9b03      	ldr	r3, [sp, #12]
  405a2e:	f013 0f01 	tst.w	r3, #1
  405a32:	d0b4      	beq.n	40599e <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  405a34:	4b1d      	ldr	r3, [pc, #116]	; (405aac <hif_handle_isr+0x2b0>)
  405a36:	4798      	blx	r3
				reg &= ~(1<<0);
  405a38:	9903      	ldr	r1, [sp, #12]
  405a3a:	f021 0101 	bic.w	r1, r1, #1
  405a3e:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  405a40:	f241 0070 	movw	r0, #4208	; 0x1070
  405a44:	4b2b      	ldr	r3, [pc, #172]	; (405af4 <hif_handle_isr+0x2f8>)
  405a46:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  405a48:	4604      	mov	r4, r0
  405a4a:	2800      	cmp	r0, #0
  405a4c:	d1d7      	bne.n	4059fe <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  405a4e:	2200      	movs	r2, #0
  405a50:	4b19      	ldr	r3, [pc, #100]	; (405ab8 <hif_handle_isr+0x2bc>)
  405a52:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  405a54:	9d03      	ldr	r5, [sp, #12]
  405a56:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  405a5a:	2d00      	cmp	r5, #0
  405a5c:	d092      	beq.n	405984 <hif_handle_isr+0x188>
					uint32 address = 0;
  405a5e:	a906      	add	r1, sp, #24
  405a60:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  405a64:	f241 0084 	movw	r0, #4228	; 0x1084
  405a68:	4b21      	ldr	r3, [pc, #132]	; (405af0 <hif_handle_isr+0x2f4>)
  405a6a:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  405a6c:	4604      	mov	r4, r0
  405a6e:	2800      	cmp	r0, #0
  405a70:	f43f aece 	beq.w	405810 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  405a74:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  405a78:	4641      	mov	r1, r8
  405a7a:	4630      	mov	r0, r6
  405a7c:	4d07      	ldr	r5, [pc, #28]	; (405a9c <hif_handle_isr+0x2a0>)
  405a7e:	47a8      	blx	r5
  405a80:	481d      	ldr	r0, [pc, #116]	; (405af8 <hif_handle_isr+0x2fc>)
  405a82:	47a8      	blx	r5
  405a84:	4807      	ldr	r0, [pc, #28]	; (405aa4 <hif_handle_isr+0x2a8>)
  405a86:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  405a88:	2001      	movs	r0, #1
  405a8a:	4b08      	ldr	r3, [pc, #32]	; (405aac <hif_handle_isr+0x2b0>)
  405a8c:	4798      	blx	r3
  405a8e:	e794      	b.n	4059ba <hif_handle_isr+0x1be>
  405a90:	00405535 	.word	0x00405535
  405a94:	00410c04 	.word	0x00410c04
  405a98:	00406829 	.word	0x00406829
  405a9c:	004096d1 	.word	0x004096d1
  405aa0:	00410cf0 	.word	0x00410cf0
  405aa4:	004118e8 	.word	0x004118e8
  405aa8:	00410c98 	.word	0x00410c98
  405aac:	0040524d 	.word	0x0040524d
  405ab0:	00410cb0 	.word	0x00410cb0
  405ab4:	2040c3e0 	.word	0x2040c3e0
  405ab8:	2040c3ca 	.word	0x2040c3ca
  405abc:	00410d08 	.word	0x00410d08
  405ac0:	004054f5 	.word	0x004054f5
  405ac4:	2040c3d4 	.word	0x2040c3d4
  405ac8:	2040c3d8 	.word	0x2040c3d8
  405acc:	2040c3cc 	.word	0x2040c3cc
  405ad0:	2040c3dc 	.word	0x2040c3dc
  405ad4:	00410d2c 	.word	0x00410d2c
  405ad8:	00410d40 	.word	0x00410d40
  405adc:	00405591 	.word	0x00405591
  405ae0:	00410d5c 	.word	0x00410d5c
  405ae4:	00410d80 	.word	0x00410d80
  405ae8:	00410c44 	.word	0x00410c44
  405aec:	00410da0 	.word	0x00410da0
  405af0:	00406811 	.word	0x00406811
  405af4:	0040681d 	.word	0x0040681d
  405af8:	00410c70 	.word	0x00410c70
  405afc:	2040c3cb 	.word	0x2040c3cb
  405b00:	00410c3c 	.word	0x00410c3c
			}
		}
	}

	return ret;
}
  405b04:	2000      	movs	r0, #0
  405b06:	b007      	add	sp, #28
  405b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00405b0c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  405b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405b10:	b083      	sub	sp, #12
  405b12:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  405b14:	2a00      	cmp	r2, #0
  405b16:	bf18      	it	ne
  405b18:	2900      	cmpne	r1, #0
  405b1a:	d003      	beq.n	405b24 <hif_receive+0x18>
  405b1c:	4605      	mov	r5, r0
  405b1e:	460f      	mov	r7, r1
  405b20:	4616      	mov	r6, r2
  405b22:	b9b8      	cbnz	r0, 405b54 <hif_receive+0x48>
	{
		if(isDone)
  405b24:	b14c      	cbz	r4, 405b3a <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  405b26:	2201      	movs	r2, #1
  405b28:	4b32      	ldr	r3, [pc, #200]	; (405bf4 <hif_receive+0xe8>)
  405b2a:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  405b2c:	4b32      	ldr	r3, [pc, #200]	; (405bf8 <hif_receive+0xec>)
  405b2e:	4798      	blx	r3
  405b30:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  405b32:	4618      	mov	r0, r3
  405b34:	b003      	add	sp, #12
  405b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  405b3a:	f240 2269 	movw	r2, #617	; 0x269
  405b3e:	492f      	ldr	r1, [pc, #188]	; (405bfc <hif_receive+0xf0>)
  405b40:	482f      	ldr	r0, [pc, #188]	; (405c00 <hif_receive+0xf4>)
  405b42:	4c30      	ldr	r4, [pc, #192]	; (405c04 <hif_receive+0xf8>)
  405b44:	47a0      	blx	r4
  405b46:	4830      	ldr	r0, [pc, #192]	; (405c08 <hif_receive+0xfc>)
  405b48:	47a0      	blx	r4
  405b4a:	4830      	ldr	r0, [pc, #192]	; (405c0c <hif_receive+0x100>)
  405b4c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  405b4e:	f06f 030b 	mvn.w	r3, #11
  405b52:	e7ee      	b.n	405b32 <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  405b54:	4669      	mov	r1, sp
  405b56:	f241 0070 	movw	r0, #4208	; 0x1070
  405b5a:	4b2d      	ldr	r3, [pc, #180]	; (405c10 <hif_receive+0x104>)
  405b5c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  405b5e:	4603      	mov	r3, r0
  405b60:	2800      	cmp	r0, #0
  405b62:	d1e6      	bne.n	405b32 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  405b64:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  405b68:	a901      	add	r1, sp, #4
  405b6a:	f241 0084 	movw	r0, #4228	; 0x1084
  405b6e:	4b28      	ldr	r3, [pc, #160]	; (405c10 <hif_receive+0x104>)
  405b70:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  405b72:	4603      	mov	r3, r0
  405b74:	2800      	cmp	r0, #0
  405b76:	d1dc      	bne.n	405b32 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  405b78:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  405b7c:	4546      	cmp	r6, r8
  405b7e:	d81c      	bhi.n	405bba <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  405b80:	9b01      	ldr	r3, [sp, #4]
  405b82:	429d      	cmp	r5, r3
  405b84:	d328      	bcc.n	405bd8 <hif_receive+0xcc>
  405b86:	eb05 0906 	add.w	r9, r5, r6
  405b8a:	4443      	add	r3, r8
  405b8c:	4599      	cmp	r9, r3
  405b8e:	d823      	bhi.n	405bd8 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  405b90:	4632      	mov	r2, r6
  405b92:	4639      	mov	r1, r7
  405b94:	4628      	mov	r0, r5
  405b96:	4b1f      	ldr	r3, [pc, #124]	; (405c14 <hif_receive+0x108>)
  405b98:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  405b9a:	4603      	mov	r3, r0
  405b9c:	2800      	cmp	r0, #0
  405b9e:	d1c8      	bne.n	405b32 <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  405ba0:	9a01      	ldr	r2, [sp, #4]
  405ba2:	4490      	add	r8, r2
  405ba4:	45c8      	cmp	r8, r9
  405ba6:	d001      	beq.n	405bac <hif_receive+0xa0>
  405ba8:	2c00      	cmp	r4, #0
  405baa:	d0c2      	beq.n	405b32 <hif_receive+0x26>
		gu8HifSizeDone = 1;
  405bac:	2201      	movs	r2, #1
  405bae:	4b11      	ldr	r3, [pc, #68]	; (405bf4 <hif_receive+0xe8>)
  405bb0:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  405bb2:	4b11      	ldr	r3, [pc, #68]	; (405bf8 <hif_receive+0xec>)
  405bb4:	4798      	blx	r3
  405bb6:	4603      	mov	r3, r0
  405bb8:	e7bb      	b.n	405b32 <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  405bba:	f240 227a 	movw	r2, #634	; 0x27a
  405bbe:	490f      	ldr	r1, [pc, #60]	; (405bfc <hif_receive+0xf0>)
  405bc0:	480f      	ldr	r0, [pc, #60]	; (405c00 <hif_receive+0xf4>)
  405bc2:	4c10      	ldr	r4, [pc, #64]	; (405c04 <hif_receive+0xf8>)
  405bc4:	47a0      	blx	r4
  405bc6:	4642      	mov	r2, r8
  405bc8:	4631      	mov	r1, r6
  405bca:	4813      	ldr	r0, [pc, #76]	; (405c18 <hif_receive+0x10c>)
  405bcc:	47a0      	blx	r4
  405bce:	480f      	ldr	r0, [pc, #60]	; (405c0c <hif_receive+0x100>)
  405bd0:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  405bd2:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  405bd6:	e7ac      	b.n	405b32 <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  405bd8:	f44f 7220 	mov.w	r2, #640	; 0x280
  405bdc:	4907      	ldr	r1, [pc, #28]	; (405bfc <hif_receive+0xf0>)
  405bde:	4808      	ldr	r0, [pc, #32]	; (405c00 <hif_receive+0xf4>)
  405be0:	4c08      	ldr	r4, [pc, #32]	; (405c04 <hif_receive+0xf8>)
  405be2:	47a0      	blx	r4
  405be4:	480d      	ldr	r0, [pc, #52]	; (405c1c <hif_receive+0x110>)
  405be6:	47a0      	blx	r4
  405be8:	4808      	ldr	r0, [pc, #32]	; (405c0c <hif_receive+0x100>)
  405bea:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  405bec:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  405bf0:	e79f      	b.n	405b32 <hif_receive+0x26>
  405bf2:	bf00      	nop
  405bf4:	2040c3ca 	.word	0x2040c3ca
  405bf8:	004054f5 	.word	0x004054f5
  405bfc:	00410c54 	.word	0x00410c54
  405c00:	00410c04 	.word	0x00410c04
  405c04:	004096d1 	.word	0x004096d1
  405c08:	00410dd0 	.word	0x00410dd0
  405c0c:	004118e8 	.word	0x004118e8
  405c10:	00406811 	.word	0x00406811
  405c14:	00406829 	.word	0x00406829
  405c18:	00410df0 	.word	0x00410df0
  405c1c:	00410e34 	.word	0x00410e34

00405c20 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  405c20:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  405c22:	1e43      	subs	r3, r0, #1
  405c24:	2b06      	cmp	r3, #6
  405c26:	d81d      	bhi.n	405c64 <hif_register_cb+0x44>
  405c28:	e8df f003 	tbb	[pc, r3]
  405c2c:	0c100408 	.word	0x0c100408
  405c30:	141c      	.short	0x141c
  405c32:	18          	.byte	0x18
  405c33:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  405c34:	4b13      	ldr	r3, [pc, #76]	; (405c84 <hif_register_cb+0x64>)
  405c36:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405c38:	2000      	movs	r0, #0
			break;
  405c3a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  405c3c:	4b12      	ldr	r3, [pc, #72]	; (405c88 <hif_register_cb+0x68>)
  405c3e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405c40:	2000      	movs	r0, #0
			break;
  405c42:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  405c44:	4b11      	ldr	r3, [pc, #68]	; (405c8c <hif_register_cb+0x6c>)
  405c46:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405c48:	2000      	movs	r0, #0
			break;
  405c4a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  405c4c:	4b10      	ldr	r3, [pc, #64]	; (405c90 <hif_register_cb+0x70>)
  405c4e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405c50:	2000      	movs	r0, #0
			break;
  405c52:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  405c54:	4b0f      	ldr	r3, [pc, #60]	; (405c94 <hif_register_cb+0x74>)
  405c56:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405c58:	2000      	movs	r0, #0
			break;
  405c5a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  405c5c:	4b0e      	ldr	r3, [pc, #56]	; (405c98 <hif_register_cb+0x78>)
  405c5e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405c60:	2000      	movs	r0, #0
			break;
  405c62:	bd38      	pop	{r3, r4, r5, pc}
  405c64:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  405c66:	f240 22b9 	movw	r2, #697	; 0x2b9
  405c6a:	490c      	ldr	r1, [pc, #48]	; (405c9c <hif_register_cb+0x7c>)
  405c6c:	480c      	ldr	r0, [pc, #48]	; (405ca0 <hif_register_cb+0x80>)
  405c6e:	4d0d      	ldr	r5, [pc, #52]	; (405ca4 <hif_register_cb+0x84>)
  405c70:	47a8      	blx	r5
  405c72:	4621      	mov	r1, r4
  405c74:	480c      	ldr	r0, [pc, #48]	; (405ca8 <hif_register_cb+0x88>)
  405c76:	47a8      	blx	r5
  405c78:	480c      	ldr	r0, [pc, #48]	; (405cac <hif_register_cb+0x8c>)
  405c7a:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  405c7c:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  405c80:	bd38      	pop	{r3, r4, r5, pc}
  405c82:	bf00      	nop
  405c84:	2040c3d4 	.word	0x2040c3d4
  405c88:	2040c3e0 	.word	0x2040c3e0
  405c8c:	2040c3d8 	.word	0x2040c3d8
  405c90:	2040c3d0 	.word	0x2040c3d0
  405c94:	2040c3cc 	.word	0x2040c3cc
  405c98:	2040c3dc 	.word	0x2040c3dc
  405c9c:	00410c60 	.word	0x00410c60
  405ca0:	00410c04 	.word	0x00410c04
  405ca4:	004096d1 	.word	0x004096d1
  405ca8:	00410e78 	.word	0x00410e78
  405cac:	004118e8 	.word	0x004118e8

00405cb0 <hif_init>:
{
  405cb0:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  405cb2:	2400      	movs	r4, #0
  405cb4:	4b09      	ldr	r3, [pc, #36]	; (405cdc <hif_init+0x2c>)
  405cb6:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  405cb8:	4b09      	ldr	r3, [pc, #36]	; (405ce0 <hif_init+0x30>)
  405cba:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  405cbc:	4b09      	ldr	r3, [pc, #36]	; (405ce4 <hif_init+0x34>)
  405cbe:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  405cc0:	4b09      	ldr	r3, [pc, #36]	; (405ce8 <hif_init+0x38>)
  405cc2:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  405cc4:	4b09      	ldr	r3, [pc, #36]	; (405cec <hif_init+0x3c>)
  405cc6:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  405cc8:	4809      	ldr	r0, [pc, #36]	; (405cf0 <hif_init+0x40>)
  405cca:	4b0a      	ldr	r3, [pc, #40]	; (405cf4 <hif_init+0x44>)
  405ccc:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  405cce:	490a      	ldr	r1, [pc, #40]	; (405cf8 <hif_init+0x48>)
  405cd0:	2003      	movs	r0, #3
  405cd2:	4b0a      	ldr	r3, [pc, #40]	; (405cfc <hif_init+0x4c>)
  405cd4:	4798      	blx	r3
}
  405cd6:	4620      	mov	r0, r4
  405cd8:	bd10      	pop	{r4, pc}
  405cda:	bf00      	nop
  405cdc:	2040c3e0 	.word	0x2040c3e0
  405ce0:	2040c3d4 	.word	0x2040c3d4
  405ce4:	2040c3c9 	.word	0x2040c3c9
  405ce8:	2040c3c8 	.word	0x2040c3c8
  405cec:	2040c3cb 	.word	0x2040c3cb
  405cf0:	004054e1 	.word	0x004054e1
  405cf4:	004051cd 	.word	0x004051cd
  405cf8:	004054f1 	.word	0x004054f1
  405cfc:	00405c21 	.word	0x00405c21

00405d00 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  405d00:	b530      	push	{r4, r5, lr}
  405d02:	b09f      	sub	sp, #124	; 0x7c
  405d04:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  405d06:	282c      	cmp	r0, #44	; 0x2c
  405d08:	d02e      	beq.n	405d68 <m2m_wifi_cb+0x68>
  405d0a:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  405d0c:	281b      	cmp	r0, #27
  405d0e:	d03b      	beq.n	405d88 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  405d10:	2806      	cmp	r0, #6
  405d12:	d049      	beq.n	405da8 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  405d14:	280e      	cmp	r0, #14
  405d16:	d025      	beq.n	405d64 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  405d18:	2832      	cmp	r0, #50	; 0x32
  405d1a:	d055      	beq.n	405dc8 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  405d1c:	282f      	cmp	r0, #47	; 0x2f
  405d1e:	d063      	beq.n	405de8 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  405d20:	2834      	cmp	r0, #52	; 0x34
  405d22:	d076      	beq.n	405e12 <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  405d24:	2811      	cmp	r0, #17
  405d26:	f000 8093 	beq.w	405e50 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  405d2a:	2813      	cmp	r0, #19
  405d2c:	f000 80a8 	beq.w	405e80 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  405d30:	2804      	cmp	r0, #4
  405d32:	f000 80b7 	beq.w	405ea4 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  405d36:	2865      	cmp	r0, #101	; 0x65
  405d38:	f000 80c6 	beq.w	405ec8 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  405d3c:	2809      	cmp	r0, #9
  405d3e:	f000 80d5 	beq.w	405eec <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  405d42:	282a      	cmp	r0, #42	; 0x2a
  405d44:	f000 80e4 	beq.w	405f10 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  405d48:	2820      	cmp	r0, #32
  405d4a:	f000 80f3 	beq.w	405f34 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  405d4e:	f44f 7295 	mov.w	r2, #298	; 0x12a
  405d52:	4986      	ldr	r1, [pc, #536]	; (405f6c <m2m_wifi_cb+0x26c>)
  405d54:	4886      	ldr	r0, [pc, #536]	; (405f70 <m2m_wifi_cb+0x270>)
  405d56:	4d87      	ldr	r5, [pc, #540]	; (405f74 <m2m_wifi_cb+0x274>)
  405d58:	47a8      	blx	r5
  405d5a:	4621      	mov	r1, r4
  405d5c:	4886      	ldr	r0, [pc, #536]	; (405f78 <m2m_wifi_cb+0x278>)
  405d5e:	47a8      	blx	r5
  405d60:	4886      	ldr	r0, [pc, #536]	; (405f7c <m2m_wifi_cb+0x27c>)
  405d62:	47a8      	blx	r5
	}
}
  405d64:	b01f      	add	sp, #124	; 0x7c
  405d66:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  405d68:	2300      	movs	r3, #0
  405d6a:	2204      	movs	r2, #4
  405d6c:	a903      	add	r1, sp, #12
  405d6e:	4628      	mov	r0, r5
  405d70:	4c83      	ldr	r4, [pc, #524]	; (405f80 <m2m_wifi_cb+0x280>)
  405d72:	47a0      	blx	r4
  405d74:	2800      	cmp	r0, #0
  405d76:	d1f5      	bne.n	405d64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405d78:	4b82      	ldr	r3, [pc, #520]	; (405f84 <m2m_wifi_cb+0x284>)
  405d7a:	681b      	ldr	r3, [r3, #0]
  405d7c:	2b00      	cmp	r3, #0
  405d7e:	d0f1      	beq.n	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  405d80:	a903      	add	r1, sp, #12
  405d82:	202c      	movs	r0, #44	; 0x2c
  405d84:	4798      	blx	r3
  405d86:	e7ed      	b.n	405d64 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  405d88:	2300      	movs	r3, #0
  405d8a:	2208      	movs	r2, #8
  405d8c:	a903      	add	r1, sp, #12
  405d8e:	4628      	mov	r0, r5
  405d90:	4c7b      	ldr	r4, [pc, #492]	; (405f80 <m2m_wifi_cb+0x280>)
  405d92:	47a0      	blx	r4
  405d94:	2800      	cmp	r0, #0
  405d96:	d1e5      	bne.n	405d64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405d98:	4b7a      	ldr	r3, [pc, #488]	; (405f84 <m2m_wifi_cb+0x284>)
  405d9a:	681b      	ldr	r3, [r3, #0]
  405d9c:	2b00      	cmp	r3, #0
  405d9e:	d0e1      	beq.n	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  405da0:	a903      	add	r1, sp, #12
  405da2:	201b      	movs	r0, #27
  405da4:	4798      	blx	r3
  405da6:	e7dd      	b.n	405d64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  405da8:	2301      	movs	r3, #1
  405daa:	2230      	movs	r2, #48	; 0x30
  405dac:	a903      	add	r1, sp, #12
  405dae:	4628      	mov	r0, r5
  405db0:	4c73      	ldr	r4, [pc, #460]	; (405f80 <m2m_wifi_cb+0x280>)
  405db2:	47a0      	blx	r4
  405db4:	2800      	cmp	r0, #0
  405db6:	d1d5      	bne.n	405d64 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  405db8:	4b72      	ldr	r3, [pc, #456]	; (405f84 <m2m_wifi_cb+0x284>)
  405dba:	681b      	ldr	r3, [r3, #0]
  405dbc:	2b00      	cmp	r3, #0
  405dbe:	d0d1      	beq.n	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  405dc0:	a903      	add	r1, sp, #12
  405dc2:	2006      	movs	r0, #6
  405dc4:	4798      	blx	r3
  405dc6:	e7cd      	b.n	405d64 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  405dc8:	2300      	movs	r3, #0
  405dca:	2210      	movs	r2, #16
  405dcc:	a903      	add	r1, sp, #12
  405dce:	4628      	mov	r0, r5
  405dd0:	4c6b      	ldr	r4, [pc, #428]	; (405f80 <m2m_wifi_cb+0x280>)
  405dd2:	47a0      	blx	r4
  405dd4:	2800      	cmp	r0, #0
  405dd6:	d1c5      	bne.n	405d64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405dd8:	4b6a      	ldr	r3, [pc, #424]	; (405f84 <m2m_wifi_cb+0x284>)
  405dda:	681b      	ldr	r3, [r3, #0]
  405ddc:	2b00      	cmp	r3, #0
  405dde:	d0c1      	beq.n	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  405de0:	a903      	add	r1, sp, #12
  405de2:	2032      	movs	r0, #50	; 0x32
  405de4:	4798      	blx	r3
  405de6:	e7bd      	b.n	405d64 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  405de8:	2264      	movs	r2, #100	; 0x64
  405dea:	2100      	movs	r1, #0
  405dec:	a803      	add	r0, sp, #12
  405dee:	4b66      	ldr	r3, [pc, #408]	; (405f88 <m2m_wifi_cb+0x288>)
  405df0:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  405df2:	2300      	movs	r3, #0
  405df4:	2264      	movs	r2, #100	; 0x64
  405df6:	a903      	add	r1, sp, #12
  405df8:	4628      	mov	r0, r5
  405dfa:	4c61      	ldr	r4, [pc, #388]	; (405f80 <m2m_wifi_cb+0x280>)
  405dfc:	47a0      	blx	r4
  405dfe:	2800      	cmp	r0, #0
  405e00:	d1b0      	bne.n	405d64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405e02:	4b60      	ldr	r3, [pc, #384]	; (405f84 <m2m_wifi_cb+0x284>)
  405e04:	681b      	ldr	r3, [r3, #0]
  405e06:	2b00      	cmp	r3, #0
  405e08:	d0ac      	beq.n	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  405e0a:	a903      	add	r1, sp, #12
  405e0c:	202f      	movs	r0, #47	; 0x2f
  405e0e:	4798      	blx	r3
  405e10:	e7a8      	b.n	405d64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  405e12:	2300      	movs	r3, #0
  405e14:	2204      	movs	r2, #4
  405e16:	a903      	add	r1, sp, #12
  405e18:	4628      	mov	r0, r5
  405e1a:	4c59      	ldr	r4, [pc, #356]	; (405f80 <m2m_wifi_cb+0x280>)
  405e1c:	47a0      	blx	r4
  405e1e:	2800      	cmp	r0, #0
  405e20:	d1a0      	bne.n	405d64 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  405e22:	485a      	ldr	r0, [pc, #360]	; (405f8c <m2m_wifi_cb+0x28c>)
  405e24:	4c53      	ldr	r4, [pc, #332]	; (405f74 <m2m_wifi_cb+0x274>)
  405e26:	47a0      	blx	r4
  405e28:	9903      	ldr	r1, [sp, #12]
  405e2a:	b2cb      	uxtb	r3, r1
  405e2c:	9300      	str	r3, [sp, #0]
  405e2e:	f3c1 2307 	ubfx	r3, r1, #8, #8
  405e32:	f3c1 4207 	ubfx	r2, r1, #16, #8
  405e36:	0e09      	lsrs	r1, r1, #24
  405e38:	4855      	ldr	r0, [pc, #340]	; (405f90 <m2m_wifi_cb+0x290>)
  405e3a:	47a0      	blx	r4
  405e3c:	484f      	ldr	r0, [pc, #316]	; (405f7c <m2m_wifi_cb+0x27c>)
  405e3e:	47a0      	blx	r4
			if (gpfAppWifiCb)
  405e40:	4b50      	ldr	r3, [pc, #320]	; (405f84 <m2m_wifi_cb+0x284>)
  405e42:	681b      	ldr	r3, [r3, #0]
  405e44:	2b00      	cmp	r3, #0
  405e46:	d08d      	beq.n	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  405e48:	2100      	movs	r1, #0
  405e4a:	2034      	movs	r0, #52	; 0x34
  405e4c:	4798      	blx	r3
  405e4e:	e789      	b.n	405d64 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  405e50:	2300      	movs	r3, #0
  405e52:	4a50      	ldr	r2, [pc, #320]	; (405f94 <m2m_wifi_cb+0x294>)
  405e54:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  405e56:	2204      	movs	r2, #4
  405e58:	a903      	add	r1, sp, #12
  405e5a:	4628      	mov	r0, r5
  405e5c:	4c48      	ldr	r4, [pc, #288]	; (405f80 <m2m_wifi_cb+0x280>)
  405e5e:	47a0      	blx	r4
  405e60:	2800      	cmp	r0, #0
  405e62:	f47f af7f 	bne.w	405d64 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  405e66:	f89d 200c 	ldrb.w	r2, [sp, #12]
  405e6a:	4b4b      	ldr	r3, [pc, #300]	; (405f98 <m2m_wifi_cb+0x298>)
  405e6c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  405e6e:	4b45      	ldr	r3, [pc, #276]	; (405f84 <m2m_wifi_cb+0x284>)
  405e70:	681b      	ldr	r3, [r3, #0]
  405e72:	2b00      	cmp	r3, #0
  405e74:	f43f af76 	beq.w	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  405e78:	a903      	add	r1, sp, #12
  405e7a:	2011      	movs	r0, #17
  405e7c:	4798      	blx	r3
  405e7e:	e771      	b.n	405d64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  405e80:	2300      	movs	r3, #0
  405e82:	222c      	movs	r2, #44	; 0x2c
  405e84:	a903      	add	r1, sp, #12
  405e86:	4628      	mov	r0, r5
  405e88:	4c3d      	ldr	r4, [pc, #244]	; (405f80 <m2m_wifi_cb+0x280>)
  405e8a:	47a0      	blx	r4
  405e8c:	2800      	cmp	r0, #0
  405e8e:	f47f af69 	bne.w	405d64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405e92:	4b3c      	ldr	r3, [pc, #240]	; (405f84 <m2m_wifi_cb+0x284>)
  405e94:	681b      	ldr	r3, [r3, #0]
  405e96:	2b00      	cmp	r3, #0
  405e98:	f43f af64 	beq.w	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  405e9c:	a903      	add	r1, sp, #12
  405e9e:	2013      	movs	r0, #19
  405ea0:	4798      	blx	r3
  405ea2:	e75f      	b.n	405d64 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  405ea4:	2300      	movs	r3, #0
  405ea6:	2204      	movs	r2, #4
  405ea8:	a91c      	add	r1, sp, #112	; 0x70
  405eaa:	4628      	mov	r0, r5
  405eac:	4c34      	ldr	r4, [pc, #208]	; (405f80 <m2m_wifi_cb+0x280>)
  405eae:	47a0      	blx	r4
  405eb0:	2800      	cmp	r0, #0
  405eb2:	f47f af57 	bne.w	405d64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405eb6:	4b33      	ldr	r3, [pc, #204]	; (405f84 <m2m_wifi_cb+0x284>)
  405eb8:	681b      	ldr	r3, [r3, #0]
  405eba:	2b00      	cmp	r3, #0
  405ebc:	f43f af52 	beq.w	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  405ec0:	a91c      	add	r1, sp, #112	; 0x70
  405ec2:	2004      	movs	r0, #4
  405ec4:	4798      	blx	r3
  405ec6:	e74d      	b.n	405d64 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  405ec8:	2300      	movs	r3, #0
  405eca:	2204      	movs	r2, #4
  405ecc:	a91c      	add	r1, sp, #112	; 0x70
  405ece:	4628      	mov	r0, r5
  405ed0:	4c2b      	ldr	r4, [pc, #172]	; (405f80 <m2m_wifi_cb+0x280>)
  405ed2:	47a0      	blx	r4
  405ed4:	2800      	cmp	r0, #0
  405ed6:	f47f af45 	bne.w	405d64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405eda:	4b2a      	ldr	r3, [pc, #168]	; (405f84 <m2m_wifi_cb+0x284>)
  405edc:	681b      	ldr	r3, [r3, #0]
  405ede:	2b00      	cmp	r3, #0
  405ee0:	f43f af40 	beq.w	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  405ee4:	a91c      	add	r1, sp, #112	; 0x70
  405ee6:	2065      	movs	r0, #101	; 0x65
  405ee8:	4798      	blx	r3
  405eea:	e73b      	b.n	405d64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  405eec:	2301      	movs	r3, #1
  405eee:	2264      	movs	r2, #100	; 0x64
  405ef0:	a903      	add	r1, sp, #12
  405ef2:	4628      	mov	r0, r5
  405ef4:	4c22      	ldr	r4, [pc, #136]	; (405f80 <m2m_wifi_cb+0x280>)
  405ef6:	47a0      	blx	r4
  405ef8:	2800      	cmp	r0, #0
  405efa:	f47f af33 	bne.w	405d64 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  405efe:	4b21      	ldr	r3, [pc, #132]	; (405f84 <m2m_wifi_cb+0x284>)
  405f00:	681b      	ldr	r3, [r3, #0]
  405f02:	2b00      	cmp	r3, #0
  405f04:	f43f af2e 	beq.w	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  405f08:	a903      	add	r1, sp, #12
  405f0a:	2009      	movs	r0, #9
  405f0c:	4798      	blx	r3
  405f0e:	e729      	b.n	405d64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  405f10:	2301      	movs	r3, #1
  405f12:	2204      	movs	r2, #4
  405f14:	a903      	add	r1, sp, #12
  405f16:	4628      	mov	r0, r5
  405f18:	4c19      	ldr	r4, [pc, #100]	; (405f80 <m2m_wifi_cb+0x280>)
  405f1a:	47a0      	blx	r4
  405f1c:	2800      	cmp	r0, #0
  405f1e:	f47f af21 	bne.w	405d64 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  405f22:	4b18      	ldr	r3, [pc, #96]	; (405f84 <m2m_wifi_cb+0x284>)
  405f24:	681b      	ldr	r3, [r3, #0]
  405f26:	2b00      	cmp	r3, #0
  405f28:	f43f af1c 	beq.w	405d64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  405f2c:	a903      	add	r1, sp, #12
  405f2e:	202a      	movs	r0, #42	; 0x2a
  405f30:	4798      	blx	r3
  405f32:	e717      	b.n	405d64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  405f34:	2300      	movs	r3, #0
  405f36:	2208      	movs	r2, #8
  405f38:	a903      	add	r1, sp, #12
  405f3a:	4628      	mov	r0, r5
  405f3c:	4c10      	ldr	r4, [pc, #64]	; (405f80 <m2m_wifi_cb+0x280>)
  405f3e:	47a0      	blx	r4
  405f40:	2800      	cmp	r0, #0
  405f42:	f47f af0f 	bne.w	405d64 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  405f46:	2301      	movs	r3, #1
  405f48:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  405f4c:	9903      	ldr	r1, [sp, #12]
  405f4e:	f105 0008 	add.w	r0, r5, #8
  405f52:	47a0      	blx	r4
  405f54:	2800      	cmp	r0, #0
  405f56:	f47f af05 	bne.w	405d64 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  405f5a:	4b0a      	ldr	r3, [pc, #40]	; (405f84 <m2m_wifi_cb+0x284>)
  405f5c:	681b      	ldr	r3, [r3, #0]
  405f5e:	2b00      	cmp	r3, #0
  405f60:	f43f af00 	beq.w	405d64 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  405f64:	a903      	add	r1, sp, #12
  405f66:	2020      	movs	r0, #32
  405f68:	4798      	blx	r3
  405f6a:	e6fb      	b.n	405d64 <m2m_wifi_cb+0x64>
  405f6c:	00410ea4 	.word	0x00410ea4
  405f70:	00410c04 	.word	0x00410c04
  405f74:	004096d1 	.word	0x004096d1
  405f78:	00410f00 	.word	0x00410f00
  405f7c:	004118e8 	.word	0x004118e8
  405f80:	00405b0d 	.word	0x00405b0d
  405f84:	2040c3e4 	.word	0x2040c3e4
  405f88:	004054b9 	.word	0x004054b9
  405f8c:	00410ed4 	.word	0x00410ed4
  405f90:	00410ee0 	.word	0x00410ee0
  405f94:	2040c3e9 	.word	0x2040c3e9
  405f98:	2040c3e8 	.word	0x2040c3e8

00405f9c <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  405f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  405f9e:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  405fa0:	2301      	movs	r3, #1
  405fa2:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  405fa6:	2800      	cmp	r0, #0
  405fa8:	d050      	beq.n	40604c <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  405faa:	6802      	ldr	r2, [r0, #0]
  405fac:	4b29      	ldr	r3, [pc, #164]	; (406054 <m2m_wifi_init+0xb8>)
  405fae:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  405fb0:	2200      	movs	r2, #0
  405fb2:	4b29      	ldr	r3, [pc, #164]	; (406058 <m2m_wifi_init+0xbc>)
  405fb4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  405fb6:	f10d 0007 	add.w	r0, sp, #7
  405fba:	4b28      	ldr	r3, [pc, #160]	; (40605c <m2m_wifi_init+0xc0>)
  405fbc:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  405fbe:	4604      	mov	r4, r0
  405fc0:	b110      	cbz	r0, 405fc8 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  405fc2:	4620      	mov	r0, r4
  405fc4:	b00b      	add	sp, #44	; 0x2c
  405fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  405fc8:	4b25      	ldr	r3, [pc, #148]	; (406060 <m2m_wifi_init+0xc4>)
  405fca:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  405fcc:	4604      	mov	r4, r0
  405fce:	2800      	cmp	r0, #0
  405fd0:	d138      	bne.n	406044 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  405fd2:	4924      	ldr	r1, [pc, #144]	; (406064 <m2m_wifi_init+0xc8>)
  405fd4:	2001      	movs	r0, #1
  405fd6:	4b24      	ldr	r3, [pc, #144]	; (406068 <m2m_wifi_init+0xcc>)
  405fd8:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  405fda:	a802      	add	r0, sp, #8
  405fdc:	4b23      	ldr	r3, [pc, #140]	; (40606c <m2m_wifi_init+0xd0>)
  405fde:	4798      	blx	r3
  405fe0:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  405fe2:	4f23      	ldr	r7, [pc, #140]	; (406070 <m2m_wifi_init+0xd4>)
  405fe4:	4638      	mov	r0, r7
  405fe6:	4d23      	ldr	r5, [pc, #140]	; (406074 <m2m_wifi_init+0xd8>)
  405fe8:	47a8      	blx	r5
  405fea:	f89d 300e 	ldrb.w	r3, [sp, #14]
  405fee:	f89d 200d 	ldrb.w	r2, [sp, #13]
  405ff2:	f89d 100c 	ldrb.w	r1, [sp, #12]
  405ff6:	4820      	ldr	r0, [pc, #128]	; (406078 <m2m_wifi_init+0xdc>)
  405ff8:	47a8      	blx	r5
  405ffa:	4e20      	ldr	r6, [pc, #128]	; (40607c <m2m_wifi_init+0xe0>)
  405ffc:	4630      	mov	r0, r6
  405ffe:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  406000:	4638      	mov	r0, r7
  406002:	47a8      	blx	r5
  406004:	f89d 3011 	ldrb.w	r3, [sp, #17]
  406008:	f89d 2010 	ldrb.w	r2, [sp, #16]
  40600c:	f89d 100f 	ldrb.w	r1, [sp, #15]
  406010:	481b      	ldr	r0, [pc, #108]	; (406080 <m2m_wifi_init+0xe4>)
  406012:	47a8      	blx	r5
  406014:	4630      	mov	r0, r6
  406016:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  406018:	4638      	mov	r0, r7
  40601a:	47a8      	blx	r5
  40601c:	2300      	movs	r3, #0
  40601e:	2203      	movs	r2, #3
  406020:	2113      	movs	r1, #19
  406022:	4818      	ldr	r0, [pc, #96]	; (406084 <m2m_wifi_init+0xe8>)
  406024:	47a8      	blx	r5
  406026:	4630      	mov	r0, r6
  406028:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  40602a:	f114 0f0d 	cmn.w	r4, #13
  40602e:	d1c8      	bne.n	405fc2 <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  406030:	f240 12d5 	movw	r2, #469	; 0x1d5
  406034:	4914      	ldr	r1, [pc, #80]	; (406088 <m2m_wifi_init+0xec>)
  406036:	4815      	ldr	r0, [pc, #84]	; (40608c <m2m_wifi_init+0xf0>)
  406038:	47a8      	blx	r5
  40603a:	4815      	ldr	r0, [pc, #84]	; (406090 <m2m_wifi_init+0xf4>)
  40603c:	47a8      	blx	r5
  40603e:	4630      	mov	r0, r6
  406040:	47a8      	blx	r5
  406042:	e7be      	b.n	405fc2 <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  406044:	2000      	movs	r0, #0
  406046:	4b13      	ldr	r3, [pc, #76]	; (406094 <m2m_wifi_init+0xf8>)
  406048:	4798      	blx	r3
  40604a:	e7ba      	b.n	405fc2 <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  40604c:	f06f 040b 	mvn.w	r4, #11
  406050:	e7b7      	b.n	405fc2 <m2m_wifi_init+0x26>
  406052:	bf00      	nop
  406054:	2040c3e4 	.word	0x2040c3e4
  406058:	2040c3e9 	.word	0x2040c3e9
  40605c:	00406991 	.word	0x00406991
  406060:	00405cb1 	.word	0x00405cb1
  406064:	00405d01 	.word	0x00405d01
  406068:	00405c21 	.word	0x00405c21
  40606c:	004068e1 	.word	0x004068e1
  406070:	00410ed4 	.word	0x00410ed4
  406074:	004096d1 	.word	0x004096d1
  406078:	00410fc0 	.word	0x00410fc0
  40607c:	004118e8 	.word	0x004118e8
  406080:	00410fdc 	.word	0x00410fdc
  406084:	00410ff8 	.word	0x00410ff8
  406088:	00410eb0 	.word	0x00410eb0
  40608c:	00410c04 	.word	0x00410c04
  406090:	00411014 	.word	0x00411014
  406094:	00406a5d 	.word	0x00406a5d

00406098 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  406098:	b508      	push	{r3, lr}
	return hif_handle_isr();
  40609a:	4b01      	ldr	r3, [pc, #4]	; (4060a0 <m2m_wifi_handle_events+0x8>)
  40609c:	4798      	blx	r3
}
  40609e:	bd08      	pop	{r3, pc}
  4060a0:	004057fd 	.word	0x004057fd

004060a4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  4060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4060a8:	b0a0      	sub	sp, #128	; 0x80
  4060aa:	4680      	mov	r8, r0
  4060ac:	460d      	mov	r5, r1
  4060ae:	4614      	mov	r4, r2
  4060b0:	461e      	mov	r6, r3
  4060b2:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  4060b6:	2a01      	cmp	r2, #1
  4060b8:	d003      	beq.n	4060c2 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  4060ba:	2b00      	cmp	r3, #0
  4060bc:	d037      	beq.n	40612e <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4060be:	2a02      	cmp	r2, #2
  4060c0:	d042      	beq.n	406148 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  4060c2:	1e6b      	subs	r3, r5, #1
  4060c4:	b2db      	uxtb	r3, r3
  4060c6:	2b1f      	cmp	r3, #31
  4060c8:	d875      	bhi.n	4061b6 <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  4060ca:	2fff      	cmp	r7, #255	; 0xff
  4060cc:	d001      	beq.n	4060d2 <m2m_wifi_connect_sc+0x2e>
  4060ce:	2f0d      	cmp	r7, #13
  4060d0:	d87e      	bhi.n	4061d0 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  4060d2:	462a      	mov	r2, r5
  4060d4:	4641      	mov	r1, r8
  4060d6:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4060da:	4b77      	ldr	r3, [pc, #476]	; (4062b8 <m2m_wifi_connect_sc+0x214>)
  4060dc:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4060de:	ab20      	add	r3, sp, #128	; 0x80
  4060e0:	441d      	add	r5, r3
  4060e2:	2300      	movs	r3, #0
  4060e4:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4060e8:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4060ec:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4060f0:	3300      	adds	r3, #0
  4060f2:	bf18      	it	ne
  4060f4:	2301      	movne	r3, #1
  4060f6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4060fa:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4060fe:	2c03      	cmp	r4, #3
  406100:	d073      	beq.n	4061ea <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  406102:	2c02      	cmp	r4, #2
  406104:	f000 80aa 	beq.w	40625c <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  406108:	2c04      	cmp	r4, #4
  40610a:	f000 80c1 	beq.w	406290 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  40610e:	2c01      	cmp	r4, #1
  406110:	f040 80c4 	bne.w	40629c <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  406114:	2300      	movs	r3, #0
  406116:	9302      	str	r3, [sp, #8]
  406118:	9301      	str	r3, [sp, #4]
  40611a:	9300      	str	r3, [sp, #0]
  40611c:	236c      	movs	r3, #108	; 0x6c
  40611e:	aa05      	add	r2, sp, #20
  406120:	2128      	movs	r1, #40	; 0x28
  406122:	2001      	movs	r0, #1
  406124:	4c65      	ldr	r4, [pc, #404]	; (4062bc <m2m_wifi_connect_sc+0x218>)
  406126:	47a0      	blx	r4

ERR1:
	return ret;
}
  406128:	b020      	add	sp, #128	; 0x80
  40612a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  40612e:	f240 2203 	movw	r2, #515	; 0x203
  406132:	4963      	ldr	r1, [pc, #396]	; (4062c0 <m2m_wifi_connect_sc+0x21c>)
  406134:	4863      	ldr	r0, [pc, #396]	; (4062c4 <m2m_wifi_connect_sc+0x220>)
  406136:	4c64      	ldr	r4, [pc, #400]	; (4062c8 <m2m_wifi_connect_sc+0x224>)
  406138:	47a0      	blx	r4
  40613a:	4864      	ldr	r0, [pc, #400]	; (4062cc <m2m_wifi_connect_sc+0x228>)
  40613c:	47a0      	blx	r4
  40613e:	4864      	ldr	r0, [pc, #400]	; (4062d0 <m2m_wifi_connect_sc+0x22c>)
  406140:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  406142:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  406146:	e7ef      	b.n	406128 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  406148:	4618      	mov	r0, r3
  40614a:	4b62      	ldr	r3, [pc, #392]	; (4062d4 <m2m_wifi_connect_sc+0x230>)
  40614c:	4798      	blx	r3
  40614e:	2840      	cmp	r0, #64	; 0x40
  406150:	d1b7      	bne.n	4060c2 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  406152:	7833      	ldrb	r3, [r6, #0]
  406154:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  406158:	b2d2      	uxtb	r2, r2
  40615a:	2a06      	cmp	r2, #6
  40615c:	d91e      	bls.n	40619c <m2m_wifi_connect_sc+0xf8>
  40615e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406162:	b2d2      	uxtb	r2, r2
  406164:	2a36      	cmp	r2, #54	; 0x36
  406166:	d819      	bhi.n	40619c <m2m_wifi_connect_sc+0xf8>
  406168:	3b47      	subs	r3, #71	; 0x47
  40616a:	b2db      	uxtb	r3, r3
  40616c:	2b19      	cmp	r3, #25
  40616e:	d915      	bls.n	40619c <m2m_wifi_connect_sc+0xf8>
  406170:	4631      	mov	r1, r6
  406172:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  406176:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40617a:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  40617e:	b2d2      	uxtb	r2, r2
  406180:	2a06      	cmp	r2, #6
  406182:	d90b      	bls.n	40619c <m2m_wifi_connect_sc+0xf8>
  406184:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406188:	b2d2      	uxtb	r2, r2
  40618a:	2a36      	cmp	r2, #54	; 0x36
  40618c:	d806      	bhi.n	40619c <m2m_wifi_connect_sc+0xf8>
  40618e:	3b47      	subs	r3, #71	; 0x47
  406190:	b2db      	uxtb	r3, r3
  406192:	2b19      	cmp	r3, #25
  406194:	d902      	bls.n	40619c <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  406196:	4288      	cmp	r0, r1
  406198:	d1ed      	bne.n	406176 <m2m_wifi_connect_sc+0xd2>
  40619a:	e792      	b.n	4060c2 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  40619c:	f240 220f 	movw	r2, #527	; 0x20f
  4061a0:	4947      	ldr	r1, [pc, #284]	; (4062c0 <m2m_wifi_connect_sc+0x21c>)
  4061a2:	4848      	ldr	r0, [pc, #288]	; (4062c4 <m2m_wifi_connect_sc+0x220>)
  4061a4:	4c48      	ldr	r4, [pc, #288]	; (4062c8 <m2m_wifi_connect_sc+0x224>)
  4061a6:	47a0      	blx	r4
  4061a8:	484b      	ldr	r0, [pc, #300]	; (4062d8 <m2m_wifi_connect_sc+0x234>)
  4061aa:	47a0      	blx	r4
  4061ac:	4848      	ldr	r0, [pc, #288]	; (4062d0 <m2m_wifi_connect_sc+0x22c>)
  4061ae:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  4061b0:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  4061b4:	e7b8      	b.n	406128 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  4061b6:	f240 2219 	movw	r2, #537	; 0x219
  4061ba:	4941      	ldr	r1, [pc, #260]	; (4062c0 <m2m_wifi_connect_sc+0x21c>)
  4061bc:	4841      	ldr	r0, [pc, #260]	; (4062c4 <m2m_wifi_connect_sc+0x220>)
  4061be:	4c42      	ldr	r4, [pc, #264]	; (4062c8 <m2m_wifi_connect_sc+0x224>)
  4061c0:	47a0      	blx	r4
  4061c2:	4846      	ldr	r0, [pc, #280]	; (4062dc <m2m_wifi_connect_sc+0x238>)
  4061c4:	47a0      	blx	r4
  4061c6:	4842      	ldr	r0, [pc, #264]	; (4062d0 <m2m_wifi_connect_sc+0x22c>)
  4061c8:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4061ca:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4061ce:	e7ab      	b.n	406128 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  4061d0:	f240 2222 	movw	r2, #546	; 0x222
  4061d4:	493a      	ldr	r1, [pc, #232]	; (4062c0 <m2m_wifi_connect_sc+0x21c>)
  4061d6:	483b      	ldr	r0, [pc, #236]	; (4062c4 <m2m_wifi_connect_sc+0x220>)
  4061d8:	4c3b      	ldr	r4, [pc, #236]	; (4062c8 <m2m_wifi_connect_sc+0x224>)
  4061da:	47a0      	blx	r4
  4061dc:	4840      	ldr	r0, [pc, #256]	; (4062e0 <m2m_wifi_connect_sc+0x23c>)
  4061de:	47a0      	blx	r4
  4061e0:	483b      	ldr	r0, [pc, #236]	; (4062d0 <m2m_wifi_connect_sc+0x22c>)
  4061e2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4061e4:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4061e8:	e79e      	b.n	406128 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4061ea:	7833      	ldrb	r3, [r6, #0]
  4061ec:	3b01      	subs	r3, #1
  4061ee:	b2db      	uxtb	r3, r3
  4061f0:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4061f4:	2b03      	cmp	r3, #3
  4061f6:	d813      	bhi.n	406220 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  4061f8:	7872      	ldrb	r2, [r6, #1]
  4061fa:	1e53      	subs	r3, r2, #1
  4061fc:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  406200:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  406204:	2b0b      	cmp	r3, #11
  406206:	d11a      	bne.n	40623e <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  406208:	1cb1      	adds	r1, r6, #2
  40620a:	f10d 0016 	add.w	r0, sp, #22
  40620e:	4b2a      	ldr	r3, [pc, #168]	; (4062b8 <m2m_wifi_connect_sc+0x214>)
  406210:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  406212:	7873      	ldrb	r3, [r6, #1]
  406214:	aa20      	add	r2, sp, #128	; 0x80
  406216:	4413      	add	r3, r2
  406218:	2200      	movs	r2, #0
  40621a:	f803 2c6a 	strb.w	r2, [r3, #-106]
  40621e:	e779      	b.n	406114 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  406220:	f240 2239 	movw	r2, #569	; 0x239
  406224:	4926      	ldr	r1, [pc, #152]	; (4062c0 <m2m_wifi_connect_sc+0x21c>)
  406226:	4827      	ldr	r0, [pc, #156]	; (4062c4 <m2m_wifi_connect_sc+0x220>)
  406228:	4c27      	ldr	r4, [pc, #156]	; (4062c8 <m2m_wifi_connect_sc+0x224>)
  40622a:	47a0      	blx	r4
  40622c:	f89d 1014 	ldrb.w	r1, [sp, #20]
  406230:	482c      	ldr	r0, [pc, #176]	; (4062e4 <m2m_wifi_connect_sc+0x240>)
  406232:	47a0      	blx	r4
  406234:	4826      	ldr	r0, [pc, #152]	; (4062d0 <m2m_wifi_connect_sc+0x22c>)
  406236:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  406238:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40623c:	e774      	b.n	406128 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  40623e:	f44f 7210 	mov.w	r2, #576	; 0x240
  406242:	491f      	ldr	r1, [pc, #124]	; (4062c0 <m2m_wifi_connect_sc+0x21c>)
  406244:	481f      	ldr	r0, [pc, #124]	; (4062c4 <m2m_wifi_connect_sc+0x220>)
  406246:	4c20      	ldr	r4, [pc, #128]	; (4062c8 <m2m_wifi_connect_sc+0x224>)
  406248:	47a0      	blx	r4
  40624a:	f89d 1015 	ldrb.w	r1, [sp, #21]
  40624e:	4826      	ldr	r0, [pc, #152]	; (4062e8 <m2m_wifi_connect_sc+0x244>)
  406250:	47a0      	blx	r4
  406252:	481f      	ldr	r0, [pc, #124]	; (4062d0 <m2m_wifi_connect_sc+0x22c>)
  406254:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  406256:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40625a:	e765      	b.n	406128 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  40625c:	4630      	mov	r0, r6
  40625e:	4b1d      	ldr	r3, [pc, #116]	; (4062d4 <m2m_wifi_connect_sc+0x230>)
  406260:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  406262:	1e43      	subs	r3, r0, #1
  406264:	b29b      	uxth	r3, r3
  406266:	2b3f      	cmp	r3, #63	; 0x3f
  406268:	d805      	bhi.n	406276 <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  40626a:	1c42      	adds	r2, r0, #1
  40626c:	4631      	mov	r1, r6
  40626e:	a805      	add	r0, sp, #20
  406270:	4b11      	ldr	r3, [pc, #68]	; (4062b8 <m2m_wifi_connect_sc+0x214>)
  406272:	4798      	blx	r3
  406274:	e74e      	b.n	406114 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  406276:	f240 224f 	movw	r2, #591	; 0x24f
  40627a:	4911      	ldr	r1, [pc, #68]	; (4062c0 <m2m_wifi_connect_sc+0x21c>)
  40627c:	4811      	ldr	r0, [pc, #68]	; (4062c4 <m2m_wifi_connect_sc+0x220>)
  40627e:	4c12      	ldr	r4, [pc, #72]	; (4062c8 <m2m_wifi_connect_sc+0x224>)
  406280:	47a0      	blx	r4
  406282:	481a      	ldr	r0, [pc, #104]	; (4062ec <m2m_wifi_connect_sc+0x248>)
  406284:	47a0      	blx	r4
  406286:	4812      	ldr	r0, [pc, #72]	; (4062d0 <m2m_wifi_connect_sc+0x22c>)
  406288:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40628a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40628e:	e74b      	b.n	406128 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  406290:	223e      	movs	r2, #62	; 0x3e
  406292:	4631      	mov	r1, r6
  406294:	a805      	add	r0, sp, #20
  406296:	4b08      	ldr	r3, [pc, #32]	; (4062b8 <m2m_wifi_connect_sc+0x214>)
  406298:	4798      	blx	r3
  40629a:	e73b      	b.n	406114 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  40629c:	f240 225f 	movw	r2, #607	; 0x25f
  4062a0:	4907      	ldr	r1, [pc, #28]	; (4062c0 <m2m_wifi_connect_sc+0x21c>)
  4062a2:	4808      	ldr	r0, [pc, #32]	; (4062c4 <m2m_wifi_connect_sc+0x220>)
  4062a4:	4c08      	ldr	r4, [pc, #32]	; (4062c8 <m2m_wifi_connect_sc+0x224>)
  4062a6:	47a0      	blx	r4
  4062a8:	4811      	ldr	r0, [pc, #68]	; (4062f0 <m2m_wifi_connect_sc+0x24c>)
  4062aa:	47a0      	blx	r4
  4062ac:	4808      	ldr	r0, [pc, #32]	; (4062d0 <m2m_wifi_connect_sc+0x22c>)
  4062ae:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4062b0:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4062b4:	e738      	b.n	406128 <m2m_wifi_connect_sc+0x84>
  4062b6:	bf00      	nop
  4062b8:	004054a5 	.word	0x004054a5
  4062bc:	0040561d 	.word	0x0040561d
  4062c0:	00410ec0 	.word	0x00410ec0
  4062c4:	00410c04 	.word	0x00410c04
  4062c8:	004096d1 	.word	0x004096d1
  4062cc:	00410f14 	.word	0x00410f14
  4062d0:	004118e8 	.word	0x004118e8
  4062d4:	004054c7 	.word	0x004054c7
  4062d8:	00410f28 	.word	0x00410f28
  4062dc:	00410f38 	.word	0x00410f38
  4062e0:	00410f4c 	.word	0x00410f4c
  4062e4:	00410f58 	.word	0x00410f58
  4062e8:	00410f74 	.word	0x00410f74
  4062ec:	00410f90 	.word	0x00410f90
  4062f0:	00410fac 	.word	0x00410fac

004062f4 <m2m_wifi_connect>:
{
  4062f4:	b510      	push	{r4, lr}
  4062f6:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  4062f8:	2400      	movs	r4, #0
  4062fa:	9401      	str	r4, [sp, #4]
  4062fc:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  406300:	9400      	str	r4, [sp, #0]
  406302:	4c02      	ldr	r4, [pc, #8]	; (40630c <m2m_wifi_connect+0x18>)
  406304:	47a0      	blx	r4
}
  406306:	b002      	add	sp, #8
  406308:	bd10      	pop	{r4, pc}
  40630a:	bf00      	nop
  40630c:	004060a5 	.word	0x004060a5

00406310 <m2m_wifi_set_mac_address>:
sint8 m2m_wifi_disconnect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
}
sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
  406310:	b510      	push	{r4, lr}
  406312:	b086      	sub	sp, #24
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
  406314:	2206      	movs	r2, #6
  406316:	4601      	mov	r1, r0
  406318:	a804      	add	r0, sp, #16
  40631a:	4b07      	ldr	r3, [pc, #28]	; (406338 <m2m_wifi_set_mac_address+0x28>)
  40631c:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
  40631e:	2300      	movs	r3, #0
  406320:	9302      	str	r3, [sp, #8]
  406322:	9301      	str	r3, [sp, #4]
  406324:	9300      	str	r3, [sp, #0]
  406326:	2308      	movs	r3, #8
  406328:	aa04      	add	r2, sp, #16
  40632a:	2102      	movs	r1, #2
  40632c:	2001      	movs	r0, #1
  40632e:	4c03      	ldr	r4, [pc, #12]	; (40633c <m2m_wifi_set_mac_address+0x2c>)
  406330:	47a0      	blx	r4
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
  406332:	b006      	add	sp, #24
  406334:	bd10      	pop	{r4, pc}
  406336:	bf00      	nop
  406338:	004054a5 	.word	0x004054a5
  40633c:	0040561d 	.word	0x0040561d

00406340 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  406340:	2000      	movs	r0, #0
  406342:	4770      	bx	lr

00406344 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  406344:	b5f0      	push	{r4, r5, r6, r7, lr}
  406346:	b083      	sub	sp, #12
  406348:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40634a:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  40634e:	4e0a      	ldr	r6, [pc, #40]	; (406378 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  406350:	4f0a      	ldr	r7, [pc, #40]	; (40637c <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  406352:	4621      	mov	r1, r4
  406354:	4628      	mov	r0, r5
  406356:	47b0      	blx	r6
		if(val32 != 0) {		
  406358:	b154      	cbz	r4, 406370 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  40635a:	a902      	add	r1, sp, #8
  40635c:	2300      	movs	r3, #0
  40635e:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  406362:	4628      	mov	r0, r5
  406364:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  406366:	2800      	cmp	r0, #0
  406368:	d1f3      	bne.n	406352 <chip_apply_conf+0xe>
				if(reg == val32)
  40636a:	9b01      	ldr	r3, [sp, #4]
  40636c:	429c      	cmp	r4, r3
  40636e:	d1f0      	bne.n	406352 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  406370:	2000      	movs	r0, #0
  406372:	b003      	add	sp, #12
  406374:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406376:	bf00      	nop
  406378:	0040681d 	.word	0x0040681d
  40637c:	00406811 	.word	0x00406811

00406380 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  406380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406384:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  406386:	2001      	movs	r0, #1
  406388:	4b3c      	ldr	r3, [pc, #240]	; (40647c <nm_clkless_wake+0xfc>)
  40638a:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  40638c:	a901      	add	r1, sp, #4
  40638e:	2001      	movs	r0, #1
  406390:	4b3b      	ldr	r3, [pc, #236]	; (406480 <nm_clkless_wake+0x100>)
  406392:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  406394:	4682      	mov	sl, r0
  406396:	b938      	cbnz	r0, 4063a8 <nm_clkless_wake+0x28>
  406398:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40639a:	f04f 0801 	mov.w	r8, #1
  40639e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 4064a8 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4063a2:	4d36      	ldr	r5, [pc, #216]	; (40647c <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4063a4:	4f37      	ldr	r7, [pc, #220]	; (406484 <nm_clkless_wake+0x104>)
  4063a6:	e020      	b.n	4063ea <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4063a8:	2272      	movs	r2, #114	; 0x72
  4063aa:	4937      	ldr	r1, [pc, #220]	; (406488 <nm_clkless_wake+0x108>)
  4063ac:	4837      	ldr	r0, [pc, #220]	; (40648c <nm_clkless_wake+0x10c>)
  4063ae:	4c38      	ldr	r4, [pc, #224]	; (406490 <nm_clkless_wake+0x110>)
  4063b0:	47a0      	blx	r4
  4063b2:	4838      	ldr	r0, [pc, #224]	; (406494 <nm_clkless_wake+0x114>)
  4063b4:	47a0      	blx	r4
  4063b6:	4838      	ldr	r0, [pc, #224]	; (406498 <nm_clkless_wake+0x118>)
  4063b8:	47a0      	blx	r4
		goto _WAKE_EXIT;
  4063ba:	e009      	b.n	4063d0 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  4063bc:	2296      	movs	r2, #150	; 0x96
  4063be:	4932      	ldr	r1, [pc, #200]	; (406488 <nm_clkless_wake+0x108>)
  4063c0:	4832      	ldr	r0, [pc, #200]	; (40648c <nm_clkless_wake+0x10c>)
  4063c2:	4c33      	ldr	r4, [pc, #204]	; (406490 <nm_clkless_wake+0x110>)
  4063c4:	47a0      	blx	r4
  4063c6:	4835      	ldr	r0, [pc, #212]	; (40649c <nm_clkless_wake+0x11c>)
  4063c8:	47a0      	blx	r4
  4063ca:	4833      	ldr	r0, [pc, #204]	; (406498 <nm_clkless_wake+0x118>)
  4063cc:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4063ce:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  4063d0:	4650      	mov	r0, sl
  4063d2:	b003      	add	sp, #12
  4063d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  4063d8:	9901      	ldr	r1, [sp, #4]
  4063da:	f041 0102 	orr.w	r1, r1, #2
  4063de:	4640      	mov	r0, r8
  4063e0:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  4063e2:	9b00      	ldr	r3, [sp, #0]
  4063e4:	f013 0f04 	tst.w	r3, #4
  4063e8:	d1f2      	bne.n	4063d0 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  4063ea:	9901      	ldr	r1, [sp, #4]
  4063ec:	f041 0102 	orr.w	r1, r1, #2
  4063f0:	4640      	mov	r0, r8
  4063f2:	47c8      	blx	r9
		nm_bsp_sleep(1);
  4063f4:	4640      	mov	r0, r8
  4063f6:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4063f8:	4669      	mov	r1, sp
  4063fa:	4b29      	ldr	r3, [pc, #164]	; (4064a0 <nm_clkless_wake+0x120>)
  4063fc:	6818      	ldr	r0, [r3, #0]
  4063fe:	4b20      	ldr	r3, [pc, #128]	; (406480 <nm_clkless_wake+0x100>)
  406400:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  406402:	b908      	cbnz	r0, 406408 <nm_clkless_wake+0x88>
  406404:	9b00      	ldr	r3, [sp, #0]
  406406:	b9bb      	cbnz	r3, 406438 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  406408:	4e25      	ldr	r6, [pc, #148]	; (4064a0 <nm_clkless_wake+0x120>)
  40640a:	230e      	movs	r3, #14
  40640c:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  40640e:	4640      	mov	r0, r8
  406410:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  406412:	4669      	mov	r1, sp
  406414:	6830      	ldr	r0, [r6, #0]
  406416:	4b1a      	ldr	r3, [pc, #104]	; (406480 <nm_clkless_wake+0x100>)
  406418:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40641a:	b908      	cbnz	r0, 406420 <nm_clkless_wake+0xa0>
  40641c:	9b00      	ldr	r3, [sp, #0]
  40641e:	b95b      	cbnz	r3, 406438 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  406420:	4e1f      	ldr	r6, [pc, #124]	; (4064a0 <nm_clkless_wake+0x120>)
  406422:	2313      	movs	r3, #19
  406424:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  406426:	4640      	mov	r0, r8
  406428:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40642a:	4669      	mov	r1, sp
  40642c:	6830      	ldr	r0, [r6, #0]
  40642e:	4b14      	ldr	r3, [pc, #80]	; (406480 <nm_clkless_wake+0x100>)
  406430:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  406432:	4606      	mov	r6, r0
  406434:	2800      	cmp	r0, #0
  406436:	d1c1      	bne.n	4063bc <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  406438:	4e19      	ldr	r6, [pc, #100]	; (4064a0 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  40643a:	9b00      	ldr	r3, [sp, #0]
  40643c:	f013 0f04 	tst.w	r3, #4
  406440:	d1c6      	bne.n	4063d0 <nm_clkless_wake+0x50>
  406442:	3401      	adds	r4, #1
  406444:	fba7 2304 	umull	r2, r3, r7, r4
  406448:	085b      	lsrs	r3, r3, #1
  40644a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40644e:	429c      	cmp	r4, r3
  406450:	d1c2      	bne.n	4063d8 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  406452:	2002      	movs	r0, #2
  406454:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  406456:	4669      	mov	r1, sp
  406458:	6830      	ldr	r0, [r6, #0]
  40645a:	4b09      	ldr	r3, [pc, #36]	; (406480 <nm_clkless_wake+0x100>)
  40645c:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  40645e:	9b00      	ldr	r3, [sp, #0]
  406460:	f013 0f04 	tst.w	r3, #4
  406464:	d1e9      	bne.n	40643a <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  406466:	22aa      	movs	r2, #170	; 0xaa
  406468:	4907      	ldr	r1, [pc, #28]	; (406488 <nm_clkless_wake+0x108>)
  40646a:	4808      	ldr	r0, [pc, #32]	; (40648c <nm_clkless_wake+0x10c>)
  40646c:	f8df b020 	ldr.w	fp, [pc, #32]	; 406490 <nm_clkless_wake+0x110>
  406470:	47d8      	blx	fp
  406472:	480c      	ldr	r0, [pc, #48]	; (4064a4 <nm_clkless_wake+0x124>)
  406474:	47d8      	blx	fp
  406476:	4808      	ldr	r0, [pc, #32]	; (406498 <nm_clkless_wake+0x118>)
  406478:	47d8      	blx	fp
  40647a:	e7de      	b.n	40643a <nm_clkless_wake+0xba>
  40647c:	00405101 	.word	0x00405101
  406480:	00406811 	.word	0x00406811
  406484:	aaaaaaab 	.word	0xaaaaaaab
  406488:	00411030 	.word	0x00411030
  40648c:	00410c04 	.word	0x00410c04
  406490:	004096d1 	.word	0x004096d1
  406494:	004110a0 	.word	0x004110a0
  406498:	004118e8 	.word	0x004118e8
  40649c:	004110c0 	.word	0x004110c0
  4064a0:	20400038 	.word	0x20400038
  4064a4:	004110e0 	.word	0x004110e0
  4064a8:	0040681d 	.word	0x0040681d

004064ac <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4064ac:	b500      	push	{lr}
  4064ae:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4064b0:	a901      	add	r1, sp, #4
  4064b2:	f241 4008 	movw	r0, #5128	; 0x1408
  4064b6:	4b15      	ldr	r3, [pc, #84]	; (40650c <enable_interrupts+0x60>)
  4064b8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4064ba:	b9e8      	cbnz	r0, 4064f8 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  4064bc:	9901      	ldr	r1, [sp, #4]
  4064be:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4064c2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  4064c4:	f241 4008 	movw	r0, #5128	; 0x1408
  4064c8:	4b11      	ldr	r3, [pc, #68]	; (406510 <enable_interrupts+0x64>)
  4064ca:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4064cc:	b9b8      	cbnz	r0, 4064fe <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  4064ce:	a901      	add	r1, sp, #4
  4064d0:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4064d4:	4b0d      	ldr	r3, [pc, #52]	; (40650c <enable_interrupts+0x60>)
  4064d6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4064d8:	b9a0      	cbnz	r0, 406504 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  4064da:	9901      	ldr	r1, [sp, #4]
  4064dc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4064e0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  4064e2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4064e6:	4b0a      	ldr	r3, [pc, #40]	; (406510 <enable_interrupts+0x64>)
  4064e8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4064ea:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  4064ec:	bf18      	it	ne
  4064ee:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  4064f2:	b003      	add	sp, #12
  4064f4:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  4064f8:	f06f 0005 	mvn.w	r0, #5
  4064fc:	e7f9      	b.n	4064f2 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  4064fe:	f06f 0005 	mvn.w	r0, #5
  406502:	e7f6      	b.n	4064f2 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  406504:	f06f 0005 	mvn.w	r0, #5
  406508:	e7f3      	b.n	4064f2 <enable_interrupts+0x46>
  40650a:	bf00      	nop
  40650c:	00406811 	.word	0x00406811
  406510:	0040681d 	.word	0x0040681d

00406514 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  406514:	b510      	push	{r4, lr}
  406516:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  406518:	4b25      	ldr	r3, [pc, #148]	; (4065b0 <nmi_get_chipid+0x9c>)
  40651a:	681c      	ldr	r4, [r3, #0]
  40651c:	b124      	cbz	r4, 406528 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  40651e:	4b24      	ldr	r3, [pc, #144]	; (4065b0 <nmi_get_chipid+0x9c>)
  406520:	681c      	ldr	r4, [r3, #0]
}
  406522:	4620      	mov	r0, r4
  406524:	b002      	add	sp, #8
  406526:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  406528:	4619      	mov	r1, r3
  40652a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40652e:	4b21      	ldr	r3, [pc, #132]	; (4065b4 <nmi_get_chipid+0xa0>)
  406530:	4798      	blx	r3
  406532:	b118      	cbz	r0, 40653c <nmi_get_chipid+0x28>
			chipid = 0;
  406534:	2200      	movs	r2, #0
  406536:	4b1e      	ldr	r3, [pc, #120]	; (4065b0 <nmi_get_chipid+0x9c>)
  406538:	601a      	str	r2, [r3, #0]
			return 0;
  40653a:	e7f2      	b.n	406522 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  40653c:	a901      	add	r1, sp, #4
  40653e:	f241 30f4 	movw	r0, #5108	; 0x13f4
  406542:	4b1c      	ldr	r3, [pc, #112]	; (4065b4 <nmi_get_chipid+0xa0>)
  406544:	4798      	blx	r3
  406546:	b118      	cbz	r0, 406550 <nmi_get_chipid+0x3c>
			chipid = 0;
  406548:	2200      	movs	r2, #0
  40654a:	4b19      	ldr	r3, [pc, #100]	; (4065b0 <nmi_get_chipid+0x9c>)
  40654c:	601a      	str	r2, [r3, #0]
			return 0;
  40654e:	e7e8      	b.n	406522 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  406550:	4b17      	ldr	r3, [pc, #92]	; (4065b0 <nmi_get_chipid+0x9c>)
  406552:	681b      	ldr	r3, [r3, #0]
  406554:	4a18      	ldr	r2, [pc, #96]	; (4065b8 <nmi_get_chipid+0xa4>)
  406556:	4293      	cmp	r3, r2
  406558:	d00d      	beq.n	406576 <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  40655a:	4a18      	ldr	r2, [pc, #96]	; (4065bc <nmi_get_chipid+0xa8>)
  40655c:	4293      	cmp	r3, r2
  40655e:	d011      	beq.n	406584 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  406560:	4a17      	ldr	r2, [pc, #92]	; (4065c0 <nmi_get_chipid+0xac>)
  406562:	4293      	cmp	r3, r2
  406564:	d018      	beq.n	406598 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  406566:	4a12      	ldr	r2, [pc, #72]	; (4065b0 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  406568:	6813      	ldr	r3, [r2, #0]
  40656a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  40656e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  406572:	6013      	str	r3, [r2, #0]
  406574:	e7d3      	b.n	40651e <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  406576:	9b01      	ldr	r3, [sp, #4]
  406578:	2b01      	cmp	r3, #1
  40657a:	d0f4      	beq.n	406566 <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  40657c:	3201      	adds	r2, #1
  40657e:	4b0c      	ldr	r3, [pc, #48]	; (4065b0 <nmi_get_chipid+0x9c>)
  406580:	601a      	str	r2, [r3, #0]
  406582:	e7f0      	b.n	406566 <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  406584:	9b01      	ldr	r3, [sp, #4]
  406586:	2b03      	cmp	r3, #3
  406588:	d0ed      	beq.n	406566 <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  40658a:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  40658c:	bf0c      	ite	eq
  40658e:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  406590:	4a0c      	ldrne	r2, [pc, #48]	; (4065c4 <nmi_get_chipid+0xb0>)
  406592:	4b07      	ldr	r3, [pc, #28]	; (4065b0 <nmi_get_chipid+0x9c>)
  406594:	601a      	str	r2, [r3, #0]
  406596:	e7e6      	b.n	406566 <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  406598:	4905      	ldr	r1, [pc, #20]	; (4065b0 <nmi_get_chipid+0x9c>)
  40659a:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  40659e:	4b05      	ldr	r3, [pc, #20]	; (4065b4 <nmi_get_chipid+0xa0>)
  4065a0:	4798      	blx	r3
  4065a2:	2800      	cmp	r0, #0
  4065a4:	d0df      	beq.n	406566 <nmi_get_chipid+0x52>
			chipid = 0;
  4065a6:	2200      	movs	r2, #0
  4065a8:	4b01      	ldr	r3, [pc, #4]	; (4065b0 <nmi_get_chipid+0x9c>)
  4065aa:	601a      	str	r2, [r3, #0]
			return 0;
  4065ac:	e7b9      	b.n	406522 <nmi_get_chipid+0xe>
  4065ae:	bf00      	nop
  4065b0:	2040c3ec 	.word	0x2040c3ec
  4065b4:	00406811 	.word	0x00406811
  4065b8:	001002a0 	.word	0x001002a0
  4065bc:	001002b0 	.word	0x001002b0
  4065c0:	001000f0 	.word	0x001000f0
  4065c4:	001002b2 	.word	0x001002b2

004065c8 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  4065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4065cc:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4065ce:	f241 0514 	movw	r5, #4116	; 0x1014
  4065d2:	4c28      	ldr	r4, [pc, #160]	; (406674 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4065d4:	4e28      	ldr	r6, [pc, #160]	; (406678 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4065d6:	4628      	mov	r0, r5
  4065d8:	47a0      	blx	r4
		if (reg & 0x80000000) {
  4065da:	2800      	cmp	r0, #0
  4065dc:	db02      	blt.n	4065e4 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4065de:	2001      	movs	r0, #1
  4065e0:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4065e2:	e7f8      	b.n	4065d6 <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  4065e4:	4825      	ldr	r0, [pc, #148]	; (40667c <wait_for_bootrom+0xb4>)
  4065e6:	4b23      	ldr	r3, [pc, #140]	; (406674 <wait_for_bootrom+0xac>)
  4065e8:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  4065ea:	f010 0f01 	tst.w	r0, #1
  4065ee:	d110      	bne.n	406612 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  4065f0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 406678 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  4065f4:	4e1f      	ldr	r6, [pc, #124]	; (406674 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4065f6:	4d22      	ldr	r5, [pc, #136]	; (406680 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  4065f8:	2001      	movs	r0, #1
  4065fa:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  4065fc:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  406600:	47b0      	blx	r6
  406602:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  406604:	462a      	mov	r2, r5
  406606:	4601      	mov	r1, r0
  406608:	481e      	ldr	r0, [pc, #120]	; (406684 <wait_for_bootrom+0xbc>)
  40660a:	4b1f      	ldr	r3, [pc, #124]	; (406688 <wait_for_bootrom+0xc0>)
  40660c:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  40660e:	42ac      	cmp	r4, r5
  406610:	d1f2      	bne.n	4065f8 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  406612:	2f02      	cmp	r7, #2
  406614:	d019      	beq.n	40664a <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  406616:	2f03      	cmp	r7, #3
  406618:	d022      	beq.n	406660 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  40661a:	2f04      	cmp	r7, #4
  40661c:	bf14      	ite	ne
  40661e:	2400      	movne	r4, #0
  406620:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  406622:	4b1a      	ldr	r3, [pc, #104]	; (40668c <wait_for_bootrom+0xc4>)
  406624:	4798      	blx	r3
  406626:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40662a:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  40662e:	bf0c      	ite	eq
  406630:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  406634:	4620      	movne	r0, r4
  406636:	4b16      	ldr	r3, [pc, #88]	; (406690 <wait_for_bootrom+0xc8>)
  406638:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  40663a:	4916      	ldr	r1, [pc, #88]	; (406694 <wait_for_bootrom+0xcc>)
  40663c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  406640:	4b15      	ldr	r3, [pc, #84]	; (406698 <wait_for_bootrom+0xd0>)
  406642:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  406644:	2000      	movs	r0, #0
  406646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  40664a:	4914      	ldr	r1, [pc, #80]	; (40669c <wait_for_bootrom+0xd4>)
  40664c:	4814      	ldr	r0, [pc, #80]	; (4066a0 <wait_for_bootrom+0xd8>)
  40664e:	4c12      	ldr	r4, [pc, #72]	; (406698 <wait_for_bootrom+0xd0>)
  406650:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  406652:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  406656:	f241 008c 	movw	r0, #4236	; 0x108c
  40665a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  40665c:	2400      	movs	r4, #0
  40665e:	e7e0      	b.n	406622 <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  406660:	490e      	ldr	r1, [pc, #56]	; (40669c <wait_for_bootrom+0xd4>)
  406662:	480f      	ldr	r0, [pc, #60]	; (4066a0 <wait_for_bootrom+0xd8>)
  406664:	4c0c      	ldr	r4, [pc, #48]	; (406698 <wait_for_bootrom+0xd0>)
  406666:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  406668:	2100      	movs	r1, #0
  40666a:	f241 008c 	movw	r0, #4236	; 0x108c
  40666e:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  406670:	2400      	movs	r4, #0
  406672:	e7d6      	b.n	406622 <wait_for_bootrom+0x5a>
  406674:	00406805 	.word	0x00406805
  406678:	00405101 	.word	0x00405101
  40667c:	000207bc 	.word	0x000207bc
  406680:	10add09e 	.word	0x10add09e
  406684:	00411104 	.word	0x00411104
  406688:	004096d1 	.word	0x004096d1
  40668c:	00406515 	.word	0x00406515
  406690:	00406345 	.word	0x00406345
  406694:	ef522f61 	.word	0xef522f61
  406698:	0040681d 	.word	0x0040681d
  40669c:	3c1cd57d 	.word	0x3c1cd57d
  4066a0:	000207ac 	.word	0x000207ac

004066a4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  4066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4066a6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  4066a8:	f241 038c 	movw	r3, #4236	; 0x108c
  4066ac:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4066ae:	4b18      	ldr	r3, [pc, #96]	; (406710 <wait_for_firmware_start+0x6c>)
  4066b0:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4066b2:	3802      	subs	r0, #2
  4066b4:	b2c0      	uxtb	r0, r0
  4066b6:	2801      	cmp	r0, #1
  4066b8:	d911      	bls.n	4066de <wait_for_firmware_start+0x3a>
{
  4066ba:	f04f 34ff 	mov.w	r4, #4294967295
  4066be:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4066c0:	2702      	movs	r7, #2
  4066c2:	4e14      	ldr	r6, [pc, #80]	; (406714 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4066c4:	4d14      	ldr	r5, [pc, #80]	; (406718 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  4066c6:	9b00      	ldr	r3, [sp, #0]
  4066c8:	4298      	cmp	r0, r3
  4066ca:	d012      	beq.n	4066f2 <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4066cc:	4638      	mov	r0, r7
  4066ce:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  4066d0:	9801      	ldr	r0, [sp, #4]
  4066d2:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  4066d4:	3c01      	subs	r4, #1
  4066d6:	d1f6      	bne.n	4066c6 <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  4066d8:	f06f 0004 	mvn.w	r0, #4
  4066dc:	e00e      	b.n	4066fc <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  4066de:	4b0f      	ldr	r3, [pc, #60]	; (40671c <wait_for_firmware_start+0x78>)
  4066e0:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  4066e2:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  4066e6:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  4066ea:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  4066ee:	9300      	str	r3, [sp, #0]
  4066f0:	e7e3      	b.n	4066ba <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  4066f2:	9a00      	ldr	r2, [sp, #0]
  4066f4:	4b06      	ldr	r3, [pc, #24]	; (406710 <wait_for_firmware_start+0x6c>)
  4066f6:	429a      	cmp	r2, r3
  4066f8:	d002      	beq.n	406700 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  4066fa:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  4066fc:	b003      	add	sp, #12
  4066fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  406700:	2100      	movs	r1, #0
  406702:	f241 008c 	movw	r0, #4236	; 0x108c
  406706:	4b06      	ldr	r3, [pc, #24]	; (406720 <wait_for_firmware_start+0x7c>)
  406708:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  40670a:	2000      	movs	r0, #0
  40670c:	e7f6      	b.n	4066fc <wait_for_firmware_start+0x58>
  40670e:	bf00      	nop
  406710:	02532636 	.word	0x02532636
  406714:	00405101 	.word	0x00405101
  406718:	00406805 	.word	0x00406805
  40671c:	000207ac 	.word	0x000207ac
  406720:	0040681d 	.word	0x0040681d

00406724 <chip_deinit>:

sint8 chip_deinit(void)
{
  406724:	b5f0      	push	{r4, r5, r6, r7, lr}
  406726:	b083      	sub	sp, #12
	uint32 reg = 0;
  406728:	a902      	add	r1, sp, #8
  40672a:	2300      	movs	r3, #0
  40672c:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  406730:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  406734:	4b24      	ldr	r3, [pc, #144]	; (4067c8 <chip_deinit+0xa4>)
  406736:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  406738:	bb20      	cbnz	r0, 406784 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  40673a:	9901      	ldr	r1, [sp, #4]
  40673c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  406740:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  406742:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  406746:	4b21      	ldr	r3, [pc, #132]	; (4067cc <chip_deinit+0xa8>)
  406748:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  40674a:	4605      	mov	r5, r0
  40674c:	bb28      	cbnz	r0, 40679a <chip_deinit+0x76>
  40674e:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  406750:	4e1d      	ldr	r6, [pc, #116]	; (4067c8 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  406752:	4f1e      	ldr	r7, [pc, #120]	; (4067cc <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  406754:	a901      	add	r1, sp, #4
  406756:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40675a:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  40675c:	4605      	mov	r5, r0
  40675e:	bb38      	cbnz	r0, 4067b0 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  406760:	9901      	ldr	r1, [sp, #4]
  406762:	f411 6f80 	tst.w	r1, #1024	; 0x400
  406766:	d00a      	beq.n	40677e <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  406768:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40676c:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40676e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  406772:	47b8      	blx	r7
  406774:	4605      	mov	r5, r0
  406776:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  406778:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40677c:	d1ea      	bne.n	406754 <chip_deinit+0x30>

	return ret;
}
  40677e:	4628      	mov	r0, r5
  406780:	b003      	add	sp, #12
  406782:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  406784:	f240 2231 	movw	r2, #561	; 0x231
  406788:	4911      	ldr	r1, [pc, #68]	; (4067d0 <chip_deinit+0xac>)
  40678a:	4812      	ldr	r0, [pc, #72]	; (4067d4 <chip_deinit+0xb0>)
  40678c:	4c12      	ldr	r4, [pc, #72]	; (4067d8 <chip_deinit+0xb4>)
  40678e:	47a0      	blx	r4
  406790:	4812      	ldr	r0, [pc, #72]	; (4067dc <chip_deinit+0xb8>)
  406792:	47a0      	blx	r4
  406794:	4812      	ldr	r0, [pc, #72]	; (4067e0 <chip_deinit+0xbc>)
  406796:	47a0      	blx	r4
  406798:	e7cf      	b.n	40673a <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  40679a:	f240 2237 	movw	r2, #567	; 0x237
  40679e:	490c      	ldr	r1, [pc, #48]	; (4067d0 <chip_deinit+0xac>)
  4067a0:	480c      	ldr	r0, [pc, #48]	; (4067d4 <chip_deinit+0xb0>)
  4067a2:	4c0d      	ldr	r4, [pc, #52]	; (4067d8 <chip_deinit+0xb4>)
  4067a4:	47a0      	blx	r4
  4067a6:	480f      	ldr	r0, [pc, #60]	; (4067e4 <chip_deinit+0xc0>)
  4067a8:	47a0      	blx	r4
  4067aa:	480d      	ldr	r0, [pc, #52]	; (4067e0 <chip_deinit+0xbc>)
  4067ac:	47a0      	blx	r4
		return ret;
  4067ae:	e7e6      	b.n	40677e <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  4067b0:	f240 223e 	movw	r2, #574	; 0x23e
  4067b4:	4906      	ldr	r1, [pc, #24]	; (4067d0 <chip_deinit+0xac>)
  4067b6:	4807      	ldr	r0, [pc, #28]	; (4067d4 <chip_deinit+0xb0>)
  4067b8:	4c07      	ldr	r4, [pc, #28]	; (4067d8 <chip_deinit+0xb4>)
  4067ba:	47a0      	blx	r4
  4067bc:	480a      	ldr	r0, [pc, #40]	; (4067e8 <chip_deinit+0xc4>)
  4067be:	47a0      	blx	r4
  4067c0:	4807      	ldr	r0, [pc, #28]	; (4067e0 <chip_deinit+0xbc>)
  4067c2:	47a0      	blx	r4
			return ret;
  4067c4:	e7db      	b.n	40677e <chip_deinit+0x5a>
  4067c6:	bf00      	nop
  4067c8:	00406811 	.word	0x00406811
  4067cc:	0040681d 	.word	0x0040681d
  4067d0:	00411040 	.word	0x00411040
  4067d4:	00410c04 	.word	0x00410c04
  4067d8:	004096d1 	.word	0x004096d1
  4067dc:	0041104c 	.word	0x0041104c
  4067e0:	004118e8 	.word	0x004118e8
  4067e4:	00411068 	.word	0x00411068
  4067e8:	00411084 	.word	0x00411084

004067ec <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  4067ec:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  4067ee:	4b01      	ldr	r3, [pc, #4]	; (4067f4 <nm_bus_iface_init+0x8>)
  4067f0:	4798      	blx	r3

	return ret;
}
  4067f2:	bd08      	pop	{r3, pc}
  4067f4:	00405275 	.word	0x00405275

004067f8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  4067f8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  4067fa:	4b01      	ldr	r3, [pc, #4]	; (406800 <nm_bus_iface_deinit+0x8>)
  4067fc:	4798      	blx	r3

	return ret;
}
  4067fe:	bd08      	pop	{r3, pc}
  406800:	00405465 	.word	0x00405465

00406804 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  406804:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  406806:	4b01      	ldr	r3, [pc, #4]	; (40680c <nm_read_reg+0x8>)
  406808:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40680a:	bd08      	pop	{r3, pc}
  40680c:	00407059 	.word	0x00407059

00406810 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  406810:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  406812:	4b01      	ldr	r3, [pc, #4]	; (406818 <nm_read_reg_with_ret+0x8>)
  406814:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  406816:	bd08      	pop	{r3, pc}
  406818:	00407071 	.word	0x00407071

0040681c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  40681c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  40681e:	4b01      	ldr	r3, [pc, #4]	; (406824 <nm_write_reg+0x8>)
  406820:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  406822:	bd08      	pop	{r3, pc}
  406824:	00407089 	.word	0x00407089

00406828 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  406828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40682c:	4607      	mov	r7, r0
  40682e:	4689      	mov	r9, r1
  406830:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  406832:	4b12      	ldr	r3, [pc, #72]	; (40687c <nm_read_block+0x54>)
  406834:	f8b3 8000 	ldrh.w	r8, [r3]
  406838:	f1a8 0808 	sub.w	r8, r8, #8
  40683c:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  406840:	4542      	cmp	r2, r8
  406842:	d919      	bls.n	406878 <nm_read_block+0x50>
  406844:	4644      	mov	r4, r8
  406846:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  406848:	f8df a034 	ldr.w	sl, [pc, #52]	; 406880 <nm_read_block+0x58>
  40684c:	4642      	mov	r2, r8
  40684e:	eb09 0106 	add.w	r1, r9, r6
  406852:	4638      	mov	r0, r7
  406854:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  406856:	4603      	mov	r3, r0
  406858:	b958      	cbnz	r0, 406872 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40685a:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40685c:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40685e:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  406860:	42a5      	cmp	r5, r4
  406862:	d8f3      	bhi.n	40684c <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  406864:	b2aa      	uxth	r2, r5
  406866:	eb09 0106 	add.w	r1, r9, r6
  40686a:	4638      	mov	r0, r7
  40686c:	4b04      	ldr	r3, [pc, #16]	; (406880 <nm_read_block+0x58>)
  40686e:	4798      	blx	r3
  406870:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  406872:	4618      	mov	r0, r3
  406874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  406878:	2600      	movs	r6, #0
  40687a:	e7f3      	b.n	406864 <nm_read_block+0x3c>
  40687c:	20400034 	.word	0x20400034
  406880:	004071b5 	.word	0x004071b5

00406884 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  406884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406888:	4607      	mov	r7, r0
  40688a:	4689      	mov	r9, r1
  40688c:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40688e:	4b12      	ldr	r3, [pc, #72]	; (4068d8 <nm_write_block+0x54>)
  406890:	f8b3 8000 	ldrh.w	r8, [r3]
  406894:	f1a8 0808 	sub.w	r8, r8, #8
  406898:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40689c:	4542      	cmp	r2, r8
  40689e:	d919      	bls.n	4068d4 <nm_write_block+0x50>
  4068a0:	4644      	mov	r4, r8
  4068a2:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4068a4:	f8df a034 	ldr.w	sl, [pc, #52]	; 4068dc <nm_write_block+0x58>
  4068a8:	4642      	mov	r2, r8
  4068aa:	eb09 0106 	add.w	r1, r9, r6
  4068ae:	4638      	mov	r0, r7
  4068b0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4068b2:	4603      	mov	r3, r0
  4068b4:	b958      	cbnz	r0, 4068ce <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4068b6:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4068b8:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4068ba:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4068bc:	42a5      	cmp	r5, r4
  4068be:	d8f3      	bhi.n	4068a8 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4068c0:	b2aa      	uxth	r2, r5
  4068c2:	eb09 0106 	add.w	r1, r9, r6
  4068c6:	4638      	mov	r0, r7
  4068c8:	4b04      	ldr	r3, [pc, #16]	; (4068dc <nm_write_block+0x58>)
  4068ca:	4798      	blx	r3
  4068cc:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  4068ce:	4618      	mov	r0, r3
  4068d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  4068d4:	2600      	movs	r6, #0
  4068d6:	e7f3      	b.n	4068c0 <nm_write_block+0x3c>
  4068d8:	20400034 	.word	0x20400034
  4068dc:	0040727d 	.word	0x0040727d

004068e0 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  4068e0:	b530      	push	{r4, r5, lr}
  4068e2:	b083      	sub	sp, #12
  4068e4:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  4068e6:	a902      	add	r1, sp, #8
  4068e8:	2300      	movs	r3, #0
  4068ea:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  4068ee:	4824      	ldr	r0, [pc, #144]	; (406980 <nm_get_firmware_info+0xa0>)
  4068f0:	4b24      	ldr	r3, [pc, #144]	; (406984 <nm_get_firmware_info+0xa4>)
  4068f2:	4798      	blx	r3
  4068f4:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  4068f6:	9a01      	ldr	r2, [sp, #4]
  4068f8:	4b23      	ldr	r3, [pc, #140]	; (406988 <nm_get_firmware_info+0xa8>)
  4068fa:	429a      	cmp	r2, r3
  4068fc:	d039      	beq.n	406972 <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  4068fe:	9b01      	ldr	r3, [sp, #4]
  406900:	0c1a      	lsrs	r2, r3, #16
  406902:	b291      	uxth	r1, r2
  406904:	0a08      	lsrs	r0, r1, #8
  406906:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  406908:	f3c1 1103 	ubfx	r1, r1, #4, #4
  40690c:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  40690e:	f002 020f 	and.w	r2, r2, #15
  406912:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  406914:	b29a      	uxth	r2, r3
  406916:	0a11      	lsrs	r1, r2, #8
  406918:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  40691a:	f3c2 1203 	ubfx	r2, r2, #4, #4
  40691e:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  406920:	f003 030f 	and.w	r3, r3, #15
  406924:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  406926:	4b19      	ldr	r3, [pc, #100]	; (40698c <nm_get_firmware_info+0xac>)
  406928:	4798      	blx	r3
  40692a:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  40692c:	7922      	ldrb	r2, [r4, #4]
  40692e:	79a3      	ldrb	r3, [r4, #6]
  406930:	f003 030f 	and.w	r3, r3, #15
  406934:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  406938:	7962      	ldrb	r2, [r4, #5]
  40693a:	0112      	lsls	r2, r2, #4
  40693c:	b2d2      	uxtb	r2, r2
  40693e:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  406940:	79e1      	ldrb	r1, [r4, #7]
  406942:	7a62      	ldrb	r2, [r4, #9]
  406944:	f002 020f 	and.w	r2, r2, #15
  406948:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  40694c:	7a21      	ldrb	r1, [r4, #8]
  40694e:	0109      	lsls	r1, r1, #4
  406950:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  406952:	430a      	orrs	r2, r1
  406954:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  406958:	428a      	cmp	r2, r1
  40695a:	bf88      	it	hi
  40695c:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  406960:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  406964:	4293      	cmp	r3, r2
	}
	return ret;
}
  406966:	bf8c      	ite	hi
  406968:	4628      	movhi	r0, r5
  40696a:	f06f 000c 	mvnls.w	r0, #12
  40696e:	b003      	add	sp, #12
  406970:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  406972:	a901      	add	r1, sp, #4
  406974:	f241 0048 	movw	r0, #4168	; 0x1048
  406978:	4b02      	ldr	r3, [pc, #8]	; (406984 <nm_get_firmware_info+0xa4>)
  40697a:	4798      	blx	r3
  40697c:	4605      	mov	r5, r0
  40697e:	e7be      	b.n	4068fe <nm_get_firmware_info+0x1e>
  406980:	000207ac 	.word	0x000207ac
  406984:	00406811 	.word	0x00406811
  406988:	d75dc1c3 	.word	0xd75dc1c3
  40698c:	00406515 	.word	0x00406515

00406990 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  406990:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  406992:	2800      	cmp	r0, #0
  406994:	d037      	beq.n	406a06 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  406996:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  406998:	1e63      	subs	r3, r4, #1
  40699a:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  40699c:	2b04      	cmp	r3, #4
  40699e:	bf28      	it	cs
  4069a0:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  4069a2:	2000      	movs	r0, #0
  4069a4:	4b1e      	ldr	r3, [pc, #120]	; (406a20 <nm_drv_init+0x90>)
  4069a6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4069a8:	4605      	mov	r5, r0
  4069aa:	2800      	cmp	r0, #0
  4069ac:	d12d      	bne.n	406a0a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  4069ae:	481d      	ldr	r0, [pc, #116]	; (406a24 <nm_drv_init+0x94>)
  4069b0:	4d1d      	ldr	r5, [pc, #116]	; (406a28 <nm_drv_init+0x98>)
  4069b2:	47a8      	blx	r5
  4069b4:	4b1d      	ldr	r3, [pc, #116]	; (406a2c <nm_drv_init+0x9c>)
  4069b6:	4798      	blx	r3
  4069b8:	4601      	mov	r1, r0
  4069ba:	481d      	ldr	r0, [pc, #116]	; (406a30 <nm_drv_init+0xa0>)
  4069bc:	47a8      	blx	r5
  4069be:	481d      	ldr	r0, [pc, #116]	; (406a34 <nm_drv_init+0xa4>)
  4069c0:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  4069c2:	4b1d      	ldr	r3, [pc, #116]	; (406a38 <nm_drv_init+0xa8>)
  4069c4:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  4069c6:	4620      	mov	r0, r4
  4069c8:	4b1c      	ldr	r3, [pc, #112]	; (406a3c <nm_drv_init+0xac>)
  4069ca:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4069cc:	4605      	mov	r5, r0
  4069ce:	b9b0      	cbnz	r0, 4069fe <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  4069d0:	4620      	mov	r0, r4
  4069d2:	4b1b      	ldr	r3, [pc, #108]	; (406a40 <nm_drv_init+0xb0>)
  4069d4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4069d6:	4605      	mov	r5, r0
  4069d8:	b988      	cbnz	r0, 4069fe <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  4069da:	3c02      	subs	r4, #2
  4069dc:	b2e4      	uxtb	r4, r4
  4069de:	2c01      	cmp	r4, #1
  4069e0:	d90f      	bls.n	406a02 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  4069e2:	4b18      	ldr	r3, [pc, #96]	; (406a44 <nm_drv_init+0xb4>)
  4069e4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4069e6:	4605      	mov	r5, r0
  4069e8:	b158      	cbz	r0, 406a02 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  4069ea:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  4069ee:	4916      	ldr	r1, [pc, #88]	; (406a48 <nm_drv_init+0xb8>)
  4069f0:	4816      	ldr	r0, [pc, #88]	; (406a4c <nm_drv_init+0xbc>)
  4069f2:	4c0d      	ldr	r4, [pc, #52]	; (406a28 <nm_drv_init+0x98>)
  4069f4:	47a0      	blx	r4
  4069f6:	4816      	ldr	r0, [pc, #88]	; (406a50 <nm_drv_init+0xc0>)
  4069f8:	47a0      	blx	r4
  4069fa:	480e      	ldr	r0, [pc, #56]	; (406a34 <nm_drv_init+0xa4>)
  4069fc:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  4069fe:	4b15      	ldr	r3, [pc, #84]	; (406a54 <nm_drv_init+0xc4>)
  406a00:	4798      	blx	r3
ERR1:
	return ret;
}
  406a02:	4628      	mov	r0, r5
  406a04:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  406a06:	2401      	movs	r4, #1
  406a08:	e7cb      	b.n	4069a2 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  406a0a:	f44f 7292 	mov.w	r2, #292	; 0x124
  406a0e:	490e      	ldr	r1, [pc, #56]	; (406a48 <nm_drv_init+0xb8>)
  406a10:	480e      	ldr	r0, [pc, #56]	; (406a4c <nm_drv_init+0xbc>)
  406a12:	4c05      	ldr	r4, [pc, #20]	; (406a28 <nm_drv_init+0x98>)
  406a14:	47a0      	blx	r4
  406a16:	4810      	ldr	r0, [pc, #64]	; (406a58 <nm_drv_init+0xc8>)
  406a18:	47a0      	blx	r4
  406a1a:	4806      	ldr	r0, [pc, #24]	; (406a34 <nm_drv_init+0xa4>)
  406a1c:	47a0      	blx	r4
		goto ERR1;
  406a1e:	e7f0      	b.n	406a02 <nm_drv_init+0x72>
  406a20:	004067ed 	.word	0x004067ed
  406a24:	00410ed4 	.word	0x00410ed4
  406a28:	004096d1 	.word	0x004096d1
  406a2c:	00406515 	.word	0x00406515
  406a30:	004111cc 	.word	0x004111cc
  406a34:	004118e8 	.word	0x004118e8
  406a38:	004070a1 	.word	0x004070a1
  406a3c:	004065c9 	.word	0x004065c9
  406a40:	004066a5 	.word	0x004066a5
  406a44:	004064ad 	.word	0x004064ad
  406a48:	00411114 	.word	0x00411114
  406a4c:	00410c04 	.word	0x00410c04
  406a50:	00411190 	.word	0x00411190
  406a54:	004067f9 	.word	0x004067f9
  406a58:	004111b0 	.word	0x004111b0

00406a5c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  406a5c:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  406a5e:	4b19      	ldr	r3, [pc, #100]	; (406ac4 <nm_drv_deinit+0x68>)
  406a60:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  406a62:	b958      	cbnz	r0, 406a7c <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  406a64:	2000      	movs	r0, #0
  406a66:	4b18      	ldr	r3, [pc, #96]	; (406ac8 <nm_drv_deinit+0x6c>)
  406a68:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  406a6a:	4604      	mov	r4, r0
  406a6c:	b998      	cbnz	r0, 406a96 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  406a6e:	4b17      	ldr	r3, [pc, #92]	; (406acc <nm_drv_deinit+0x70>)
  406a70:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  406a72:	4604      	mov	r4, r0
  406a74:	b9d0      	cbnz	r0, 406aac <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  406a76:	4b16      	ldr	r3, [pc, #88]	; (406ad0 <nm_drv_deinit+0x74>)
  406a78:	4798      	blx	r3
  406a7a:	e00a      	b.n	406a92 <nm_drv_deinit+0x36>
  406a7c:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  406a7e:	f44f 72ba 	mov.w	r2, #372	; 0x174
  406a82:	4914      	ldr	r1, [pc, #80]	; (406ad4 <nm_drv_deinit+0x78>)
  406a84:	4814      	ldr	r0, [pc, #80]	; (406ad8 <nm_drv_deinit+0x7c>)
  406a86:	4d15      	ldr	r5, [pc, #84]	; (406adc <nm_drv_deinit+0x80>)
  406a88:	47a8      	blx	r5
  406a8a:	4815      	ldr	r0, [pc, #84]	; (406ae0 <nm_drv_deinit+0x84>)
  406a8c:	47a8      	blx	r5
  406a8e:	4815      	ldr	r0, [pc, #84]	; (406ae4 <nm_drv_deinit+0x88>)
  406a90:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  406a92:	4620      	mov	r0, r4
  406a94:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  406a96:	f240 127b 	movw	r2, #379	; 0x17b
  406a9a:	490e      	ldr	r1, [pc, #56]	; (406ad4 <nm_drv_deinit+0x78>)
  406a9c:	480e      	ldr	r0, [pc, #56]	; (406ad8 <nm_drv_deinit+0x7c>)
  406a9e:	4d0f      	ldr	r5, [pc, #60]	; (406adc <nm_drv_deinit+0x80>)
  406aa0:	47a8      	blx	r5
  406aa2:	4811      	ldr	r0, [pc, #68]	; (406ae8 <nm_drv_deinit+0x8c>)
  406aa4:	47a8      	blx	r5
  406aa6:	480f      	ldr	r0, [pc, #60]	; (406ae4 <nm_drv_deinit+0x88>)
  406aa8:	47a8      	blx	r5
		goto ERR1;
  406aaa:	e7f2      	b.n	406a92 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  406aac:	f240 1281 	movw	r2, #385	; 0x181
  406ab0:	4908      	ldr	r1, [pc, #32]	; (406ad4 <nm_drv_deinit+0x78>)
  406ab2:	4809      	ldr	r0, [pc, #36]	; (406ad8 <nm_drv_deinit+0x7c>)
  406ab4:	4d09      	ldr	r5, [pc, #36]	; (406adc <nm_drv_deinit+0x80>)
  406ab6:	47a8      	blx	r5
  406ab8:	480c      	ldr	r0, [pc, #48]	; (406aec <nm_drv_deinit+0x90>)
  406aba:	47a8      	blx	r5
  406abc:	4809      	ldr	r0, [pc, #36]	; (406ae4 <nm_drv_deinit+0x88>)
  406abe:	47a8      	blx	r5
		goto ERR1;
  406ac0:	e7e7      	b.n	406a92 <nm_drv_deinit+0x36>
  406ac2:	bf00      	nop
  406ac4:	00406725 	.word	0x00406725
  406ac8:	00407b41 	.word	0x00407b41
  406acc:	004067f9 	.word	0x004067f9
  406ad0:	0040704d 	.word	0x0040704d
  406ad4:	00411120 	.word	0x00411120
  406ad8:	00410c04 	.word	0x00410c04
  406adc:	004096d1 	.word	0x004096d1
  406ae0:	00411130 	.word	0x00411130
  406ae4:	004118e8 	.word	0x004118e8
  406ae8:	00411150 	.word	0x00411150
  406aec:	00411174 	.word	0x00411174

00406af0 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  406af0:	b500      	push	{lr}
  406af2:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  406af4:	2300      	movs	r3, #0
  406af6:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  406af8:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  406afa:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  406afe:	a901      	add	r1, sp, #4
  406b00:	2003      	movs	r0, #3
  406b02:	4b02      	ldr	r3, [pc, #8]	; (406b0c <nmi_spi_read+0x1c>)
  406b04:	4798      	blx	r3
}
  406b06:	b005      	add	sp, #20
  406b08:	f85d fb04 	ldr.w	pc, [sp], #4
  406b0c:	00405391 	.word	0x00405391

00406b10 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  406b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b14:	b082      	sub	sp, #8
  406b16:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  406b18:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  406b1c:	b2db      	uxtb	r3, r3
  406b1e:	2b01      	cmp	r3, #1
  406b20:	d927      	bls.n	406b72 <spi_cmd_rsp+0x62>
  406b22:	28cf      	cmp	r0, #207	; 0xcf
  406b24:	d025      	beq.n	406b72 <spi_cmd_rsp+0x62>
{
  406b26:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406b28:	f04f 0801 	mov.w	r8, #1
  406b2c:	4f23      	ldr	r7, [pc, #140]	; (406bbc <spi_cmd_rsp+0xac>)
  406b2e:	4641      	mov	r1, r8
  406b30:	f10d 0007 	add.w	r0, sp, #7
  406b34:	47b8      	blx	r7
  406b36:	4606      	mov	r6, r0
  406b38:	bb20      	cbnz	r0, 406b84 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  406b3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  406b3e:	42ab      	cmp	r3, r5
  406b40:	d02c      	beq.n	406b9c <spi_cmd_rsp+0x8c>
  406b42:	1e63      	subs	r3, r4, #1
  406b44:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  406b48:	d1f1      	bne.n	406b2e <spi_cmd_rsp+0x1e>
  406b4a:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406b4c:	2701      	movs	r7, #1
  406b4e:	4d1b      	ldr	r5, [pc, #108]	; (406bbc <spi_cmd_rsp+0xac>)
  406b50:	4639      	mov	r1, r7
  406b52:	f10d 0007 	add.w	r0, sp, #7
  406b56:	47a8      	blx	r5
  406b58:	bb10      	cbnz	r0, 406ba0 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  406b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  406b5e:	b353      	cbz	r3, 406bb6 <spi_cmd_rsp+0xa6>
  406b60:	1e63      	subs	r3, r4, #1
  406b62:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  406b66:	d1f3      	bne.n	406b50 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  406b68:	2601      	movs	r6, #1

_fail_:

	return result;
}
  406b6a:	4630      	mov	r0, r6
  406b6c:	b002      	add	sp, #8
  406b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406b72:	2101      	movs	r1, #1
  406b74:	f10d 0007 	add.w	r0, sp, #7
  406b78:	4b10      	ldr	r3, [pc, #64]	; (406bbc <spi_cmd_rsp+0xac>)
  406b7a:	4798      	blx	r3
  406b7c:	2800      	cmp	r0, #0
  406b7e:	d0d2      	beq.n	406b26 <spi_cmd_rsp+0x16>
			result = N_FAIL;
  406b80:	2600      	movs	r6, #0
  406b82:	e7f2      	b.n	406b6a <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  406b84:	f240 1227 	movw	r2, #295	; 0x127
  406b88:	490d      	ldr	r1, [pc, #52]	; (406bc0 <spi_cmd_rsp+0xb0>)
  406b8a:	480e      	ldr	r0, [pc, #56]	; (406bc4 <spi_cmd_rsp+0xb4>)
  406b8c:	4c0e      	ldr	r4, [pc, #56]	; (406bc8 <spi_cmd_rsp+0xb8>)
  406b8e:	47a0      	blx	r4
  406b90:	480e      	ldr	r0, [pc, #56]	; (406bcc <spi_cmd_rsp+0xbc>)
  406b92:	47a0      	blx	r4
  406b94:	480e      	ldr	r0, [pc, #56]	; (406bd0 <spi_cmd_rsp+0xc0>)
  406b96:	47a0      	blx	r4
			result = N_FAIL;
  406b98:	2600      	movs	r6, #0
			goto _fail_;
  406b9a:	e7e6      	b.n	406b6a <spi_cmd_rsp+0x5a>
  406b9c:	240b      	movs	r4, #11
  406b9e:	e7d5      	b.n	406b4c <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  406ba0:	f240 1235 	movw	r2, #309	; 0x135
  406ba4:	4906      	ldr	r1, [pc, #24]	; (406bc0 <spi_cmd_rsp+0xb0>)
  406ba6:	4807      	ldr	r0, [pc, #28]	; (406bc4 <spi_cmd_rsp+0xb4>)
  406ba8:	4c07      	ldr	r4, [pc, #28]	; (406bc8 <spi_cmd_rsp+0xb8>)
  406baa:	47a0      	blx	r4
  406bac:	4807      	ldr	r0, [pc, #28]	; (406bcc <spi_cmd_rsp+0xbc>)
  406bae:	47a0      	blx	r4
  406bb0:	4807      	ldr	r0, [pc, #28]	; (406bd0 <spi_cmd_rsp+0xc0>)
  406bb2:	47a0      	blx	r4
			goto _fail_;
  406bb4:	e7d9      	b.n	406b6a <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  406bb6:	2601      	movs	r6, #1
  406bb8:	e7d7      	b.n	406b6a <spi_cmd_rsp+0x5a>
  406bba:	bf00      	nop
  406bbc:	00406af1 	.word	0x00406af1
  406bc0:	004111e4 	.word	0x004111e4
  406bc4:	00410c04 	.word	0x00410c04
  406bc8:	004096d1 	.word	0x004096d1
  406bcc:	00411624 	.word	0x00411624
  406bd0:	004118e8 	.word	0x004118e8

00406bd4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  406bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406bd8:	b085      	sub	sp, #20
  406bda:	4683      	mov	fp, r0
  406bdc:	468a      	mov	sl, r1
  406bde:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  406be0:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406be4:	4d37      	ldr	r5, [pc, #220]	; (406cc4 <spi_data_read+0xf0>)
  406be6:	e027      	b.n	406c38 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  406be8:	f240 1257 	movw	r2, #343	; 0x157
  406bec:	4936      	ldr	r1, [pc, #216]	; (406cc8 <spi_data_read+0xf4>)
  406bee:	4837      	ldr	r0, [pc, #220]	; (406ccc <spi_data_read+0xf8>)
  406bf0:	4c37      	ldr	r4, [pc, #220]	; (406cd0 <spi_data_read+0xfc>)
  406bf2:	47a0      	blx	r4
  406bf4:	4837      	ldr	r0, [pc, #220]	; (406cd4 <spi_data_read+0x100>)
  406bf6:	47a0      	blx	r4
  406bf8:	4837      	ldr	r0, [pc, #220]	; (406cd8 <spi_data_read+0x104>)
  406bfa:	47a0      	blx	r4
  406bfc:	2300      	movs	r3, #0
  406bfe:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  406c00:	9801      	ldr	r0, [sp, #4]
  406c02:	b005      	add	sp, #20
  406c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  406c08:	2c00      	cmp	r4, #0
  406c0a:	dd2e      	ble.n	406c6a <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  406c0c:	4641      	mov	r1, r8
  406c0e:	eb0b 0009 	add.w	r0, fp, r9
  406c12:	47a8      	blx	r5
  406c14:	4604      	mov	r4, r0
  406c16:	2800      	cmp	r0, #0
  406c18:	d134      	bne.n	406c84 <spi_data_read+0xb0>
		if(!clockless)
  406c1a:	b91f      	cbnz	r7, 406c24 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  406c1c:	4b2f      	ldr	r3, [pc, #188]	; (406cdc <spi_data_read+0x108>)
  406c1e:	781b      	ldrb	r3, [r3, #0]
  406c20:	2b00      	cmp	r3, #0
  406c22:	d03a      	beq.n	406c9a <spi_data_read+0xc6>
		ix += nbytes;
  406c24:	44c1      	add	r9, r8
  406c26:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  406c2a:	ebaa 0a08 	sub.w	sl, sl, r8
  406c2e:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  406c32:	f1ba 0f00 	cmp.w	sl, #0
  406c36:	d041      	beq.n	406cbc <spi_data_read+0xe8>
  406c38:	46d0      	mov	r8, sl
  406c3a:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  406c3e:	bf28      	it	cs
  406c40:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  406c44:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406c46:	2601      	movs	r6, #1
  406c48:	4631      	mov	r1, r6
  406c4a:	f10d 000b 	add.w	r0, sp, #11
  406c4e:	47a8      	blx	r5
  406c50:	9001      	str	r0, [sp, #4]
  406c52:	2800      	cmp	r0, #0
  406c54:	d1c8      	bne.n	406be8 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  406c56:	f89d 300b 	ldrb.w	r3, [sp, #11]
  406c5a:	091b      	lsrs	r3, r3, #4
  406c5c:	2b0f      	cmp	r3, #15
  406c5e:	d0d3      	beq.n	406c08 <spi_data_read+0x34>
  406c60:	3c01      	subs	r4, #1
  406c62:	b224      	sxth	r4, r4
		} while (retry--);
  406c64:	f1b4 3fff 	cmp.w	r4, #4294967295
  406c68:	d1ee      	bne.n	406c48 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  406c6a:	f240 1263 	movw	r2, #355	; 0x163
  406c6e:	4916      	ldr	r1, [pc, #88]	; (406cc8 <spi_data_read+0xf4>)
  406c70:	4816      	ldr	r0, [pc, #88]	; (406ccc <spi_data_read+0xf8>)
  406c72:	4c17      	ldr	r4, [pc, #92]	; (406cd0 <spi_data_read+0xfc>)
  406c74:	47a0      	blx	r4
  406c76:	f89d 100b 	ldrb.w	r1, [sp, #11]
  406c7a:	4819      	ldr	r0, [pc, #100]	; (406ce0 <spi_data_read+0x10c>)
  406c7c:	47a0      	blx	r4
  406c7e:	4816      	ldr	r0, [pc, #88]	; (406cd8 <spi_data_read+0x104>)
  406c80:	47a0      	blx	r4
			break;
  406c82:	e7bd      	b.n	406c00 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  406c84:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  406c88:	490f      	ldr	r1, [pc, #60]	; (406cc8 <spi_data_read+0xf4>)
  406c8a:	4810      	ldr	r0, [pc, #64]	; (406ccc <spi_data_read+0xf8>)
  406c8c:	4c10      	ldr	r4, [pc, #64]	; (406cd0 <spi_data_read+0xfc>)
  406c8e:	47a0      	blx	r4
  406c90:	4814      	ldr	r0, [pc, #80]	; (406ce4 <spi_data_read+0x110>)
  406c92:	47a0      	blx	r4
  406c94:	4810      	ldr	r0, [pc, #64]	; (406cd8 <spi_data_read+0x104>)
  406c96:	47a0      	blx	r4
			break;
  406c98:	e7b2      	b.n	406c00 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  406c9a:	2102      	movs	r1, #2
  406c9c:	a803      	add	r0, sp, #12
  406c9e:	47a8      	blx	r5
  406ca0:	2800      	cmp	r0, #0
  406ca2:	d0bf      	beq.n	406c24 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  406ca4:	f240 1277 	movw	r2, #375	; 0x177
  406ca8:	4907      	ldr	r1, [pc, #28]	; (406cc8 <spi_data_read+0xf4>)
  406caa:	4808      	ldr	r0, [pc, #32]	; (406ccc <spi_data_read+0xf8>)
  406cac:	4d08      	ldr	r5, [pc, #32]	; (406cd0 <spi_data_read+0xfc>)
  406cae:	47a8      	blx	r5
  406cb0:	480d      	ldr	r0, [pc, #52]	; (406ce8 <spi_data_read+0x114>)
  406cb2:	47a8      	blx	r5
  406cb4:	4808      	ldr	r0, [pc, #32]	; (406cd8 <spi_data_read+0x104>)
  406cb6:	47a8      	blx	r5
					result = N_FAIL;
  406cb8:	9401      	str	r4, [sp, #4]
					break;
  406cba:	e7a1      	b.n	406c00 <spi_data_read+0x2c>
  406cbc:	2301      	movs	r3, #1
  406cbe:	9301      	str	r3, [sp, #4]
  406cc0:	e79e      	b.n	406c00 <spi_data_read+0x2c>
  406cc2:	bf00      	nop
  406cc4:	00406af1 	.word	0x00406af1
  406cc8:	004111f0 	.word	0x004111f0
  406ccc:	00410c04 	.word	0x00410c04
  406cd0:	004096d1 	.word	0x004096d1
  406cd4:	00411658 	.word	0x00411658
  406cd8:	004118e8 	.word	0x004118e8
  406cdc:	2040c3f0 	.word	0x2040c3f0
  406ce0:	0041168c 	.word	0x0041168c
  406ce4:	004116bc 	.word	0x004116bc
  406ce8:	004116f0 	.word	0x004116f0

00406cec <nmi_spi_write>:
{
  406cec:	b500      	push	{lr}
  406cee:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  406cf0:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  406cf2:	2300      	movs	r3, #0
  406cf4:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  406cf6:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  406cfa:	a901      	add	r1, sp, #4
  406cfc:	2003      	movs	r0, #3
  406cfe:	4b02      	ldr	r3, [pc, #8]	; (406d08 <nmi_spi_write+0x1c>)
  406d00:	4798      	blx	r3
}
  406d02:	b005      	add	sp, #20
  406d04:	f85d fb04 	ldr.w	pc, [sp], #4
  406d08:	00405391 	.word	0x00405391

00406d0c <spi_cmd>:
{
  406d0c:	b570      	push	{r4, r5, r6, lr}
  406d0e:	b084      	sub	sp, #16
  406d10:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  406d14:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  406d18:	38c1      	subs	r0, #193	; 0xc1
  406d1a:	280e      	cmp	r0, #14
  406d1c:	f200 80a2 	bhi.w	406e64 <spi_cmd+0x158>
  406d20:	e8df f000 	tbb	[pc, r0]
  406d24:	19664545 	.word	0x19664545
  406d28:	5454332a 	.word	0x5454332a
  406d2c:	a0a0087f 	.word	0xa0a0087f
  406d30:	a0a0      	.short	0xa0a0
  406d32:	3c          	.byte	0x3c
  406d33:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  406d34:	0c0b      	lsrs	r3, r1, #16
  406d36:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  406d3a:	0a0b      	lsrs	r3, r1, #8
  406d3c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  406d40:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  406d44:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  406d46:	4b55      	ldr	r3, [pc, #340]	; (406e9c <spi_cmd+0x190>)
  406d48:	781b      	ldrb	r3, [r3, #0]
  406d4a:	2b00      	cmp	r3, #0
  406d4c:	f000 808c 	beq.w	406e68 <spi_cmd+0x15c>
			len-=1;
  406d50:	3901      	subs	r1, #1
  406d52:	b2c9      	uxtb	r1, r1
  406d54:	e09a      	b.n	406e8c <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  406d56:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  406d5a:	b944      	cbnz	r4, 406d6e <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  406d5c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  406d60:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  406d64:	2300      	movs	r3, #0
  406d66:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  406d6a:	2105      	movs	r1, #5
		break;
  406d6c:	e7eb      	b.n	406d46 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  406d6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406d72:	f88d 3005 	strb.w	r3, [sp, #5]
  406d76:	e7f3      	b.n	406d60 <spi_cmd+0x54>
		bc[1] = 0x00;
  406d78:	2300      	movs	r3, #0
  406d7a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  406d7e:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  406d82:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  406d86:	2105      	movs	r1, #5
		break;
  406d88:	e7dd      	b.n	406d46 <spi_cmd+0x3a>
		bc[1] = 0x00;
  406d8a:	2300      	movs	r3, #0
  406d8c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  406d90:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  406d94:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  406d98:	2105      	movs	r1, #5
		break;
  406d9a:	e7d4      	b.n	406d46 <spi_cmd+0x3a>
		bc[1] = 0xff;
  406d9c:	23ff      	movs	r3, #255	; 0xff
  406d9e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  406da2:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  406da6:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  406daa:	2105      	movs	r1, #5
		break;
  406dac:	e7cb      	b.n	406d46 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  406dae:	0c0a      	lsrs	r2, r1, #16
  406db0:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  406db4:	0a0a      	lsrs	r2, r1, #8
  406db6:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  406dba:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  406dbe:	0a1a      	lsrs	r2, r3, #8
  406dc0:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  406dc4:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  406dc8:	2107      	movs	r1, #7
		break;
  406dca:	e7bc      	b.n	406d46 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  406dcc:	0c0a      	lsrs	r2, r1, #16
  406dce:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  406dd2:	0a0a      	lsrs	r2, r1, #8
  406dd4:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  406dd8:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  406ddc:	0c1a      	lsrs	r2, r3, #16
  406dde:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  406de2:	0a1a      	lsrs	r2, r3, #8
  406de4:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  406de8:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  406dec:	2108      	movs	r1, #8
		break;
  406dee:	e7aa      	b.n	406d46 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  406df0:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  406df4:	b984      	cbnz	r4, 406e18 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  406df6:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  406dfa:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  406dfe:	0e13      	lsrs	r3, r2, #24
  406e00:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  406e04:	0c13      	lsrs	r3, r2, #16
  406e06:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  406e0a:	0a13      	lsrs	r3, r2, #8
  406e0c:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  406e10:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  406e14:	2108      	movs	r1, #8
		break;
  406e16:	e796      	b.n	406d46 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  406e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406e1c:	f88d 3005 	strb.w	r3, [sp, #5]
  406e20:	e7eb      	b.n	406dfa <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  406e22:	0c0b      	lsrs	r3, r1, #16
  406e24:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  406e28:	0a0b      	lsrs	r3, r1, #8
  406e2a:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  406e2e:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  406e32:	0e13      	lsrs	r3, r2, #24
  406e34:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  406e38:	0c13      	lsrs	r3, r2, #16
  406e3a:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  406e3e:	0a13      	lsrs	r3, r2, #8
  406e40:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  406e44:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  406e48:	2109      	movs	r1, #9
		break;
  406e4a:	e77c      	b.n	406d46 <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  406e4c:	f44f 7284 	mov.w	r2, #264	; 0x108
  406e50:	4913      	ldr	r1, [pc, #76]	; (406ea0 <spi_cmd+0x194>)
  406e52:	4814      	ldr	r0, [pc, #80]	; (406ea4 <spi_cmd+0x198>)
  406e54:	4c14      	ldr	r4, [pc, #80]	; (406ea8 <spi_cmd+0x19c>)
  406e56:	47a0      	blx	r4
  406e58:	4814      	ldr	r0, [pc, #80]	; (406eac <spi_cmd+0x1a0>)
  406e5a:	47a0      	blx	r4
  406e5c:	4814      	ldr	r0, [pc, #80]	; (406eb0 <spi_cmd+0x1a4>)
  406e5e:	47a0      	blx	r4
			result = N_FAIL;
  406e60:	2000      	movs	r0, #0
  406e62:	e019      	b.n	406e98 <spi_cmd+0x18c>
	switch (cmd) {
  406e64:	2000      	movs	r0, #0
  406e66:	e017      	b.n	406e98 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  406e68:	1e4e      	subs	r6, r1, #1
  406e6a:	ab01      	add	r3, sp, #4
  406e6c:	199d      	adds	r5, r3, r6
  406e6e:	207f      	movs	r0, #127	; 0x7f
  406e70:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  406e72:	4c10      	ldr	r4, [pc, #64]	; (406eb4 <spi_cmd+0x1a8>)
  406e74:	f812 3b01 	ldrb.w	r3, [r2], #1
  406e78:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  406e7c:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  406e7e:	4295      	cmp	r5, r2
  406e80:	d1f8      	bne.n	406e74 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  406e82:	ab04      	add	r3, sp, #16
  406e84:	441e      	add	r6, r3
  406e86:	0043      	lsls	r3, r0, #1
  406e88:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  406e8c:	a801      	add	r0, sp, #4
  406e8e:	4b0a      	ldr	r3, [pc, #40]	; (406eb8 <spi_cmd+0x1ac>)
  406e90:	4798      	blx	r3
  406e92:	2800      	cmp	r0, #0
  406e94:	d1da      	bne.n	406e4c <spi_cmd+0x140>
  406e96:	2001      	movs	r0, #1
}
  406e98:	b004      	add	sp, #16
  406e9a:	bd70      	pop	{r4, r5, r6, pc}
  406e9c:	2040c3f0 	.word	0x2040c3f0
  406ea0:	004111dc 	.word	0x004111dc
  406ea4:	00410c04 	.word	0x00410c04
  406ea8:	004096d1 	.word	0x004096d1
  406eac:	004115f8 	.word	0x004115f8
  406eb0:	004118e8 	.word	0x004118e8
  406eb4:	00411258 	.word	0x00411258
  406eb8:	00406ced 	.word	0x00406ced

00406ebc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  406ebc:	b570      	push	{r4, r5, r6, lr}
  406ebe:	b082      	sub	sp, #8
  406ec0:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  406ec2:	2831      	cmp	r0, #49	; 0x31
  406ec4:	bf35      	itete	cc
  406ec6:	2301      	movcc	r3, #1
  406ec8:	2300      	movcs	r3, #0
  406eca:	25c3      	movcc	r5, #195	; 0xc3
  406ecc:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  406ece:	9300      	str	r3, [sp, #0]
  406ed0:	2304      	movs	r3, #4
  406ed2:	460a      	mov	r2, r1
  406ed4:	4601      	mov	r1, r0
  406ed6:	4628      	mov	r0, r5
  406ed8:	4e15      	ldr	r6, [pc, #84]	; (406f30 <spi_write_reg+0x74>)
  406eda:	47b0      	blx	r6
	if (result != N_OK) {
  406edc:	2801      	cmp	r0, #1
  406ede:	d00d      	beq.n	406efc <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  406ee0:	f240 12eb 	movw	r2, #491	; 0x1eb
  406ee4:	4913      	ldr	r1, [pc, #76]	; (406f34 <spi_write_reg+0x78>)
  406ee6:	4814      	ldr	r0, [pc, #80]	; (406f38 <spi_write_reg+0x7c>)
  406ee8:	4d14      	ldr	r5, [pc, #80]	; (406f3c <spi_write_reg+0x80>)
  406eea:	47a8      	blx	r5
  406eec:	4621      	mov	r1, r4
  406eee:	4814      	ldr	r0, [pc, #80]	; (406f40 <spi_write_reg+0x84>)
  406ef0:	47a8      	blx	r5
  406ef2:	4814      	ldr	r0, [pc, #80]	; (406f44 <spi_write_reg+0x88>)
  406ef4:	47a8      	blx	r5
		return N_FAIL;
  406ef6:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  406ef8:	b002      	add	sp, #8
  406efa:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  406efc:	4628      	mov	r0, r5
  406efe:	4b12      	ldr	r3, [pc, #72]	; (406f48 <spi_write_reg+0x8c>)
  406f00:	4798      	blx	r3
	if (result != N_OK) {
  406f02:	2801      	cmp	r0, #1
  406f04:	d0f8      	beq.n	406ef8 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  406f06:	f240 12f1 	movw	r2, #497	; 0x1f1
  406f0a:	490a      	ldr	r1, [pc, #40]	; (406f34 <spi_write_reg+0x78>)
  406f0c:	480a      	ldr	r0, [pc, #40]	; (406f38 <spi_write_reg+0x7c>)
  406f0e:	4d0b      	ldr	r5, [pc, #44]	; (406f3c <spi_write_reg+0x80>)
  406f10:	47a8      	blx	r5
  406f12:	4621      	mov	r1, r4
  406f14:	480d      	ldr	r0, [pc, #52]	; (406f4c <spi_write_reg+0x90>)
  406f16:	47a8      	blx	r5
  406f18:	480a      	ldr	r0, [pc, #40]	; (406f44 <spi_write_reg+0x88>)
  406f1a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  406f1c:	2400      	movs	r4, #0
  406f1e:	9400      	str	r4, [sp, #0]
  406f20:	4623      	mov	r3, r4
  406f22:	4622      	mov	r2, r4
  406f24:	4621      	mov	r1, r4
  406f26:	20cf      	movs	r0, #207	; 0xcf
  406f28:	4d01      	ldr	r5, [pc, #4]	; (406f30 <spi_write_reg+0x74>)
  406f2a:	47a8      	blx	r5
		return N_FAIL;
  406f2c:	4620      	mov	r0, r4
  406f2e:	e7e3      	b.n	406ef8 <spi_write_reg+0x3c>
  406f30:	00406d0d 	.word	0x00406d0d
  406f34:	00411210 	.word	0x00411210
  406f38:	00410c04 	.word	0x00410c04
  406f3c:	004096d1 	.word	0x004096d1
  406f40:	004117a8 	.word	0x004117a8
  406f44:	004118e8 	.word	0x004118e8
  406f48:	00406b11 	.word	0x00406b11
  406f4c:	004117d4 	.word	0x004117d4

00406f50 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  406f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f54:	b084      	sub	sp, #16
  406f56:	4604      	mov	r4, r0
  406f58:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  406f5a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  406f5e:	bf35      	itete	cc
  406f60:	2601      	movcc	r6, #1
  406f62:	2600      	movcs	r6, #0
  406f64:	25c4      	movcc	r5, #196	; 0xc4
  406f66:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  406f68:	9600      	str	r6, [sp, #0]
  406f6a:	2304      	movs	r3, #4
  406f6c:	2200      	movs	r2, #0
  406f6e:	4601      	mov	r1, r0
  406f70:	4628      	mov	r0, r5
  406f72:	4f2c      	ldr	r7, [pc, #176]	; (407024 <spi_read_reg+0xd4>)
  406f74:	47b8      	blx	r7
	if (result != N_OK) {
  406f76:	2801      	cmp	r0, #1
  406f78:	d00e      	beq.n	406f98 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  406f7a:	f240 2245 	movw	r2, #581	; 0x245
  406f7e:	492a      	ldr	r1, [pc, #168]	; (407028 <spi_read_reg+0xd8>)
  406f80:	482a      	ldr	r0, [pc, #168]	; (40702c <spi_read_reg+0xdc>)
  406f82:	4d2b      	ldr	r5, [pc, #172]	; (407030 <spi_read_reg+0xe0>)
  406f84:	47a8      	blx	r5
  406f86:	4621      	mov	r1, r4
  406f88:	482a      	ldr	r0, [pc, #168]	; (407034 <spi_read_reg+0xe4>)
  406f8a:	47a8      	blx	r5
  406f8c:	482a      	ldr	r0, [pc, #168]	; (407038 <spi_read_reg+0xe8>)
  406f8e:	47a8      	blx	r5
		return N_FAIL;
  406f90:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  406f92:	b004      	add	sp, #16
  406f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  406f98:	4628      	mov	r0, r5
  406f9a:	4b28      	ldr	r3, [pc, #160]	; (40703c <spi_read_reg+0xec>)
  406f9c:	4798      	blx	r3
	if (result != N_OK) {
  406f9e:	2801      	cmp	r0, #1
  406fa0:	d014      	beq.n	406fcc <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  406fa2:	f240 224b 	movw	r2, #587	; 0x24b
  406fa6:	4920      	ldr	r1, [pc, #128]	; (407028 <spi_read_reg+0xd8>)
  406fa8:	4820      	ldr	r0, [pc, #128]	; (40702c <spi_read_reg+0xdc>)
  406faa:	4d21      	ldr	r5, [pc, #132]	; (407030 <spi_read_reg+0xe0>)
  406fac:	47a8      	blx	r5
  406fae:	4621      	mov	r1, r4
  406fb0:	4823      	ldr	r0, [pc, #140]	; (407040 <spi_read_reg+0xf0>)
  406fb2:	47a8      	blx	r5
  406fb4:	4820      	ldr	r0, [pc, #128]	; (407038 <spi_read_reg+0xe8>)
  406fb6:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  406fb8:	2400      	movs	r4, #0
  406fba:	9400      	str	r4, [sp, #0]
  406fbc:	4623      	mov	r3, r4
  406fbe:	4622      	mov	r2, r4
  406fc0:	4621      	mov	r1, r4
  406fc2:	20cf      	movs	r0, #207	; 0xcf
  406fc4:	4d17      	ldr	r5, [pc, #92]	; (407024 <spi_read_reg+0xd4>)
  406fc6:	47a8      	blx	r5
		return N_FAIL;
  406fc8:	4620      	mov	r0, r4
  406fca:	e7e2      	b.n	406f92 <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  406fcc:	4632      	mov	r2, r6
  406fce:	2104      	movs	r1, #4
  406fd0:	a803      	add	r0, sp, #12
  406fd2:	4b1c      	ldr	r3, [pc, #112]	; (407044 <spi_read_reg+0xf4>)
  406fd4:	4798      	blx	r3
	if (result != N_OK) {
  406fd6:	2801      	cmp	r0, #1
  406fd8:	d110      	bne.n	406ffc <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  406fda:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  406fde:	f89d 300e 	ldrb.w	r3, [sp, #14]
  406fe2:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  406fe4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  406fe8:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  406fec:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  406fee:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  406ff2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  406ff6:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  406ffa:	e7ca      	b.n	406f92 <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  406ffc:	f240 2253 	movw	r2, #595	; 0x253
  407000:	4909      	ldr	r1, [pc, #36]	; (407028 <spi_read_reg+0xd8>)
  407002:	480a      	ldr	r0, [pc, #40]	; (40702c <spi_read_reg+0xdc>)
  407004:	4c0a      	ldr	r4, [pc, #40]	; (407030 <spi_read_reg+0xe0>)
  407006:	47a0      	blx	r4
  407008:	480f      	ldr	r0, [pc, #60]	; (407048 <spi_read_reg+0xf8>)
  40700a:	47a0      	blx	r4
  40700c:	480a      	ldr	r0, [pc, #40]	; (407038 <spi_read_reg+0xe8>)
  40700e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  407010:	2400      	movs	r4, #0
  407012:	9400      	str	r4, [sp, #0]
  407014:	4623      	mov	r3, r4
  407016:	4622      	mov	r2, r4
  407018:	4621      	mov	r1, r4
  40701a:	20cf      	movs	r0, #207	; 0xcf
  40701c:	4d01      	ldr	r5, [pc, #4]	; (407024 <spi_read_reg+0xd4>)
  40701e:	47a8      	blx	r5
		return N_FAIL;
  407020:	4620      	mov	r0, r4
  407022:	e7b6      	b.n	406f92 <spi_read_reg+0x42>
  407024:	00406d0d 	.word	0x00406d0d
  407028:	00411230 	.word	0x00411230
  40702c:	00410c04 	.word	0x00410c04
  407030:	004096d1 	.word	0x004096d1
  407034:	00411728 	.word	0x00411728
  407038:	004118e8 	.word	0x004118e8
  40703c:	00406b11 	.word	0x00406b11
  407040:	00411754 	.word	0x00411754
  407044:	00406bd5 	.word	0x00406bd5
  407048:	00411788 	.word	0x00411788

0040704c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  40704c:	2000      	movs	r0, #0
  40704e:	4b01      	ldr	r3, [pc, #4]	; (407054 <nm_spi_deinit+0x8>)
  407050:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  407052:	4770      	bx	lr
  407054:	2040c3f0 	.word	0x2040c3f0

00407058 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  407058:	b500      	push	{lr}
  40705a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  40705c:	a901      	add	r1, sp, #4
  40705e:	4b03      	ldr	r3, [pc, #12]	; (40706c <nm_spi_read_reg+0x14>)
  407060:	4798      	blx	r3

	return u32Val;
}
  407062:	9801      	ldr	r0, [sp, #4]
  407064:	b003      	add	sp, #12
  407066:	f85d fb04 	ldr.w	pc, [sp], #4
  40706a:	bf00      	nop
  40706c:	00406f51 	.word	0x00406f51

00407070 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  407070:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  407072:	4b04      	ldr	r3, [pc, #16]	; (407084 <nm_spi_read_reg_with_ret+0x14>)
  407074:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  407076:	2801      	cmp	r0, #1

	return s8Ret;
}
  407078:	bf0c      	ite	eq
  40707a:	2000      	moveq	r0, #0
  40707c:	f06f 0005 	mvnne.w	r0, #5
  407080:	bd08      	pop	{r3, pc}
  407082:	bf00      	nop
  407084:	00406f51 	.word	0x00406f51

00407088 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  407088:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  40708a:	4b04      	ldr	r3, [pc, #16]	; (40709c <nm_spi_write_reg+0x14>)
  40708c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40708e:	2801      	cmp	r0, #1

	return s8Ret;
}
  407090:	bf0c      	ite	eq
  407092:	2000      	moveq	r0, #0
  407094:	f06f 0005 	mvnne.w	r0, #5
  407098:	bd08      	pop	{r3, pc}
  40709a:	bf00      	nop
  40709c:	00406ebd 	.word	0x00406ebd

004070a0 <nm_spi_init>:
{
  4070a0:	b530      	push	{r4, r5, lr}
  4070a2:	b083      	sub	sp, #12
	uint32 reg =0;
  4070a4:	2300      	movs	r3, #0
  4070a6:	a902      	add	r1, sp, #8
  4070a8:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  4070ac:	4a34      	ldr	r2, [pc, #208]	; (407180 <nm_spi_init+0xe0>)
  4070ae:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4070b0:	f64e 0024 	movw	r0, #59428	; 0xe824
  4070b4:	4b33      	ldr	r3, [pc, #204]	; (407184 <nm_spi_init+0xe4>)
  4070b6:	4798      	blx	r3
  4070b8:	b348      	cbz	r0, 40710e <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  4070ba:	4b31      	ldr	r3, [pc, #196]	; (407180 <nm_spi_init+0xe0>)
  4070bc:	781b      	ldrb	r3, [r3, #0]
  4070be:	b97b      	cbnz	r3, 4070e0 <nm_spi_init+0x40>
		reg &= ~0x70;
  4070c0:	9900      	ldr	r1, [sp, #0]
  4070c2:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  4070c6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4070ca:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  4070cc:	f64e 0024 	movw	r0, #59428	; 0xe824
  4070d0:	4b2d      	ldr	r3, [pc, #180]	; (407188 <nm_spi_init+0xe8>)
  4070d2:	4798      	blx	r3
  4070d4:	4604      	mov	r4, r0
  4070d6:	2800      	cmp	r0, #0
  4070d8:	d039      	beq.n	40714e <nm_spi_init+0xae>
		gu8Crc_off = 1;
  4070da:	2201      	movs	r2, #1
  4070dc:	4b28      	ldr	r3, [pc, #160]	; (407180 <nm_spi_init+0xe0>)
  4070de:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  4070e0:	a901      	add	r1, sp, #4
  4070e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4070e6:	4b27      	ldr	r3, [pc, #156]	; (407184 <nm_spi_init+0xe4>)
  4070e8:	4798      	blx	r3
  4070ea:	2800      	cmp	r0, #0
  4070ec:	d03a      	beq.n	407164 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  4070ee:	f64e 0024 	movw	r0, #59428	; 0xe824
  4070f2:	4b26      	ldr	r3, [pc, #152]	; (40718c <nm_spi_init+0xec>)
  4070f4:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  4070f6:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  4070fa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4070fe:	f64e 0024 	movw	r0, #59428	; 0xe824
  407102:	4b23      	ldr	r3, [pc, #140]	; (407190 <nm_spi_init+0xf0>)
  407104:	4798      	blx	r3
	return M2M_SUCCESS;
  407106:	2400      	movs	r4, #0
}
  407108:	4620      	mov	r0, r4
  40710a:	b003      	add	sp, #12
  40710c:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  40710e:	2201      	movs	r2, #1
  407110:	4b1b      	ldr	r3, [pc, #108]	; (407180 <nm_spi_init+0xe0>)
  407112:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  407114:	f240 22c5 	movw	r2, #709	; 0x2c5
  407118:	491e      	ldr	r1, [pc, #120]	; (407194 <nm_spi_init+0xf4>)
  40711a:	481f      	ldr	r0, [pc, #124]	; (407198 <nm_spi_init+0xf8>)
  40711c:	4c1f      	ldr	r4, [pc, #124]	; (40719c <nm_spi_init+0xfc>)
  40711e:	47a0      	blx	r4
  407120:	481f      	ldr	r0, [pc, #124]	; (4071a0 <nm_spi_init+0x100>)
  407122:	47a0      	blx	r4
  407124:	481f      	ldr	r0, [pc, #124]	; (4071a4 <nm_spi_init+0x104>)
  407126:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  407128:	4669      	mov	r1, sp
  40712a:	f64e 0024 	movw	r0, #59428	; 0xe824
  40712e:	4b15      	ldr	r3, [pc, #84]	; (407184 <nm_spi_init+0xe4>)
  407130:	4798      	blx	r3
  407132:	4604      	mov	r4, r0
  407134:	2800      	cmp	r0, #0
  407136:	d1c0      	bne.n	4070ba <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  407138:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  40713c:	4915      	ldr	r1, [pc, #84]	; (407194 <nm_spi_init+0xf4>)
  40713e:	4816      	ldr	r0, [pc, #88]	; (407198 <nm_spi_init+0xf8>)
  407140:	4d16      	ldr	r5, [pc, #88]	; (40719c <nm_spi_init+0xfc>)
  407142:	47a8      	blx	r5
  407144:	4818      	ldr	r0, [pc, #96]	; (4071a8 <nm_spi_init+0x108>)
  407146:	47a8      	blx	r5
  407148:	4816      	ldr	r0, [pc, #88]	; (4071a4 <nm_spi_init+0x104>)
  40714a:	47a8      	blx	r5
			return 0;
  40714c:	e7dc      	b.n	407108 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  40714e:	f240 22d2 	movw	r2, #722	; 0x2d2
  407152:	4910      	ldr	r1, [pc, #64]	; (407194 <nm_spi_init+0xf4>)
  407154:	4810      	ldr	r0, [pc, #64]	; (407198 <nm_spi_init+0xf8>)
  407156:	4d11      	ldr	r5, [pc, #68]	; (40719c <nm_spi_init+0xfc>)
  407158:	47a8      	blx	r5
  40715a:	4814      	ldr	r0, [pc, #80]	; (4071ac <nm_spi_init+0x10c>)
  40715c:	47a8      	blx	r5
  40715e:	4811      	ldr	r0, [pc, #68]	; (4071a4 <nm_spi_init+0x104>)
  407160:	47a8      	blx	r5
			return 0;
  407162:	e7d1      	b.n	407108 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  407164:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  407168:	490a      	ldr	r1, [pc, #40]	; (407194 <nm_spi_init+0xf4>)
  40716a:	480b      	ldr	r0, [pc, #44]	; (407198 <nm_spi_init+0xf8>)
  40716c:	4c0b      	ldr	r4, [pc, #44]	; (40719c <nm_spi_init+0xfc>)
  40716e:	47a0      	blx	r4
  407170:	480f      	ldr	r0, [pc, #60]	; (4071b0 <nm_spi_init+0x110>)
  407172:	47a0      	blx	r4
  407174:	480b      	ldr	r0, [pc, #44]	; (4071a4 <nm_spi_init+0x104>)
  407176:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  407178:	f06f 0405 	mvn.w	r4, #5
  40717c:	e7c4      	b.n	407108 <nm_spi_init+0x68>
  40717e:	bf00      	nop
  407180:	2040c3f0 	.word	0x2040c3f0
  407184:	00406f51 	.word	0x00406f51
  407188:	00406ebd 	.word	0x00406ebd
  40718c:	00407059 	.word	0x00407059
  407190:	00407089 	.word	0x00407089
  407194:	0041124c 	.word	0x0041124c
  407198:	00410c04 	.word	0x00410c04
  40719c:	004096d1 	.word	0x004096d1
  4071a0:	00411358 	.word	0x00411358
  4071a4:	004118e8 	.word	0x004118e8
  4071a8:	004113a8 	.word	0x004113a8
  4071ac:	004113d8 	.word	0x004113d8
  4071b0:	0041140c 	.word	0x0041140c

004071b4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4071b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4071b6:	b083      	sub	sp, #12
  4071b8:	4604      	mov	r4, r0
  4071ba:	460f      	mov	r7, r1
  4071bc:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4071be:	2200      	movs	r2, #0
  4071c0:	9200      	str	r2, [sp, #0]
  4071c2:	462b      	mov	r3, r5
  4071c4:	4601      	mov	r1, r0
  4071c6:	20c8      	movs	r0, #200	; 0xc8
  4071c8:	4e22      	ldr	r6, [pc, #136]	; (407254 <nm_spi_read_block+0xa0>)
  4071ca:	47b0      	blx	r6
	if (result != N_OK) {
  4071cc:	2801      	cmp	r0, #1
  4071ce:	d00e      	beq.n	4071ee <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4071d0:	f44f 721d 	mov.w	r2, #628	; 0x274
  4071d4:	4920      	ldr	r1, [pc, #128]	; (407258 <nm_spi_read_block+0xa4>)
  4071d6:	4821      	ldr	r0, [pc, #132]	; (40725c <nm_spi_read_block+0xa8>)
  4071d8:	4d21      	ldr	r5, [pc, #132]	; (407260 <nm_spi_read_block+0xac>)
  4071da:	47a8      	blx	r5
  4071dc:	4621      	mov	r1, r4
  4071de:	4821      	ldr	r0, [pc, #132]	; (407264 <nm_spi_read_block+0xb0>)
  4071e0:	47a8      	blx	r5
  4071e2:	4821      	ldr	r0, [pc, #132]	; (407268 <nm_spi_read_block+0xb4>)
  4071e4:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4071e6:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4071ea:	b003      	add	sp, #12
  4071ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  4071ee:	20c8      	movs	r0, #200	; 0xc8
  4071f0:	4b1e      	ldr	r3, [pc, #120]	; (40726c <nm_spi_read_block+0xb8>)
  4071f2:	4798      	blx	r3
	if (result != N_OK) {
  4071f4:	2801      	cmp	r0, #1
  4071f6:	d012      	beq.n	40721e <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  4071f8:	f240 227a 	movw	r2, #634	; 0x27a
  4071fc:	4916      	ldr	r1, [pc, #88]	; (407258 <nm_spi_read_block+0xa4>)
  4071fe:	4817      	ldr	r0, [pc, #92]	; (40725c <nm_spi_read_block+0xa8>)
  407200:	4d17      	ldr	r5, [pc, #92]	; (407260 <nm_spi_read_block+0xac>)
  407202:	47a8      	blx	r5
  407204:	4621      	mov	r1, r4
  407206:	481a      	ldr	r0, [pc, #104]	; (407270 <nm_spi_read_block+0xbc>)
  407208:	47a8      	blx	r5
  40720a:	4817      	ldr	r0, [pc, #92]	; (407268 <nm_spi_read_block+0xb4>)
  40720c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40720e:	2100      	movs	r1, #0
  407210:	9100      	str	r1, [sp, #0]
  407212:	460b      	mov	r3, r1
  407214:	460a      	mov	r2, r1
  407216:	20cf      	movs	r0, #207	; 0xcf
  407218:	4c0e      	ldr	r4, [pc, #56]	; (407254 <nm_spi_read_block+0xa0>)
  40721a:	47a0      	blx	r4
  40721c:	e7e3      	b.n	4071e6 <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  40721e:	2200      	movs	r2, #0
  407220:	4629      	mov	r1, r5
  407222:	4638      	mov	r0, r7
  407224:	4b13      	ldr	r3, [pc, #76]	; (407274 <nm_spi_read_block+0xc0>)
  407226:	4798      	blx	r3
	if (result != N_OK) {
  407228:	2801      	cmp	r0, #1
  40722a:	d011      	beq.n	407250 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  40722c:	f44f 7221 	mov.w	r2, #644	; 0x284
  407230:	4909      	ldr	r1, [pc, #36]	; (407258 <nm_spi_read_block+0xa4>)
  407232:	480a      	ldr	r0, [pc, #40]	; (40725c <nm_spi_read_block+0xa8>)
  407234:	4c0a      	ldr	r4, [pc, #40]	; (407260 <nm_spi_read_block+0xac>)
  407236:	47a0      	blx	r4
  407238:	480f      	ldr	r0, [pc, #60]	; (407278 <nm_spi_read_block+0xc4>)
  40723a:	47a0      	blx	r4
  40723c:	480a      	ldr	r0, [pc, #40]	; (407268 <nm_spi_read_block+0xb4>)
  40723e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  407240:	2100      	movs	r1, #0
  407242:	9100      	str	r1, [sp, #0]
  407244:	460b      	mov	r3, r1
  407246:	460a      	mov	r2, r1
  407248:	20cf      	movs	r0, #207	; 0xcf
  40724a:	4c02      	ldr	r4, [pc, #8]	; (407254 <nm_spi_read_block+0xa0>)
  40724c:	47a0      	blx	r4
  40724e:	e7ca      	b.n	4071e6 <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  407250:	2000      	movs	r0, #0
  407252:	e7ca      	b.n	4071ea <nm_spi_read_block+0x36>
  407254:	00406d0d 	.word	0x00406d0d
  407258:	00411240 	.word	0x00411240
  40725c:	00410c04 	.word	0x00410c04
  407260:	004096d1 	.word	0x004096d1
  407264:	00411434 	.word	0x00411434
  407268:	004118e8 	.word	0x004118e8
  40726c:	00406b11 	.word	0x00406b11
  407270:	00411464 	.word	0x00411464
  407274:	00406bd5 	.word	0x00406bd5
  407278:	0041149c 	.word	0x0041149c

0040727c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40727c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407280:	b085      	sub	sp, #20
  407282:	4604      	mov	r4, r0
  407284:	4688      	mov	r8, r1
  407286:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  407288:	2200      	movs	r2, #0
  40728a:	9200      	str	r2, [sp, #0]
  40728c:	462b      	mov	r3, r5
  40728e:	4601      	mov	r1, r0
  407290:	20c7      	movs	r0, #199	; 0xc7
  407292:	4e4d      	ldr	r6, [pc, #308]	; (4073c8 <nm_spi_write_block+0x14c>)
  407294:	47b0      	blx	r6
	if (result != N_OK) {
  407296:	2801      	cmp	r0, #1
  407298:	d00f      	beq.n	4072ba <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  40729a:	f240 220f 	movw	r2, #527	; 0x20f
  40729e:	494b      	ldr	r1, [pc, #300]	; (4073cc <nm_spi_write_block+0x150>)
  4072a0:	484b      	ldr	r0, [pc, #300]	; (4073d0 <nm_spi_write_block+0x154>)
  4072a2:	4d4c      	ldr	r5, [pc, #304]	; (4073d4 <nm_spi_write_block+0x158>)
  4072a4:	47a8      	blx	r5
  4072a6:	4621      	mov	r1, r4
  4072a8:	484b      	ldr	r0, [pc, #300]	; (4073d8 <nm_spi_write_block+0x15c>)
  4072aa:	47a8      	blx	r5
  4072ac:	484b      	ldr	r0, [pc, #300]	; (4073dc <nm_spi_write_block+0x160>)
  4072ae:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4072b0:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4072b4:	b005      	add	sp, #20
  4072b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  4072ba:	20c7      	movs	r0, #199	; 0xc7
  4072bc:	4b48      	ldr	r3, [pc, #288]	; (4073e0 <nm_spi_write_block+0x164>)
  4072be:	4798      	blx	r3
	if (result != N_OK) {
  4072c0:	2801      	cmp	r0, #1
  4072c2:	d012      	beq.n	4072ea <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4072c4:	f240 2215 	movw	r2, #533	; 0x215
  4072c8:	4940      	ldr	r1, [pc, #256]	; (4073cc <nm_spi_write_block+0x150>)
  4072ca:	4841      	ldr	r0, [pc, #260]	; (4073d0 <nm_spi_write_block+0x154>)
  4072cc:	4d41      	ldr	r5, [pc, #260]	; (4073d4 <nm_spi_write_block+0x158>)
  4072ce:	47a8      	blx	r5
  4072d0:	4621      	mov	r1, r4
  4072d2:	4844      	ldr	r0, [pc, #272]	; (4073e4 <nm_spi_write_block+0x168>)
  4072d4:	47a8      	blx	r5
  4072d6:	4841      	ldr	r0, [pc, #260]	; (4073dc <nm_spi_write_block+0x160>)
  4072d8:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4072da:	2100      	movs	r1, #0
  4072dc:	9100      	str	r1, [sp, #0]
  4072de:	460b      	mov	r3, r1
  4072e0:	460a      	mov	r2, r1
  4072e2:	20cf      	movs	r0, #207	; 0xcf
  4072e4:	4c38      	ldr	r4, [pc, #224]	; (4073c8 <nm_spi_write_block+0x14c>)
  4072e6:	47a0      	blx	r4
  4072e8:	e7e2      	b.n	4072b0 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  4072ea:	2400      	movs	r4, #0
  4072ec:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4072f0:	4f3d      	ldr	r7, [pc, #244]	; (4073e8 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  4072f2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 407400 <nm_spi_write_block+0x184>
  4072f6:	e01d      	b.n	407334 <nm_spi_write_block+0xb8>
				order = 0x2;
  4072f8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4072fc:	bf94      	ite	ls
  4072fe:	2303      	movls	r3, #3
  407300:	2302      	movhi	r3, #2
		cmd |= order;
  407302:	f063 030f 	orn	r3, r3, #15
  407306:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  40730a:	2101      	movs	r1, #1
  40730c:	f10d 000b 	add.w	r0, sp, #11
  407310:	47b8      	blx	r7
  407312:	b9e8      	cbnz	r0, 407350 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  407314:	4631      	mov	r1, r6
  407316:	eb08 0004 	add.w	r0, r8, r4
  40731a:	47b8      	blx	r7
  40731c:	2800      	cmp	r0, #0
  40731e:	d135      	bne.n	40738c <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  407320:	f899 3000 	ldrb.w	r3, [r9]
  407324:	2b00      	cmp	r3, #0
  407326:	d03c      	beq.n	4073a2 <nm_spi_write_block+0x126>
		ix += nbytes;
  407328:	4434      	add	r4, r6
  40732a:	b224      	sxth	r4, r4
		sz -= nbytes;
  40732c:	1bad      	subs	r5, r5, r6
  40732e:	b2ad      	uxth	r5, r5
	} while (sz);
  407330:	2d00      	cmp	r5, #0
  407332:	d046      	beq.n	4073c2 <nm_spi_write_block+0x146>
  407334:	462e      	mov	r6, r5
  407336:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40733a:	bf28      	it	cs
  40733c:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  407340:	2c00      	cmp	r4, #0
  407342:	d1d9      	bne.n	4072f8 <nm_spi_write_block+0x7c>
				order = 0x1;
  407344:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  407348:	bf94      	ite	ls
  40734a:	2303      	movls	r3, #3
  40734c:	2301      	movhi	r3, #1
  40734e:	e7d8      	b.n	407302 <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  407350:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  407354:	4925      	ldr	r1, [pc, #148]	; (4073ec <nm_spi_write_block+0x170>)
  407356:	481e      	ldr	r0, [pc, #120]	; (4073d0 <nm_spi_write_block+0x154>)
  407358:	4c1e      	ldr	r4, [pc, #120]	; (4073d4 <nm_spi_write_block+0x158>)
  40735a:	47a0      	blx	r4
  40735c:	4824      	ldr	r0, [pc, #144]	; (4073f0 <nm_spi_write_block+0x174>)
  40735e:	47a0      	blx	r4
  407360:	481e      	ldr	r0, [pc, #120]	; (4073dc <nm_spi_write_block+0x160>)
  407362:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  407364:	f240 2226 	movw	r2, #550	; 0x226
  407368:	4918      	ldr	r1, [pc, #96]	; (4073cc <nm_spi_write_block+0x150>)
  40736a:	4819      	ldr	r0, [pc, #100]	; (4073d0 <nm_spi_write_block+0x154>)
  40736c:	4c19      	ldr	r4, [pc, #100]	; (4073d4 <nm_spi_write_block+0x158>)
  40736e:	47a0      	blx	r4
  407370:	4820      	ldr	r0, [pc, #128]	; (4073f4 <nm_spi_write_block+0x178>)
  407372:	47a0      	blx	r4
  407374:	4819      	ldr	r0, [pc, #100]	; (4073dc <nm_spi_write_block+0x160>)
  407376:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  407378:	2400      	movs	r4, #0
  40737a:	9400      	str	r4, [sp, #0]
  40737c:	4623      	mov	r3, r4
  40737e:	4622      	mov	r2, r4
  407380:	4621      	mov	r1, r4
  407382:	20cf      	movs	r0, #207	; 0xcf
  407384:	4d10      	ldr	r5, [pc, #64]	; (4073c8 <nm_spi_write_block+0x14c>)
  407386:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  407388:	4620      	mov	r0, r4
  40738a:	e793      	b.n	4072b4 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  40738c:	f240 12b1 	movw	r2, #433	; 0x1b1
  407390:	4916      	ldr	r1, [pc, #88]	; (4073ec <nm_spi_write_block+0x170>)
  407392:	480f      	ldr	r0, [pc, #60]	; (4073d0 <nm_spi_write_block+0x154>)
  407394:	4c0f      	ldr	r4, [pc, #60]	; (4073d4 <nm_spi_write_block+0x158>)
  407396:	47a0      	blx	r4
  407398:	4817      	ldr	r0, [pc, #92]	; (4073f8 <nm_spi_write_block+0x17c>)
  40739a:	47a0      	blx	r4
  40739c:	480f      	ldr	r0, [pc, #60]	; (4073dc <nm_spi_write_block+0x160>)
  40739e:	47a0      	blx	r4
  4073a0:	e7e0      	b.n	407364 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4073a2:	2102      	movs	r1, #2
  4073a4:	a803      	add	r0, sp, #12
  4073a6:	47b8      	blx	r7
  4073a8:	2800      	cmp	r0, #0
  4073aa:	d0bd      	beq.n	407328 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  4073ac:	f240 12bb 	movw	r2, #443	; 0x1bb
  4073b0:	490e      	ldr	r1, [pc, #56]	; (4073ec <nm_spi_write_block+0x170>)
  4073b2:	4807      	ldr	r0, [pc, #28]	; (4073d0 <nm_spi_write_block+0x154>)
  4073b4:	4c07      	ldr	r4, [pc, #28]	; (4073d4 <nm_spi_write_block+0x158>)
  4073b6:	47a0      	blx	r4
  4073b8:	4810      	ldr	r0, [pc, #64]	; (4073fc <nm_spi_write_block+0x180>)
  4073ba:	47a0      	blx	r4
  4073bc:	4807      	ldr	r0, [pc, #28]	; (4073dc <nm_spi_write_block+0x160>)
  4073be:	47a0      	blx	r4
  4073c0:	e7d0      	b.n	407364 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4073c2:	2000      	movs	r0, #0
  4073c4:	e776      	b.n	4072b4 <nm_spi_write_block+0x38>
  4073c6:	bf00      	nop
  4073c8:	00406d0d 	.word	0x00406d0d
  4073cc:	00411220 	.word	0x00411220
  4073d0:	00410c04 	.word	0x00410c04
  4073d4:	004096d1 	.word	0x004096d1
  4073d8:	004114c4 	.word	0x004114c4
  4073dc:	004118e8 	.word	0x004118e8
  4073e0:	00406b11 	.word	0x00406b11
  4073e4:	004114f4 	.word	0x004114f4
  4073e8:	00406ced 	.word	0x00406ced
  4073ec:	00411200 	.word	0x00411200
  4073f0:	0041152c 	.word	0x0041152c
  4073f4:	004115d0 	.word	0x004115d0
  4073f8:	00411564 	.word	0x00411564
  4073fc:	00411598 	.word	0x00411598
  407400:	2040c3f0 	.word	0x2040c3f0

00407404 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  407404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407408:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  40740c:	b194      	cbz	r4, 407434 <Socket_ReadSocketData+0x30>
  40740e:	4681      	mov	r9, r0
  407410:	460e      	mov	r6, r1
  407412:	4692      	mov	sl, r2
  407414:	4698      	mov	r8, r3
  407416:	0103      	lsls	r3, r0, #4
  407418:	4922      	ldr	r1, [pc, #136]	; (4074a4 <Socket_ReadSocketData+0xa0>)
  40741a:	58cb      	ldr	r3, [r1, r3]
  40741c:	b153      	cbz	r3, 407434 <Socket_ReadSocketData+0x30>
  40741e:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  407422:	889b      	ldrh	r3, [r3, #4]
  407424:	b29b      	uxth	r3, r3
  407426:	b12b      	cbz	r3, 407434 <Socket_ReadSocketData+0x30>
  407428:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40742c:	7a9b      	ldrb	r3, [r3, #10]
  40742e:	b2db      	uxtb	r3, r3
  407430:	2b01      	cmp	r3, #1
  407432:	d001      	beq.n	407438 <Socket_ReadSocketData+0x34>
  407434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  407438:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  40743a:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  40743e:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4074bc <Socket_ReadSocketData+0xb8>
  407442:	e006      	b.n	407452 <Socket_ReadSocketData+0x4e>
  407444:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  407446:	2301      	movs	r3, #1
  407448:	e00b      	b.n	407462 <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  40744a:	1b64      	subs	r4, r4, r5
  40744c:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  40744e:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  407450:	b1ec      	cbz	r4, 40748e <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  407452:	88bb      	ldrh	r3, [r7, #4]
  407454:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  407456:	b21b      	sxth	r3, r3
  407458:	2b00      	cmp	r3, #0
  40745a:	ddf3      	ble.n	407444 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  40745c:	88bd      	ldrh	r5, [r7, #4]
  40745e:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  407460:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  407462:	6839      	ldr	r1, [r7, #0]
  407464:	462a      	mov	r2, r5
  407466:	4640      	mov	r0, r8
  407468:	47d8      	blx	fp
  40746a:	b990      	cbnz	r0, 407492 <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  40746c:	683b      	ldr	r3, [r7, #0]
  40746e:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  407470:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  407472:	88f3      	ldrh	r3, [r6, #6]
  407474:	1b5b      	subs	r3, r3, r5
  407476:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  407478:	4b0b      	ldr	r3, [pc, #44]	; (4074a8 <Socket_ReadSocketData+0xa4>)
  40747a:	681b      	ldr	r3, [r3, #0]
  40747c:	2b00      	cmp	r3, #0
  40747e:	d0e4      	beq.n	40744a <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  407480:	4b09      	ldr	r3, [pc, #36]	; (4074a8 <Socket_ReadSocketData+0xa4>)
  407482:	681b      	ldr	r3, [r3, #0]
  407484:	4632      	mov	r2, r6
  407486:	4651      	mov	r1, sl
  407488:	4648      	mov	r0, r9
  40748a:	4798      	blx	r3
  40748c:	e7dd      	b.n	40744a <Socket_ReadSocketData+0x46>
  40748e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  407492:	4806      	ldr	r0, [pc, #24]	; (4074ac <Socket_ReadSocketData+0xa8>)
  407494:	4d06      	ldr	r5, [pc, #24]	; (4074b0 <Socket_ReadSocketData+0xac>)
  407496:	47a8      	blx	r5
  407498:	4621      	mov	r1, r4
  40749a:	4806      	ldr	r0, [pc, #24]	; (4074b4 <Socket_ReadSocketData+0xb0>)
  40749c:	47a8      	blx	r5
  40749e:	4806      	ldr	r0, [pc, #24]	; (4074b8 <Socket_ReadSocketData+0xb4>)
  4074a0:	47a8      	blx	r5
	}
}
  4074a2:	e7c7      	b.n	407434 <Socket_ReadSocketData+0x30>
  4074a4:	2040ca98 	.word	0x2040ca98
  4074a8:	2040cb48 	.word	0x2040cb48
  4074ac:	00410ed4 	.word	0x00410ed4
  4074b0:	004096d1 	.word	0x004096d1
  4074b4:	0041180c 	.word	0x0041180c
  4074b8:	004118e8 	.word	0x004118e8
  4074bc:	00405b0d 	.word	0x00405b0d

004074c0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  4074c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4074c2:	b099      	sub	sp, #100	; 0x64
  4074c4:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  4074c6:	2841      	cmp	r0, #65	; 0x41
  4074c8:	d049      	beq.n	40755e <m2m_ip_cb+0x9e>
  4074ca:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  4074cc:	2842      	cmp	r0, #66	; 0x42
  4074ce:	d05f      	beq.n	407590 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  4074d0:	2843      	cmp	r0, #67	; 0x43
  4074d2:	d075      	beq.n	4075c0 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  4074d4:	2844      	cmp	r0, #68	; 0x44
  4074d6:	f000 80b0 	beq.w	40763a <m2m_ip_cb+0x17a>
  4074da:	284b      	cmp	r0, #75	; 0x4b
  4074dc:	f000 80ad 	beq.w	40763a <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  4074e0:	284a      	cmp	r0, #74	; 0x4a
  4074e2:	f000 80cc 	beq.w	40767e <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  4074e6:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  4074ea:	b2db      	uxtb	r3, r3
  4074ec:	2b07      	cmp	r3, #7
  4074ee:	f200 80f4 	bhi.w	4076da <m2m_ip_cb+0x21a>
  4074f2:	2285      	movs	r2, #133	; 0x85
  4074f4:	fa22 f303 	lsr.w	r3, r2, r3
  4074f8:	f013 0f01 	tst.w	r3, #1
  4074fc:	f000 80ed 	beq.w	4076da <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  407500:	2848      	cmp	r0, #72	; 0x48
  407502:	bf14      	ite	ne
  407504:	2706      	movne	r7, #6
  407506:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  407508:	2300      	movs	r3, #0
  40750a:	2210      	movs	r2, #16
  40750c:	a903      	add	r1, sp, #12
  40750e:	4620      	mov	r0, r4
  407510:	4e93      	ldr	r6, [pc, #588]	; (407760 <m2m_ip_cb+0x2a0>)
  407512:	47b0      	blx	r6
  407514:	2800      	cmp	r0, #0
  407516:	f040 80b0 	bne.w	40767a <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  40751a:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  40751e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  407522:	4a90      	ldr	r2, [pc, #576]	; (407764 <m2m_ip_cb+0x2a4>)
  407524:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  407528:	2300      	movs	r3, #0
  40752a:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  40752c:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  407530:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  407534:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  407538:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  40753c:	9e04      	ldr	r6, [sp, #16]
  40753e:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  407540:	88d2      	ldrh	r2, [r2, #6]
  407542:	b292      	uxth	r2, r2
  407544:	4291      	cmp	r1, r2
  407546:	f000 80ac 	beq.w	4076a2 <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  40754a:	2d10      	cmp	r5, #16
  40754c:	f240 8095 	bls.w	40767a <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  407550:	2301      	movs	r3, #1
  407552:	2200      	movs	r2, #0
  407554:	4611      	mov	r1, r2
  407556:	4610      	mov	r0, r2
  407558:	4c81      	ldr	r4, [pc, #516]	; (407760 <m2m_ip_cb+0x2a0>)
  40755a:	47a0      	blx	r4
	{
  40755c:	e08d      	b.n	40767a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  40755e:	2300      	movs	r3, #0
  407560:	2204      	movs	r2, #4
  407562:	a907      	add	r1, sp, #28
  407564:	4620      	mov	r0, r4
  407566:	4c7e      	ldr	r4, [pc, #504]	; (407760 <m2m_ip_cb+0x2a0>)
  407568:	47a0      	blx	r4
  40756a:	2800      	cmp	r0, #0
  40756c:	f040 8085 	bne.w	40767a <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  407570:	f89d 301d 	ldrb.w	r3, [sp, #29]
  407574:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  407578:	4b7b      	ldr	r3, [pc, #492]	; (407768 <m2m_ip_cb+0x2a8>)
  40757a:	681b      	ldr	r3, [r3, #0]
  40757c:	2b00      	cmp	r3, #0
  40757e:	d07c      	beq.n	40767a <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  407580:	4b79      	ldr	r3, [pc, #484]	; (407768 <m2m_ip_cb+0x2a8>)
  407582:	681b      	ldr	r3, [r3, #0]
  407584:	aa03      	add	r2, sp, #12
  407586:	2101      	movs	r1, #1
  407588:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40758c:	4798      	blx	r3
  40758e:	e074      	b.n	40767a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  407590:	2300      	movs	r3, #0
  407592:	2204      	movs	r2, #4
  407594:	a907      	add	r1, sp, #28
  407596:	4620      	mov	r0, r4
  407598:	4c71      	ldr	r4, [pc, #452]	; (407760 <m2m_ip_cb+0x2a0>)
  40759a:	47a0      	blx	r4
  40759c:	2800      	cmp	r0, #0
  40759e:	d16c      	bne.n	40767a <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  4075a0:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4075a4:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4075a8:	4b6f      	ldr	r3, [pc, #444]	; (407768 <m2m_ip_cb+0x2a8>)
  4075aa:	681b      	ldr	r3, [r3, #0]
  4075ac:	2b00      	cmp	r3, #0
  4075ae:	d064      	beq.n	40767a <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  4075b0:	4b6d      	ldr	r3, [pc, #436]	; (407768 <m2m_ip_cb+0x2a8>)
  4075b2:	681b      	ldr	r3, [r3, #0]
  4075b4:	aa03      	add	r2, sp, #12
  4075b6:	2102      	movs	r1, #2
  4075b8:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4075bc:	4798      	blx	r3
  4075be:	e05c      	b.n	40767a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  4075c0:	2300      	movs	r3, #0
  4075c2:	220c      	movs	r2, #12
  4075c4:	eb0d 0102 	add.w	r1, sp, r2
  4075c8:	4620      	mov	r0, r4
  4075ca:	4c65      	ldr	r4, [pc, #404]	; (407760 <m2m_ip_cb+0x2a0>)
  4075cc:	47a0      	blx	r4
  4075ce:	2800      	cmp	r0, #0
  4075d0:	d153      	bne.n	40767a <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  4075d2:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  4075d6:	2b00      	cmp	r3, #0
  4075d8:	db19      	blt.n	40760e <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  4075da:	4a62      	ldr	r2, [pc, #392]	; (407764 <m2m_ip_cb+0x2a4>)
  4075dc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4075e0:	2100      	movs	r1, #0
  4075e2:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  4075e4:	2101      	movs	r1, #1
  4075e6:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  4075e8:	4960      	ldr	r1, [pc, #384]	; (40776c <m2m_ip_cb+0x2ac>)
  4075ea:	880a      	ldrh	r2, [r1, #0]
  4075ec:	3201      	adds	r2, #1
  4075ee:	b292      	uxth	r2, r2
  4075f0:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  4075f2:	880a      	ldrh	r2, [r1, #0]
  4075f4:	b292      	uxth	r2, r2
  4075f6:	b91a      	cbnz	r2, 407600 <m2m_ip_cb+0x140>
					++gu16SessionID;
  4075f8:	880a      	ldrh	r2, [r1, #0]
  4075fa:	3201      	adds	r2, #1
  4075fc:	b292      	uxth	r2, r2
  4075fe:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  407600:	4a5a      	ldr	r2, [pc, #360]	; (40776c <m2m_ip_cb+0x2ac>)
  407602:	8811      	ldrh	r1, [r2, #0]
  407604:	b289      	uxth	r1, r1
  407606:	4a57      	ldr	r2, [pc, #348]	; (407764 <m2m_ip_cb+0x2a4>)
  407608:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  40760c:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  40760e:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  407612:	2302      	movs	r3, #2
  407614:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  407618:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  40761c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  407620:	9b04      	ldr	r3, [sp, #16]
  407622:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  407624:	4b50      	ldr	r3, [pc, #320]	; (407768 <m2m_ip_cb+0x2a8>)
  407626:	681b      	ldr	r3, [r3, #0]
  407628:	b33b      	cbz	r3, 40767a <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  40762a:	4b4f      	ldr	r3, [pc, #316]	; (407768 <m2m_ip_cb+0x2a8>)
  40762c:	681b      	ldr	r3, [r3, #0]
  40762e:	aa07      	add	r2, sp, #28
  407630:	2104      	movs	r1, #4
  407632:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  407636:	4798      	blx	r3
  407638:	e01f      	b.n	40767a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  40763a:	2300      	movs	r3, #0
  40763c:	2204      	movs	r2, #4
  40763e:	a907      	add	r1, sp, #28
  407640:	4620      	mov	r0, r4
  407642:	4c47      	ldr	r4, [pc, #284]	; (407760 <m2m_ip_cb+0x2a0>)
  407644:	47a0      	blx	r4
  407646:	b9c0      	cbnz	r0, 40767a <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  407648:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40764c:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  407650:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  407654:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  407658:	b93b      	cbnz	r3, 40766a <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  40765a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40765e:	3b08      	subs	r3, #8
  407660:	b29b      	uxth	r3, r3
  407662:	4a40      	ldr	r2, [pc, #256]	; (407764 <m2m_ip_cb+0x2a4>)
  407664:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  407668:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  40766a:	4b3f      	ldr	r3, [pc, #252]	; (407768 <m2m_ip_cb+0x2a8>)
  40766c:	681b      	ldr	r3, [r3, #0]
  40766e:	b123      	cbz	r3, 40767a <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  407670:	4b3d      	ldr	r3, [pc, #244]	; (407768 <m2m_ip_cb+0x2a8>)
  407672:	681b      	ldr	r3, [r3, #0]
  407674:	aa03      	add	r2, sp, #12
  407676:	2105      	movs	r1, #5
  407678:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  40767a:	b019      	add	sp, #100	; 0x64
  40767c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  40767e:	2300      	movs	r3, #0
  407680:	2244      	movs	r2, #68	; 0x44
  407682:	a907      	add	r1, sp, #28
  407684:	4620      	mov	r0, r4
  407686:	4c36      	ldr	r4, [pc, #216]	; (407760 <m2m_ip_cb+0x2a0>)
  407688:	47a0      	blx	r4
  40768a:	2800      	cmp	r0, #0
  40768c:	d1f5      	bne.n	40767a <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  40768e:	4b38      	ldr	r3, [pc, #224]	; (407770 <m2m_ip_cb+0x2b0>)
  407690:	681b      	ldr	r3, [r3, #0]
  407692:	2b00      	cmp	r3, #0
  407694:	d0f1      	beq.n	40767a <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  407696:	4b36      	ldr	r3, [pc, #216]	; (407770 <m2m_ip_cb+0x2b0>)
  407698:	681b      	ldr	r3, [r3, #0]
  40769a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40769c:	a807      	add	r0, sp, #28
  40769e:	4798      	blx	r3
  4076a0:	e7eb      	b.n	40767a <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  4076a2:	f1be 0f00 	cmp.w	lr, #0
  4076a6:	dd01      	ble.n	4076ac <m2m_ip_cb+0x1ec>
  4076a8:	45ae      	cmp	lr, r5
  4076aa:	db0d      	blt.n	4076c8 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  4076ac:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  4076b0:	2300      	movs	r3, #0
  4076b2:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  4076b4:	4b2c      	ldr	r3, [pc, #176]	; (407768 <m2m_ip_cb+0x2a8>)
  4076b6:	681b      	ldr	r3, [r3, #0]
  4076b8:	2b00      	cmp	r3, #0
  4076ba:	d0de      	beq.n	40767a <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  4076bc:	4b2a      	ldr	r3, [pc, #168]	; (407768 <m2m_ip_cb+0x2a8>)
  4076be:	681b      	ldr	r3, [r3, #0]
  4076c0:	aa07      	add	r2, sp, #28
  4076c2:	4639      	mov	r1, r7
  4076c4:	4798      	blx	r3
  4076c6:	e7d8      	b.n	40767a <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  4076c8:	fa1f f28e 	uxth.w	r2, lr
  4076cc:	9200      	str	r2, [sp, #0]
  4076ce:	4423      	add	r3, r4
  4076d0:	463a      	mov	r2, r7
  4076d2:	a907      	add	r1, sp, #28
  4076d4:	4c27      	ldr	r4, [pc, #156]	; (407774 <m2m_ip_cb+0x2b4>)
  4076d6:	47a0      	blx	r4
  4076d8:	e7cf      	b.n	40767a <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  4076da:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  4076de:	2b45      	cmp	r3, #69	; 0x45
  4076e0:	d019      	beq.n	407716 <m2m_ip_cb+0x256>
  4076e2:	284c      	cmp	r0, #76	; 0x4c
  4076e4:	d017      	beq.n	407716 <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  4076e6:	2852      	cmp	r0, #82	; 0x52
  4076e8:	d1c7      	bne.n	40767a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  4076ea:	2301      	movs	r3, #1
  4076ec:	2214      	movs	r2, #20
  4076ee:	a907      	add	r1, sp, #28
  4076f0:	4620      	mov	r0, r4
  4076f2:	4c1b      	ldr	r4, [pc, #108]	; (407760 <m2m_ip_cb+0x2a0>)
  4076f4:	47a0      	blx	r4
  4076f6:	2800      	cmp	r0, #0
  4076f8:	d1bf      	bne.n	40767a <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  4076fa:	4b1f      	ldr	r3, [pc, #124]	; (407778 <m2m_ip_cb+0x2b8>)
  4076fc:	9a08      	ldr	r2, [sp, #32]
  4076fe:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  407700:	681b      	ldr	r3, [r3, #0]
  407702:	2b00      	cmp	r3, #0
  407704:	d0b9      	beq.n	40767a <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  407706:	4b1c      	ldr	r3, [pc, #112]	; (407778 <m2m_ip_cb+0x2b8>)
  407708:	681b      	ldr	r3, [r3, #0]
  40770a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  40770e:	9909      	ldr	r1, [sp, #36]	; 0x24
  407710:	9807      	ldr	r0, [sp, #28]
  407712:	4798      	blx	r3
}
  407714:	e7b1      	b.n	40767a <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  407716:	2847      	cmp	r0, #71	; 0x47
  407718:	bf14      	ite	ne
  40771a:	2507      	movne	r5, #7
  40771c:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  40771e:	2300      	movs	r3, #0
  407720:	2208      	movs	r2, #8
  407722:	a907      	add	r1, sp, #28
  407724:	4620      	mov	r0, r4
  407726:	4c0e      	ldr	r4, [pc, #56]	; (407760 <m2m_ip_cb+0x2a0>)
  407728:	47a0      	blx	r4
  40772a:	2800      	cmp	r0, #0
  40772c:	d1a5      	bne.n	40767a <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  40772e:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  407732:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  407736:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40773a:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  40773e:	4b09      	ldr	r3, [pc, #36]	; (407764 <m2m_ip_cb+0x2a4>)
  407740:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  407744:	88db      	ldrh	r3, [r3, #6]
  407746:	b29b      	uxth	r3, r3
  407748:	429a      	cmp	r2, r3
  40774a:	d196      	bne.n	40767a <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  40774c:	4b06      	ldr	r3, [pc, #24]	; (407768 <m2m_ip_cb+0x2a8>)
  40774e:	681b      	ldr	r3, [r3, #0]
  407750:	2b00      	cmp	r3, #0
  407752:	d092      	beq.n	40767a <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  407754:	4b04      	ldr	r3, [pc, #16]	; (407768 <m2m_ip_cb+0x2a8>)
  407756:	681b      	ldr	r3, [r3, #0]
  407758:	aa03      	add	r2, sp, #12
  40775a:	4629      	mov	r1, r5
  40775c:	4798      	blx	r3
	{
  40775e:	e78c      	b.n	40767a <m2m_ip_cb+0x1ba>
  407760:	00405b0d 	.word	0x00405b0d
  407764:	2040ca98 	.word	0x2040ca98
  407768:	2040cb48 	.word	0x2040cb48
  40776c:	2040c3f2 	.word	0x2040c3f2
  407770:	2040cb50 	.word	0x2040cb50
  407774:	00407405 	.word	0x00407405
  407778:	2040cb4c 	.word	0x2040cb4c

0040777c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  40777c:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  40777e:	4b0a      	ldr	r3, [pc, #40]	; (4077a8 <socketInit+0x2c>)
  407780:	781b      	ldrb	r3, [r3, #0]
  407782:	b103      	cbz	r3, 407786 <socketInit+0xa>
  407784:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  407786:	22b0      	movs	r2, #176	; 0xb0
  407788:	2100      	movs	r1, #0
  40778a:	4808      	ldr	r0, [pc, #32]	; (4077ac <socketInit+0x30>)
  40778c:	4b08      	ldr	r3, [pc, #32]	; (4077b0 <socketInit+0x34>)
  40778e:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  407790:	4908      	ldr	r1, [pc, #32]	; (4077b4 <socketInit+0x38>)
  407792:	2002      	movs	r0, #2
  407794:	4b08      	ldr	r3, [pc, #32]	; (4077b8 <socketInit+0x3c>)
  407796:	4798      	blx	r3
		gbSocketInit=1;
  407798:	2201      	movs	r2, #1
  40779a:	4b03      	ldr	r3, [pc, #12]	; (4077a8 <socketInit+0x2c>)
  40779c:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  40779e:	2200      	movs	r2, #0
  4077a0:	4b06      	ldr	r3, [pc, #24]	; (4077bc <socketInit+0x40>)
  4077a2:	801a      	strh	r2, [r3, #0]
	}
}
  4077a4:	e7ee      	b.n	407784 <socketInit+0x8>
  4077a6:	bf00      	nop
  4077a8:	2040c3f1 	.word	0x2040c3f1
  4077ac:	2040ca98 	.word	0x2040ca98
  4077b0:	004054b9 	.word	0x004054b9
  4077b4:	004074c1 	.word	0x004074c1
  4077b8:	00405c21 	.word	0x00405c21
  4077bc:	2040c3f2 	.word	0x2040c3f2

004077c0 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  4077c0:	4b02      	ldr	r3, [pc, #8]	; (4077cc <registerSocketCallback+0xc>)
  4077c2:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  4077c4:	4b02      	ldr	r3, [pc, #8]	; (4077d0 <registerSocketCallback+0x10>)
  4077c6:	6019      	str	r1, [r3, #0]
  4077c8:	4770      	bx	lr
  4077ca:	bf00      	nop
  4077cc:	2040cb48 	.word	0x2040cb48
  4077d0:	2040cb50 	.word	0x2040cb50

004077d4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  4077d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4077d6:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  4077d8:	2802      	cmp	r0, #2
  4077da:	d158      	bne.n	40788e <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  4077dc:	2901      	cmp	r1, #1
  4077de:	d059      	beq.n	407894 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  4077e0:	2902      	cmp	r1, #2
  4077e2:	d116      	bne.n	407812 <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  4077e4:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  4077e6:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4077e8:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  4077ea:	4b2e      	ldr	r3, [pc, #184]	; (4078a4 <socket+0xd0>)
  4077ec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4077f0:	7a9b      	ldrb	r3, [r3, #10]
  4077f2:	2b00      	cmp	r3, #0
  4077f4:	d051      	beq.n	40789a <socket+0xc6>
  4077f6:	1c63      	adds	r3, r4, #1
  4077f8:	b2db      	uxtb	r3, r3
  4077fa:	4f2a      	ldr	r7, [pc, #168]	; (4078a4 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  4077fc:	b2dc      	uxtb	r4, r3
  4077fe:	42b4      	cmp	r4, r6
  407800:	d240      	bcs.n	407884 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  407802:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  407804:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  407808:	7a89      	ldrb	r1, [r1, #10]
  40780a:	1c58      	adds	r0, r3, #1
  40780c:	b121      	cbz	r1, 407818 <socket+0x44>
  40780e:	4603      	mov	r3, r0
  407810:	e7f4      	b.n	4077fc <socket+0x28>
			return sock;
  407812:	f04f 34ff 	mov.w	r4, #4294967295
  407816:	e037      	b.n	407888 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  407818:	4822      	ldr	r0, [pc, #136]	; (4078a4 <socket+0xd0>)
  40781a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  40781e:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  407820:	2210      	movs	r2, #16
  407822:	2100      	movs	r1, #0
  407824:	4b20      	ldr	r3, [pc, #128]	; (4078a8 <socket+0xd4>)
  407826:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  407828:	4b1e      	ldr	r3, [pc, #120]	; (4078a4 <socket+0xd0>)
  40782a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40782e:	2201      	movs	r2, #1
  407830:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  407832:	4a1e      	ldr	r2, [pc, #120]	; (4078ac <socket+0xd8>)
  407834:	8813      	ldrh	r3, [r2, #0]
  407836:	3301      	adds	r3, #1
  407838:	b29b      	uxth	r3, r3
  40783a:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  40783c:	8813      	ldrh	r3, [r2, #0]
  40783e:	b29b      	uxth	r3, r3
  407840:	b91b      	cbnz	r3, 40784a <socket+0x76>
					++gu16SessionID;
  407842:	8813      	ldrh	r3, [r2, #0]
  407844:	3301      	adds	r3, #1
  407846:	b29b      	uxth	r3, r3
  407848:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  40784a:	4b18      	ldr	r3, [pc, #96]	; (4078ac <socket+0xd8>)
  40784c:	881a      	ldrh	r2, [r3, #0]
  40784e:	b292      	uxth	r2, r2
  407850:	4b14      	ldr	r3, [pc, #80]	; (4078a4 <socket+0xd0>)
  407852:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  407856:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  407858:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  40785a:	f016 0f01 	tst.w	r6, #1
  40785e:	d013      	beq.n	407888 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  407860:	aa06      	add	r2, sp, #24
  407862:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  407866:	4b0f      	ldr	r3, [pc, #60]	; (4078a4 <socket+0xd0>)
  407868:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  40786c:	2321      	movs	r3, #33	; 0x21
  40786e:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  407870:	2300      	movs	r3, #0
  407872:	9302      	str	r3, [sp, #8]
  407874:	9301      	str	r3, [sp, #4]
  407876:	9300      	str	r3, [sp, #0]
  407878:	2304      	movs	r3, #4
  40787a:	2150      	movs	r1, #80	; 0x50
  40787c:	2002      	movs	r0, #2
  40787e:	4d0c      	ldr	r5, [pc, #48]	; (4078b0 <socket+0xdc>)
  407880:	47a8      	blx	r5
  407882:	e001      	b.n	407888 <socket+0xb4>
	SOCKET		sock = -1;
  407884:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  407888:	4620      	mov	r0, r4
  40788a:	b007      	add	sp, #28
  40788c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  40788e:	f04f 34ff 	mov.w	r4, #4294967295
  407892:	e7f9      	b.n	407888 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  407894:	2607      	movs	r6, #7
			u8Count = 0;
  407896:	2400      	movs	r4, #0
  407898:	e7a6      	b.n	4077e8 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  40789a:	4802      	ldr	r0, [pc, #8]	; (4078a4 <socket+0xd0>)
  40789c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4078a0:	e7bd      	b.n	40781e <socket+0x4a>
  4078a2:	bf00      	nop
  4078a4:	2040ca98 	.word	0x2040ca98
  4078a8:	004054b9 	.word	0x004054b9
  4078ac:	2040c3f2 	.word	0x2040c3f2
  4078b0:	0040561d 	.word	0x0040561d

004078b4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  4078b4:	b530      	push	{r4, r5, lr}
  4078b6:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  4078b8:	1e04      	subs	r4, r0, #0
  4078ba:	db36      	blt.n	40792a <connect+0x76>
  4078bc:	2900      	cmp	r1, #0
  4078be:	d034      	beq.n	40792a <connect+0x76>
  4078c0:	4b1d      	ldr	r3, [pc, #116]	; (407938 <connect+0x84>)
  4078c2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4078c6:	7a9b      	ldrb	r3, [r3, #10]
  4078c8:	b2db      	uxtb	r3, r3
  4078ca:	2a00      	cmp	r2, #0
  4078cc:	d030      	beq.n	407930 <connect+0x7c>
  4078ce:	2b01      	cmp	r3, #1
  4078d0:	d12e      	bne.n	407930 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  4078d2:	4b19      	ldr	r3, [pc, #100]	; (407938 <connect+0x84>)
  4078d4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4078d8:	7adb      	ldrb	r3, [r3, #11]
  4078da:	f013 0f01 	tst.w	r3, #1
  4078de:	d022      	beq.n	407926 <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  4078e0:	4b15      	ldr	r3, [pc, #84]	; (407938 <connect+0x84>)
  4078e2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4078e6:	7adb      	ldrb	r3, [r3, #11]
  4078e8:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  4078ec:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  4078ee:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  4078f2:	2208      	movs	r2, #8
  4078f4:	a805      	add	r0, sp, #20
  4078f6:	4b11      	ldr	r3, [pc, #68]	; (40793c <connect+0x88>)
  4078f8:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  4078fa:	480f      	ldr	r0, [pc, #60]	; (407938 <connect+0x84>)
  4078fc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  407900:	88c3      	ldrh	r3, [r0, #6]
  407902:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  407906:	2300      	movs	r3, #0
  407908:	9302      	str	r3, [sp, #8]
  40790a:	9301      	str	r3, [sp, #4]
  40790c:	9300      	str	r3, [sp, #0]
  40790e:	230c      	movs	r3, #12
  407910:	aa05      	add	r2, sp, #20
  407912:	4629      	mov	r1, r5
  407914:	2002      	movs	r0, #2
  407916:	4c0a      	ldr	r4, [pc, #40]	; (407940 <connect+0x8c>)
  407918:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  40791a:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  40791c:	bf18      	it	ne
  40791e:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  407922:	b009      	add	sp, #36	; 0x24
  407924:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  407926:	2544      	movs	r5, #68	; 0x44
  407928:	e7e1      	b.n	4078ee <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40792a:	f06f 0005 	mvn.w	r0, #5
  40792e:	e7f8      	b.n	407922 <connect+0x6e>
  407930:	f06f 0005 	mvn.w	r0, #5
  407934:	e7f5      	b.n	407922 <connect+0x6e>
  407936:	bf00      	nop
  407938:	2040ca98 	.word	0x2040ca98
  40793c:	004054a5 	.word	0x004054a5
  407940:	0040561d 	.word	0x0040561d

00407944 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  407944:	b530      	push	{r4, r5, lr}
  407946:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  407948:	460c      	mov	r4, r1
  40794a:	3100      	adds	r1, #0
  40794c:	bf18      	it	ne
  40794e:	2101      	movne	r1, #1
  407950:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  407954:	bf88      	it	hi
  407956:	2100      	movhi	r1, #0
  407958:	2900      	cmp	r1, #0
  40795a:	d037      	beq.n	4079cc <send+0x88>
  40795c:	2800      	cmp	r0, #0
  40795e:	db35      	blt.n	4079cc <send+0x88>
  407960:	4b1d      	ldr	r3, [pc, #116]	; (4079d8 <send+0x94>)
  407962:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  407966:	7a9b      	ldrb	r3, [r3, #10]
  407968:	b2db      	uxtb	r3, r3
  40796a:	2b01      	cmp	r3, #1
  40796c:	d131      	bne.n	4079d2 <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  40796e:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  407972:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  407976:	4b18      	ldr	r3, [pc, #96]	; (4079d8 <send+0x94>)
  407978:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40797c:	88db      	ldrh	r3, [r3, #6]
  40797e:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  407982:	2807      	cmp	r0, #7
  407984:	bfb4      	ite	lt
  407986:	2550      	movlt	r5, #80	; 0x50
  407988:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40798a:	4b13      	ldr	r3, [pc, #76]	; (4079d8 <send+0x94>)
  40798c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  407990:	7adb      	ldrb	r3, [r3, #11]
  407992:	f013 0f01 	tst.w	r3, #1
  407996:	d017      	beq.n	4079c8 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  407998:	4b0f      	ldr	r3, [pc, #60]	; (4079d8 <send+0x94>)
  40799a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  40799e:	8905      	ldrh	r5, [r0, #8]
  4079a0:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  4079a2:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  4079a4:	9502      	str	r5, [sp, #8]
  4079a6:	9201      	str	r2, [sp, #4]
  4079a8:	9400      	str	r4, [sp, #0]
  4079aa:	2310      	movs	r3, #16
  4079ac:	eb0d 0203 	add.w	r2, sp, r3
  4079b0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4079b4:	2002      	movs	r0, #2
  4079b6:	4c09      	ldr	r4, [pc, #36]	; (4079dc <send+0x98>)
  4079b8:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  4079ba:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  4079bc:	bf0c      	ite	eq
  4079be:	2000      	moveq	r0, #0
  4079c0:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  4079c4:	b009      	add	sp, #36	; 0x24
  4079c6:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  4079c8:	2145      	movs	r1, #69	; 0x45
  4079ca:	e7eb      	b.n	4079a4 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4079cc:	f06f 0005 	mvn.w	r0, #5
  4079d0:	e7f8      	b.n	4079c4 <send+0x80>
  4079d2:	f06f 0005 	mvn.w	r0, #5
  4079d6:	e7f5      	b.n	4079c4 <send+0x80>
  4079d8:	2040ca98 	.word	0x2040ca98
  4079dc:	0040561d 	.word	0x0040561d

004079e0 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4079e0:	2900      	cmp	r1, #0
  4079e2:	bf18      	it	ne
  4079e4:	2a00      	cmpne	r2, #0
  4079e6:	d044      	beq.n	407a72 <recv+0x92>
{
  4079e8:	b570      	push	{r4, r5, r6, lr}
  4079ea:	b086      	sub	sp, #24
  4079ec:	460e      	mov	r6, r1
  4079ee:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4079f0:	2800      	cmp	r0, #0
  4079f2:	db36      	blt.n	407a62 <recv+0x82>
  4079f4:	4a20      	ldr	r2, [pc, #128]	; (407a78 <recv+0x98>)
  4079f6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4079fa:	7a92      	ldrb	r2, [r2, #10]
  4079fc:	b2d2      	uxtb	r2, r2
  4079fe:	2a01      	cmp	r2, #1
  407a00:	d132      	bne.n	407a68 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  407a02:	4c1d      	ldr	r4, [pc, #116]	; (407a78 <recv+0x98>)
  407a04:	0101      	lsls	r1, r0, #4
  407a06:	1862      	adds	r2, r4, r1
  407a08:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  407a0a:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  407a0c:	7b12      	ldrb	r2, [r2, #12]
  407a0e:	2a00      	cmp	r2, #0
  407a10:	d12d      	bne.n	407a6e <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  407a12:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  407a16:	2101      	movs	r1, #1
  407a18:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  407a1a:	7ad2      	ldrb	r2, [r2, #11]
  407a1c:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  407a1e:	2a00      	cmp	r2, #0
  407a20:	bf0c      	ite	eq
  407a22:	2146      	moveq	r1, #70	; 0x46
  407a24:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  407a26:	b9d3      	cbnz	r3, 407a5e <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  407a28:	f04f 33ff 	mov.w	r3, #4294967295
  407a2c:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  407a2e:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  407a32:	4b11      	ldr	r3, [pc, #68]	; (407a78 <recv+0x98>)
  407a34:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  407a38:	88c3      	ldrh	r3, [r0, #6]
  407a3a:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  407a3e:	2300      	movs	r3, #0
  407a40:	9302      	str	r3, [sp, #8]
  407a42:	9301      	str	r3, [sp, #4]
  407a44:	9300      	str	r3, [sp, #0]
  407a46:	2308      	movs	r3, #8
  407a48:	aa04      	add	r2, sp, #16
  407a4a:	2002      	movs	r0, #2
  407a4c:	4c0b      	ldr	r4, [pc, #44]	; (407a7c <recv+0x9c>)
  407a4e:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  407a50:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  407a52:	bf0c      	ite	eq
  407a54:	2000      	moveq	r0, #0
  407a56:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  407a5a:	b006      	add	sp, #24
  407a5c:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  407a5e:	9304      	str	r3, [sp, #16]
  407a60:	e7e5      	b.n	407a2e <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  407a62:	f06f 0005 	mvn.w	r0, #5
  407a66:	e7f8      	b.n	407a5a <recv+0x7a>
  407a68:	f06f 0005 	mvn.w	r0, #5
  407a6c:	e7f5      	b.n	407a5a <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  407a6e:	2000      	movs	r0, #0
  407a70:	e7f3      	b.n	407a5a <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  407a72:	f06f 0005 	mvn.w	r0, #5
}
  407a76:	4770      	bx	lr
  407a78:	2040ca98 	.word	0x2040ca98
  407a7c:	0040561d 	.word	0x0040561d

00407a80 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  407a80:	b530      	push	{r4, r5, lr}
  407a82:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  407a84:	1e04      	subs	r4, r0, #0
  407a86:	db2f      	blt.n	407ae8 <close+0x68>
  407a88:	4b1a      	ldr	r3, [pc, #104]	; (407af4 <close+0x74>)
  407a8a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  407a8e:	7a9b      	ldrb	r3, [r3, #10]
  407a90:	b2db      	uxtb	r3, r3
  407a92:	2b01      	cmp	r3, #1
  407a94:	d12b      	bne.n	407aee <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  407a96:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  407a9a:	4b16      	ldr	r3, [pc, #88]	; (407af4 <close+0x74>)
  407a9c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  407aa0:	88da      	ldrh	r2, [r3, #6]
  407aa2:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  407aa6:	2200      	movs	r2, #0
  407aa8:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  407aaa:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  407aac:	7adb      	ldrb	r3, [r3, #11]
  407aae:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  407ab2:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  407ab4:	9202      	str	r2, [sp, #8]
  407ab6:	9201      	str	r2, [sp, #4]
  407ab8:	9200      	str	r2, [sp, #0]
  407aba:	f04f 0304 	mov.w	r3, #4
  407abe:	aa05      	add	r2, sp, #20
  407ac0:	bf0c      	ite	eq
  407ac2:	2149      	moveq	r1, #73	; 0x49
  407ac4:	214e      	movne	r1, #78	; 0x4e
  407ac6:	2002      	movs	r0, #2
  407ac8:	4d0b      	ldr	r5, [pc, #44]	; (407af8 <close+0x78>)
  407aca:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  407acc:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  407ace:	bf18      	it	ne
  407ad0:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  407ad4:	2210      	movs	r2, #16
  407ad6:	2100      	movs	r1, #0
  407ad8:	4806      	ldr	r0, [pc, #24]	; (407af4 <close+0x74>)
  407ada:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  407ade:	4b07      	ldr	r3, [pc, #28]	; (407afc <close+0x7c>)
  407ae0:	4798      	blx	r3
	}
	return s8Ret;
}
  407ae2:	4628      	mov	r0, r5
  407ae4:	b007      	add	sp, #28
  407ae6:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  407ae8:	f06f 0505 	mvn.w	r5, #5
  407aec:	e7f9      	b.n	407ae2 <close+0x62>
  407aee:	f06f 0505 	mvn.w	r5, #5
  407af2:	e7f6      	b.n	407ae2 <close+0x62>
  407af4:	2040ca98 	.word	0x2040ca98
  407af8:	0040561d 	.word	0x0040561d
  407afc:	004054b9 	.word	0x004054b9

00407b00 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
  407b00:	b510      	push	{r4, lr}
  407b02:	b084      	sub	sp, #16
  407b04:	4604      	mov	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
  407b06:	4b0c      	ldr	r3, [pc, #48]	; (407b38 <gethostbyname+0x38>)
  407b08:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
  407b0a:	b2c3      	uxtb	r3, r0
  407b0c:	2b40      	cmp	r3, #64	; 0x40
  407b0e:	d80f      	bhi.n	407b30 <gethostbyname+0x30>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
  407b10:	2200      	movs	r2, #0
  407b12:	9202      	str	r2, [sp, #8]
  407b14:	9201      	str	r2, [sp, #4]
  407b16:	9200      	str	r2, [sp, #0]
  407b18:	3301      	adds	r3, #1
  407b1a:	4622      	mov	r2, r4
  407b1c:	21ca      	movs	r1, #202	; 0xca
  407b1e:	2002      	movs	r0, #2
  407b20:	4c06      	ldr	r4, [pc, #24]	; (407b3c <gethostbyname+0x3c>)
  407b22:	47a0      	blx	r4
		if(s8Err != SOCK_ERR_NO_ERROR)
  407b24:	2800      	cmp	r0, #0
		{
			s8Err = SOCK_ERR_INVALID;
  407b26:	bf18      	it	ne
  407b28:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Err;
}
  407b2c:	b004      	add	sp, #16
  407b2e:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
  407b30:	f06f 0005 	mvn.w	r0, #5
  407b34:	e7fa      	b.n	407b2c <gethostbyname+0x2c>
  407b36:	bf00      	nop
  407b38:	004054c7 	.word	0x004054c7
  407b3c:	0040561d 	.word	0x0040561d

00407b40 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  407b40:	b570      	push	{r4, r5, r6, lr}
  407b42:	b082      	sub	sp, #8
  407b44:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  407b46:	4b2b      	ldr	r3, [pc, #172]	; (407bf4 <spi_flash_enable+0xb4>)
  407b48:	4798      	blx	r3
  407b4a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  407b4e:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  407b52:	d203      	bcs.n	407b5c <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  407b54:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  407b56:	4620      	mov	r0, r4
  407b58:	b002      	add	sp, #8
  407b5a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  407b5c:	a901      	add	r1, sp, #4
  407b5e:	f241 4010 	movw	r0, #5136	; 0x1410
  407b62:	4b25      	ldr	r3, [pc, #148]	; (407bf8 <spi_flash_enable+0xb8>)
  407b64:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  407b66:	4604      	mov	r4, r0
  407b68:	2800      	cmp	r0, #0
  407b6a:	d1f4      	bne.n	407b56 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  407b6c:	4b23      	ldr	r3, [pc, #140]	; (407bfc <spi_flash_enable+0xbc>)
  407b6e:	9a01      	ldr	r2, [sp, #4]
  407b70:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  407b72:	4923      	ldr	r1, [pc, #140]	; (407c00 <spi_flash_enable+0xc0>)
  407b74:	4319      	orrs	r1, r3
  407b76:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  407b78:	f241 4010 	movw	r0, #5136	; 0x1410
  407b7c:	4b21      	ldr	r3, [pc, #132]	; (407c04 <spi_flash_enable+0xc4>)
  407b7e:	4798      	blx	r3
		if(enable) {
  407b80:	b305      	cbz	r5, 407bc4 <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  407b82:	2100      	movs	r1, #0
  407b84:	4820      	ldr	r0, [pc, #128]	; (407c08 <spi_flash_enable+0xc8>)
  407b86:	4d1f      	ldr	r5, [pc, #124]	; (407c04 <spi_flash_enable+0xc4>)
  407b88:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  407b8a:	21ab      	movs	r1, #171	; 0xab
  407b8c:	481f      	ldr	r0, [pc, #124]	; (407c0c <spi_flash_enable+0xcc>)
  407b8e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  407b90:	2101      	movs	r1, #1
  407b92:	481f      	ldr	r0, [pc, #124]	; (407c10 <spi_flash_enable+0xd0>)
  407b94:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  407b96:	2100      	movs	r1, #0
  407b98:	481e      	ldr	r0, [pc, #120]	; (407c14 <spi_flash_enable+0xd4>)
  407b9a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  407b9c:	2181      	movs	r1, #129	; 0x81
  407b9e:	481e      	ldr	r0, [pc, #120]	; (407c18 <spi_flash_enable+0xd8>)
  407ba0:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  407ba2:	4e1e      	ldr	r6, [pc, #120]	; (407c1c <spi_flash_enable+0xdc>)
  407ba4:	4d1e      	ldr	r5, [pc, #120]	; (407c20 <spi_flash_enable+0xe0>)
  407ba6:	4630      	mov	r0, r6
  407ba8:	47a8      	blx	r5
  407baa:	2801      	cmp	r0, #1
  407bac:	d1fb      	bne.n	407ba6 <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  407bae:	4913      	ldr	r1, [pc, #76]	; (407bfc <spi_flash_enable+0xbc>)
  407bb0:	9b01      	ldr	r3, [sp, #4]
  407bb2:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  407bb4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  407bb8:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  407bba:	f241 4010 	movw	r0, #5136	; 0x1410
  407bbe:	4b11      	ldr	r3, [pc, #68]	; (407c04 <spi_flash_enable+0xc4>)
  407bc0:	4798      	blx	r3
  407bc2:	e7c8      	b.n	407b56 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  407bc4:	2100      	movs	r1, #0
  407bc6:	4810      	ldr	r0, [pc, #64]	; (407c08 <spi_flash_enable+0xc8>)
  407bc8:	4d0e      	ldr	r5, [pc, #56]	; (407c04 <spi_flash_enable+0xc4>)
  407bca:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  407bcc:	21b9      	movs	r1, #185	; 0xb9
  407bce:	480f      	ldr	r0, [pc, #60]	; (407c0c <spi_flash_enable+0xcc>)
  407bd0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  407bd2:	2101      	movs	r1, #1
  407bd4:	480e      	ldr	r0, [pc, #56]	; (407c10 <spi_flash_enable+0xd0>)
  407bd6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  407bd8:	2100      	movs	r1, #0
  407bda:	480e      	ldr	r0, [pc, #56]	; (407c14 <spi_flash_enable+0xd4>)
  407bdc:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  407bde:	2181      	movs	r1, #129	; 0x81
  407be0:	480d      	ldr	r0, [pc, #52]	; (407c18 <spi_flash_enable+0xd8>)
  407be2:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  407be4:	4e0d      	ldr	r6, [pc, #52]	; (407c1c <spi_flash_enable+0xdc>)
  407be6:	4d0e      	ldr	r5, [pc, #56]	; (407c20 <spi_flash_enable+0xe0>)
  407be8:	4630      	mov	r0, r6
  407bea:	47a8      	blx	r5
  407bec:	2801      	cmp	r0, #1
  407bee:	d1fb      	bne.n	407be8 <spi_flash_enable+0xa8>
  407bf0:	e7dd      	b.n	407bae <spi_flash_enable+0x6e>
  407bf2:	bf00      	nop
  407bf4:	00406515 	.word	0x00406515
  407bf8:	00406811 	.word	0x00406811
  407bfc:	f8888fff 	.word	0xf8888fff
  407c00:	01111000 	.word	0x01111000
  407c04:	0040681d 	.word	0x0040681d
  407c08:	00010208 	.word	0x00010208
  407c0c:	0001020c 	.word	0x0001020c
  407c10:	00010214 	.word	0x00010214
  407c14:	0001021c 	.word	0x0001021c
  407c18:	00010204 	.word	0x00010204
  407c1c:	00010218 	.word	0x00010218
  407c20:	00406805 	.word	0x00406805

00407c24 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  407c24:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  407c26:	4810      	ldr	r0, [pc, #64]	; (407c68 <sysclk_init+0x44>)
  407c28:	4b10      	ldr	r3, [pc, #64]	; (407c6c <sysclk_init+0x48>)
  407c2a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  407c2c:	213e      	movs	r1, #62	; 0x3e
  407c2e:	2000      	movs	r0, #0
  407c30:	4b0f      	ldr	r3, [pc, #60]	; (407c70 <sysclk_init+0x4c>)
  407c32:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  407c34:	4c0f      	ldr	r4, [pc, #60]	; (407c74 <sysclk_init+0x50>)
  407c36:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  407c38:	2800      	cmp	r0, #0
  407c3a:	d0fc      	beq.n	407c36 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  407c3c:	4b0e      	ldr	r3, [pc, #56]	; (407c78 <sysclk_init+0x54>)
  407c3e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  407c40:	4a0e      	ldr	r2, [pc, #56]	; (407c7c <sysclk_init+0x58>)
  407c42:	4b0f      	ldr	r3, [pc, #60]	; (407c80 <sysclk_init+0x5c>)
  407c44:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  407c46:	4c0f      	ldr	r4, [pc, #60]	; (407c84 <sysclk_init+0x60>)
  407c48:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  407c4a:	2800      	cmp	r0, #0
  407c4c:	d0fc      	beq.n	407c48 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  407c4e:	2002      	movs	r0, #2
  407c50:	4b0d      	ldr	r3, [pc, #52]	; (407c88 <sysclk_init+0x64>)
  407c52:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  407c54:	2000      	movs	r0, #0
  407c56:	4b0d      	ldr	r3, [pc, #52]	; (407c8c <sysclk_init+0x68>)
  407c58:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  407c5a:	4b0d      	ldr	r3, [pc, #52]	; (407c90 <sysclk_init+0x6c>)
  407c5c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  407c5e:	4802      	ldr	r0, [pc, #8]	; (407c68 <sysclk_init+0x44>)
  407c60:	4b02      	ldr	r3, [pc, #8]	; (407c6c <sysclk_init+0x48>)
  407c62:	4798      	blx	r3
  407c64:	bd10      	pop	{r4, pc}
  407c66:	bf00      	nop
  407c68:	11e1a300 	.word	0x11e1a300
  407c6c:	00408ad5 	.word	0x00408ad5
  407c70:	0040859d 	.word	0x0040859d
  407c74:	004085f1 	.word	0x004085f1
  407c78:	00408601 	.word	0x00408601
  407c7c:	20183f01 	.word	0x20183f01
  407c80:	400e0600 	.word	0x400e0600
  407c84:	00408611 	.word	0x00408611
  407c88:	00408501 	.word	0x00408501
  407c8c:	00408539 	.word	0x00408539
  407c90:	004089c9 	.word	0x004089c9

00407c94 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  407c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  407c98:	b980      	cbnz	r0, 407cbc <_read+0x28>
  407c9a:	460c      	mov	r4, r1
  407c9c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  407c9e:	2a00      	cmp	r2, #0
  407ca0:	dd0f      	ble.n	407cc2 <_read+0x2e>
  407ca2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  407ca4:	4e08      	ldr	r6, [pc, #32]	; (407cc8 <_read+0x34>)
  407ca6:	4d09      	ldr	r5, [pc, #36]	; (407ccc <_read+0x38>)
  407ca8:	6830      	ldr	r0, [r6, #0]
  407caa:	4621      	mov	r1, r4
  407cac:	682b      	ldr	r3, [r5, #0]
  407cae:	4798      	blx	r3
		ptr++;
  407cb0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  407cb2:	42bc      	cmp	r4, r7
  407cb4:	d1f8      	bne.n	407ca8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  407cb6:	4640      	mov	r0, r8
  407cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  407cbc:	f04f 38ff 	mov.w	r8, #4294967295
  407cc0:	e7f9      	b.n	407cb6 <_read+0x22>
	for (; len > 0; --len) {
  407cc2:	4680      	mov	r8, r0
  407cc4:	e7f7      	b.n	407cb6 <_read+0x22>
  407cc6:	bf00      	nop
  407cc8:	2040cb5c 	.word	0x2040cb5c
  407ccc:	2040cb54 	.word	0x2040cb54

00407cd0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  407cd0:	3801      	subs	r0, #1
  407cd2:	2802      	cmp	r0, #2
  407cd4:	d815      	bhi.n	407d02 <_write+0x32>
{
  407cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407cda:	460e      	mov	r6, r1
  407cdc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  407cde:	b19a      	cbz	r2, 407d08 <_write+0x38>
  407ce0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  407ce2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 407d1c <_write+0x4c>
  407ce6:	4f0c      	ldr	r7, [pc, #48]	; (407d18 <_write+0x48>)
  407ce8:	f8d8 0000 	ldr.w	r0, [r8]
  407cec:	f815 1b01 	ldrb.w	r1, [r5], #1
  407cf0:	683b      	ldr	r3, [r7, #0]
  407cf2:	4798      	blx	r3
  407cf4:	2800      	cmp	r0, #0
  407cf6:	db0a      	blt.n	407d0e <_write+0x3e>
  407cf8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  407cfa:	3c01      	subs	r4, #1
  407cfc:	d1f4      	bne.n	407ce8 <_write+0x18>
  407cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  407d02:	f04f 30ff 	mov.w	r0, #4294967295
  407d06:	4770      	bx	lr
	for (; len != 0; --len) {
  407d08:	4610      	mov	r0, r2
  407d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  407d0e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  407d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407d16:	bf00      	nop
  407d18:	2040cb58 	.word	0x2040cb58
  407d1c:	2040cb5c 	.word	0x2040cb5c

00407d20 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  407d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  407d22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  407d26:	4bb8      	ldr	r3, [pc, #736]	; (408008 <board_init+0x2e8>)
  407d28:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb");
  407d2a:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  407d2e:	4fb7      	ldr	r7, [pc, #732]	; (40800c <board_init+0x2ec>)
  407d30:	4638      	mov	r0, r7
  407d32:	4db7      	ldr	r5, [pc, #732]	; (408010 <board_init+0x2f0>)
  407d34:	47a8      	blx	r5
	dw_region_attr =
  407d36:	4eb7      	ldr	r6, [pc, #732]	; (408014 <board_init+0x2f4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407d38:	ea40 0106 	orr.w	r1, r0, r6
  407d3c:	2011      	movs	r0, #17
  407d3e:	4cb6      	ldr	r4, [pc, #728]	; (408018 <board_init+0x2f8>)
  407d40:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  407d42:	48b6      	ldr	r0, [pc, #728]	; (40801c <board_init+0x2fc>)
  407d44:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407d46:	49b6      	ldr	r1, [pc, #728]	; (408020 <board_init+0x300>)
  407d48:	4301      	orrs	r1, r0
  407d4a:	48b6      	ldr	r0, [pc, #728]	; (408024 <board_init+0x304>)
  407d4c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  407d4e:	4638      	mov	r0, r7
  407d50:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407d52:	ea40 0106 	orr.w	r1, r0, r6
  407d56:	48b4      	ldr	r0, [pc, #720]	; (408028 <board_init+0x308>)
  407d58:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  407d5a:	48b4      	ldr	r0, [pc, #720]	; (40802c <board_init+0x30c>)
  407d5c:	47a8      	blx	r5
	dw_region_attr =
  407d5e:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  407d62:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407d66:	ea40 0106 	orr.w	r1, r0, r6
  407d6a:	48b1      	ldr	r0, [pc, #708]	; (408030 <board_init+0x310>)
  407d6c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  407d6e:	48b1      	ldr	r0, [pc, #708]	; (408034 <board_init+0x314>)
  407d70:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407d72:	ea40 0106 	orr.w	r1, r0, r6
  407d76:	48b0      	ldr	r0, [pc, #704]	; (408038 <board_init+0x318>)
  407d78:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  407d7a:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  407d7e:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  407d80:	4eae      	ldr	r6, [pc, #696]	; (40803c <board_init+0x31c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407d82:	ea40 0106 	orr.w	r1, r0, r6
  407d86:	48ae      	ldr	r0, [pc, #696]	; (408040 <board_init+0x320>)
  407d88:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  407d8a:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  407d8e:	47a8      	blx	r5
	dw_region_attr =
  407d90:	4fac      	ldr	r7, [pc, #688]	; (408044 <board_init+0x324>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407d92:	ea40 0107 	orr.w	r1, r0, r7
  407d96:	48ac      	ldr	r0, [pc, #688]	; (408048 <board_init+0x328>)
  407d98:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  407d9a:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  407d9e:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407da0:	49aa      	ldr	r1, [pc, #680]	; (40804c <board_init+0x32c>)
  407da2:	4301      	orrs	r1, r0
  407da4:	48aa      	ldr	r0, [pc, #680]	; (408050 <board_init+0x330>)
  407da6:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  407da8:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  407dac:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407dae:	ea40 0107 	orr.w	r1, r0, r7
  407db2:	48a8      	ldr	r0, [pc, #672]	; (408054 <board_init+0x334>)
  407db4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  407db6:	48a8      	ldr	r0, [pc, #672]	; (408058 <board_init+0x338>)
  407db8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407dba:	ea40 0106 	orr.w	r1, r0, r6
  407dbe:	48a7      	ldr	r0, [pc, #668]	; (40805c <board_init+0x33c>)
  407dc0:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  407dc2:	4ca7      	ldr	r4, [pc, #668]	; (408060 <board_init+0x340>)
  407dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  407dc6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  407dca:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  407dcc:	2005      	movs	r0, #5
  407dce:	4ba5      	ldr	r3, [pc, #660]	; (408064 <board_init+0x344>)
  407dd0:	4798      	blx	r3
  __ASM volatile ("dsb");
  407dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407dd6:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  407dda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407dde:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  407de2:	2300      	movs	r3, #0
  407de4:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  407de8:	6963      	ldr	r3, [r4, #20]
  407dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  407dee:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  407df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407df4:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  407df8:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  407dfc:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  407e00:	f007 0007 	and.w	r0, r7, #7
  407e04:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  407e06:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  407e0a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  407e0e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  407e12:	f3bf 8f4f 	dsb	sy
  407e16:	f04f 34ff 	mov.w	r4, #4294967295
  407e1a:	fa04 fc00 	lsl.w	ip, r4, r0
  407e1e:	fa06 f000 	lsl.w	r0, r6, r0
  407e22:	fa04 f40e 	lsl.w	r4, r4, lr
  407e26:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  407e2a:	4d8d      	ldr	r5, [pc, #564]	; (408060 <board_init+0x340>)
         int32_t tmpways = ways;
  407e2c:	463a      	mov	r2, r7
  407e2e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  407e30:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  407e34:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  407e38:	3a01      	subs	r2, #1
  407e3a:	4423      	add	r3, r4
  407e3c:	f1b2 3fff 	cmp.w	r2, #4294967295
  407e40:	d1f6      	bne.n	407e30 <board_init+0x110>
        } while(sets--);
  407e42:	3e01      	subs	r6, #1
  407e44:	4460      	add	r0, ip
  407e46:	f1b6 3fff 	cmp.w	r6, #4294967295
  407e4a:	d1ef      	bne.n	407e2c <board_init+0x10c>
  407e4c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  407e50:	4b83      	ldr	r3, [pc, #524]	; (408060 <board_init+0x340>)
  407e52:	695a      	ldr	r2, [r3, #20]
  407e54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  407e58:	615a      	str	r2, [r3, #20]
  407e5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407e5e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  407e62:	4a81      	ldr	r2, [pc, #516]	; (408068 <board_init+0x348>)
  407e64:	4981      	ldr	r1, [pc, #516]	; (40806c <board_init+0x34c>)
  407e66:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  407e68:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  407e6c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  407e6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407e72:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  407e76:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  407e7a:	f022 0201 	bic.w	r2, r2, #1
  407e7e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  407e82:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  407e86:	f022 0201 	bic.w	r2, r2, #1
  407e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  407e8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407e92:	f3bf 8f6f 	isb	sy
  407e96:	200a      	movs	r0, #10
  407e98:	4c75      	ldr	r4, [pc, #468]	; (408070 <board_init+0x350>)
  407e9a:	47a0      	blx	r4
  407e9c:	200b      	movs	r0, #11
  407e9e:	47a0      	blx	r4
  407ea0:	200c      	movs	r0, #12
  407ea2:	47a0      	blx	r4
  407ea4:	2010      	movs	r0, #16
  407ea6:	47a0      	blx	r4
  407ea8:	2011      	movs	r0, #17
  407eaa:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407eac:	4a71      	ldr	r2, [pc, #452]	; (408074 <board_init+0x354>)
  407eae:	f44f 7380 	mov.w	r3, #256	; 0x100
  407eb2:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407eb4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407eb8:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407eba:	4b6f      	ldr	r3, [pc, #444]	; (408078 <board_init+0x358>)
  407ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  407ec0:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407ec2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  407ec6:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  407ec8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407ecc:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  407ece:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  407ed0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  407ed4:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407ed6:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  407eda:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407edc:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407ede:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  407ee2:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  407ee4:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  407ee8:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  407eec:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  407ef0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  407ef4:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407ef6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407efa:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407efc:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407efe:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f02:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407f04:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  407f08:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407f0a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407f0c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  407f10:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407f12:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  407f14:	4859      	ldr	r0, [pc, #356]	; (40807c <board_init+0x35c>)
  407f16:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  407f1a:	f041 0110 	orr.w	r1, r1, #16
  407f1e:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  407f22:	4957      	ldr	r1, [pc, #348]	; (408080 <board_init+0x360>)
  407f24:	2010      	movs	r0, #16
  407f26:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407f28:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f2c:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f2e:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f30:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  407f34:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  407f36:	4304      	orrs	r4, r0
  407f38:	670c      	str	r4, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407f3a:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  407f3c:	4304      	orrs	r4, r0
  407f3e:	674c      	str	r4, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407f40:	6048      	str	r0, [r1, #4]
		base->PIO_PUDR = mask;
  407f42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  407f46:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407f48:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f4c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f4e:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f50:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f54:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407f56:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  407f5a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407f5c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407f5e:	4308      	orrs	r0, r1
  407f60:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407f62:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  407f68:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407f6a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f6e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f70:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f72:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  407f76:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407f78:	4308      	orrs	r0, r1
  407f7a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407f7c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407f7e:	4308      	orrs	r0, r1
  407f80:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407f82:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407f84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  407f88:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407f8a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f8e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f90:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f92:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f96:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407f98:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  407f9c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407f9e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407fa0:	4308      	orrs	r0, r1
  407fa2:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407fa4:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407fa6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407faa:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407fac:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407fb0:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407fb2:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407fb4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407fb8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407fba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  407fbe:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407fc0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407fc2:	4308      	orrs	r0, r1
  407fc4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407fc6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407fc8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  407fcc:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407fce:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407fd2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407fd4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407fd6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407fda:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407fdc:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  407fe0:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407fe2:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407fe4:	4308      	orrs	r0, r1
  407fe6:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407fe8:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407fea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407fee:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407ff0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407ff4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407ff6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407ff8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407ffc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407ffe:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  408002:	6718      	str	r0, [r3, #112]	; 0x70
  408004:	e03e      	b.n	408084 <board_init+0x364>
  408006:	bf00      	nop
  408008:	400e1850 	.word	0x400e1850
  40800c:	003fffff 	.word	0x003fffff
  408010:	004080d1 	.word	0x004080d1
  408014:	01000001 	.word	0x01000001
  408018:	004080c5 	.word	0x004080c5
  40801c:	001fffff 	.word	0x001fffff
  408020:	06230001 	.word	0x06230001
  408024:	00400012 	.word	0x00400012
  408028:	20000013 	.word	0x20000013
  40802c:	0003ffff 	.word	0x0003ffff
  408030:	20400014 	.word	0x20400014
  408034:	0001ffff 	.word	0x0001ffff
  408038:	20440015 	.word	0x20440015
  40803c:	13010001 	.word	0x13010001
  408040:	40000016 	.word	0x40000016
  408044:	03000001 	.word	0x03000001
  408048:	60000017 	.word	0x60000017
  40804c:	03250001 	.word	0x03250001
  408050:	70000018 	.word	0x70000018
  408054:	80000019 	.word	0x80000019
  408058:	000fffff 	.word	0x000fffff
  40805c:	a010001a 	.word	0xa010001a
  408060:	e000ed00 	.word	0xe000ed00
  408064:	004080b9 	.word	0x004080b9
  408068:	400e0c00 	.word	0x400e0c00
  40806c:	5a00080c 	.word	0x5a00080c
  408070:	00408621 	.word	0x00408621
  408074:	400e1200 	.word	0x400e1200
  408078:	400e0e00 	.word	0x400e0e00
  40807c:	40088000 	.word	0x40088000
  408080:	400e1000 	.word	0x400e1000
		base->PIO_ABCDSR[1] |= mask;
  408084:	6f58      	ldr	r0, [r3, #116]	; 0x74
  408086:	4308      	orrs	r0, r1
  408088:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40808a:	6059      	str	r1, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40808c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  408090:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408092:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  408096:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  408098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40809c:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40809e:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4080a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4080a4:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4080a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4080aa:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4080ac:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4080ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4080b2:	6753      	str	r3, [r2, #116]	; 0x74
  4080b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4080b6:	bf00      	nop

004080b8 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  4080b8:	4b01      	ldr	r3, [pc, #4]	; (4080c0 <mpu_enable+0x8>)
  4080ba:	6058      	str	r0, [r3, #4]
  4080bc:	4770      	bx	lr
  4080be:	bf00      	nop
  4080c0:	e000ed90 	.word	0xe000ed90

004080c4 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  4080c4:	4b01      	ldr	r3, [pc, #4]	; (4080cc <mpu_set_region+0x8>)
  4080c6:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  4080c8:	6119      	str	r1, [r3, #16]
  4080ca:	4770      	bx	lr
  4080cc:	e000ed90 	.word	0xe000ed90

004080d0 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  4080d0:	2820      	cmp	r0, #32
  4080d2:	d909      	bls.n	4080e8 <mpu_cal_mpu_region_size+0x18>
  4080d4:	2304      	movs	r3, #4
  4080d6:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  4080d8:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  4080da:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  4080dc:	4290      	cmp	r0, r2
  4080de:	d901      	bls.n	4080e4 <mpu_cal_mpu_region_size+0x14>
  4080e0:	2b1e      	cmp	r3, #30
  4080e2:	d9f9      	bls.n	4080d8 <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  4080e4:	0058      	lsls	r0, r3, #1
  4080e6:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  4080e8:	2304      	movs	r3, #4
  4080ea:	e7fb      	b.n	4080e4 <mpu_cal_mpu_region_size+0x14>

004080ec <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4080ec:	b90a      	cbnz	r2, 4080f2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4080ee:	6601      	str	r1, [r0, #96]	; 0x60
  4080f0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4080f2:	6641      	str	r1, [r0, #100]	; 0x64
  4080f4:	4770      	bx	lr

004080f6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4080f6:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4080f8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4080fc:	d03a      	beq.n	408174 <pio_set_peripheral+0x7e>
  4080fe:	d813      	bhi.n	408128 <pio_set_peripheral+0x32>
  408100:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  408104:	d025      	beq.n	408152 <pio_set_peripheral+0x5c>
  408106:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40810a:	d10a      	bne.n	408122 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40810c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40810e:	4313      	orrs	r3, r2
  408110:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408112:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408114:	6f41      	ldr	r1, [r0, #116]	; 0x74
  408116:	400b      	ands	r3, r1
  408118:	ea23 0302 	bic.w	r3, r3, r2
  40811c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40811e:	6042      	str	r2, [r0, #4]
  408120:	4770      	bx	lr
	switch (ul_type) {
  408122:	2900      	cmp	r1, #0
  408124:	d1fb      	bne.n	40811e <pio_set_peripheral+0x28>
  408126:	4770      	bx	lr
  408128:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40812c:	d021      	beq.n	408172 <pio_set_peripheral+0x7c>
  40812e:	d809      	bhi.n	408144 <pio_set_peripheral+0x4e>
  408130:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  408134:	d1f3      	bne.n	40811e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  408136:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  408138:	4313      	orrs	r3, r2
  40813a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40813c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40813e:	4313      	orrs	r3, r2
  408140:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  408142:	e7ec      	b.n	40811e <pio_set_peripheral+0x28>
	switch (ul_type) {
  408144:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  408148:	d013      	beq.n	408172 <pio_set_peripheral+0x7c>
  40814a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40814e:	d010      	beq.n	408172 <pio_set_peripheral+0x7c>
  408150:	e7e5      	b.n	40811e <pio_set_peripheral+0x28>
{
  408152:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  408154:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  408156:	6f04      	ldr	r4, [r0, #112]	; 0x70
  408158:	43d3      	mvns	r3, r2
  40815a:	4021      	ands	r1, r4
  40815c:	461c      	mov	r4, r3
  40815e:	4019      	ands	r1, r3
  408160:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  408162:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408164:	6f41      	ldr	r1, [r0, #116]	; 0x74
  408166:	400b      	ands	r3, r1
  408168:	4023      	ands	r3, r4
  40816a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40816c:	6042      	str	r2, [r0, #4]
}
  40816e:	f85d 4b04 	ldr.w	r4, [sp], #4
  408172:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  408174:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  408176:	6f01      	ldr	r1, [r0, #112]	; 0x70
  408178:	400b      	ands	r3, r1
  40817a:	ea23 0302 	bic.w	r3, r3, r2
  40817e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  408180:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  408182:	4313      	orrs	r3, r2
  408184:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  408186:	e7ca      	b.n	40811e <pio_set_peripheral+0x28>

00408188 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  408188:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40818a:	f012 0f01 	tst.w	r2, #1
  40818e:	d10d      	bne.n	4081ac <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  408190:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  408192:	f012 0f0a 	tst.w	r2, #10
  408196:	d00b      	beq.n	4081b0 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  408198:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40819a:	f012 0f02 	tst.w	r2, #2
  40819e:	d109      	bne.n	4081b4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4081a0:	f012 0f08 	tst.w	r2, #8
  4081a4:	d008      	beq.n	4081b8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4081a6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4081aa:	e005      	b.n	4081b8 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4081ac:	6641      	str	r1, [r0, #100]	; 0x64
  4081ae:	e7f0      	b.n	408192 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4081b0:	6241      	str	r1, [r0, #36]	; 0x24
  4081b2:	e7f2      	b.n	40819a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4081b4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4081b8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4081ba:	6001      	str	r1, [r0, #0]
  4081bc:	4770      	bx	lr

004081be <pio_set_output>:
{
  4081be:	b410      	push	{r4}
  4081c0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4081c2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4081c4:	b94c      	cbnz	r4, 4081da <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4081c6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4081c8:	b14b      	cbz	r3, 4081de <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4081ca:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4081cc:	b94a      	cbnz	r2, 4081e2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4081ce:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4081d0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4081d2:	6001      	str	r1, [r0, #0]
}
  4081d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4081d8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4081da:	6641      	str	r1, [r0, #100]	; 0x64
  4081dc:	e7f4      	b.n	4081c8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4081de:	6541      	str	r1, [r0, #84]	; 0x54
  4081e0:	e7f4      	b.n	4081cc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4081e2:	6301      	str	r1, [r0, #48]	; 0x30
  4081e4:	e7f4      	b.n	4081d0 <pio_set_output+0x12>

004081e6 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4081e6:	f012 0f10 	tst.w	r2, #16
  4081ea:	d012      	beq.n	408212 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4081ec:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4081f0:	f012 0f20 	tst.w	r2, #32
  4081f4:	d007      	beq.n	408206 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4081f6:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4081fa:	f012 0f40 	tst.w	r2, #64	; 0x40
  4081fe:	d005      	beq.n	40820c <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  408200:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  408204:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  408206:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40820a:	e7f6      	b.n	4081fa <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40820c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  408210:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  408212:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  408216:	4770      	bx	lr

00408218 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  408218:	6401      	str	r1, [r0, #64]	; 0x40
  40821a:	4770      	bx	lr

0040821c <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  40821c:	6441      	str	r1, [r0, #68]	; 0x44
  40821e:	4770      	bx	lr

00408220 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  408220:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  408222:	4770      	bx	lr

00408224 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  408224:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  408226:	4770      	bx	lr

00408228 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  408228:	b570      	push	{r4, r5, r6, lr}
  40822a:	b082      	sub	sp, #8
  40822c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40822e:	4c46      	ldr	r4, [pc, #280]	; (408348 <pio_configure_pin+0x120>)
  408230:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  408234:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  408236:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40823a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40823e:	d059      	beq.n	4082f4 <pio_configure_pin+0xcc>
  408240:	d80a      	bhi.n	408258 <pio_configure_pin+0x30>
  408242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  408246:	d02f      	beq.n	4082a8 <pio_configure_pin+0x80>
  408248:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40824c:	d03f      	beq.n	4082ce <pio_configure_pin+0xa6>
  40824e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  408252:	d016      	beq.n	408282 <pio_configure_pin+0x5a>
		return 0;
  408254:	2000      	movs	r0, #0
  408256:	e012      	b.n	40827e <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  408258:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40825c:	d05d      	beq.n	40831a <pio_configure_pin+0xf2>
  40825e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  408262:	d05a      	beq.n	40831a <pio_configure_pin+0xf2>
  408264:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  408268:	d1f4      	bne.n	408254 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40826a:	f000 011f 	and.w	r1, r0, #31
  40826e:	2601      	movs	r6, #1
  408270:	462a      	mov	r2, r5
  408272:	fa06 f101 	lsl.w	r1, r6, r1
  408276:	4620      	mov	r0, r4
  408278:	4b34      	ldr	r3, [pc, #208]	; (40834c <pio_configure_pin+0x124>)
  40827a:	4798      	blx	r3
	return 1;
  40827c:	4630      	mov	r0, r6
}
  40827e:	b002      	add	sp, #8
  408280:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  408282:	f000 001f 	and.w	r0, r0, #31
  408286:	2601      	movs	r6, #1
  408288:	4086      	lsls	r6, r0
  40828a:	4632      	mov	r2, r6
  40828c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408290:	4620      	mov	r0, r4
  408292:	4b2f      	ldr	r3, [pc, #188]	; (408350 <pio_configure_pin+0x128>)
  408294:	4798      	blx	r3
	if (ul_pull_up_enable) {
  408296:	f015 0f01 	tst.w	r5, #1
  40829a:	d102      	bne.n	4082a2 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  40829c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40829e:	2001      	movs	r0, #1
  4082a0:	e7ed      	b.n	40827e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4082a2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4082a4:	2001      	movs	r0, #1
  4082a6:	e7ea      	b.n	40827e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4082a8:	f000 001f 	and.w	r0, r0, #31
  4082ac:	2601      	movs	r6, #1
  4082ae:	4086      	lsls	r6, r0
  4082b0:	4632      	mov	r2, r6
  4082b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4082b6:	4620      	mov	r0, r4
  4082b8:	4b25      	ldr	r3, [pc, #148]	; (408350 <pio_configure_pin+0x128>)
  4082ba:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4082bc:	f015 0f01 	tst.w	r5, #1
  4082c0:	d102      	bne.n	4082c8 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4082c2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4082c4:	2001      	movs	r0, #1
  4082c6:	e7da      	b.n	40827e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4082c8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4082ca:	2001      	movs	r0, #1
  4082cc:	e7d7      	b.n	40827e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4082ce:	f000 001f 	and.w	r0, r0, #31
  4082d2:	2601      	movs	r6, #1
  4082d4:	4086      	lsls	r6, r0
  4082d6:	4632      	mov	r2, r6
  4082d8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4082dc:	4620      	mov	r0, r4
  4082de:	4b1c      	ldr	r3, [pc, #112]	; (408350 <pio_configure_pin+0x128>)
  4082e0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4082e2:	f015 0f01 	tst.w	r5, #1
  4082e6:	d102      	bne.n	4082ee <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4082e8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4082ea:	2001      	movs	r0, #1
  4082ec:	e7c7      	b.n	40827e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4082ee:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4082f0:	2001      	movs	r0, #1
  4082f2:	e7c4      	b.n	40827e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4082f4:	f000 001f 	and.w	r0, r0, #31
  4082f8:	2601      	movs	r6, #1
  4082fa:	4086      	lsls	r6, r0
  4082fc:	4632      	mov	r2, r6
  4082fe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  408302:	4620      	mov	r0, r4
  408304:	4b12      	ldr	r3, [pc, #72]	; (408350 <pio_configure_pin+0x128>)
  408306:	4798      	blx	r3
	if (ul_pull_up_enable) {
  408308:	f015 0f01 	tst.w	r5, #1
  40830c:	d102      	bne.n	408314 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40830e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  408310:	2001      	movs	r0, #1
  408312:	e7b4      	b.n	40827e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  408314:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  408316:	2001      	movs	r0, #1
  408318:	e7b1      	b.n	40827e <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40831a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40831e:	f000 011f 	and.w	r1, r0, #31
  408322:	2601      	movs	r6, #1
  408324:	ea05 0306 	and.w	r3, r5, r6
  408328:	9300      	str	r3, [sp, #0]
  40832a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40832e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  408332:	bf14      	ite	ne
  408334:	2200      	movne	r2, #0
  408336:	2201      	moveq	r2, #1
  408338:	fa06 f101 	lsl.w	r1, r6, r1
  40833c:	4620      	mov	r0, r4
  40833e:	4c05      	ldr	r4, [pc, #20]	; (408354 <pio_configure_pin+0x12c>)
  408340:	47a0      	blx	r4
	return 1;
  408342:	4630      	mov	r0, r6
		break;
  408344:	e79b      	b.n	40827e <pio_configure_pin+0x56>
  408346:	bf00      	nop
  408348:	00200707 	.word	0x00200707
  40834c:	00408189 	.word	0x00408189
  408350:	004080f7 	.word	0x004080f7
  408354:	004081bf 	.word	0x004081bf

00408358 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  408358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40835c:	4604      	mov	r4, r0
  40835e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  408360:	4b0e      	ldr	r3, [pc, #56]	; (40839c <pio_handler_process+0x44>)
  408362:	4798      	blx	r3
  408364:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  408366:	4620      	mov	r0, r4
  408368:	4b0d      	ldr	r3, [pc, #52]	; (4083a0 <pio_handler_process+0x48>)
  40836a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40836c:	4005      	ands	r5, r0
  40836e:	d013      	beq.n	408398 <pio_handler_process+0x40>
  408370:	4c0c      	ldr	r4, [pc, #48]	; (4083a4 <pio_handler_process+0x4c>)
  408372:	f104 0660 	add.w	r6, r4, #96	; 0x60
  408376:	e003      	b.n	408380 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  408378:	42b4      	cmp	r4, r6
  40837a:	d00d      	beq.n	408398 <pio_handler_process+0x40>
  40837c:	3410      	adds	r4, #16
		while (status != 0) {
  40837e:	b15d      	cbz	r5, 408398 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  408380:	6820      	ldr	r0, [r4, #0]
  408382:	4540      	cmp	r0, r8
  408384:	d1f8      	bne.n	408378 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  408386:	6861      	ldr	r1, [r4, #4]
  408388:	4229      	tst	r1, r5
  40838a:	d0f5      	beq.n	408378 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40838c:	68e3      	ldr	r3, [r4, #12]
  40838e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  408390:	6863      	ldr	r3, [r4, #4]
  408392:	ea25 0503 	bic.w	r5, r5, r3
  408396:	e7ef      	b.n	408378 <pio_handler_process+0x20>
  408398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40839c:	00408221 	.word	0x00408221
  4083a0:	00408225 	.word	0x00408225
  4083a4:	2040c3f4 	.word	0x2040c3f4

004083a8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4083aa:	4c18      	ldr	r4, [pc, #96]	; (40840c <pio_handler_set+0x64>)
  4083ac:	6826      	ldr	r6, [r4, #0]
  4083ae:	2e06      	cmp	r6, #6
  4083b0:	d82a      	bhi.n	408408 <pio_handler_set+0x60>
  4083b2:	f04f 0c00 	mov.w	ip, #0
  4083b6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4083b8:	4f15      	ldr	r7, [pc, #84]	; (408410 <pio_handler_set+0x68>)
  4083ba:	e004      	b.n	4083c6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4083bc:	3401      	adds	r4, #1
  4083be:	b2e4      	uxtb	r4, r4
  4083c0:	46a4      	mov	ip, r4
  4083c2:	42a6      	cmp	r6, r4
  4083c4:	d309      	bcc.n	4083da <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4083c6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4083c8:	0125      	lsls	r5, r4, #4
  4083ca:	597d      	ldr	r5, [r7, r5]
  4083cc:	428d      	cmp	r5, r1
  4083ce:	d1f5      	bne.n	4083bc <pio_handler_set+0x14>
  4083d0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4083d4:	686d      	ldr	r5, [r5, #4]
  4083d6:	4295      	cmp	r5, r2
  4083d8:	d1f0      	bne.n	4083bc <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4083da:	4d0d      	ldr	r5, [pc, #52]	; (408410 <pio_handler_set+0x68>)
  4083dc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4083e0:	eb05 040e 	add.w	r4, r5, lr
  4083e4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4083e8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4083ea:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4083ec:	9906      	ldr	r1, [sp, #24]
  4083ee:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4083f0:	3601      	adds	r6, #1
  4083f2:	4566      	cmp	r6, ip
  4083f4:	d005      	beq.n	408402 <pio_handler_set+0x5a>
  4083f6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4083f8:	461a      	mov	r2, r3
  4083fa:	4b06      	ldr	r3, [pc, #24]	; (408414 <pio_handler_set+0x6c>)
  4083fc:	4798      	blx	r3

	return 0;
  4083fe:	2000      	movs	r0, #0
  408400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  408402:	4902      	ldr	r1, [pc, #8]	; (40840c <pio_handler_set+0x64>)
  408404:	600e      	str	r6, [r1, #0]
  408406:	e7f6      	b.n	4083f6 <pio_handler_set+0x4e>
		return 1;
  408408:	2001      	movs	r0, #1
}
  40840a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40840c:	2040c464 	.word	0x2040c464
  408410:	2040c3f4 	.word	0x2040c3f4
  408414:	004081e7 	.word	0x004081e7

00408418 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  408418:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40841a:	210a      	movs	r1, #10
  40841c:	4801      	ldr	r0, [pc, #4]	; (408424 <PIOA_Handler+0xc>)
  40841e:	4b02      	ldr	r3, [pc, #8]	; (408428 <PIOA_Handler+0x10>)
  408420:	4798      	blx	r3
  408422:	bd08      	pop	{r3, pc}
  408424:	400e0e00 	.word	0x400e0e00
  408428:	00408359 	.word	0x00408359

0040842c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40842c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40842e:	210b      	movs	r1, #11
  408430:	4801      	ldr	r0, [pc, #4]	; (408438 <PIOB_Handler+0xc>)
  408432:	4b02      	ldr	r3, [pc, #8]	; (40843c <PIOB_Handler+0x10>)
  408434:	4798      	blx	r3
  408436:	bd08      	pop	{r3, pc}
  408438:	400e1000 	.word	0x400e1000
  40843c:	00408359 	.word	0x00408359

00408440 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  408440:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  408442:	210c      	movs	r1, #12
  408444:	4801      	ldr	r0, [pc, #4]	; (40844c <PIOC_Handler+0xc>)
  408446:	4b02      	ldr	r3, [pc, #8]	; (408450 <PIOC_Handler+0x10>)
  408448:	4798      	blx	r3
  40844a:	bd08      	pop	{r3, pc}
  40844c:	400e1200 	.word	0x400e1200
  408450:	00408359 	.word	0x00408359

00408454 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  408454:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  408456:	2110      	movs	r1, #16
  408458:	4801      	ldr	r0, [pc, #4]	; (408460 <PIOD_Handler+0xc>)
  40845a:	4b02      	ldr	r3, [pc, #8]	; (408464 <PIOD_Handler+0x10>)
  40845c:	4798      	blx	r3
  40845e:	bd08      	pop	{r3, pc}
  408460:	400e1400 	.word	0x400e1400
  408464:	00408359 	.word	0x00408359

00408468 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  408468:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40846a:	2111      	movs	r1, #17
  40846c:	4801      	ldr	r0, [pc, #4]	; (408474 <PIOE_Handler+0xc>)
  40846e:	4b02      	ldr	r3, [pc, #8]	; (408478 <PIOE_Handler+0x10>)
  408470:	4798      	blx	r3
  408472:	bd08      	pop	{r3, pc}
  408474:	400e1600 	.word	0x400e1600
  408478:	00408359 	.word	0x00408359

0040847c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  40847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40847e:	4606      	mov	r6, r0
  408480:	460d      	mov	r5, r1
  408482:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  408484:	4b17      	ldr	r3, [pc, #92]	; (4084e4 <pio_handler_set_priority+0x68>)
  408486:	4798      	blx	r3
  408488:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40848a:	f04f 31ff 	mov.w	r1, #4294967295
  40848e:	4630      	mov	r0, r6
  408490:	4b15      	ldr	r3, [pc, #84]	; (4084e8 <pio_handler_set_priority+0x6c>)
  408492:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  408494:	4630      	mov	r0, r6
  408496:	4b15      	ldr	r3, [pc, #84]	; (4084ec <pio_handler_set_priority+0x70>)
  408498:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40849a:	fa5f fe85 	uxtb.w	lr, r5
  40849e:	f00e 031f 	and.w	r3, lr, #31
  4084a2:	2201      	movs	r2, #1
  4084a4:	fa02 f303 	lsl.w	r3, r2, r3
  4084a8:	0968      	lsrs	r0, r5, #5
  4084aa:	4911      	ldr	r1, [pc, #68]	; (4084f0 <pio_handler_set_priority+0x74>)
  4084ac:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4084b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4084b4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  4084b8:	2d00      	cmp	r5, #0
  4084ba:	db0a      	blt.n	4084d2 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4084bc:	0164      	lsls	r4, r4, #5
  4084be:	b2e4      	uxtb	r4, r4
  4084c0:	4a0c      	ldr	r2, [pc, #48]	; (4084f4 <pio_handler_set_priority+0x78>)
  4084c2:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4084c4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4084c8:	4639      	mov	r1, r7
  4084ca:	4630      	mov	r0, r6
  4084cc:	4b0a      	ldr	r3, [pc, #40]	; (4084f8 <pio_handler_set_priority+0x7c>)
  4084ce:	4798      	blx	r3
  4084d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4084d2:	f00e 0e0f 	and.w	lr, lr, #15
  4084d6:	0164      	lsls	r4, r4, #5
  4084d8:	b2e4      	uxtb	r4, r4
  4084da:	4a08      	ldr	r2, [pc, #32]	; (4084fc <pio_handler_set_priority+0x80>)
  4084dc:	f802 400e 	strb.w	r4, [r2, lr]
  4084e0:	e7f0      	b.n	4084c4 <pio_handler_set_priority+0x48>
  4084e2:	bf00      	nop
  4084e4:	00408225 	.word	0x00408225
  4084e8:	0040821d 	.word	0x0040821d
  4084ec:	00408221 	.word	0x00408221
  4084f0:	e000e100 	.word	0xe000e100
  4084f4:	e000e400 	.word	0xe000e400
  4084f8:	00408219 	.word	0x00408219
  4084fc:	e000ed14 	.word	0xe000ed14

00408500 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  408500:	2803      	cmp	r0, #3
  408502:	d011      	beq.n	408528 <pmc_mck_set_division+0x28>
  408504:	2804      	cmp	r0, #4
  408506:	d012      	beq.n	40852e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  408508:	2802      	cmp	r0, #2
  40850a:	bf0c      	ite	eq
  40850c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  408510:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  408512:	4a08      	ldr	r2, [pc, #32]	; (408534 <pmc_mck_set_division+0x34>)
  408514:	6b13      	ldr	r3, [r2, #48]	; 0x30
  408516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40851a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40851c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40851e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  408520:	f013 0f08 	tst.w	r3, #8
  408524:	d0fb      	beq.n	40851e <pmc_mck_set_division+0x1e>
}
  408526:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  408528:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40852c:	e7f1      	b.n	408512 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40852e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  408532:	e7ee      	b.n	408512 <pmc_mck_set_division+0x12>
  408534:	400e0600 	.word	0x400e0600

00408538 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  408538:	4a17      	ldr	r2, [pc, #92]	; (408598 <pmc_switch_mck_to_pllack+0x60>)
  40853a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40853c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  408540:	4318      	orrs	r0, r3
  408542:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  408544:	6e93      	ldr	r3, [r2, #104]	; 0x68
  408546:	f013 0f08 	tst.w	r3, #8
  40854a:	d10a      	bne.n	408562 <pmc_switch_mck_to_pllack+0x2a>
  40854c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  408550:	4911      	ldr	r1, [pc, #68]	; (408598 <pmc_switch_mck_to_pllack+0x60>)
  408552:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  408554:	f012 0f08 	tst.w	r2, #8
  408558:	d103      	bne.n	408562 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40855a:	3b01      	subs	r3, #1
  40855c:	d1f9      	bne.n	408552 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40855e:	2001      	movs	r0, #1
  408560:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  408562:	4a0d      	ldr	r2, [pc, #52]	; (408598 <pmc_switch_mck_to_pllack+0x60>)
  408564:	6b13      	ldr	r3, [r2, #48]	; 0x30
  408566:	f023 0303 	bic.w	r3, r3, #3
  40856a:	f043 0302 	orr.w	r3, r3, #2
  40856e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  408570:	6e93      	ldr	r3, [r2, #104]	; 0x68
  408572:	f013 0f08 	tst.w	r3, #8
  408576:	d10a      	bne.n	40858e <pmc_switch_mck_to_pllack+0x56>
  408578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40857c:	4906      	ldr	r1, [pc, #24]	; (408598 <pmc_switch_mck_to_pllack+0x60>)
  40857e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  408580:	f012 0f08 	tst.w	r2, #8
  408584:	d105      	bne.n	408592 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  408586:	3b01      	subs	r3, #1
  408588:	d1f9      	bne.n	40857e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40858a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40858c:	4770      	bx	lr
	return 0;
  40858e:	2000      	movs	r0, #0
  408590:	4770      	bx	lr
  408592:	2000      	movs	r0, #0
  408594:	4770      	bx	lr
  408596:	bf00      	nop
  408598:	400e0600 	.word	0x400e0600

0040859c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40859c:	b9a0      	cbnz	r0, 4085c8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40859e:	480e      	ldr	r0, [pc, #56]	; (4085d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4085a0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4085a2:	0209      	lsls	r1, r1, #8
  4085a4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4085a6:	4a0d      	ldr	r2, [pc, #52]	; (4085dc <pmc_switch_mainck_to_xtal+0x40>)
  4085a8:	401a      	ands	r2, r3
  4085aa:	4b0d      	ldr	r3, [pc, #52]	; (4085e0 <pmc_switch_mainck_to_xtal+0x44>)
  4085ac:	4313      	orrs	r3, r2
  4085ae:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4085b0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4085b2:	4602      	mov	r2, r0
  4085b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4085b6:	f013 0f01 	tst.w	r3, #1
  4085ba:	d0fb      	beq.n	4085b4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4085bc:	4a06      	ldr	r2, [pc, #24]	; (4085d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4085be:	6a11      	ldr	r1, [r2, #32]
  4085c0:	4b08      	ldr	r3, [pc, #32]	; (4085e4 <pmc_switch_mainck_to_xtal+0x48>)
  4085c2:	430b      	orrs	r3, r1
  4085c4:	6213      	str	r3, [r2, #32]
  4085c6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4085c8:	4903      	ldr	r1, [pc, #12]	; (4085d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4085ca:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4085cc:	4a06      	ldr	r2, [pc, #24]	; (4085e8 <pmc_switch_mainck_to_xtal+0x4c>)
  4085ce:	401a      	ands	r2, r3
  4085d0:	4b06      	ldr	r3, [pc, #24]	; (4085ec <pmc_switch_mainck_to_xtal+0x50>)
  4085d2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4085d4:	620b      	str	r3, [r1, #32]
  4085d6:	4770      	bx	lr
  4085d8:	400e0600 	.word	0x400e0600
  4085dc:	ffc8fffc 	.word	0xffc8fffc
  4085e0:	00370001 	.word	0x00370001
  4085e4:	01370000 	.word	0x01370000
  4085e8:	fec8fffc 	.word	0xfec8fffc
  4085ec:	01370002 	.word	0x01370002

004085f0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4085f0:	4b02      	ldr	r3, [pc, #8]	; (4085fc <pmc_osc_is_ready_mainck+0xc>)
  4085f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4085f4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4085f8:	4770      	bx	lr
  4085fa:	bf00      	nop
  4085fc:	400e0600 	.word	0x400e0600

00408600 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  408600:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  408604:	4b01      	ldr	r3, [pc, #4]	; (40860c <pmc_disable_pllack+0xc>)
  408606:	629a      	str	r2, [r3, #40]	; 0x28
  408608:	4770      	bx	lr
  40860a:	bf00      	nop
  40860c:	400e0600 	.word	0x400e0600

00408610 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  408610:	4b02      	ldr	r3, [pc, #8]	; (40861c <pmc_is_locked_pllack+0xc>)
  408612:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  408614:	f000 0002 	and.w	r0, r0, #2
  408618:	4770      	bx	lr
  40861a:	bf00      	nop
  40861c:	400e0600 	.word	0x400e0600

00408620 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  408620:	283f      	cmp	r0, #63	; 0x3f
  408622:	d81e      	bhi.n	408662 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  408624:	281f      	cmp	r0, #31
  408626:	d80c      	bhi.n	408642 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  408628:	4b11      	ldr	r3, [pc, #68]	; (408670 <pmc_enable_periph_clk+0x50>)
  40862a:	699a      	ldr	r2, [r3, #24]
  40862c:	2301      	movs	r3, #1
  40862e:	4083      	lsls	r3, r0
  408630:	4393      	bics	r3, r2
  408632:	d018      	beq.n	408666 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  408634:	2301      	movs	r3, #1
  408636:	fa03 f000 	lsl.w	r0, r3, r0
  40863a:	4b0d      	ldr	r3, [pc, #52]	; (408670 <pmc_enable_periph_clk+0x50>)
  40863c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40863e:	2000      	movs	r0, #0
  408640:	4770      	bx	lr
		ul_id -= 32;
  408642:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  408644:	4b0a      	ldr	r3, [pc, #40]	; (408670 <pmc_enable_periph_clk+0x50>)
  408646:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40864a:	2301      	movs	r3, #1
  40864c:	4083      	lsls	r3, r0
  40864e:	4393      	bics	r3, r2
  408650:	d00b      	beq.n	40866a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  408652:	2301      	movs	r3, #1
  408654:	fa03 f000 	lsl.w	r0, r3, r0
  408658:	4b05      	ldr	r3, [pc, #20]	; (408670 <pmc_enable_periph_clk+0x50>)
  40865a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40865e:	2000      	movs	r0, #0
  408660:	4770      	bx	lr
		return 1;
  408662:	2001      	movs	r0, #1
  408664:	4770      	bx	lr
	return 0;
  408666:	2000      	movs	r0, #0
  408668:	4770      	bx	lr
  40866a:	2000      	movs	r0, #0
}
  40866c:	4770      	bx	lr
  40866e:	bf00      	nop
  408670:	400e0600 	.word	0x400e0600

00408674 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  408674:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  408676:	4b07      	ldr	r3, [pc, #28]	; (408694 <spi_enable_clock+0x20>)
  408678:	4298      	cmp	r0, r3
  40867a:	d003      	beq.n	408684 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40867c:	4b06      	ldr	r3, [pc, #24]	; (408698 <spi_enable_clock+0x24>)
  40867e:	4298      	cmp	r0, r3
  408680:	d004      	beq.n	40868c <spi_enable_clock+0x18>
  408682:	bd08      	pop	{r3, pc}
  408684:	2015      	movs	r0, #21
  408686:	4b05      	ldr	r3, [pc, #20]	; (40869c <spi_enable_clock+0x28>)
  408688:	4798      	blx	r3
  40868a:	bd08      	pop	{r3, pc}
  40868c:	202a      	movs	r0, #42	; 0x2a
  40868e:	4b03      	ldr	r3, [pc, #12]	; (40869c <spi_enable_clock+0x28>)
  408690:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  408692:	e7f6      	b.n	408682 <spi_enable_clock+0xe>
  408694:	40008000 	.word	0x40008000
  408698:	40058000 	.word	0x40058000
  40869c:	00408621 	.word	0x00408621

004086a0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4086a0:	6843      	ldr	r3, [r0, #4]
  4086a2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4086a6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4086a8:	6843      	ldr	r3, [r0, #4]
  4086aa:	0409      	lsls	r1, r1, #16
  4086ac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4086b0:	4319      	orrs	r1, r3
  4086b2:	6041      	str	r1, [r0, #4]
  4086b4:	4770      	bx	lr

004086b6 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4086b6:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4086b8:	f643 2399 	movw	r3, #15001	; 0x3a99
  4086bc:	6904      	ldr	r4, [r0, #16]
  4086be:	f014 0f01 	tst.w	r4, #1
  4086c2:	d103      	bne.n	4086cc <spi_read+0x16>
		if (!timeout--) {
  4086c4:	3b01      	subs	r3, #1
  4086c6:	d1f9      	bne.n	4086bc <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4086c8:	2001      	movs	r0, #1
  4086ca:	e009      	b.n	4086e0 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4086cc:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4086ce:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4086d0:	f010 0f02 	tst.w	r0, #2
  4086d4:	d002      	beq.n	4086dc <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4086d6:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4086da:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4086dc:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4086de:	2000      	movs	r0, #0
}
  4086e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4086e4:	4770      	bx	lr

004086e6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4086e6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4086e8:	f643 2499 	movw	r4, #15001	; 0x3a99
  4086ec:	6905      	ldr	r5, [r0, #16]
  4086ee:	f015 0f02 	tst.w	r5, #2
  4086f2:	d103      	bne.n	4086fc <spi_write+0x16>
		if (!timeout--) {
  4086f4:	3c01      	subs	r4, #1
  4086f6:	d1f9      	bne.n	4086ec <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4086f8:	2001      	movs	r0, #1
  4086fa:	e00c      	b.n	408716 <spi_write+0x30>
  4086fc:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4086fe:	f014 0f02 	tst.w	r4, #2
  408702:	d006      	beq.n	408712 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  408704:	0412      	lsls	r2, r2, #16
  408706:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40870a:	4311      	orrs	r1, r2
		if (uc_last) {
  40870c:	b10b      	cbz	r3, 408712 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40870e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  408712:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  408714:	2000      	movs	r0, #0
}
  408716:	bc30      	pop	{r4, r5}
  408718:	4770      	bx	lr

0040871a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40871a:	b932      	cbnz	r2, 40872a <spi_set_clock_polarity+0x10>
  40871c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  408720:	6b03      	ldr	r3, [r0, #48]	; 0x30
  408722:	f023 0301 	bic.w	r3, r3, #1
  408726:	6303      	str	r3, [r0, #48]	; 0x30
  408728:	4770      	bx	lr
  40872a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40872e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  408730:	f043 0301 	orr.w	r3, r3, #1
  408734:	6303      	str	r3, [r0, #48]	; 0x30
  408736:	4770      	bx	lr

00408738 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  408738:	b932      	cbnz	r2, 408748 <spi_set_clock_phase+0x10>
  40873a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40873e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  408740:	f023 0302 	bic.w	r3, r3, #2
  408744:	6303      	str	r3, [r0, #48]	; 0x30
  408746:	4770      	bx	lr
  408748:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40874c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40874e:	f043 0302 	orr.w	r3, r3, #2
  408752:	6303      	str	r3, [r0, #48]	; 0x30
  408754:	4770      	bx	lr

00408756 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  408756:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40875a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40875c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  408760:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  408762:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  408764:	431a      	orrs	r2, r3
  408766:	630a      	str	r2, [r1, #48]	; 0x30
  408768:	4770      	bx	lr

0040876a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40876a:	1e43      	subs	r3, r0, #1
  40876c:	4419      	add	r1, r3
  40876e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  408772:	1e43      	subs	r3, r0, #1
  408774:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  408776:	bf94      	ite	ls
  408778:	b200      	sxthls	r0, r0
		return -1;
  40877a:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40877e:	4770      	bx	lr

00408780 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  408780:	b17a      	cbz	r2, 4087a2 <spi_set_baudrate_div+0x22>
{
  408782:	b410      	push	{r4}
  408784:	4614      	mov	r4, r2
  408786:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40878a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40878c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  408790:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  408792:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  408794:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  408798:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40879a:	2000      	movs	r0, #0
}
  40879c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4087a0:	4770      	bx	lr
        return -1;
  4087a2:	f04f 30ff 	mov.w	r0, #4294967295
  4087a6:	4770      	bx	lr

004087a8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4087a8:	b410      	push	{r4}
  4087aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4087ae:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4087b0:	b280      	uxth	r0, r0
  4087b2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4087b4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4087b6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4087ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4087be:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4087c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4087c4:	4770      	bx	lr

004087c6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4087c6:	6943      	ldr	r3, [r0, #20]
  4087c8:	f013 0f02 	tst.w	r3, #2
  4087cc:	d002      	beq.n	4087d4 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4087ce:	61c1      	str	r1, [r0, #28]
	return 0;
  4087d0:	2000      	movs	r0, #0
  4087d2:	4770      	bx	lr
		return 1;
  4087d4:	2001      	movs	r0, #1
}
  4087d6:	4770      	bx	lr

004087d8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4087d8:	6943      	ldr	r3, [r0, #20]
  4087da:	f013 0f01 	tst.w	r3, #1
  4087de:	d003      	beq.n	4087e8 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4087e0:	6983      	ldr	r3, [r0, #24]
  4087e2:	700b      	strb	r3, [r1, #0]
	return 0;
  4087e4:	2000      	movs	r0, #0
  4087e6:	4770      	bx	lr
		return 1;
  4087e8:	2001      	movs	r0, #1
}
  4087ea:	4770      	bx	lr

004087ec <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4087ec:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4087ee:	010b      	lsls	r3, r1, #4
  4087f0:	4293      	cmp	r3, r2
  4087f2:	d914      	bls.n	40881e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4087f4:	00c9      	lsls	r1, r1, #3
  4087f6:	084b      	lsrs	r3, r1, #1
  4087f8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4087fc:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  408800:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  408802:	1e5c      	subs	r4, r3, #1
  408804:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  408808:	428c      	cmp	r4, r1
  40880a:	d901      	bls.n	408810 <usart_set_async_baudrate+0x24>
		return 1;
  40880c:	2001      	movs	r0, #1
  40880e:	e017      	b.n	408840 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  408810:	6841      	ldr	r1, [r0, #4]
  408812:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  408816:	6041      	str	r1, [r0, #4]
  408818:	e00c      	b.n	408834 <usart_set_async_baudrate+0x48>
		return 1;
  40881a:	2001      	movs	r0, #1
  40881c:	e010      	b.n	408840 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40881e:	0859      	lsrs	r1, r3, #1
  408820:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  408824:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  408828:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40882a:	1e5c      	subs	r4, r3, #1
  40882c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  408830:	428c      	cmp	r4, r1
  408832:	d8f2      	bhi.n	40881a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  408834:	0412      	lsls	r2, r2, #16
  408836:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40883a:	431a      	orrs	r2, r3
  40883c:	6202      	str	r2, [r0, #32]

	return 0;
  40883e:	2000      	movs	r0, #0
}
  408840:	f85d 4b04 	ldr.w	r4, [sp], #4
  408844:	4770      	bx	lr
	...

00408848 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  408848:	4b08      	ldr	r3, [pc, #32]	; (40886c <usart_reset+0x24>)
  40884a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40884e:	2300      	movs	r3, #0
  408850:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  408852:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  408854:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  408856:	2388      	movs	r3, #136	; 0x88
  408858:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40885a:	2324      	movs	r3, #36	; 0x24
  40885c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40885e:	f44f 7380 	mov.w	r3, #256	; 0x100
  408862:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  408864:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  408868:	6003      	str	r3, [r0, #0]
  40886a:	4770      	bx	lr
  40886c:	55534100 	.word	0x55534100

00408870 <usart_init_rs232>:
{
  408870:	b570      	push	{r4, r5, r6, lr}
  408872:	4605      	mov	r5, r0
  408874:	460c      	mov	r4, r1
  408876:	4616      	mov	r6, r2
	usart_reset(p_usart);
  408878:	4b0f      	ldr	r3, [pc, #60]	; (4088b8 <usart_init_rs232+0x48>)
  40887a:	4798      	blx	r3
	ul_reg_val = 0;
  40887c:	2200      	movs	r2, #0
  40887e:	4b0f      	ldr	r3, [pc, #60]	; (4088bc <usart_init_rs232+0x4c>)
  408880:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  408882:	b1a4      	cbz	r4, 4088ae <usart_init_rs232+0x3e>
  408884:	4632      	mov	r2, r6
  408886:	6821      	ldr	r1, [r4, #0]
  408888:	4628      	mov	r0, r5
  40888a:	4b0d      	ldr	r3, [pc, #52]	; (4088c0 <usart_init_rs232+0x50>)
  40888c:	4798      	blx	r3
  40888e:	4602      	mov	r2, r0
  408890:	b978      	cbnz	r0, 4088b2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  408892:	6863      	ldr	r3, [r4, #4]
  408894:	68a1      	ldr	r1, [r4, #8]
  408896:	430b      	orrs	r3, r1
  408898:	6921      	ldr	r1, [r4, #16]
  40889a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40889c:	68e1      	ldr	r1, [r4, #12]
  40889e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4088a0:	4906      	ldr	r1, [pc, #24]	; (4088bc <usart_init_rs232+0x4c>)
  4088a2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4088a4:	6869      	ldr	r1, [r5, #4]
  4088a6:	430b      	orrs	r3, r1
  4088a8:	606b      	str	r3, [r5, #4]
}
  4088aa:	4610      	mov	r0, r2
  4088ac:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4088ae:	2201      	movs	r2, #1
  4088b0:	e7fb      	b.n	4088aa <usart_init_rs232+0x3a>
  4088b2:	2201      	movs	r2, #1
  4088b4:	e7f9      	b.n	4088aa <usart_init_rs232+0x3a>
  4088b6:	bf00      	nop
  4088b8:	00408849 	.word	0x00408849
  4088bc:	2040c468 	.word	0x2040c468
  4088c0:	004087ed 	.word	0x004087ed

004088c4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4088c4:	2340      	movs	r3, #64	; 0x40
  4088c6:	6003      	str	r3, [r0, #0]
  4088c8:	4770      	bx	lr

004088ca <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4088ca:	2310      	movs	r3, #16
  4088cc:	6003      	str	r3, [r0, #0]
  4088ce:	4770      	bx	lr

004088d0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4088d0:	6943      	ldr	r3, [r0, #20]
  4088d2:	f013 0f02 	tst.w	r3, #2
  4088d6:	d004      	beq.n	4088e2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4088d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4088dc:	61c1      	str	r1, [r0, #28]
	return 0;
  4088de:	2000      	movs	r0, #0
  4088e0:	4770      	bx	lr
		return 1;
  4088e2:	2001      	movs	r0, #1
}
  4088e4:	4770      	bx	lr

004088e6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4088e6:	6943      	ldr	r3, [r0, #20]
  4088e8:	f013 0f01 	tst.w	r3, #1
  4088ec:	d005      	beq.n	4088fa <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4088ee:	6983      	ldr	r3, [r0, #24]
  4088f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4088f4:	600b      	str	r3, [r1, #0]
	return 0;
  4088f6:	2000      	movs	r0, #0
  4088f8:	4770      	bx	lr
		return 1;
  4088fa:	2001      	movs	r0, #1
}
  4088fc:	4770      	bx	lr

004088fe <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4088fe:	e7fe      	b.n	4088fe <Dummy_Handler>

00408900 <Reset_Handler>:
{
  408900:	b500      	push	{lr}
  408902:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  408904:	4b25      	ldr	r3, [pc, #148]	; (40899c <Reset_Handler+0x9c>)
  408906:	4a26      	ldr	r2, [pc, #152]	; (4089a0 <Reset_Handler+0xa0>)
  408908:	429a      	cmp	r2, r3
  40890a:	d010      	beq.n	40892e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40890c:	4b25      	ldr	r3, [pc, #148]	; (4089a4 <Reset_Handler+0xa4>)
  40890e:	4a23      	ldr	r2, [pc, #140]	; (40899c <Reset_Handler+0x9c>)
  408910:	429a      	cmp	r2, r3
  408912:	d20c      	bcs.n	40892e <Reset_Handler+0x2e>
  408914:	3b01      	subs	r3, #1
  408916:	1a9b      	subs	r3, r3, r2
  408918:	f023 0303 	bic.w	r3, r3, #3
  40891c:	3304      	adds	r3, #4
  40891e:	4413      	add	r3, r2
  408920:	491f      	ldr	r1, [pc, #124]	; (4089a0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  408922:	f851 0b04 	ldr.w	r0, [r1], #4
  408926:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40892a:	429a      	cmp	r2, r3
  40892c:	d1f9      	bne.n	408922 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40892e:	4b1e      	ldr	r3, [pc, #120]	; (4089a8 <Reset_Handler+0xa8>)
  408930:	4a1e      	ldr	r2, [pc, #120]	; (4089ac <Reset_Handler+0xac>)
  408932:	429a      	cmp	r2, r3
  408934:	d20a      	bcs.n	40894c <Reset_Handler+0x4c>
  408936:	3b01      	subs	r3, #1
  408938:	1a9b      	subs	r3, r3, r2
  40893a:	f023 0303 	bic.w	r3, r3, #3
  40893e:	3304      	adds	r3, #4
  408940:	4413      	add	r3, r2
                *pDest++ = 0;
  408942:	2100      	movs	r1, #0
  408944:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  408948:	4293      	cmp	r3, r2
  40894a:	d1fb      	bne.n	408944 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40894c:	4a18      	ldr	r2, [pc, #96]	; (4089b0 <Reset_Handler+0xb0>)
  40894e:	4b19      	ldr	r3, [pc, #100]	; (4089b4 <Reset_Handler+0xb4>)
  408950:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  408954:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  408956:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40895a:	fab3 f383 	clz	r3, r3
  40895e:	095b      	lsrs	r3, r3, #5
  408960:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  408962:	b672      	cpsid	i
  __ASM volatile ("dmb");
  408964:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  408968:	2200      	movs	r2, #0
  40896a:	4b13      	ldr	r3, [pc, #76]	; (4089b8 <Reset_Handler+0xb8>)
  40896c:	701a      	strb	r2, [r3, #0]
	return flags;
  40896e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  408970:	4a12      	ldr	r2, [pc, #72]	; (4089bc <Reset_Handler+0xbc>)
  408972:	6813      	ldr	r3, [r2, #0]
  408974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  408978:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40897a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40897e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  408982:	b129      	cbz	r1, 408990 <Reset_Handler+0x90>
		cpu_irq_enable();
  408984:	2201      	movs	r2, #1
  408986:	4b0c      	ldr	r3, [pc, #48]	; (4089b8 <Reset_Handler+0xb8>)
  408988:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40898a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40898e:	b662      	cpsie	i
        __libc_init_array();
  408990:	4b0b      	ldr	r3, [pc, #44]	; (4089c0 <Reset_Handler+0xc0>)
  408992:	4798      	blx	r3
        main();
  408994:	4b0b      	ldr	r3, [pc, #44]	; (4089c4 <Reset_Handler+0xc4>)
  408996:	4798      	blx	r3
  408998:	e7fe      	b.n	408998 <Reset_Handler+0x98>
  40899a:	bf00      	nop
  40899c:	20400000 	.word	0x20400000
  4089a0:	00411fc4 	.word	0x00411fc4
  4089a4:	20400a28 	.word	0x20400a28
  4089a8:	20410a58 	.word	0x20410a58
  4089ac:	20400a28 	.word	0x20400a28
  4089b0:	e000ed00 	.word	0xe000ed00
  4089b4:	00400000 	.word	0x00400000
  4089b8:	2040003c 	.word	0x2040003c
  4089bc:	e000ed88 	.word	0xe000ed88
  4089c0:	00409681 	.word	0x00409681
  4089c4:	0040952d 	.word	0x0040952d

004089c8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4089c8:	4b3b      	ldr	r3, [pc, #236]	; (408ab8 <SystemCoreClockUpdate+0xf0>)
  4089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4089cc:	f003 0303 	and.w	r3, r3, #3
  4089d0:	2b01      	cmp	r3, #1
  4089d2:	d01d      	beq.n	408a10 <SystemCoreClockUpdate+0x48>
  4089d4:	b183      	cbz	r3, 4089f8 <SystemCoreClockUpdate+0x30>
  4089d6:	2b02      	cmp	r3, #2
  4089d8:	d036      	beq.n	408a48 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4089da:	4b37      	ldr	r3, [pc, #220]	; (408ab8 <SystemCoreClockUpdate+0xf0>)
  4089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4089de:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4089e2:	2b70      	cmp	r3, #112	; 0x70
  4089e4:	d05f      	beq.n	408aa6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4089e6:	4b34      	ldr	r3, [pc, #208]	; (408ab8 <SystemCoreClockUpdate+0xf0>)
  4089e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4089ea:	4934      	ldr	r1, [pc, #208]	; (408abc <SystemCoreClockUpdate+0xf4>)
  4089ec:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4089f0:	680b      	ldr	r3, [r1, #0]
  4089f2:	40d3      	lsrs	r3, r2
  4089f4:	600b      	str	r3, [r1, #0]
  4089f6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4089f8:	4b31      	ldr	r3, [pc, #196]	; (408ac0 <SystemCoreClockUpdate+0xf8>)
  4089fa:	695b      	ldr	r3, [r3, #20]
  4089fc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  408a00:	bf14      	ite	ne
  408a02:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  408a06:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  408a0a:	4b2c      	ldr	r3, [pc, #176]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408a0c:	601a      	str	r2, [r3, #0]
  408a0e:	e7e4      	b.n	4089da <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  408a10:	4b29      	ldr	r3, [pc, #164]	; (408ab8 <SystemCoreClockUpdate+0xf0>)
  408a12:	6a1b      	ldr	r3, [r3, #32]
  408a14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  408a18:	d003      	beq.n	408a22 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  408a1a:	4a2a      	ldr	r2, [pc, #168]	; (408ac4 <SystemCoreClockUpdate+0xfc>)
  408a1c:	4b27      	ldr	r3, [pc, #156]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408a1e:	601a      	str	r2, [r3, #0]
  408a20:	e7db      	b.n	4089da <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  408a22:	4a29      	ldr	r2, [pc, #164]	; (408ac8 <SystemCoreClockUpdate+0x100>)
  408a24:	4b25      	ldr	r3, [pc, #148]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408a26:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  408a28:	4b23      	ldr	r3, [pc, #140]	; (408ab8 <SystemCoreClockUpdate+0xf0>)
  408a2a:	6a1b      	ldr	r3, [r3, #32]
  408a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  408a30:	2b10      	cmp	r3, #16
  408a32:	d005      	beq.n	408a40 <SystemCoreClockUpdate+0x78>
  408a34:	2b20      	cmp	r3, #32
  408a36:	d1d0      	bne.n	4089da <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  408a38:	4a22      	ldr	r2, [pc, #136]	; (408ac4 <SystemCoreClockUpdate+0xfc>)
  408a3a:	4b20      	ldr	r3, [pc, #128]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408a3c:	601a      	str	r2, [r3, #0]
          break;
  408a3e:	e7cc      	b.n	4089da <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  408a40:	4a22      	ldr	r2, [pc, #136]	; (408acc <SystemCoreClockUpdate+0x104>)
  408a42:	4b1e      	ldr	r3, [pc, #120]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408a44:	601a      	str	r2, [r3, #0]
          break;
  408a46:	e7c8      	b.n	4089da <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  408a48:	4b1b      	ldr	r3, [pc, #108]	; (408ab8 <SystemCoreClockUpdate+0xf0>)
  408a4a:	6a1b      	ldr	r3, [r3, #32]
  408a4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  408a50:	d016      	beq.n	408a80 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  408a52:	4a1c      	ldr	r2, [pc, #112]	; (408ac4 <SystemCoreClockUpdate+0xfc>)
  408a54:	4b19      	ldr	r3, [pc, #100]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408a56:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  408a58:	4b17      	ldr	r3, [pc, #92]	; (408ab8 <SystemCoreClockUpdate+0xf0>)
  408a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408a5c:	f003 0303 	and.w	r3, r3, #3
  408a60:	2b02      	cmp	r3, #2
  408a62:	d1ba      	bne.n	4089da <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  408a64:	4a14      	ldr	r2, [pc, #80]	; (408ab8 <SystemCoreClockUpdate+0xf0>)
  408a66:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  408a68:	6a92      	ldr	r2, [r2, #40]	; 0x28
  408a6a:	4814      	ldr	r0, [pc, #80]	; (408abc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  408a6c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  408a70:	6803      	ldr	r3, [r0, #0]
  408a72:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  408a76:	b2d2      	uxtb	r2, r2
  408a78:	fbb3 f3f2 	udiv	r3, r3, r2
  408a7c:	6003      	str	r3, [r0, #0]
  408a7e:	e7ac      	b.n	4089da <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  408a80:	4a11      	ldr	r2, [pc, #68]	; (408ac8 <SystemCoreClockUpdate+0x100>)
  408a82:	4b0e      	ldr	r3, [pc, #56]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408a84:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  408a86:	4b0c      	ldr	r3, [pc, #48]	; (408ab8 <SystemCoreClockUpdate+0xf0>)
  408a88:	6a1b      	ldr	r3, [r3, #32]
  408a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  408a8e:	2b10      	cmp	r3, #16
  408a90:	d005      	beq.n	408a9e <SystemCoreClockUpdate+0xd6>
  408a92:	2b20      	cmp	r3, #32
  408a94:	d1e0      	bne.n	408a58 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  408a96:	4a0b      	ldr	r2, [pc, #44]	; (408ac4 <SystemCoreClockUpdate+0xfc>)
  408a98:	4b08      	ldr	r3, [pc, #32]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408a9a:	601a      	str	r2, [r3, #0]
          break;
  408a9c:	e7dc      	b.n	408a58 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  408a9e:	4a0b      	ldr	r2, [pc, #44]	; (408acc <SystemCoreClockUpdate+0x104>)
  408aa0:	4b06      	ldr	r3, [pc, #24]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408aa2:	601a      	str	r2, [r3, #0]
          break;
  408aa4:	e7d8      	b.n	408a58 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  408aa6:	4a05      	ldr	r2, [pc, #20]	; (408abc <SystemCoreClockUpdate+0xf4>)
  408aa8:	6813      	ldr	r3, [r2, #0]
  408aaa:	4909      	ldr	r1, [pc, #36]	; (408ad0 <SystemCoreClockUpdate+0x108>)
  408aac:	fba1 1303 	umull	r1, r3, r1, r3
  408ab0:	085b      	lsrs	r3, r3, #1
  408ab2:	6013      	str	r3, [r2, #0]
  408ab4:	4770      	bx	lr
  408ab6:	bf00      	nop
  408ab8:	400e0600 	.word	0x400e0600
  408abc:	20400040 	.word	0x20400040
  408ac0:	400e1810 	.word	0x400e1810
  408ac4:	00b71b00 	.word	0x00b71b00
  408ac8:	003d0900 	.word	0x003d0900
  408acc:	007a1200 	.word	0x007a1200
  408ad0:	aaaaaaab 	.word	0xaaaaaaab

00408ad4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  408ad4:	4b12      	ldr	r3, [pc, #72]	; (408b20 <system_init_flash+0x4c>)
  408ad6:	4298      	cmp	r0, r3
  408ad8:	d911      	bls.n	408afe <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  408ada:	4b12      	ldr	r3, [pc, #72]	; (408b24 <system_init_flash+0x50>)
  408adc:	4298      	cmp	r0, r3
  408ade:	d913      	bls.n	408b08 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  408ae0:	4b11      	ldr	r3, [pc, #68]	; (408b28 <system_init_flash+0x54>)
  408ae2:	4298      	cmp	r0, r3
  408ae4:	d914      	bls.n	408b10 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  408ae6:	4b11      	ldr	r3, [pc, #68]	; (408b2c <system_init_flash+0x58>)
  408ae8:	4298      	cmp	r0, r3
  408aea:	d915      	bls.n	408b18 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  408aec:	4b10      	ldr	r3, [pc, #64]	; (408b30 <system_init_flash+0x5c>)
  408aee:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  408af0:	bf94      	ite	ls
  408af2:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  408af6:	4a0f      	ldrhi	r2, [pc, #60]	; (408b34 <system_init_flash+0x60>)
  408af8:	4b0f      	ldr	r3, [pc, #60]	; (408b38 <system_init_flash+0x64>)
  408afa:	601a      	str	r2, [r3, #0]
  408afc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  408afe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  408b02:	4b0d      	ldr	r3, [pc, #52]	; (408b38 <system_init_flash+0x64>)
  408b04:	601a      	str	r2, [r3, #0]
  408b06:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  408b08:	4a0c      	ldr	r2, [pc, #48]	; (408b3c <system_init_flash+0x68>)
  408b0a:	4b0b      	ldr	r3, [pc, #44]	; (408b38 <system_init_flash+0x64>)
  408b0c:	601a      	str	r2, [r3, #0]
  408b0e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  408b10:	4a0b      	ldr	r2, [pc, #44]	; (408b40 <system_init_flash+0x6c>)
  408b12:	4b09      	ldr	r3, [pc, #36]	; (408b38 <system_init_flash+0x64>)
  408b14:	601a      	str	r2, [r3, #0]
  408b16:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  408b18:	4a0a      	ldr	r2, [pc, #40]	; (408b44 <system_init_flash+0x70>)
  408b1a:	4b07      	ldr	r3, [pc, #28]	; (408b38 <system_init_flash+0x64>)
  408b1c:	601a      	str	r2, [r3, #0]
  408b1e:	4770      	bx	lr
  408b20:	01312cff 	.word	0x01312cff
  408b24:	026259ff 	.word	0x026259ff
  408b28:	039386ff 	.word	0x039386ff
  408b2c:	04c4b3ff 	.word	0x04c4b3ff
  408b30:	05f5e0ff 	.word	0x05f5e0ff
  408b34:	04000500 	.word	0x04000500
  408b38:	400e0c00 	.word	0x400e0c00
  408b3c:	04000100 	.word	0x04000100
  408b40:	04000200 	.word	0x04000200
  408b44:	04000300 	.word	0x04000300

00408b48 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  408b48:	4b0a      	ldr	r3, [pc, #40]	; (408b74 <_sbrk+0x2c>)
  408b4a:	681b      	ldr	r3, [r3, #0]
  408b4c:	b153      	cbz	r3, 408b64 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  408b4e:	4b09      	ldr	r3, [pc, #36]	; (408b74 <_sbrk+0x2c>)
  408b50:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  408b52:	181a      	adds	r2, r3, r0
  408b54:	4908      	ldr	r1, [pc, #32]	; (408b78 <_sbrk+0x30>)
  408b56:	4291      	cmp	r1, r2
  408b58:	db08      	blt.n	408b6c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  408b5a:	4610      	mov	r0, r2
  408b5c:	4a05      	ldr	r2, [pc, #20]	; (408b74 <_sbrk+0x2c>)
  408b5e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  408b60:	4618      	mov	r0, r3
  408b62:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  408b64:	4a05      	ldr	r2, [pc, #20]	; (408b7c <_sbrk+0x34>)
  408b66:	4b03      	ldr	r3, [pc, #12]	; (408b74 <_sbrk+0x2c>)
  408b68:	601a      	str	r2, [r3, #0]
  408b6a:	e7f0      	b.n	408b4e <_sbrk+0x6>
		return (caddr_t) -1;	
  408b6c:	f04f 30ff 	mov.w	r0, #4294967295
}
  408b70:	4770      	bx	lr
  408b72:	bf00      	nop
  408b74:	2040c46c 	.word	0x2040c46c
  408b78:	2045fffc 	.word	0x2045fffc
  408b7c:	20412c58 	.word	0x20412c58

00408b80 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  408b80:	f04f 30ff 	mov.w	r0, #4294967295
  408b84:	4770      	bx	lr

00408b86 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  408b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  408b8a:	604b      	str	r3, [r1, #4]

	return 0;
}
  408b8c:	2000      	movs	r0, #0
  408b8e:	4770      	bx	lr

00408b90 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  408b90:	2001      	movs	r0, #1
  408b92:	4770      	bx	lr

00408b94 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  408b94:	2000      	movs	r0, #0
  408b96:	4770      	bx	lr

00408b98 <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  408b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408b9c:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  408b9e:	4b0e      	ldr	r3, [pc, #56]	; (408bd8 <resolve_cb+0x40>)
  408ba0:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  408ba2:	b2cd      	uxtb	r5, r1
  408ba4:	f3c1 2607 	ubfx	r6, r1, #8, #8
  408ba8:	f3c1 4707 	ubfx	r7, r1, #16, #8
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  408bac:	0e0c      	lsrs	r4, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  408bae:	9401      	str	r4, [sp, #4]
  408bb0:	9700      	str	r7, [sp, #0]
  408bb2:	4633      	mov	r3, r6
  408bb4:	462a      	mov	r2, r5
  408bb6:	4601      	mov	r1, r0
  408bb8:	4808      	ldr	r0, [pc, #32]	; (408bdc <resolve_cb+0x44>)
  408bba:	f8df 8030 	ldr.w	r8, [pc, #48]	; 408bec <resolve_cb+0x54>
  408bbe:	47c0      	blx	r8
			
	sprintf(server_host_ip,"%d.%d.%d.%d",(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  408bc0:	9401      	str	r4, [sp, #4]
  408bc2:	9700      	str	r7, [sp, #0]
  408bc4:	4633      	mov	r3, r6
  408bc6:	462a      	mov	r2, r5
  408bc8:	4905      	ldr	r1, [pc, #20]	; (408be0 <resolve_cb+0x48>)
  408bca:	4806      	ldr	r0, [pc, #24]	; (408be4 <resolve_cb+0x4c>)
  408bcc:	4c06      	ldr	r4, [pc, #24]	; (408be8 <resolve_cb+0x50>)
  408bce:	47a0      	blx	r4
}
  408bd0:	b002      	add	sp, #8
  408bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408bd6:	bf00      	nop
  408bd8:	2040ca18 	.word	0x2040ca18
  408bdc:	00411974 	.word	0x00411974
  408be0:	004119a4 	.word	0x004119a4
  408be4:	20410a18 	.word	0x20410a18
  408be8:	00409a69 	.word	0x00409a69
  408bec:	004096d1 	.word	0x004096d1

00408bf0 <socket_cb>:
 * \param[in] pvMsg A structure contains notification informations.
 *
 * \return None.
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  408bf0:	b530      	push	{r4, r5, lr}
  408bf2:	b0c1      	sub	sp, #260	; 0x104
  
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  408bf4:	4b6d      	ldr	r3, [pc, #436]	; (408dac <socket_cb+0x1bc>)
  408bf6:	f993 5000 	ldrsb.w	r5, [r3]
  408bfa:	4285      	cmp	r5, r0
  408bfc:	d001      	beq.n	408c02 <socket_cb+0x12>

		default:
			break;
		}
	}
}
  408bfe:	b041      	add	sp, #260	; 0x104
  408c00:	bd30      	pop	{r4, r5, pc}
  408c02:	4614      	mov	r4, r2
		switch (u8Msg) {
  408c04:	2906      	cmp	r1, #6
  408c06:	d05a      	beq.n	408cbe <socket_cb+0xce>
  408c08:	2907      	cmp	r1, #7
  408c0a:	f000 808d 	beq.w	408d28 <socket_cb+0x138>
  408c0e:	2905      	cmp	r1, #5
  408c10:	d1f5      	bne.n	408bfe <socket_cb+0xe>
			printf("socket_msg_connect\n"); 
  408c12:	4867      	ldr	r0, [pc, #412]	; (408db0 <socket_cb+0x1c0>)
  408c14:	4b67      	ldr	r3, [pc, #412]	; (408db4 <socket_cb+0x1c4>)
  408c16:	4798      	blx	r3
			if (gbTcpConnection) {
  408c18:	4b67      	ldr	r3, [pc, #412]	; (408db8 <socket_cb+0x1c8>)
  408c1a:	781b      	ldrb	r3, [r3, #0]
  408c1c:	2b00      	cmp	r3, #0
  408c1e:	d0ee      	beq.n	408bfe <socket_cb+0xe>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  408c20:	f44f 62af 	mov.w	r2, #1400	; 0x578
  408c24:	2100      	movs	r1, #0
  408c26:	4865      	ldr	r0, [pc, #404]	; (408dbc <socket_cb+0x1cc>)
  408c28:	4b65      	ldr	r3, [pc, #404]	; (408dc0 <socket_cb+0x1d0>)
  408c2a:	4798      	blx	r3
				if(!first_req_done){
  408c2c:	4b65      	ldr	r3, [pc, #404]	; (408dc4 <socket_cb+0x1d4>)
  408c2e:	681b      	ldr	r3, [r3, #0]
  408c30:	bb03      	cbnz	r3, 408c74 <socket_cb+0x84>
					sprintf((char *)gau8ReceivedBuffer, "%s", "GET /deleteAll HTTP/1.1\r\nhost: embarcados-backend.herokuapp.com\r\nAccept: */*\r\n\r\n");
  408c32:	2251      	movs	r2, #81	; 0x51
  408c34:	4964      	ldr	r1, [pc, #400]	; (408dc8 <socket_cb+0x1d8>)
  408c36:	4861      	ldr	r0, [pc, #388]	; (408dbc <socket_cb+0x1cc>)
  408c38:	4b64      	ldr	r3, [pc, #400]	; (408dcc <socket_cb+0x1dc>)
  408c3a:	4798      	blx	r3
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  408c3c:	2c00      	cmp	r4, #0
  408c3e:	d030      	beq.n	408ca2 <socket_cb+0xb2>
  408c40:	f994 3001 	ldrsb.w	r3, [r4, #1]
  408c44:	2b00      	cmp	r3, #0
  408c46:	db2c      	blt.n	408ca2 <socket_cb+0xb2>
					printf("send \n");
  408c48:	4861      	ldr	r0, [pc, #388]	; (408dd0 <socket_cb+0x1e0>)
  408c4a:	4b5a      	ldr	r3, [pc, #360]	; (408db4 <socket_cb+0x1c4>)
  408c4c:	4798      	blx	r3
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  408c4e:	4c5b      	ldr	r4, [pc, #364]	; (408dbc <socket_cb+0x1cc>)
  408c50:	4620      	mov	r0, r4
  408c52:	4b60      	ldr	r3, [pc, #384]	; (408dd4 <socket_cb+0x1e4>)
  408c54:	4798      	blx	r3
  408c56:	2300      	movs	r3, #0
  408c58:	b282      	uxth	r2, r0
  408c5a:	4621      	mov	r1, r4
  408c5c:	4853      	ldr	r0, [pc, #332]	; (408dac <socket_cb+0x1bc>)
  408c5e:	f990 0000 	ldrsb.w	r0, [r0]
  408c62:	4c5d      	ldr	r4, [pc, #372]	; (408dd8 <socket_cb+0x1e8>)
  408c64:	47a0      	blx	r4
					if(first_req_done){
  408c66:	4b57      	ldr	r3, [pc, #348]	; (408dc4 <socket_cb+0x1d4>)
  408c68:	681b      	ldr	r3, [r3, #0]
  408c6a:	b94b      	cbnz	r3, 408c80 <socket_cb+0x90>
					first_req_done = 1;
  408c6c:	2201      	movs	r2, #1
  408c6e:	4b55      	ldr	r3, [pc, #340]	; (408dc4 <socket_cb+0x1d4>)
  408c70:	601a      	str	r2, [r3, #0]
  408c72:	e7c4      	b.n	408bfe <socket_cb+0xe>
					sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER);
  408c74:	2251      	movs	r2, #81	; 0x51
  408c76:	4959      	ldr	r1, [pc, #356]	; (408ddc <socket_cb+0x1ec>)
  408c78:	4850      	ldr	r0, [pc, #320]	; (408dbc <socket_cb+0x1cc>)
  408c7a:	4b54      	ldr	r3, [pc, #336]	; (408dcc <socket_cb+0x1dc>)
  408c7c:	4798      	blx	r3
  408c7e:	e7dd      	b.n	408c3c <socket_cb+0x4c>
						memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  408c80:	4c4e      	ldr	r4, [pc, #312]	; (408dbc <socket_cb+0x1cc>)
  408c82:	f44f 65af 	mov.w	r5, #1400	; 0x578
  408c86:	462a      	mov	r2, r5
  408c88:	2100      	movs	r1, #0
  408c8a:	4620      	mov	r0, r4
  408c8c:	4b4c      	ldr	r3, [pc, #304]	; (408dc0 <socket_cb+0x1d0>)
  408c8e:	4798      	blx	r3
						recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);	
  408c90:	2300      	movs	r3, #0
  408c92:	462a      	mov	r2, r5
  408c94:	4621      	mov	r1, r4
  408c96:	4845      	ldr	r0, [pc, #276]	; (408dac <socket_cb+0x1bc>)
  408c98:	f990 0000 	ldrsb.w	r0, [r0]
  408c9c:	4c50      	ldr	r4, [pc, #320]	; (408de0 <socket_cb+0x1f0>)
  408c9e:	47a0      	blx	r4
  408ca0:	e7e4      	b.n	408c6c <socket_cb+0x7c>
					printf("socket_cb: connect error!\r\n");
  408ca2:	4850      	ldr	r0, [pc, #320]	; (408de4 <socket_cb+0x1f4>)
  408ca4:	4b43      	ldr	r3, [pc, #268]	; (408db4 <socket_cb+0x1c4>)
  408ca6:	4798      	blx	r3
					gbTcpConnection = false;
  408ca8:	2200      	movs	r2, #0
  408caa:	4b43      	ldr	r3, [pc, #268]	; (408db8 <socket_cb+0x1c8>)
  408cac:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
  408cae:	4c3f      	ldr	r4, [pc, #252]	; (408dac <socket_cb+0x1bc>)
  408cb0:	f994 0000 	ldrsb.w	r0, [r4]
  408cb4:	4b4c      	ldr	r3, [pc, #304]	; (408de8 <socket_cb+0x1f8>)
  408cb6:	4798      	blx	r3
					tcp_client_socket = -1;
  408cb8:	23ff      	movs	r3, #255	; 0xff
  408cba:	7023      	strb	r3, [r4, #0]
  408cbc:	e79f      	b.n	408bfe <socket_cb+0xe>
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  408cbe:	b342      	cbz	r2, 408d12 <socket_cb+0x122>
  408cc0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  408cc4:	2b00      	cmp	r3, #0
  408cc6:	dd24      	ble.n	408d12 <socket_cb+0x122>
        		char *result = strstr(pstrRecv->pu8Buffer, "musicName:");
  408cc8:	4948      	ldr	r1, [pc, #288]	; (408dec <socket_cb+0x1fc>)
  408cca:	6810      	ldr	r0, [r2, #0]
  408ccc:	4b48      	ldr	r3, [pc, #288]	; (408df0 <socket_cb+0x200>)
  408cce:	4798      	blx	r3
				if(result != NULL){
  408cd0:	4604      	mov	r4, r0
  408cd2:	2800      	cmp	r0, #0
  408cd4:	d093      	beq.n	408bfe <socket_cb+0xe>
					memset(music_server,0,CHAR_SIZE);
  408cd6:	22ff      	movs	r2, #255	; 0xff
  408cd8:	2100      	movs	r1, #0
  408cda:	4668      	mov	r0, sp
  408cdc:	4b38      	ldr	r3, [pc, #224]	; (408dc0 <socket_cb+0x1d0>)
  408cde:	4798      	blx	r3
					result += 10;
  408ce0:	f104 020a 	add.w	r2, r4, #10
					while (*result != '"'){
  408ce4:	7aa3      	ldrb	r3, [r4, #10]
  408ce6:	2b22      	cmp	r3, #34	; 0x22
  408ce8:	d007      	beq.n	408cfa <socket_cb+0x10a>
  408cea:	f10d 31ff 	add.w	r1, sp, #4294967295
						music_server[i] = *result;
  408cee:	f801 3f01 	strb.w	r3, [r1, #1]!
					while (*result != '"'){
  408cf2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  408cf6:	2b22      	cmp	r3, #34	; 0x22
  408cf8:	d1f9      	bne.n	408cee <socket_cb+0xfe>
					printf("NAME BEFORE: %s",music_server);
  408cfa:	4669      	mov	r1, sp
  408cfc:	483d      	ldr	r0, [pc, #244]	; (408df4 <socket_cb+0x204>)
  408cfe:	4b2d      	ldr	r3, [pc, #180]	; (408db4 <socket_cb+0x1c4>)
  408d00:	4798      	blx	r3
					xQueueSend( sdQueue, &music_server, NULL);
  408d02:	2300      	movs	r3, #0
  408d04:	461a      	mov	r2, r3
  408d06:	4669      	mov	r1, sp
  408d08:	483b      	ldr	r0, [pc, #236]	; (408df8 <socket_cb+0x208>)
  408d0a:	6800      	ldr	r0, [r0, #0]
  408d0c:	4c3b      	ldr	r4, [pc, #236]	; (408dfc <socket_cb+0x20c>)
  408d0e:	47a0      	blx	r4
  408d10:	e775      	b.n	408bfe <socket_cb+0xe>
				printf("socket_cb: recv error!\r\n");
  408d12:	483b      	ldr	r0, [pc, #236]	; (408e00 <socket_cb+0x210>)
  408d14:	4b27      	ldr	r3, [pc, #156]	; (408db4 <socket_cb+0x1c4>)
  408d16:	4798      	blx	r3
  				close(tcp_client_socket);
  408d18:	4c24      	ldr	r4, [pc, #144]	; (408dac <socket_cb+0x1bc>)
  408d1a:	f994 0000 	ldrsb.w	r0, [r4]
  408d1e:	4b32      	ldr	r3, [pc, #200]	; (408de8 <socket_cb+0x1f8>)
  408d20:	4798      	blx	r3
  				tcp_client_socket = -1;
  408d22:	23ff      	movs	r3, #255	; 0xff
  408d24:	7023      	strb	r3, [r4, #0]
  408d26:	e76a      	b.n	408bfe <socket_cb+0xe>
			memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  408d28:	f44f 62af 	mov.w	r2, #1400	; 0x578
  408d2c:	2100      	movs	r1, #0
  408d2e:	4823      	ldr	r0, [pc, #140]	; (408dbc <socket_cb+0x1cc>)
  408d30:	4b23      	ldr	r3, [pc, #140]	; (408dc0 <socket_cb+0x1d0>)
  408d32:	4798      	blx	r3
			if(QuantidadeMusica>0){
  408d34:	4b33      	ldr	r3, [pc, #204]	; (408e04 <socket_cb+0x214>)
  408d36:	681b      	ldr	r3, [r3, #0]
  408d38:	2b00      	cmp	r3, #0
  408d3a:	dd17      	ble.n	408d6c <socket_cb+0x17c>
				QuantidadeMusica--;
  408d3c:	3b01      	subs	r3, #1
  408d3e:	4a31      	ldr	r2, [pc, #196]	; (408e04 <socket_cb+0x214>)
  408d40:	6013      	str	r3, [r2, #0]
				sprintf((char *)gau8ReceivedBuffer, "GET /new/%s HTTP/1.1\r\nhost: embarcados-backend.herokuapp.com\r\nAccept: */*\r\n\r\n", musicastxt[QuantidadeMusica]);
  408d42:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  408d46:	4c1d      	ldr	r4, [pc, #116]	; (408dbc <socket_cb+0x1cc>)
  408d48:	4a2f      	ldr	r2, [pc, #188]	; (408e08 <socket_cb+0x218>)
  408d4a:	441a      	add	r2, r3
  408d4c:	492f      	ldr	r1, [pc, #188]	; (408e0c <socket_cb+0x21c>)
  408d4e:	4620      	mov	r0, r4
  408d50:	4b2f      	ldr	r3, [pc, #188]	; (408e10 <socket_cb+0x220>)
  408d52:	4798      	blx	r3
				send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  408d54:	4620      	mov	r0, r4
  408d56:	4b1f      	ldr	r3, [pc, #124]	; (408dd4 <socket_cb+0x1e4>)
  408d58:	4798      	blx	r3
  408d5a:	2300      	movs	r3, #0
  408d5c:	b282      	uxth	r2, r0
  408d5e:	4621      	mov	r1, r4
  408d60:	4812      	ldr	r0, [pc, #72]	; (408dac <socket_cb+0x1bc>)
  408d62:	f990 0000 	ldrsb.w	r0, [r0]
  408d66:	4c1c      	ldr	r4, [pc, #112]	; (408dd8 <socket_cb+0x1e8>)
  408d68:	47a0      	blx	r4
  408d6a:	e748      	b.n	408bfe <socket_cb+0xe>
				sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER);
  408d6c:	4c13      	ldr	r4, [pc, #76]	; (408dbc <socket_cb+0x1cc>)
  408d6e:	2251      	movs	r2, #81	; 0x51
  408d70:	491a      	ldr	r1, [pc, #104]	; (408ddc <socket_cb+0x1ec>)
  408d72:	4620      	mov	r0, r4
  408d74:	4b15      	ldr	r3, [pc, #84]	; (408dcc <socket_cb+0x1dc>)
  408d76:	4798      	blx	r3
				send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  408d78:	4620      	mov	r0, r4
  408d7a:	4b16      	ldr	r3, [pc, #88]	; (408dd4 <socket_cb+0x1e4>)
  408d7c:	4798      	blx	r3
  408d7e:	2300      	movs	r3, #0
  408d80:	b282      	uxth	r2, r0
  408d82:	4621      	mov	r1, r4
  408d84:	4628      	mov	r0, r5
  408d86:	4d14      	ldr	r5, [pc, #80]	; (408dd8 <socket_cb+0x1e8>)
  408d88:	47a8      	blx	r5
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  408d8a:	f44f 65af 	mov.w	r5, #1400	; 0x578
  408d8e:	462a      	mov	r2, r5
  408d90:	2100      	movs	r1, #0
  408d92:	4620      	mov	r0, r4
  408d94:	4b0a      	ldr	r3, [pc, #40]	; (408dc0 <socket_cb+0x1d0>)
  408d96:	4798      	blx	r3
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  408d98:	2300      	movs	r3, #0
  408d9a:	462a      	mov	r2, r5
  408d9c:	4621      	mov	r1, r4
  408d9e:	4803      	ldr	r0, [pc, #12]	; (408dac <socket_cb+0x1bc>)
  408da0:	f990 0000 	ldrsb.w	r0, [r0]
  408da4:	4c0e      	ldr	r4, [pc, #56]	; (408de0 <socket_cb+0x1f0>)
  408da6:	47a0      	blx	r4
}
  408da8:	e729      	b.n	408bfe <socket_cb+0xe>
  408daa:	bf00      	nop
  408dac:	20400074 	.word	0x20400074
  408db0:	004119b0 	.word	0x004119b0
  408db4:	004096d1 	.word	0x004096d1
  408db8:	2040ca14 	.word	0x2040ca14
  408dbc:	2040c49c 	.word	0x2040c49c
  408dc0:	0040982d 	.word	0x0040982d
  408dc4:	2040c478 	.word	0x2040c478
  408dc8:	004119c4 	.word	0x004119c4
  408dcc:	004096f9 	.word	0x004096f9
  408dd0:	00411a6c 	.word	0x00411a6c
  408dd4:	00409e81 	.word	0x00409e81
  408dd8:	00407945 	.word	0x00407945
  408ddc:	00411a18 	.word	0x00411a18
  408de0:	004079e1 	.word	0x004079e1
  408de4:	00411a74 	.word	0x00411a74
  408de8:	00407a81 	.word	0x00407a81
  408dec:	00411a90 	.word	0x00411a90
  408df0:	0040a20d 	.word	0x0040a20d
  408df4:	00411a9c 	.word	0x00411a9c
  408df8:	20410a28 	.word	0x20410a28
  408dfc:	00403b79 	.word	0x00403b79
  408e00:	00411aac 	.word	0x00411aac
  408e04:	2040c474 	.word	0x2040c474
  408e08:	2040cb60 	.word	0x2040cb60
  408e0c:	00411ac8 	.word	0x00411ac8
  408e10:	00409a69 	.word	0x00409a69

00408e14 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 *
 * \return None.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  408e14:	b510      	push	{r4, lr}
  408e16:	b082      	sub	sp, #8
	switch (u8MsgType) {
  408e18:	282c      	cmp	r0, #44	; 0x2c
  408e1a:	d003      	beq.n	408e24 <wifi_cb+0x10>
  408e1c:	2832      	cmp	r0, #50	; 0x32
  408e1e:	d013      	beq.n	408e48 <wifi_cb+0x34>
	default:
	{
		break;
	}
	}
}
  408e20:	b002      	add	sp, #8
  408e22:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  408e24:	780b      	ldrb	r3, [r1, #0]
  408e26:	2b01      	cmp	r3, #1
  408e28:	d008      	beq.n	408e3c <wifi_cb+0x28>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  408e2a:	2b00      	cmp	r3, #0
  408e2c:	d1f8      	bne.n	408e20 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  408e2e:	480e      	ldr	r0, [pc, #56]	; (408e68 <wifi_cb+0x54>)
  408e30:	4b0e      	ldr	r3, [pc, #56]	; (408e6c <wifi_cb+0x58>)
  408e32:	4798      	blx	r3
 			wifi_connected = 0;
  408e34:	2200      	movs	r2, #0
  408e36:	4b0e      	ldr	r3, [pc, #56]	; (408e70 <wifi_cb+0x5c>)
  408e38:	701a      	strb	r2, [r3, #0]
  408e3a:	e7f1      	b.n	408e20 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  408e3c:	480d      	ldr	r0, [pc, #52]	; (408e74 <wifi_cb+0x60>)
  408e3e:	4b0b      	ldr	r3, [pc, #44]	; (408e6c <wifi_cb+0x58>)
  408e40:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  408e42:	4b0d      	ldr	r3, [pc, #52]	; (408e78 <wifi_cb+0x64>)
  408e44:	4798      	blx	r3
  408e46:	e7eb      	b.n	408e20 <wifi_cb+0xc>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  408e48:	788b      	ldrb	r3, [r1, #2]
  408e4a:	784a      	ldrb	r2, [r1, #1]
  408e4c:	7808      	ldrb	r0, [r1, #0]
  408e4e:	78c9      	ldrb	r1, [r1, #3]
  408e50:	9100      	str	r1, [sp, #0]
  408e52:	4601      	mov	r1, r0
  408e54:	4809      	ldr	r0, [pc, #36]	; (408e7c <wifi_cb+0x68>)
  408e56:	4c05      	ldr	r4, [pc, #20]	; (408e6c <wifi_cb+0x58>)
  408e58:	47a0      	blx	r4
		wifi_connected = M2M_WIFI_CONNECTED;
  408e5a:	2201      	movs	r2, #1
  408e5c:	4b04      	ldr	r3, [pc, #16]	; (408e70 <wifi_cb+0x5c>)
  408e5e:	701a      	strb	r2, [r3, #0]
		gethostbyname((uint8_t *)server_host_name);
  408e60:	4807      	ldr	r0, [pc, #28]	; (408e80 <wifi_cb+0x6c>)
  408e62:	4b08      	ldr	r3, [pc, #32]	; (408e84 <wifi_cb+0x70>)
  408e64:	4798      	blx	r3
}
  408e66:	e7db      	b.n	408e20 <wifi_cb+0xc>
  408e68:	00411ca4 	.word	0x00411ca4
  408e6c:	004096d1 	.word	0x004096d1
  408e70:	2040ca1c 	.word	0x2040ca1c
  408e74:	00411c84 	.word	0x00411c84
  408e78:	00406341 	.word	0x00406341
  408e7c:	00411cc8 	.word	0x00411cc8
  408e80:	2040004c 	.word	0x2040004c
  408e84:	00407b01 	.word	0x00407b01

00408e88 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  408e88:	b5f0      	push	{r4, r5, r6, r7, lr}
  408e8a:	b083      	sub	sp, #12
  408e8c:	4605      	mov	r5, r0
  408e8e:	460c      	mov	r4, r1
	uint32_t val = 0;
  408e90:	2300      	movs	r3, #0
  408e92:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  408e94:	4b2a      	ldr	r3, [pc, #168]	; (408f40 <usart_serial_getchar+0xb8>)
  408e96:	4298      	cmp	r0, r3
  408e98:	d013      	beq.n	408ec2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  408e9a:	4b2a      	ldr	r3, [pc, #168]	; (408f44 <usart_serial_getchar+0xbc>)
  408e9c:	4298      	cmp	r0, r3
  408e9e:	d018      	beq.n	408ed2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  408ea0:	4b29      	ldr	r3, [pc, #164]	; (408f48 <usart_serial_getchar+0xc0>)
  408ea2:	4298      	cmp	r0, r3
  408ea4:	d01d      	beq.n	408ee2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  408ea6:	4b29      	ldr	r3, [pc, #164]	; (408f4c <usart_serial_getchar+0xc4>)
  408ea8:	429d      	cmp	r5, r3
  408eaa:	d022      	beq.n	408ef2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  408eac:	4b28      	ldr	r3, [pc, #160]	; (408f50 <usart_serial_getchar+0xc8>)
  408eae:	429d      	cmp	r5, r3
  408eb0:	d027      	beq.n	408f02 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  408eb2:	4b28      	ldr	r3, [pc, #160]	; (408f54 <usart_serial_getchar+0xcc>)
  408eb4:	429d      	cmp	r5, r3
  408eb6:	d02e      	beq.n	408f16 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  408eb8:	4b27      	ldr	r3, [pc, #156]	; (408f58 <usart_serial_getchar+0xd0>)
  408eba:	429d      	cmp	r5, r3
  408ebc:	d035      	beq.n	408f2a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  408ebe:	b003      	add	sp, #12
  408ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  408ec2:	461f      	mov	r7, r3
  408ec4:	4e25      	ldr	r6, [pc, #148]	; (408f5c <usart_serial_getchar+0xd4>)
  408ec6:	4621      	mov	r1, r4
  408ec8:	4638      	mov	r0, r7
  408eca:	47b0      	blx	r6
  408ecc:	2800      	cmp	r0, #0
  408ece:	d1fa      	bne.n	408ec6 <usart_serial_getchar+0x3e>
  408ed0:	e7e9      	b.n	408ea6 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  408ed2:	461f      	mov	r7, r3
  408ed4:	4e21      	ldr	r6, [pc, #132]	; (408f5c <usart_serial_getchar+0xd4>)
  408ed6:	4621      	mov	r1, r4
  408ed8:	4638      	mov	r0, r7
  408eda:	47b0      	blx	r6
  408edc:	2800      	cmp	r0, #0
  408ede:	d1fa      	bne.n	408ed6 <usart_serial_getchar+0x4e>
  408ee0:	e7e4      	b.n	408eac <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  408ee2:	461f      	mov	r7, r3
  408ee4:	4e1d      	ldr	r6, [pc, #116]	; (408f5c <usart_serial_getchar+0xd4>)
  408ee6:	4621      	mov	r1, r4
  408ee8:	4638      	mov	r0, r7
  408eea:	47b0      	blx	r6
  408eec:	2800      	cmp	r0, #0
  408eee:	d1fa      	bne.n	408ee6 <usart_serial_getchar+0x5e>
  408ef0:	e7df      	b.n	408eb2 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  408ef2:	461f      	mov	r7, r3
  408ef4:	4e19      	ldr	r6, [pc, #100]	; (408f5c <usart_serial_getchar+0xd4>)
  408ef6:	4621      	mov	r1, r4
  408ef8:	4638      	mov	r0, r7
  408efa:	47b0      	blx	r6
  408efc:	2800      	cmp	r0, #0
  408efe:	d1fa      	bne.n	408ef6 <usart_serial_getchar+0x6e>
  408f00:	e7da      	b.n	408eb8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  408f02:	461e      	mov	r6, r3
  408f04:	4d16      	ldr	r5, [pc, #88]	; (408f60 <usart_serial_getchar+0xd8>)
  408f06:	a901      	add	r1, sp, #4
  408f08:	4630      	mov	r0, r6
  408f0a:	47a8      	blx	r5
  408f0c:	2800      	cmp	r0, #0
  408f0e:	d1fa      	bne.n	408f06 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  408f10:	9b01      	ldr	r3, [sp, #4]
  408f12:	7023      	strb	r3, [r4, #0]
  408f14:	e7d3      	b.n	408ebe <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  408f16:	461e      	mov	r6, r3
  408f18:	4d11      	ldr	r5, [pc, #68]	; (408f60 <usart_serial_getchar+0xd8>)
  408f1a:	a901      	add	r1, sp, #4
  408f1c:	4630      	mov	r0, r6
  408f1e:	47a8      	blx	r5
  408f20:	2800      	cmp	r0, #0
  408f22:	d1fa      	bne.n	408f1a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  408f24:	9b01      	ldr	r3, [sp, #4]
  408f26:	7023      	strb	r3, [r4, #0]
  408f28:	e7c9      	b.n	408ebe <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  408f2a:	461e      	mov	r6, r3
  408f2c:	4d0c      	ldr	r5, [pc, #48]	; (408f60 <usart_serial_getchar+0xd8>)
  408f2e:	a901      	add	r1, sp, #4
  408f30:	4630      	mov	r0, r6
  408f32:	47a8      	blx	r5
  408f34:	2800      	cmp	r0, #0
  408f36:	d1fa      	bne.n	408f2e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  408f38:	9b01      	ldr	r3, [sp, #4]
  408f3a:	7023      	strb	r3, [r4, #0]
}
  408f3c:	e7bf      	b.n	408ebe <usart_serial_getchar+0x36>
  408f3e:	bf00      	nop
  408f40:	400e0800 	.word	0x400e0800
  408f44:	400e0a00 	.word	0x400e0a00
  408f48:	400e1a00 	.word	0x400e1a00
  408f4c:	400e1c00 	.word	0x400e1c00
  408f50:	40024000 	.word	0x40024000
  408f54:	40028000 	.word	0x40028000
  408f58:	4002c000 	.word	0x4002c000
  408f5c:	004087d9 	.word	0x004087d9
  408f60:	004088e7 	.word	0x004088e7

00408f64 <usart_serial_putchar>:
{
  408f64:	b570      	push	{r4, r5, r6, lr}
  408f66:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  408f68:	4b2a      	ldr	r3, [pc, #168]	; (409014 <usart_serial_putchar+0xb0>)
  408f6a:	4298      	cmp	r0, r3
  408f6c:	d013      	beq.n	408f96 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  408f6e:	4b2a      	ldr	r3, [pc, #168]	; (409018 <usart_serial_putchar+0xb4>)
  408f70:	4298      	cmp	r0, r3
  408f72:	d019      	beq.n	408fa8 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  408f74:	4b29      	ldr	r3, [pc, #164]	; (40901c <usart_serial_putchar+0xb8>)
  408f76:	4298      	cmp	r0, r3
  408f78:	d01f      	beq.n	408fba <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  408f7a:	4b29      	ldr	r3, [pc, #164]	; (409020 <usart_serial_putchar+0xbc>)
  408f7c:	4298      	cmp	r0, r3
  408f7e:	d025      	beq.n	408fcc <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  408f80:	4b28      	ldr	r3, [pc, #160]	; (409024 <usart_serial_putchar+0xc0>)
  408f82:	4298      	cmp	r0, r3
  408f84:	d02b      	beq.n	408fde <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  408f86:	4b28      	ldr	r3, [pc, #160]	; (409028 <usart_serial_putchar+0xc4>)
  408f88:	4298      	cmp	r0, r3
  408f8a:	d031      	beq.n	408ff0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  408f8c:	4b27      	ldr	r3, [pc, #156]	; (40902c <usart_serial_putchar+0xc8>)
  408f8e:	4298      	cmp	r0, r3
  408f90:	d037      	beq.n	409002 <usart_serial_putchar+0x9e>
	return 0;
  408f92:	2000      	movs	r0, #0
}
  408f94:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  408f96:	461e      	mov	r6, r3
  408f98:	4d25      	ldr	r5, [pc, #148]	; (409030 <usart_serial_putchar+0xcc>)
  408f9a:	4621      	mov	r1, r4
  408f9c:	4630      	mov	r0, r6
  408f9e:	47a8      	blx	r5
  408fa0:	2800      	cmp	r0, #0
  408fa2:	d1fa      	bne.n	408f9a <usart_serial_putchar+0x36>
		return 1;
  408fa4:	2001      	movs	r0, #1
  408fa6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  408fa8:	461e      	mov	r6, r3
  408faa:	4d21      	ldr	r5, [pc, #132]	; (409030 <usart_serial_putchar+0xcc>)
  408fac:	4621      	mov	r1, r4
  408fae:	4630      	mov	r0, r6
  408fb0:	47a8      	blx	r5
  408fb2:	2800      	cmp	r0, #0
  408fb4:	d1fa      	bne.n	408fac <usart_serial_putchar+0x48>
		return 1;
  408fb6:	2001      	movs	r0, #1
  408fb8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  408fba:	461e      	mov	r6, r3
  408fbc:	4d1c      	ldr	r5, [pc, #112]	; (409030 <usart_serial_putchar+0xcc>)
  408fbe:	4621      	mov	r1, r4
  408fc0:	4630      	mov	r0, r6
  408fc2:	47a8      	blx	r5
  408fc4:	2800      	cmp	r0, #0
  408fc6:	d1fa      	bne.n	408fbe <usart_serial_putchar+0x5a>
		return 1;
  408fc8:	2001      	movs	r0, #1
  408fca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  408fcc:	461e      	mov	r6, r3
  408fce:	4d18      	ldr	r5, [pc, #96]	; (409030 <usart_serial_putchar+0xcc>)
  408fd0:	4621      	mov	r1, r4
  408fd2:	4630      	mov	r0, r6
  408fd4:	47a8      	blx	r5
  408fd6:	2800      	cmp	r0, #0
  408fd8:	d1fa      	bne.n	408fd0 <usart_serial_putchar+0x6c>
		return 1;
  408fda:	2001      	movs	r0, #1
  408fdc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  408fde:	461e      	mov	r6, r3
  408fe0:	4d14      	ldr	r5, [pc, #80]	; (409034 <usart_serial_putchar+0xd0>)
  408fe2:	4621      	mov	r1, r4
  408fe4:	4630      	mov	r0, r6
  408fe6:	47a8      	blx	r5
  408fe8:	2800      	cmp	r0, #0
  408fea:	d1fa      	bne.n	408fe2 <usart_serial_putchar+0x7e>
		return 1;
  408fec:	2001      	movs	r0, #1
  408fee:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  408ff0:	461e      	mov	r6, r3
  408ff2:	4d10      	ldr	r5, [pc, #64]	; (409034 <usart_serial_putchar+0xd0>)
  408ff4:	4621      	mov	r1, r4
  408ff6:	4630      	mov	r0, r6
  408ff8:	47a8      	blx	r5
  408ffa:	2800      	cmp	r0, #0
  408ffc:	d1fa      	bne.n	408ff4 <usart_serial_putchar+0x90>
		return 1;
  408ffe:	2001      	movs	r0, #1
  409000:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  409002:	461e      	mov	r6, r3
  409004:	4d0b      	ldr	r5, [pc, #44]	; (409034 <usart_serial_putchar+0xd0>)
  409006:	4621      	mov	r1, r4
  409008:	4630      	mov	r0, r6
  40900a:	47a8      	blx	r5
  40900c:	2800      	cmp	r0, #0
  40900e:	d1fa      	bne.n	409006 <usart_serial_putchar+0xa2>
		return 1;
  409010:	2001      	movs	r0, #1
  409012:	bd70      	pop	{r4, r5, r6, pc}
  409014:	400e0800 	.word	0x400e0800
  409018:	400e0a00 	.word	0x400e0a00
  40901c:	400e1a00 	.word	0x400e1a00
  409020:	400e1c00 	.word	0x400e1c00
  409024:	40024000 	.word	0x40024000
  409028:	40028000 	.word	0x40028000
  40902c:	4002c000 	.word	0x4002c000
  409030:	004087c7 	.word	0x004087c7
  409034:	004088d1 	.word	0x004088d1

00409038 <vApplicationStackOverflowHook>:
{
  409038:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40903a:	460a      	mov	r2, r1
  40903c:	4601      	mov	r1, r0
  40903e:	4802      	ldr	r0, [pc, #8]	; (409048 <vApplicationStackOverflowHook+0x10>)
  409040:	4b02      	ldr	r3, [pc, #8]	; (40904c <vApplicationStackOverflowHook+0x14>)
  409042:	4798      	blx	r3
  409044:	e7fe      	b.n	409044 <vApplicationStackOverflowHook+0xc>
  409046:	bf00      	nop
  409048:	00411c6c 	.word	0x00411c6c
  40904c:	004096d1 	.word	0x004096d1

00409050 <vApplicationTickHook>:
{
  409050:	4770      	bx	lr

00409052 <vApplicationMallocFailedHook>:
  409052:	f04f 0380 	mov.w	r3, #128	; 0x80
  409056:	b672      	cpsid	i
  409058:	f383 8811 	msr	BASEPRI, r3
  40905c:	f3bf 8f6f 	isb	sy
  409060:	f3bf 8f4f 	dsb	sy
  409064:	b662      	cpsie	i
  409066:	e7fe      	b.n	409066 <vApplicationMallocFailedHook+0x14>

00409068 <inet_aton>:
{
  409068:	b4f0      	push	{r4, r5, r6, r7}
  40906a:	3801      	subs	r0, #1
  register u_long acc = 0, addr = 0;
  40906c:	2400      	movs	r4, #0
  40906e:	4622      	mov	r2, r4
  int dots = 0;
  409070:	4625      	mov	r5, r4
	        acc = 0;
  409072:	4626      	mov	r6, r4
  409074:	e011      	b.n	40909a <inet_aton+0x32>
	  switch (cc) {
  409076:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  40907a:	2f09      	cmp	r7, #9
  40907c:	d814      	bhi.n	4090a8 <inet_aton+0x40>
	        acc = acc * 10 + (cc - '0');
  40907e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  409082:	eb07 0242 	add.w	r2, r7, r2, lsl #1
	        break;
  409086:	e007      	b.n	409098 <inet_aton+0x30>
	        if (++dots > 3) {
  409088:	3501      	adds	r5, #1
  40908a:	2d03      	cmp	r5, #3
  40908c:	dc24      	bgt.n	4090d8 <inet_aton+0x70>
	        if (acc > 255) {
  40908e:	2aff      	cmp	r2, #255	; 0xff
  409090:	d824      	bhi.n	4090dc <inet_aton+0x74>
	        addr = addr << 8 | acc;
  409092:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	        acc = 0;
  409096:	4632      	mov	r2, r6
  } while (*cp++) ;
  409098:	b14b      	cbz	r3, 4090ae <inet_aton+0x46>
	  register char cc = *cp;
  40909a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
	  switch (cc) {
  40909e:	2b2e      	cmp	r3, #46	; 0x2e
  4090a0:	d0f2      	beq.n	409088 <inet_aton+0x20>
  4090a2:	d8e8      	bhi.n	409076 <inet_aton+0xe>
  4090a4:	2b00      	cmp	r3, #0
  4090a6:	d0f2      	beq.n	40908e <inet_aton+0x26>
	        return 0;
  4090a8:	2000      	movs	r0, #0
}
  4090aa:	bcf0      	pop	{r4, r5, r6, r7}
  4090ac:	4770      	bx	lr
  if (dots < 3) {
  4090ae:	2d02      	cmp	r5, #2
  4090b0:	dc03      	bgt.n	4090ba <inet_aton+0x52>
	  addr <<= 8 * (3 - dots) ;
  4090b2:	f1c5 0303 	rsb	r3, r5, #3
  4090b6:	00db      	lsls	r3, r3, #3
  4090b8:	409c      	lsls	r4, r3
  if (ap) {
  4090ba:	b189      	cbz	r1, 4090e0 <inet_aton+0x78>
	  ap->s_addr = _htonl(addr);
  4090bc:	0e23      	lsrs	r3, r4, #24
  4090be:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  4090c2:	0222      	lsls	r2, r4, #8
  4090c4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  4090c8:	431a      	orrs	r2, r3
  4090ca:	0a23      	lsrs	r3, r4, #8
  4090cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4090d0:	4313      	orrs	r3, r2
  4090d2:	600b      	str	r3, [r1, #0]
  return 1;    
  4090d4:	2001      	movs	r0, #1
  4090d6:	e7e8      	b.n	4090aa <inet_aton+0x42>
		    return 0;
  4090d8:	2000      	movs	r0, #0
  4090da:	e7e6      	b.n	4090aa <inet_aton+0x42>
		    return 0;
  4090dc:	2000      	movs	r0, #0
  4090de:	e7e4      	b.n	4090aa <inet_aton+0x42>
  return 1;    
  4090e0:	2001      	movs	r0, #1
  4090e2:	e7e2      	b.n	4090aa <inet_aton+0x42>

004090e4 <task_wifi>:
	}
}



static void task_wifi(void *pvParameters) {
  4090e4:	b570      	push	{r4, r5, r6, lr}
  4090e6:	b08c      	sub	sp, #48	; 0x30
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;
	
	/* Initialize the BSP. */
	nm_bsp_init();
  4090e8:	4b33      	ldr	r3, [pc, #204]	; (4091b8 <task_wifi+0xd4>)
  4090ea:	4798      	blx	r3
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  4090ec:	2300      	movs	r3, #0
  4090ee:	9307      	str	r3, [sp, #28]
  4090f0:	9308      	str	r3, [sp, #32]
  4090f2:	9309      	str	r3, [sp, #36]	; 0x24
  4090f4:	930a      	str	r3, [sp, #40]	; 0x28
  4090f6:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  4090f8:	4b30      	ldr	r3, [pc, #192]	; (4091bc <task_wifi+0xd8>)
  4090fa:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  4090fc:	a806      	add	r0, sp, #24
  4090fe:	4b30      	ldr	r3, [pc, #192]	; (4091c0 <task_wifi+0xdc>)
  409100:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  409102:	b120      	cbz	r0, 40910e <task_wifi+0x2a>
  409104:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  409106:	482f      	ldr	r0, [pc, #188]	; (4091c4 <task_wifi+0xe0>)
  409108:	4b2f      	ldr	r3, [pc, #188]	; (4091c8 <task_wifi+0xe4>)
  40910a:	4798      	blx	r3
  40910c:	e7fe      	b.n	40910c <task_wifi+0x28>
		while (1) {
		}
	}
	
	/* Initialize socket module. */
	socketInit();
  40910e:	4b2f      	ldr	r3, [pc, #188]	; (4091cc <task_wifi+0xe8>)
  409110:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  409112:	492f      	ldr	r1, [pc, #188]	; (4091d0 <task_wifi+0xec>)
  409114:	482f      	ldr	r0, [pc, #188]	; (4091d4 <task_wifi+0xf0>)
  409116:	4b30      	ldr	r3, [pc, #192]	; (4091d8 <task_wifi+0xf4>)
  409118:	4798      	blx	r3
	
	m2m_wifi_set_mac_address(gau8MacAddr);
  40911a:	4830      	ldr	r0, [pc, #192]	; (4091dc <task_wifi+0xf8>)
  40911c:	4b30      	ldr	r3, [pc, #192]	; (4091e0 <task_wifi+0xfc>)
  40911e:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  409120:	4c30      	ldr	r4, [pc, #192]	; (4091e4 <task_wifi+0x100>)
  409122:	4621      	mov	r1, r4
  409124:	4830      	ldr	r0, [pc, #192]	; (4091e8 <task_wifi+0x104>)
  409126:	4b28      	ldr	r3, [pc, #160]	; (4091c8 <task_wifi+0xe4>)
  409128:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  40912a:	23ff      	movs	r3, #255	; 0xff
  40912c:	9300      	str	r3, [sp, #0]
  40912e:	4b2f      	ldr	r3, [pc, #188]	; (4091ec <task_wifi+0x108>)
  409130:	2202      	movs	r2, #2
  409132:	2109      	movs	r1, #9
  409134:	4620      	mov	r0, r4
  409136:	4c2e      	ldr	r4, [pc, #184]	; (4091f0 <task_wifi+0x10c>)
  409138:	47a0      	blx	r4

	addr_in.sin_family = AF_INET;
  40913a:	2302      	movs	r3, #2
  40913c:	f8ad 3008 	strh.w	r3, [sp, #8]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  409140:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
  409144:	f8ad 300a 	strh.w	r3, [sp, #10]
	
  while(1){
	  m2m_wifi_handle_events(NULL);
  409148:	4d2a      	ldr	r5, [pc, #168]	; (4091f4 <task_wifi+0x110>)

	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  40914a:	4c2b      	ldr	r4, [pc, #172]	; (4091f8 <task_wifi+0x114>)
		  /* Open client socket. */
		  if (tcp_client_socket < 0) {
  40914c:	4e2b      	ldr	r6, [pc, #172]	; (4091fc <task_wifi+0x118>)
  40914e:	e002      	b.n	409156 <task_wifi+0x72>
			  printf("socket init \n");
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
				  printf("main: failed to create TCP client socket error!\r\n");
  409150:	482b      	ldr	r0, [pc, #172]	; (409200 <task_wifi+0x11c>)
  409152:	4b1d      	ldr	r3, [pc, #116]	; (4091c8 <task_wifi+0xe4>)
  409154:	4798      	blx	r3
	  m2m_wifi_handle_events(NULL);
  409156:	2000      	movs	r0, #0
  409158:	47a8      	blx	r5
	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  40915a:	7823      	ldrb	r3, [r4, #0]
  40915c:	2b01      	cmp	r3, #1
  40915e:	d1fa      	bne.n	409156 <task_wifi+0x72>
		  if (tcp_client_socket < 0) {
  409160:	f996 3000 	ldrsb.w	r3, [r6]
  409164:	2b00      	cmp	r3, #0
  409166:	daf6      	bge.n	409156 <task_wifi+0x72>
			  printf("socket init \n");
  409168:	4826      	ldr	r0, [pc, #152]	; (409204 <task_wifi+0x120>)
  40916a:	4b17      	ldr	r3, [pc, #92]	; (4091c8 <task_wifi+0xe4>)
  40916c:	4798      	blx	r3
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  40916e:	2200      	movs	r2, #0
  409170:	2101      	movs	r1, #1
  409172:	2002      	movs	r0, #2
  409174:	4b24      	ldr	r3, [pc, #144]	; (409208 <task_wifi+0x124>)
  409176:	4798      	blx	r3
  409178:	7030      	strb	r0, [r6, #0]
  40917a:	2800      	cmp	r0, #0
  40917c:	dbe8      	blt.n	409150 <task_wifi+0x6c>
				  continue;
			  }

			  /* Connect server */
			  printf("socket connecting\n");
  40917e:	4823      	ldr	r0, [pc, #140]	; (40920c <task_wifi+0x128>)
  409180:	4b11      	ldr	r3, [pc, #68]	; (4091c8 <task_wifi+0xe4>)
  409182:	4798      	blx	r3
			  inet_aton(server_host_ip, &addr_in.sin_addr);
  409184:	a903      	add	r1, sp, #12
  409186:	4822      	ldr	r0, [pc, #136]	; (409210 <task_wifi+0x12c>)
  409188:	4b22      	ldr	r3, [pc, #136]	; (409214 <task_wifi+0x130>)
  40918a:	4798      	blx	r3
			  
			  if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  40918c:	2210      	movs	r2, #16
  40918e:	a902      	add	r1, sp, #8
  409190:	f996 0000 	ldrsb.w	r0, [r6]
  409194:	4b20      	ldr	r3, [pc, #128]	; (409218 <task_wifi+0x134>)
  409196:	4798      	blx	r3
  409198:	b918      	cbnz	r0, 4091a2 <task_wifi+0xbe>
				  close(tcp_client_socket);
				  tcp_client_socket = -1;
				  printf("error\n");
				  }else{
				  gbTcpConnection = true;
  40919a:	2201      	movs	r2, #1
  40919c:	4b1f      	ldr	r3, [pc, #124]	; (40921c <task_wifi+0x138>)
  40919e:	701a      	strb	r2, [r3, #0]
  4091a0:	e7d9      	b.n	409156 <task_wifi+0x72>
				  close(tcp_client_socket);
  4091a2:	f996 0000 	ldrsb.w	r0, [r6]
  4091a6:	4b1e      	ldr	r3, [pc, #120]	; (409220 <task_wifi+0x13c>)
  4091a8:	4798      	blx	r3
				  tcp_client_socket = -1;
  4091aa:	23ff      	movs	r3, #255	; 0xff
  4091ac:	7033      	strb	r3, [r6, #0]
				  printf("error\n");
  4091ae:	481d      	ldr	r0, [pc, #116]	; (409224 <task_wifi+0x140>)
  4091b0:	4b05      	ldr	r3, [pc, #20]	; (4091c8 <task_wifi+0xe4>)
  4091b2:	4798      	blx	r3
  4091b4:	e7cf      	b.n	409156 <task_wifi+0x72>
  4091b6:	bf00      	nop
  4091b8:	0040515d 	.word	0x0040515d
  4091bc:	00408e15 	.word	0x00408e15
  4091c0:	00405f9d 	.word	0x00405f9d
  4091c4:	00411ba4 	.word	0x00411ba4
  4091c8:	004096d1 	.word	0x004096d1
  4091cc:	0040777d 	.word	0x0040777d
  4091d0:	00408b99 	.word	0x00408b99
  4091d4:	00408bf1 	.word	0x00408bf1
  4091d8:	004077c1 	.word	0x004077c1
  4091dc:	20400044 	.word	0x20400044
  4091e0:	00406311 	.word	0x00406311
  4091e4:	00411bcc 	.word	0x00411bcc
  4091e8:	00411bd8 	.word	0x00411bd8
  4091ec:	00411bfc 	.word	0x00411bfc
  4091f0:	004062f5 	.word	0x004062f5
  4091f4:	00406099 	.word	0x00406099
  4091f8:	2040ca1c 	.word	0x2040ca1c
  4091fc:	20400074 	.word	0x20400074
  409200:	00411c1c 	.word	0x00411c1c
  409204:	00411c0c 	.word	0x00411c0c
  409208:	004077d5 	.word	0x004077d5
  40920c:	00411c50 	.word	0x00411c50
  409210:	20410a18 	.word	0x20410a18
  409214:	00409069 	.word	0x00409069
  409218:	004078b5 	.word	0x004078b5
  40921c:	2040ca14 	.word	0x2040ca14
  409220:	00407a81 	.word	0x00407a81
  409224:	00411c64 	.word	0x00411c64

00409228 <read_musics_name>:
	  }
	  }
}


uint read_musics_name(void){
  409228:	b5f0      	push	{r4, r5, r6, r7, lr}
  40922a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
    static FILINFO fno;
    DIR dir;
	
    /* Wait card present and ready */
    do {
      status = sd_mmc_test_unit_ready(0);
  40922e:	4f30      	ldr	r7, [pc, #192]	; (4092f0 <read_musics_name+0xc8>)
        printf("Please unplug and re-plug the card.\n\r");
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
          vTaskDelay(100);
        }
      }
      vTaskDelay(100);
  409230:	4d30      	ldr	r5, [pc, #192]	; (4092f4 <read_musics_name+0xcc>)
  409232:	e00f      	b.n	409254 <read_musics_name+0x2c>
        printf("Card install FAIL\n\r");
  409234:	4830      	ldr	r0, [pc, #192]	; (4092f8 <read_musics_name+0xd0>)
  409236:	4c31      	ldr	r4, [pc, #196]	; (4092fc <read_musics_name+0xd4>)
  409238:	47a0      	blx	r4
        printf("Please unplug and re-plug the card.\n\r");
  40923a:	4831      	ldr	r0, [pc, #196]	; (409300 <read_musics_name+0xd8>)
  40923c:	47a0      	blx	r4
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  40923e:	2600      	movs	r6, #0
  409240:	4c30      	ldr	r4, [pc, #192]	; (409304 <read_musics_name+0xdc>)
  409242:	e001      	b.n	409248 <read_musics_name+0x20>
          vTaskDelay(100);
  409244:	2064      	movs	r0, #100	; 0x64
  409246:	47a8      	blx	r5
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  409248:	4630      	mov	r0, r6
  40924a:	47a0      	blx	r4
  40924c:	2802      	cmp	r0, #2
  40924e:	d1f9      	bne.n	409244 <read_musics_name+0x1c>
      vTaskDelay(100);
  409250:	2064      	movs	r0, #100	; 0x64
  409252:	47a8      	blx	r5
      status = sd_mmc_test_unit_ready(0);
  409254:	2000      	movs	r0, #0
  409256:	47b8      	blx	r7
  409258:	4604      	mov	r4, r0
      if (CTRL_FAIL == status) {
  40925a:	2801      	cmp	r0, #1
  40925c:	d0ea      	beq.n	409234 <read_musics_name+0xc>
      vTaskDelay(100);
  40925e:	2064      	movs	r0, #100	; 0x64
  409260:	47a8      	blx	r5
    } while (CTRL_GOOD != status);
  409262:	2c00      	cmp	r4, #0
  409264:	d1f6      	bne.n	409254 <read_musics_name+0x2c>

    printf("Mount disk (f_mount)...\r\n");
  409266:	4828      	ldr	r0, [pc, #160]	; (409308 <read_musics_name+0xe0>)
  409268:	4b24      	ldr	r3, [pc, #144]	; (4092fc <read_musics_name+0xd4>)
  40926a:	4798      	blx	r3
    memset(&fs, 0, sizeof(FATFS));
  40926c:	f44f 720c 	mov.w	r2, #560	; 0x230
  409270:	2100      	movs	r1, #0
  409272:	a80a      	add	r0, sp, #40	; 0x28
  409274:	4b25      	ldr	r3, [pc, #148]	; (40930c <read_musics_name+0xe4>)
  409276:	4798      	blx	r3
    res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  409278:	a90a      	add	r1, sp, #40	; 0x28
  40927a:	2000      	movs	r0, #0
  40927c:	4b24      	ldr	r3, [pc, #144]	; (409310 <read_musics_name+0xe8>)
  40927e:	4798      	blx	r3
    if (FR_INVALID_DRIVE == res) {
  409280:	280b      	cmp	r0, #11
  409282:	d029      	beq.n	4092d8 <read_musics_name+0xb0>
      printf("[FAIL MOUNT] res %d\r\n", res);
      return 1;
    }
	
	// zera vetor
	memset(musicastxt, 0, sizeof(musicastxt));
  409284:	f641 52e2 	movw	r2, #7650	; 0x1de2
  409288:	2100      	movs	r1, #0
  40928a:	4822      	ldr	r0, [pc, #136]	; (409314 <read_musics_name+0xec>)
  40928c:	4b1f      	ldr	r3, [pc, #124]	; (40930c <read_musics_name+0xe4>)
  40928e:	4798      	blx	r3
	 QuantidadeMusica= 0;
  409290:	2200      	movs	r2, #0
  409292:	4b21      	ldr	r3, [pc, #132]	; (409318 <read_musics_name+0xf0>)
  409294:	601a      	str	r2, [r3, #0]
	
	// busca por nome de arquivos
	 res = f_opendir(&dir,  "/");                       /* Open the directory */
  409296:	4921      	ldr	r1, [pc, #132]	; (40931c <read_musics_name+0xf4>)
  409298:	a801      	add	r0, sp, #4
  40929a:	4b21      	ldr	r3, [pc, #132]	; (409320 <read_musics_name+0xf8>)
  40929c:	4798      	blx	r3
	 if (res == FR_OK) {
  40929e:	bb08      	cbnz	r0, 4092e4 <read_musics_name+0xbc>
		 for(;;){
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
  4092a0:	4c20      	ldr	r4, [pc, #128]	; (409324 <read_musics_name+0xfc>)
		    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
			if (strstr(fno.fname, ".txt")){
  4092a2:	f104 0609 	add.w	r6, r4, #9
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
  4092a6:	4d20      	ldr	r5, [pc, #128]	; (409328 <read_musics_name+0x100>)
  4092a8:	4621      	mov	r1, r4
  4092aa:	a801      	add	r0, sp, #4
  4092ac:	47a8      	blx	r5
		    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
  4092ae:	b9c8      	cbnz	r0, 4092e4 <read_musics_name+0xbc>
  4092b0:	7a63      	ldrb	r3, [r4, #9]
  4092b2:	b1bb      	cbz	r3, 4092e4 <read_musics_name+0xbc>
			if (strstr(fno.fname, ".txt")){
  4092b4:	491d      	ldr	r1, [pc, #116]	; (40932c <read_musics_name+0x104>)
  4092b6:	4630      	mov	r0, r6
  4092b8:	4b1d      	ldr	r3, [pc, #116]	; (409330 <read_musics_name+0x108>)
  4092ba:	4798      	blx	r3
  4092bc:	2800      	cmp	r0, #0
  4092be:	d0f3      	beq.n	4092a8 <read_musics_name+0x80>
				sprintf(musicastxt[QuantidadeMusica], "%s", fno.fname);
  4092c0:	4f15      	ldr	r7, [pc, #84]	; (409318 <read_musics_name+0xf0>)
  4092c2:	683d      	ldr	r5, [r7, #0]
  4092c4:	ebc5 2305 	rsb	r3, r5, r5, lsl #8
  4092c8:	4631      	mov	r1, r6
  4092ca:	4812      	ldr	r0, [pc, #72]	; (409314 <read_musics_name+0xec>)
  4092cc:	4418      	add	r0, r3
  4092ce:	4b19      	ldr	r3, [pc, #100]	; (409334 <read_musics_name+0x10c>)
  4092d0:	4798      	blx	r3
				QuantidadeMusica++;
  4092d2:	3501      	adds	r5, #1
  4092d4:	603d      	str	r5, [r7, #0]
  4092d6:	e7e6      	b.n	4092a6 <read_musics_name+0x7e>
      printf("[FAIL MOUNT] res %d\r\n", res);
  4092d8:	210b      	movs	r1, #11
  4092da:	4817      	ldr	r0, [pc, #92]	; (409338 <read_musics_name+0x110>)
  4092dc:	4b07      	ldr	r3, [pc, #28]	; (4092fc <read_musics_name+0xd4>)
  4092de:	4798      	blx	r3
      return 1;
  4092e0:	2001      	movs	r0, #1
  4092e2:	e001      	b.n	4092e8 <read_musics_name+0xc0>
	 }
	 
// 	 for (uint i=0; i<QuantidadeMusica; i++)
// 		printf("%s\n", musicastxt[i]);
		
	return QuantidadeMusica;
  4092e4:	4b0c      	ldr	r3, [pc, #48]	; (409318 <read_musics_name+0xf0>)
  4092e6:	6818      	ldr	r0, [r3, #0]
}
  4092e8:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
  4092ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4092ee:	bf00      	nop
  4092f0:	00400ed5 	.word	0x00400ed5
  4092f4:	00404685 	.word	0x00404685
  4092f8:	004118b0 	.word	0x004118b0
  4092fc:	004096d1 	.word	0x004096d1
  409300:	004118c4 	.word	0x004118c4
  409304:	00400389 	.word	0x00400389
  409308:	004118ec 	.word	0x004118ec
  40930c:	0040982d 	.word	0x0040982d
  409310:	00402eed 	.word	0x00402eed
  409314:	2040cb60 	.word	0x2040cb60
  409318:	2040c474 	.word	0x2040c474
  40931c:	00411920 	.word	0x00411920
  409320:	004032f1 	.word	0x004032f1
  409324:	2040c47c 	.word	0x2040c47c
  409328:	00403371 	.word	0x00403371
  40932c:	00411924 	.word	0x00411924
  409330:	0040a20d 	.word	0x0040a20d
  409334:	00409d9d 	.word	0x00409d9d
  409338:	00411908 	.word	0x00411908

0040933c <read_sdcard>:

uint read_sdcard(char music_name[]){
  40933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409340:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
  409344:	4680      	mov	r8, r0
     static FILINFO fno;
    DIR dir;

	UINT bytes_to_read=sizeof(char)*1;
	char infos[bytes_to_read];
	UINT bytes_read=0;
  409346:	2300      	movs	r3, #0
  409348:	9301      	str	r3, [sp, #4]
	int i=0;
	int j=0;

    printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  40934a:	483a      	ldr	r0, [pc, #232]	; (409434 <read_sdcard+0xf8>)
  40934c:	4b3a      	ldr	r3, [pc, #232]	; (409438 <read_sdcard+0xfc>)
  40934e:	4798      	blx	r3
	
    /* Wait card present and ready */
    do {
      status = sd_mmc_test_unit_ready(0);
  409350:	4f3a      	ldr	r7, [pc, #232]	; (40943c <read_sdcard+0x100>)
        printf("Please unplug and re-plug the card.\n\r");
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
          vTaskDelay(100);
        }
      }
      vTaskDelay(100);
  409352:	4d3b      	ldr	r5, [pc, #236]	; (409440 <read_sdcard+0x104>)
  409354:	e00f      	b.n	409376 <read_sdcard+0x3a>
        printf("Card install FAIL\n\r");
  409356:	483b      	ldr	r0, [pc, #236]	; (409444 <read_sdcard+0x108>)
  409358:	4c37      	ldr	r4, [pc, #220]	; (409438 <read_sdcard+0xfc>)
  40935a:	47a0      	blx	r4
        printf("Please unplug and re-plug the card.\n\r");
  40935c:	483a      	ldr	r0, [pc, #232]	; (409448 <read_sdcard+0x10c>)
  40935e:	47a0      	blx	r4
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  409360:	2600      	movs	r6, #0
  409362:	4c3a      	ldr	r4, [pc, #232]	; (40944c <read_sdcard+0x110>)
  409364:	e001      	b.n	40936a <read_sdcard+0x2e>
          vTaskDelay(100);
  409366:	2064      	movs	r0, #100	; 0x64
  409368:	47a8      	blx	r5
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  40936a:	4630      	mov	r0, r6
  40936c:	47a0      	blx	r4
  40936e:	2802      	cmp	r0, #2
  409370:	d1f9      	bne.n	409366 <read_sdcard+0x2a>
      vTaskDelay(100);
  409372:	2064      	movs	r0, #100	; 0x64
  409374:	47a8      	blx	r5
      status = sd_mmc_test_unit_ready(0);
  409376:	2000      	movs	r0, #0
  409378:	47b8      	blx	r7
  40937a:	4604      	mov	r4, r0
      if (CTRL_FAIL == status) {
  40937c:	2801      	cmp	r0, #1
  40937e:	d0ea      	beq.n	409356 <read_sdcard+0x1a>
      vTaskDelay(100);
  409380:	2064      	movs	r0, #100	; 0x64
  409382:	47a8      	blx	r5
    } while (CTRL_GOOD != status);
  409384:	2c00      	cmp	r4, #0
  409386:	d1f6      	bne.n	409376 <read_sdcard+0x3a>

    printf("Mount disk (f_mount)...\r\n");
  409388:	4831      	ldr	r0, [pc, #196]	; (409450 <read_sdcard+0x114>)
  40938a:	4b2b      	ldr	r3, [pc, #172]	; (409438 <read_sdcard+0xfc>)
  40938c:	4798      	blx	r3
    memset(&fs, 0, sizeof(FATFS));
  40938e:	f44f 720c 	mov.w	r2, #560	; 0x230
  409392:	2100      	movs	r1, #0
  409394:	a80b      	add	r0, sp, #44	; 0x2c
  409396:	4b2f      	ldr	r3, [pc, #188]	; (409454 <read_sdcard+0x118>)
  409398:	4798      	blx	r3
    res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  40939a:	a90b      	add	r1, sp, #44	; 0x2c
  40939c:	2000      	movs	r0, #0
  40939e:	4b2e      	ldr	r3, [pc, #184]	; (409458 <read_sdcard+0x11c>)
  4093a0:	4798      	blx	r3
    if (FR_INVALID_DRIVE == res) {
  4093a2:	280b      	cmp	r0, #11
  4093a4:	d00e      	beq.n	4093c4 <read_sdcard+0x88>
      printf("[FAIL MOUNT] res %d\r\n", res);
      return 1;
    }
	 
    music_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  4093a6:	2330      	movs	r3, #48	; 0x30
  4093a8:	f888 3000 	strb.w	r3, [r8]
    res = f_open(&file_object,	(char const *)music_name,	FA_READ);
  4093ac:	2201      	movs	r2, #1
  4093ae:	4641      	mov	r1, r8
  4093b0:	a802      	add	r0, sp, #8
  4093b2:	4b2a      	ldr	r3, [pc, #168]	; (40945c <read_sdcard+0x120>)
  4093b4:	4798      	blx	r3
    if (res != FR_OK) {
  4093b6:	4601      	mov	r1, r0
  4093b8:	b950      	cbnz	r0, 4093d0 <read_sdcard+0x94>
  4093ba:	2400      	movs	r4, #0
  4093bc:	4625      	mov	r5, r4
      printf("[FAIL OPEN] res %d\r\n", res);
      return 1;
    }
	
	do {
		f_read(&file_object,&infos,bytes_to_read,&bytes_read);
  4093be:	4f28      	ldr	r7, [pc, #160]	; (409460 <read_sdcard+0x124>)
		if (strcmp(infos,'1') || strcmp(infos,'0')){
  4093c0:	4e28      	ldr	r6, [pc, #160]	; (409464 <read_sdcard+0x128>)
  4093c2:	e00d      	b.n	4093e0 <read_sdcard+0xa4>
      printf("[FAIL MOUNT] res %d\r\n", res);
  4093c4:	210b      	movs	r1, #11
  4093c6:	4828      	ldr	r0, [pc, #160]	; (409468 <read_sdcard+0x12c>)
  4093c8:	4b1b      	ldr	r3, [pc, #108]	; (409438 <read_sdcard+0xfc>)
  4093ca:	4798      	blx	r3
      return 1;
  4093cc:	2001      	movs	r0, #1
  4093ce:	e02d      	b.n	40942c <read_sdcard+0xf0>
      printf("[FAIL OPEN] res %d\r\n", res);
  4093d0:	4826      	ldr	r0, [pc, #152]	; (40946c <read_sdcard+0x130>)
  4093d2:	4b19      	ldr	r3, [pc, #100]	; (409438 <read_sdcard+0xfc>)
  4093d4:	4798      	blx	r3
      return 1;
  4093d6:	2001      	movs	r0, #1
  4093d8:	e028      	b.n	40942c <read_sdcard+0xf0>
				i++;
				j=0;
				N++;
			}
			else{				
				j++;
  4093da:	3401      	adds	r4, #1
			}
		}
	} while (bytes_read >= bytes_to_read);
  4093dc:	9b01      	ldr	r3, [sp, #4]
  4093de:	b30b      	cbz	r3, 409424 <read_sdcard+0xe8>
		f_read(&file_object,&infos,bytes_to_read,&bytes_read);
  4093e0:	ab01      	add	r3, sp, #4
  4093e2:	2201      	movs	r2, #1
  4093e4:	a997      	add	r1, sp, #604	; 0x25c
  4093e6:	a802      	add	r0, sp, #8
  4093e8:	47b8      	blx	r7
		if (strcmp(infos,'1') || strcmp(infos,'0')){
  4093ea:	2131      	movs	r1, #49	; 0x31
  4093ec:	a897      	add	r0, sp, #604	; 0x25c
  4093ee:	47b0      	blx	r6
  4093f0:	b920      	cbnz	r0, 4093fc <read_sdcard+0xc0>
  4093f2:	2130      	movs	r1, #48	; 0x30
  4093f4:	a897      	add	r0, sp, #604	; 0x25c
  4093f6:	47b0      	blx	r6
  4093f8:	2800      	cmp	r0, #0
  4093fa:	d0ef      	beq.n	4093dc <read_sdcard+0xa0>
			music_matrix[i][j] = atoi(infos);
  4093fc:	a897      	add	r0, sp, #604	; 0x25c
  4093fe:	4b1c      	ldr	r3, [pc, #112]	; (409470 <read_sdcard+0x134>)
  409400:	4798      	blx	r3
  409402:	eb05 0345 	add.w	r3, r5, r5, lsl #1
  409406:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  40940a:	4423      	add	r3, r4
  40940c:	4a19      	ldr	r2, [pc, #100]	; (409474 <read_sdcard+0x138>)
  40940e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			if(j>=LINE_SIZE-1){
  409412:	2c13      	cmp	r4, #19
  409414:	dde1      	ble.n	4093da <read_sdcard+0x9e>
				i++;
  409416:	3501      	adds	r5, #1
				N++;
  409418:	4a17      	ldr	r2, [pc, #92]	; (409478 <read_sdcard+0x13c>)
  40941a:	6813      	ldr	r3, [r2, #0]
  40941c:	3301      	adds	r3, #1
  40941e:	6013      	str	r3, [r2, #0]
				j=0;
  409420:	2400      	movs	r4, #0
  409422:	e7db      	b.n	4093dc <read_sdcard+0xa0>
    
    f_close(&file_object);
  409424:	a802      	add	r0, sp, #8
  409426:	4b15      	ldr	r3, [pc, #84]	; (40947c <read_sdcard+0x140>)
  409428:	4798      	blx	r3
    return 0;
  40942a:	2000      	movs	r0, #0
}
  40942c:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
  409430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409434:	0041192c 	.word	0x0041192c
  409438:	004096d1 	.word	0x004096d1
  40943c:	00400ed5 	.word	0x00400ed5
  409440:	00404685 	.word	0x00404685
  409444:	004118b0 	.word	0x004118b0
  409448:	004118c4 	.word	0x004118c4
  40944c:	00400389 	.word	0x00400389
  409450:	004118ec 	.word	0x004118ec
  409454:	0040982d 	.word	0x0040982d
  409458:	00402eed 	.word	0x00402eed
  40945c:	00402f15 	.word	0x00402f15
  409460:	004030ad 	.word	0x004030ad
  409464:	00409ac9 	.word	0x00409ac9
  409468:	00411908 	.word	0x00411908
  40946c:	0041195c 	.word	0x0041195c
  409470:	00409679 	.word	0x00409679
  409474:	2040e948 	.word	0x2040e948
  409478:	2040c470 	.word	0x2040c470
  40947c:	004032d9 	.word	0x004032d9

00409480 <task_sdcard>:


static void task_sdcard(void *pvParameters){
  409480:	b580      	push	{r7, lr}
  409482:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
     /* Initialize SD MMC stack */
     printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  409486:	4818      	ldr	r0, [pc, #96]	; (4094e8 <task_sdcard+0x68>)
  409488:	4c18      	ldr	r4, [pc, #96]	; (4094ec <task_sdcard+0x6c>)
  40948a:	47a0      	blx	r4
     printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  40948c:	4a18      	ldr	r2, [pc, #96]	; (4094f0 <task_sdcard+0x70>)
  40948e:	4919      	ldr	r1, [pc, #100]	; (4094f4 <task_sdcard+0x74>)
  409490:	4819      	ldr	r0, [pc, #100]	; (4094f8 <task_sdcard+0x78>)
  409492:	47a0      	blx	r4
     
    sd_mmc_init();
  409494:	4b19      	ldr	r3, [pc, #100]	; (4094fc <task_sdcard+0x7c>)
  409496:	4798      	blx	r3

	char music_name[CHAR_SIZE];
	char music_server[CHAR_SIZE];
    read_musics_name();
  409498:	4b19      	ldr	r3, [pc, #100]	; (409500 <task_sdcard+0x80>)
  40949a:	4798      	blx	r3
	
	while(1){
		if (xQueueReceive( sdQueue, &music_name, ( TickType_t )  10 / portTICK_PERIOD_MS )){	
  40949c:	4d19      	ldr	r5, [pc, #100]	; (409504 <task_sdcard+0x84>)
  40949e:	4c1a      	ldr	r4, [pc, #104]	; (409508 <task_sdcard+0x88>)
			sprintf(music_server,"0:%s",music_name);
  4094a0:	4f1a      	ldr	r7, [pc, #104]	; (40950c <task_sdcard+0x8c>)
  4094a2:	e003      	b.n	4094ac <task_sdcard+0x2c>
			printf("NAME AFTER: %s\r\n",music_server);
			read_sdcard(music_server);
			printf("DONE READING\r\n");
			xSemaphoreGive(xSemaphoreMusic);
		}
		vTaskDelay(1000);
  4094a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4094a8:	4b19      	ldr	r3, [pc, #100]	; (409510 <task_sdcard+0x90>)
  4094aa:	4798      	blx	r3
		if (xQueueReceive( sdQueue, &music_name, ( TickType_t )  10 / portTICK_PERIOD_MS )){	
  4094ac:	2300      	movs	r3, #0
  4094ae:	220a      	movs	r2, #10
  4094b0:	a940      	add	r1, sp, #256	; 0x100
  4094b2:	6828      	ldr	r0, [r5, #0]
  4094b4:	47a0      	blx	r4
  4094b6:	2800      	cmp	r0, #0
  4094b8:	d0f4      	beq.n	4094a4 <task_sdcard+0x24>
			sprintf(music_server,"0:%s",music_name);
  4094ba:	aa40      	add	r2, sp, #256	; 0x100
  4094bc:	4639      	mov	r1, r7
  4094be:	4668      	mov	r0, sp
  4094c0:	4b14      	ldr	r3, [pc, #80]	; (409514 <task_sdcard+0x94>)
  4094c2:	4798      	blx	r3
			printf("NAME AFTER: %s\r\n",music_server);
  4094c4:	4669      	mov	r1, sp
  4094c6:	4814      	ldr	r0, [pc, #80]	; (409518 <task_sdcard+0x98>)
  4094c8:	4e08      	ldr	r6, [pc, #32]	; (4094ec <task_sdcard+0x6c>)
  4094ca:	47b0      	blx	r6
			read_sdcard(music_server);
  4094cc:	4668      	mov	r0, sp
  4094ce:	4b13      	ldr	r3, [pc, #76]	; (40951c <task_sdcard+0x9c>)
  4094d0:	4798      	blx	r3
			printf("DONE READING\r\n");
  4094d2:	4813      	ldr	r0, [pc, #76]	; (409520 <task_sdcard+0xa0>)
  4094d4:	47b0      	blx	r6
			xSemaphoreGive(xSemaphoreMusic);
  4094d6:	2300      	movs	r3, #0
  4094d8:	461a      	mov	r2, r3
  4094da:	4619      	mov	r1, r3
  4094dc:	4811      	ldr	r0, [pc, #68]	; (409524 <task_sdcard+0xa4>)
  4094de:	6800      	ldr	r0, [r0, #0]
  4094e0:	4e11      	ldr	r6, [pc, #68]	; (409528 <task_sdcard+0xa8>)
  4094e2:	47b0      	blx	r6
  4094e4:	e7de      	b.n	4094a4 <task_sdcard+0x24>
  4094e6:	bf00      	nop
  4094e8:	00411b18 	.word	0x00411b18
  4094ec:	004096d1 	.word	0x004096d1
  4094f0:	00411b48 	.word	0x00411b48
  4094f4:	00411b54 	.word	0x00411b54
  4094f8:	00411b60 	.word	0x00411b60
  4094fc:	0040035d 	.word	0x0040035d
  409500:	00409229 	.word	0x00409229
  409504:	20410a28 	.word	0x20410a28
  409508:	00403e5d 	.word	0x00403e5d
  40950c:	00411b78 	.word	0x00411b78
  409510:	00404685 	.word	0x00404685
  409514:	00409a69 	.word	0x00409a69
  409518:	00411b80 	.word	0x00411b80
  40951c:	0040933d 	.word	0x0040933d
  409520:	00411b94 	.word	0x00411b94
  409524:	2040e944 	.word	0x2040e944
  409528:	00403b79 	.word	0x00403b79

0040952c <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  40952c:	b500      	push	{lr}
  40952e:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the board. */
	sysclk_init();
  409530:	4b35      	ldr	r3, [pc, #212]	; (409608 <main+0xdc>)
  409532:	4798      	blx	r3
	board_init();
  409534:	4b35      	ldr	r3, [pc, #212]	; (40960c <main+0xe0>)
  409536:	4798      	blx	r3
  409538:	200e      	movs	r0, #14
  40953a:	4e35      	ldr	r6, [pc, #212]	; (409610 <main+0xe4>)
  40953c:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40953e:	4d35      	ldr	r5, [pc, #212]	; (409614 <main+0xe8>)
  409540:	4b35      	ldr	r3, [pc, #212]	; (409618 <main+0xec>)
  409542:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  409544:	4a35      	ldr	r2, [pc, #212]	; (40961c <main+0xf0>)
  409546:	4b36      	ldr	r3, [pc, #216]	; (409620 <main+0xf4>)
  409548:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40954a:	4a36      	ldr	r2, [pc, #216]	; (409624 <main+0xf8>)
  40954c:	4b36      	ldr	r3, [pc, #216]	; (409628 <main+0xfc>)
  40954e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  409550:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  409554:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  409556:	23c0      	movs	r3, #192	; 0xc0
  409558:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  40955a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40955e:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  409560:	2400      	movs	r4, #0
  409562:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  409564:	9408      	str	r4, [sp, #32]
  409566:	200e      	movs	r0, #14
  409568:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40956a:	4a30      	ldr	r2, [pc, #192]	; (40962c <main+0x100>)
  40956c:	a904      	add	r1, sp, #16
  40956e:	4628      	mov	r0, r5
  409570:	4b2f      	ldr	r3, [pc, #188]	; (409630 <main+0x104>)
  409572:	4798      	blx	r3
		usart_enable_tx(p_usart);
  409574:	4628      	mov	r0, r5
  409576:	4b2f      	ldr	r3, [pc, #188]	; (409634 <main+0x108>)
  409578:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40957a:	4628      	mov	r0, r5
  40957c:	4b2e      	ldr	r3, [pc, #184]	; (409638 <main+0x10c>)
  40957e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  409580:	4e2e      	ldr	r6, [pc, #184]	; (40963c <main+0x110>)
  409582:	6833      	ldr	r3, [r6, #0]
  409584:	4621      	mov	r1, r4
  409586:	6898      	ldr	r0, [r3, #8]
  409588:	4d2d      	ldr	r5, [pc, #180]	; (409640 <main+0x114>)
  40958a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  40958c:	6833      	ldr	r3, [r6, #0]
  40958e:	4621      	mov	r1, r4
  409590:	6858      	ldr	r0, [r3, #4]
  409592:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  409594:	482b      	ldr	r0, [pc, #172]	; (409644 <main+0x118>)
  409596:	4b2c      	ldr	r3, [pc, #176]	; (409648 <main+0x11c>)
  409598:	4798      	blx	r3

	sdQueue = xQueueCreate( 1, sizeof( char ) * CHAR_SIZE );
  40959a:	4622      	mov	r2, r4
  40959c:	21ff      	movs	r1, #255	; 0xff
  40959e:	2001      	movs	r0, #1
  4095a0:	4d2a      	ldr	r5, [pc, #168]	; (40964c <main+0x120>)
  4095a2:	47a8      	blx	r5
  4095a4:	4b2a      	ldr	r3, [pc, #168]	; (409650 <main+0x124>)
  4095a6:	6018      	str	r0, [r3, #0]
	xSemaphoreMusic = xSemaphoreCreateBinary();
  4095a8:	2203      	movs	r2, #3
  4095aa:	4621      	mov	r1, r4
  4095ac:	2001      	movs	r0, #1
  4095ae:	47a8      	blx	r5
  4095b0:	4b28      	ldr	r3, [pc, #160]	; (409654 <main+0x128>)
  4095b2:	6018      	str	r0, [r3, #0]
	xQueueMus = xQueueCreate( 50, sizeof( int )*24 );
  4095b4:	4622      	mov	r2, r4
  4095b6:	2160      	movs	r1, #96	; 0x60
  4095b8:	2032      	movs	r0, #50	; 0x32
  4095ba:	47a8      	blx	r5
  4095bc:	4b26      	ldr	r3, [pc, #152]	; (409658 <main+0x12c>)
  4095be:	6018      	str	r0, [r3, #0]
  
 	if (xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL,
  4095c0:	9403      	str	r4, [sp, #12]
  4095c2:	9402      	str	r4, [sp, #8]
  4095c4:	9401      	str	r4, [sp, #4]
  4095c6:	9400      	str	r4, [sp, #0]
  4095c8:	4623      	mov	r3, r4
  4095ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4095ce:	4923      	ldr	r1, [pc, #140]	; (40965c <main+0x130>)
  4095d0:	4823      	ldr	r0, [pc, #140]	; (409660 <main+0x134>)
  4095d2:	4c24      	ldr	r4, [pc, #144]	; (409664 <main+0x138>)
  4095d4:	47a0      	blx	r4
  4095d6:	2801      	cmp	r0, #1
  4095d8:	d002      	beq.n	4095e0 <main+0xb4>
 	TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
 		printf("Failed to create Wifi task\r\n");
  4095da:	4823      	ldr	r0, [pc, #140]	; (409668 <main+0x13c>)
  4095dc:	4b1a      	ldr	r3, [pc, #104]	; (409648 <main+0x11c>)
  4095de:	4798      	blx	r3
 	}

	if (xTaskCreate(task_sdcard, "sd", TASK_WIFI_STACK_SIZE, NULL,
  4095e0:	2300      	movs	r3, #0
  4095e2:	9303      	str	r3, [sp, #12]
  4095e4:	9302      	str	r3, [sp, #8]
  4095e6:	9301      	str	r3, [sp, #4]
  4095e8:	9300      	str	r3, [sp, #0]
  4095ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4095ee:	491f      	ldr	r1, [pc, #124]	; (40966c <main+0x140>)
  4095f0:	481f      	ldr	r0, [pc, #124]	; (409670 <main+0x144>)
  4095f2:	4c1c      	ldr	r4, [pc, #112]	; (409664 <main+0x138>)
  4095f4:	47a0      	blx	r4
  4095f6:	2801      	cmp	r0, #1
  4095f8:	d002      	beq.n	409600 <main+0xd4>
	TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Wifi task\r\n");
  4095fa:	481b      	ldr	r0, [pc, #108]	; (409668 <main+0x13c>)
  4095fc:	4b12      	ldr	r3, [pc, #72]	; (409648 <main+0x11c>)
  4095fe:	4798      	blx	r3
// 	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
// 		printf("Failed to create test MAESTRO task\r\n");
// 	}


	vTaskStartScheduler();
  409600:	4b1c      	ldr	r3, [pc, #112]	; (409674 <main+0x148>)
  409602:	4798      	blx	r3
  409604:	e7fe      	b.n	409604 <main+0xd8>
  409606:	bf00      	nop
  409608:	00407c25 	.word	0x00407c25
  40960c:	00407d21 	.word	0x00407d21
  409610:	00408621 	.word	0x00408621
  409614:	40028000 	.word	0x40028000
  409618:	2040cb5c 	.word	0x2040cb5c
  40961c:	00408f65 	.word	0x00408f65
  409620:	2040cb58 	.word	0x2040cb58
  409624:	00408e89 	.word	0x00408e89
  409628:	2040cb54 	.word	0x2040cb54
  40962c:	08f0d180 	.word	0x08f0d180
  409630:	00408871 	.word	0x00408871
  409634:	004088c5 	.word	0x004088c5
  409638:	004088cb 	.word	0x004088cb
  40963c:	20400078 	.word	0x20400078
  409640:	004098c9 	.word	0x004098c9
  409644:	00411820 	.word	0x00411820
  409648:	004096d1 	.word	0x004096d1
  40964c:	00403afd 	.word	0x00403afd
  409650:	20410a28 	.word	0x20410a28
  409654:	2040e944 	.word	0x2040e944
  409658:	20410a2c 	.word	0x20410a2c
  40965c:	00411884 	.word	0x00411884
  409660:	004090e5 	.word	0x004090e5
  409664:	0040413d 	.word	0x0040413d
  409668:	0041188c 	.word	0x0041188c
  40966c:	004118ac 	.word	0x004118ac
  409670:	00409481 	.word	0x00409481
  409674:	00404371 	.word	0x00404371

00409678 <atoi>:
  409678:	220a      	movs	r2, #10
  40967a:	2100      	movs	r1, #0
  40967c:	f000 bf66 	b.w	40a54c <strtol>

00409680 <__libc_init_array>:
  409680:	b570      	push	{r4, r5, r6, lr}
  409682:	4e0f      	ldr	r6, [pc, #60]	; (4096c0 <__libc_init_array+0x40>)
  409684:	4d0f      	ldr	r5, [pc, #60]	; (4096c4 <__libc_init_array+0x44>)
  409686:	1b76      	subs	r6, r6, r5
  409688:	10b6      	asrs	r6, r6, #2
  40968a:	bf18      	it	ne
  40968c:	2400      	movne	r4, #0
  40968e:	d005      	beq.n	40969c <__libc_init_array+0x1c>
  409690:	3401      	adds	r4, #1
  409692:	f855 3b04 	ldr.w	r3, [r5], #4
  409696:	4798      	blx	r3
  409698:	42a6      	cmp	r6, r4
  40969a:	d1f9      	bne.n	409690 <__libc_init_array+0x10>
  40969c:	4e0a      	ldr	r6, [pc, #40]	; (4096c8 <__libc_init_array+0x48>)
  40969e:	4d0b      	ldr	r5, [pc, #44]	; (4096cc <__libc_init_array+0x4c>)
  4096a0:	1b76      	subs	r6, r6, r5
  4096a2:	f008 fc79 	bl	411f98 <_init>
  4096a6:	10b6      	asrs	r6, r6, #2
  4096a8:	bf18      	it	ne
  4096aa:	2400      	movne	r4, #0
  4096ac:	d006      	beq.n	4096bc <__libc_init_array+0x3c>
  4096ae:	3401      	adds	r4, #1
  4096b0:	f855 3b04 	ldr.w	r3, [r5], #4
  4096b4:	4798      	blx	r3
  4096b6:	42a6      	cmp	r6, r4
  4096b8:	d1f9      	bne.n	4096ae <__libc_init_array+0x2e>
  4096ba:	bd70      	pop	{r4, r5, r6, pc}
  4096bc:	bd70      	pop	{r4, r5, r6, pc}
  4096be:	bf00      	nop
  4096c0:	00411fa4 	.word	0x00411fa4
  4096c4:	00411fa4 	.word	0x00411fa4
  4096c8:	00411fac 	.word	0x00411fac
  4096cc:	00411fa4 	.word	0x00411fa4

004096d0 <iprintf>:
  4096d0:	b40f      	push	{r0, r1, r2, r3}
  4096d2:	b500      	push	{lr}
  4096d4:	4907      	ldr	r1, [pc, #28]	; (4096f4 <iprintf+0x24>)
  4096d6:	b083      	sub	sp, #12
  4096d8:	ab04      	add	r3, sp, #16
  4096da:	6808      	ldr	r0, [r1, #0]
  4096dc:	f853 2b04 	ldr.w	r2, [r3], #4
  4096e0:	6881      	ldr	r1, [r0, #8]
  4096e2:	9301      	str	r3, [sp, #4]
  4096e4:	f002 f9b6 	bl	40ba54 <_vfiprintf_r>
  4096e8:	b003      	add	sp, #12
  4096ea:	f85d eb04 	ldr.w	lr, [sp], #4
  4096ee:	b004      	add	sp, #16
  4096f0:	4770      	bx	lr
  4096f2:	bf00      	nop
  4096f4:	20400078 	.word	0x20400078

004096f8 <memcpy>:
  4096f8:	4684      	mov	ip, r0
  4096fa:	ea41 0300 	orr.w	r3, r1, r0
  4096fe:	f013 0303 	ands.w	r3, r3, #3
  409702:	d16d      	bne.n	4097e0 <memcpy+0xe8>
  409704:	3a40      	subs	r2, #64	; 0x40
  409706:	d341      	bcc.n	40978c <memcpy+0x94>
  409708:	f851 3b04 	ldr.w	r3, [r1], #4
  40970c:	f840 3b04 	str.w	r3, [r0], #4
  409710:	f851 3b04 	ldr.w	r3, [r1], #4
  409714:	f840 3b04 	str.w	r3, [r0], #4
  409718:	f851 3b04 	ldr.w	r3, [r1], #4
  40971c:	f840 3b04 	str.w	r3, [r0], #4
  409720:	f851 3b04 	ldr.w	r3, [r1], #4
  409724:	f840 3b04 	str.w	r3, [r0], #4
  409728:	f851 3b04 	ldr.w	r3, [r1], #4
  40972c:	f840 3b04 	str.w	r3, [r0], #4
  409730:	f851 3b04 	ldr.w	r3, [r1], #4
  409734:	f840 3b04 	str.w	r3, [r0], #4
  409738:	f851 3b04 	ldr.w	r3, [r1], #4
  40973c:	f840 3b04 	str.w	r3, [r0], #4
  409740:	f851 3b04 	ldr.w	r3, [r1], #4
  409744:	f840 3b04 	str.w	r3, [r0], #4
  409748:	f851 3b04 	ldr.w	r3, [r1], #4
  40974c:	f840 3b04 	str.w	r3, [r0], #4
  409750:	f851 3b04 	ldr.w	r3, [r1], #4
  409754:	f840 3b04 	str.w	r3, [r0], #4
  409758:	f851 3b04 	ldr.w	r3, [r1], #4
  40975c:	f840 3b04 	str.w	r3, [r0], #4
  409760:	f851 3b04 	ldr.w	r3, [r1], #4
  409764:	f840 3b04 	str.w	r3, [r0], #4
  409768:	f851 3b04 	ldr.w	r3, [r1], #4
  40976c:	f840 3b04 	str.w	r3, [r0], #4
  409770:	f851 3b04 	ldr.w	r3, [r1], #4
  409774:	f840 3b04 	str.w	r3, [r0], #4
  409778:	f851 3b04 	ldr.w	r3, [r1], #4
  40977c:	f840 3b04 	str.w	r3, [r0], #4
  409780:	f851 3b04 	ldr.w	r3, [r1], #4
  409784:	f840 3b04 	str.w	r3, [r0], #4
  409788:	3a40      	subs	r2, #64	; 0x40
  40978a:	d2bd      	bcs.n	409708 <memcpy+0x10>
  40978c:	3230      	adds	r2, #48	; 0x30
  40978e:	d311      	bcc.n	4097b4 <memcpy+0xbc>
  409790:	f851 3b04 	ldr.w	r3, [r1], #4
  409794:	f840 3b04 	str.w	r3, [r0], #4
  409798:	f851 3b04 	ldr.w	r3, [r1], #4
  40979c:	f840 3b04 	str.w	r3, [r0], #4
  4097a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4097a4:	f840 3b04 	str.w	r3, [r0], #4
  4097a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4097ac:	f840 3b04 	str.w	r3, [r0], #4
  4097b0:	3a10      	subs	r2, #16
  4097b2:	d2ed      	bcs.n	409790 <memcpy+0x98>
  4097b4:	320c      	adds	r2, #12
  4097b6:	d305      	bcc.n	4097c4 <memcpy+0xcc>
  4097b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4097bc:	f840 3b04 	str.w	r3, [r0], #4
  4097c0:	3a04      	subs	r2, #4
  4097c2:	d2f9      	bcs.n	4097b8 <memcpy+0xc0>
  4097c4:	3204      	adds	r2, #4
  4097c6:	d008      	beq.n	4097da <memcpy+0xe2>
  4097c8:	07d2      	lsls	r2, r2, #31
  4097ca:	bf1c      	itt	ne
  4097cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4097d0:	f800 3b01 	strbne.w	r3, [r0], #1
  4097d4:	d301      	bcc.n	4097da <memcpy+0xe2>
  4097d6:	880b      	ldrh	r3, [r1, #0]
  4097d8:	8003      	strh	r3, [r0, #0]
  4097da:	4660      	mov	r0, ip
  4097dc:	4770      	bx	lr
  4097de:	bf00      	nop
  4097e0:	2a08      	cmp	r2, #8
  4097e2:	d313      	bcc.n	40980c <memcpy+0x114>
  4097e4:	078b      	lsls	r3, r1, #30
  4097e6:	d08d      	beq.n	409704 <memcpy+0xc>
  4097e8:	f010 0303 	ands.w	r3, r0, #3
  4097ec:	d08a      	beq.n	409704 <memcpy+0xc>
  4097ee:	f1c3 0304 	rsb	r3, r3, #4
  4097f2:	1ad2      	subs	r2, r2, r3
  4097f4:	07db      	lsls	r3, r3, #31
  4097f6:	bf1c      	itt	ne
  4097f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4097fc:	f800 3b01 	strbne.w	r3, [r0], #1
  409800:	d380      	bcc.n	409704 <memcpy+0xc>
  409802:	f831 3b02 	ldrh.w	r3, [r1], #2
  409806:	f820 3b02 	strh.w	r3, [r0], #2
  40980a:	e77b      	b.n	409704 <memcpy+0xc>
  40980c:	3a04      	subs	r2, #4
  40980e:	d3d9      	bcc.n	4097c4 <memcpy+0xcc>
  409810:	3a01      	subs	r2, #1
  409812:	f811 3b01 	ldrb.w	r3, [r1], #1
  409816:	f800 3b01 	strb.w	r3, [r0], #1
  40981a:	d2f9      	bcs.n	409810 <memcpy+0x118>
  40981c:	780b      	ldrb	r3, [r1, #0]
  40981e:	7003      	strb	r3, [r0, #0]
  409820:	784b      	ldrb	r3, [r1, #1]
  409822:	7043      	strb	r3, [r0, #1]
  409824:	788b      	ldrb	r3, [r1, #2]
  409826:	7083      	strb	r3, [r0, #2]
  409828:	4660      	mov	r0, ip
  40982a:	4770      	bx	lr

0040982c <memset>:
  40982c:	b470      	push	{r4, r5, r6}
  40982e:	0786      	lsls	r6, r0, #30
  409830:	d046      	beq.n	4098c0 <memset+0x94>
  409832:	1e54      	subs	r4, r2, #1
  409834:	2a00      	cmp	r2, #0
  409836:	d041      	beq.n	4098bc <memset+0x90>
  409838:	b2ca      	uxtb	r2, r1
  40983a:	4603      	mov	r3, r0
  40983c:	e002      	b.n	409844 <memset+0x18>
  40983e:	f114 34ff 	adds.w	r4, r4, #4294967295
  409842:	d33b      	bcc.n	4098bc <memset+0x90>
  409844:	f803 2b01 	strb.w	r2, [r3], #1
  409848:	079d      	lsls	r5, r3, #30
  40984a:	d1f8      	bne.n	40983e <memset+0x12>
  40984c:	2c03      	cmp	r4, #3
  40984e:	d92e      	bls.n	4098ae <memset+0x82>
  409850:	b2cd      	uxtb	r5, r1
  409852:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  409856:	2c0f      	cmp	r4, #15
  409858:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40985c:	d919      	bls.n	409892 <memset+0x66>
  40985e:	f103 0210 	add.w	r2, r3, #16
  409862:	4626      	mov	r6, r4
  409864:	3e10      	subs	r6, #16
  409866:	2e0f      	cmp	r6, #15
  409868:	f842 5c10 	str.w	r5, [r2, #-16]
  40986c:	f842 5c0c 	str.w	r5, [r2, #-12]
  409870:	f842 5c08 	str.w	r5, [r2, #-8]
  409874:	f842 5c04 	str.w	r5, [r2, #-4]
  409878:	f102 0210 	add.w	r2, r2, #16
  40987c:	d8f2      	bhi.n	409864 <memset+0x38>
  40987e:	f1a4 0210 	sub.w	r2, r4, #16
  409882:	f022 020f 	bic.w	r2, r2, #15
  409886:	f004 040f 	and.w	r4, r4, #15
  40988a:	3210      	adds	r2, #16
  40988c:	2c03      	cmp	r4, #3
  40988e:	4413      	add	r3, r2
  409890:	d90d      	bls.n	4098ae <memset+0x82>
  409892:	461e      	mov	r6, r3
  409894:	4622      	mov	r2, r4
  409896:	3a04      	subs	r2, #4
  409898:	2a03      	cmp	r2, #3
  40989a:	f846 5b04 	str.w	r5, [r6], #4
  40989e:	d8fa      	bhi.n	409896 <memset+0x6a>
  4098a0:	1f22      	subs	r2, r4, #4
  4098a2:	f022 0203 	bic.w	r2, r2, #3
  4098a6:	3204      	adds	r2, #4
  4098a8:	4413      	add	r3, r2
  4098aa:	f004 0403 	and.w	r4, r4, #3
  4098ae:	b12c      	cbz	r4, 4098bc <memset+0x90>
  4098b0:	b2c9      	uxtb	r1, r1
  4098b2:	441c      	add	r4, r3
  4098b4:	f803 1b01 	strb.w	r1, [r3], #1
  4098b8:	429c      	cmp	r4, r3
  4098ba:	d1fb      	bne.n	4098b4 <memset+0x88>
  4098bc:	bc70      	pop	{r4, r5, r6}
  4098be:	4770      	bx	lr
  4098c0:	4614      	mov	r4, r2
  4098c2:	4603      	mov	r3, r0
  4098c4:	e7c2      	b.n	40984c <memset+0x20>
  4098c6:	bf00      	nop

004098c8 <setbuf>:
  4098c8:	2900      	cmp	r1, #0
  4098ca:	bf0c      	ite	eq
  4098cc:	2202      	moveq	r2, #2
  4098ce:	2200      	movne	r2, #0
  4098d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4098d4:	f000 b800 	b.w	4098d8 <setvbuf>

004098d8 <setvbuf>:
  4098d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4098dc:	4c61      	ldr	r4, [pc, #388]	; (409a64 <setvbuf+0x18c>)
  4098de:	6825      	ldr	r5, [r4, #0]
  4098e0:	b083      	sub	sp, #12
  4098e2:	4604      	mov	r4, r0
  4098e4:	460f      	mov	r7, r1
  4098e6:	4690      	mov	r8, r2
  4098e8:	461e      	mov	r6, r3
  4098ea:	b115      	cbz	r5, 4098f2 <setvbuf+0x1a>
  4098ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4098ee:	2b00      	cmp	r3, #0
  4098f0:	d064      	beq.n	4099bc <setvbuf+0xe4>
  4098f2:	f1b8 0f02 	cmp.w	r8, #2
  4098f6:	d006      	beq.n	409906 <setvbuf+0x2e>
  4098f8:	f1b8 0f01 	cmp.w	r8, #1
  4098fc:	f200 809f 	bhi.w	409a3e <setvbuf+0x166>
  409900:	2e00      	cmp	r6, #0
  409902:	f2c0 809c 	blt.w	409a3e <setvbuf+0x166>
  409906:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409908:	07d8      	lsls	r0, r3, #31
  40990a:	d534      	bpl.n	409976 <setvbuf+0x9e>
  40990c:	4621      	mov	r1, r4
  40990e:	4628      	mov	r0, r5
  409910:	f003 fffc 	bl	40d90c <_fflush_r>
  409914:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409916:	b141      	cbz	r1, 40992a <setvbuf+0x52>
  409918:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40991c:	4299      	cmp	r1, r3
  40991e:	d002      	beq.n	409926 <setvbuf+0x4e>
  409920:	4628      	mov	r0, r5
  409922:	f004 f971 	bl	40dc08 <_free_r>
  409926:	2300      	movs	r3, #0
  409928:	6323      	str	r3, [r4, #48]	; 0x30
  40992a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40992e:	2200      	movs	r2, #0
  409930:	61a2      	str	r2, [r4, #24]
  409932:	6062      	str	r2, [r4, #4]
  409934:	061a      	lsls	r2, r3, #24
  409936:	d43a      	bmi.n	4099ae <setvbuf+0xd6>
  409938:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40993c:	f023 0303 	bic.w	r3, r3, #3
  409940:	f1b8 0f02 	cmp.w	r8, #2
  409944:	81a3      	strh	r3, [r4, #12]
  409946:	d01d      	beq.n	409984 <setvbuf+0xac>
  409948:	ab01      	add	r3, sp, #4
  40994a:	466a      	mov	r2, sp
  40994c:	4621      	mov	r1, r4
  40994e:	4628      	mov	r0, r5
  409950:	f004 fc0a 	bl	40e168 <__swhatbuf_r>
  409954:	89a3      	ldrh	r3, [r4, #12]
  409956:	4318      	orrs	r0, r3
  409958:	81a0      	strh	r0, [r4, #12]
  40995a:	2e00      	cmp	r6, #0
  40995c:	d132      	bne.n	4099c4 <setvbuf+0xec>
  40995e:	9e00      	ldr	r6, [sp, #0]
  409960:	4630      	mov	r0, r6
  409962:	f004 fc79 	bl	40e258 <malloc>
  409966:	4607      	mov	r7, r0
  409968:	2800      	cmp	r0, #0
  40996a:	d06b      	beq.n	409a44 <setvbuf+0x16c>
  40996c:	89a3      	ldrh	r3, [r4, #12]
  40996e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  409972:	81a3      	strh	r3, [r4, #12]
  409974:	e028      	b.n	4099c8 <setvbuf+0xf0>
  409976:	89a3      	ldrh	r3, [r4, #12]
  409978:	0599      	lsls	r1, r3, #22
  40997a:	d4c7      	bmi.n	40990c <setvbuf+0x34>
  40997c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40997e:	f004 fbef 	bl	40e160 <__retarget_lock_acquire_recursive>
  409982:	e7c3      	b.n	40990c <setvbuf+0x34>
  409984:	2500      	movs	r5, #0
  409986:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409988:	2600      	movs	r6, #0
  40998a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40998e:	f043 0302 	orr.w	r3, r3, #2
  409992:	2001      	movs	r0, #1
  409994:	60a6      	str	r6, [r4, #8]
  409996:	07ce      	lsls	r6, r1, #31
  409998:	81a3      	strh	r3, [r4, #12]
  40999a:	6022      	str	r2, [r4, #0]
  40999c:	6122      	str	r2, [r4, #16]
  40999e:	6160      	str	r0, [r4, #20]
  4099a0:	d401      	bmi.n	4099a6 <setvbuf+0xce>
  4099a2:	0598      	lsls	r0, r3, #22
  4099a4:	d53e      	bpl.n	409a24 <setvbuf+0x14c>
  4099a6:	4628      	mov	r0, r5
  4099a8:	b003      	add	sp, #12
  4099aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4099ae:	6921      	ldr	r1, [r4, #16]
  4099b0:	4628      	mov	r0, r5
  4099b2:	f004 f929 	bl	40dc08 <_free_r>
  4099b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4099ba:	e7bd      	b.n	409938 <setvbuf+0x60>
  4099bc:	4628      	mov	r0, r5
  4099be:	f003 fffd 	bl	40d9bc <__sinit>
  4099c2:	e796      	b.n	4098f2 <setvbuf+0x1a>
  4099c4:	2f00      	cmp	r7, #0
  4099c6:	d0cb      	beq.n	409960 <setvbuf+0x88>
  4099c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4099ca:	2b00      	cmp	r3, #0
  4099cc:	d033      	beq.n	409a36 <setvbuf+0x15e>
  4099ce:	9b00      	ldr	r3, [sp, #0]
  4099d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4099d4:	6027      	str	r7, [r4, #0]
  4099d6:	429e      	cmp	r6, r3
  4099d8:	bf1c      	itt	ne
  4099da:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4099de:	81a2      	strhne	r2, [r4, #12]
  4099e0:	f1b8 0f01 	cmp.w	r8, #1
  4099e4:	bf04      	itt	eq
  4099e6:	f042 0201 	orreq.w	r2, r2, #1
  4099ea:	81a2      	strheq	r2, [r4, #12]
  4099ec:	b292      	uxth	r2, r2
  4099ee:	f012 0308 	ands.w	r3, r2, #8
  4099f2:	6127      	str	r7, [r4, #16]
  4099f4:	6166      	str	r6, [r4, #20]
  4099f6:	d00e      	beq.n	409a16 <setvbuf+0x13e>
  4099f8:	07d1      	lsls	r1, r2, #31
  4099fa:	d51a      	bpl.n	409a32 <setvbuf+0x15a>
  4099fc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4099fe:	4276      	negs	r6, r6
  409a00:	2300      	movs	r3, #0
  409a02:	f015 0501 	ands.w	r5, r5, #1
  409a06:	61a6      	str	r6, [r4, #24]
  409a08:	60a3      	str	r3, [r4, #8]
  409a0a:	d009      	beq.n	409a20 <setvbuf+0x148>
  409a0c:	2500      	movs	r5, #0
  409a0e:	4628      	mov	r0, r5
  409a10:	b003      	add	sp, #12
  409a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409a16:	60a3      	str	r3, [r4, #8]
  409a18:	6e65      	ldr	r5, [r4, #100]	; 0x64
  409a1a:	f015 0501 	ands.w	r5, r5, #1
  409a1e:	d1f5      	bne.n	409a0c <setvbuf+0x134>
  409a20:	0593      	lsls	r3, r2, #22
  409a22:	d4c0      	bmi.n	4099a6 <setvbuf+0xce>
  409a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409a26:	f004 fb9d 	bl	40e164 <__retarget_lock_release_recursive>
  409a2a:	4628      	mov	r0, r5
  409a2c:	b003      	add	sp, #12
  409a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409a32:	60a6      	str	r6, [r4, #8]
  409a34:	e7f0      	b.n	409a18 <setvbuf+0x140>
  409a36:	4628      	mov	r0, r5
  409a38:	f003 ffc0 	bl	40d9bc <__sinit>
  409a3c:	e7c7      	b.n	4099ce <setvbuf+0xf6>
  409a3e:	f04f 35ff 	mov.w	r5, #4294967295
  409a42:	e7b0      	b.n	4099a6 <setvbuf+0xce>
  409a44:	f8dd 9000 	ldr.w	r9, [sp]
  409a48:	45b1      	cmp	r9, r6
  409a4a:	d004      	beq.n	409a56 <setvbuf+0x17e>
  409a4c:	4648      	mov	r0, r9
  409a4e:	f004 fc03 	bl	40e258 <malloc>
  409a52:	4607      	mov	r7, r0
  409a54:	b920      	cbnz	r0, 409a60 <setvbuf+0x188>
  409a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409a5a:	f04f 35ff 	mov.w	r5, #4294967295
  409a5e:	e792      	b.n	409986 <setvbuf+0xae>
  409a60:	464e      	mov	r6, r9
  409a62:	e783      	b.n	40996c <setvbuf+0x94>
  409a64:	20400078 	.word	0x20400078

00409a68 <sprintf>:
  409a68:	b40e      	push	{r1, r2, r3}
  409a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  409a6c:	b09c      	sub	sp, #112	; 0x70
  409a6e:	ab21      	add	r3, sp, #132	; 0x84
  409a70:	490f      	ldr	r1, [pc, #60]	; (409ab0 <sprintf+0x48>)
  409a72:	f853 2b04 	ldr.w	r2, [r3], #4
  409a76:	9301      	str	r3, [sp, #4]
  409a78:	4605      	mov	r5, r0
  409a7a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  409a7e:	6808      	ldr	r0, [r1, #0]
  409a80:	9502      	str	r5, [sp, #8]
  409a82:	f44f 7702 	mov.w	r7, #520	; 0x208
  409a86:	f64f 76ff 	movw	r6, #65535	; 0xffff
  409a8a:	a902      	add	r1, sp, #8
  409a8c:	9506      	str	r5, [sp, #24]
  409a8e:	f8ad 7014 	strh.w	r7, [sp, #20]
  409a92:	9404      	str	r4, [sp, #16]
  409a94:	9407      	str	r4, [sp, #28]
  409a96:	f8ad 6016 	strh.w	r6, [sp, #22]
  409a9a:	f000 fd6d 	bl	40a578 <_svfprintf_r>
  409a9e:	9b02      	ldr	r3, [sp, #8]
  409aa0:	2200      	movs	r2, #0
  409aa2:	701a      	strb	r2, [r3, #0]
  409aa4:	b01c      	add	sp, #112	; 0x70
  409aa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  409aaa:	b003      	add	sp, #12
  409aac:	4770      	bx	lr
  409aae:	bf00      	nop
  409ab0:	20400078 	.word	0x20400078
	...
  409ac0:	eba2 0003 	sub.w	r0, r2, r3
  409ac4:	4770      	bx	lr
  409ac6:	bf00      	nop

00409ac8 <strcmp>:
  409ac8:	7802      	ldrb	r2, [r0, #0]
  409aca:	780b      	ldrb	r3, [r1, #0]
  409acc:	2a01      	cmp	r2, #1
  409ace:	bf28      	it	cs
  409ad0:	429a      	cmpcs	r2, r3
  409ad2:	d1f5      	bne.n	409ac0 <sprintf+0x58>
  409ad4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  409ad8:	ea40 0401 	orr.w	r4, r0, r1
  409adc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  409ae0:	f06f 0c00 	mvn.w	ip, #0
  409ae4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  409ae8:	b312      	cbz	r2, 409b30 <strcmp+0x68>
  409aea:	ea80 0401 	eor.w	r4, r0, r1
  409aee:	f014 0f07 	tst.w	r4, #7
  409af2:	d16a      	bne.n	409bca <strcmp+0x102>
  409af4:	f000 0407 	and.w	r4, r0, #7
  409af8:	f020 0007 	bic.w	r0, r0, #7
  409afc:	f004 0503 	and.w	r5, r4, #3
  409b00:	f021 0107 	bic.w	r1, r1, #7
  409b04:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  409b08:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  409b0c:	f014 0f04 	tst.w	r4, #4
  409b10:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  409b14:	fa0c f405 	lsl.w	r4, ip, r5
  409b18:	ea62 0204 	orn	r2, r2, r4
  409b1c:	ea66 0604 	orn	r6, r6, r4
  409b20:	d00a      	beq.n	409b38 <strcmp+0x70>
  409b22:	ea63 0304 	orn	r3, r3, r4
  409b26:	4662      	mov	r2, ip
  409b28:	ea67 0704 	orn	r7, r7, r4
  409b2c:	4666      	mov	r6, ip
  409b2e:	e003      	b.n	409b38 <strcmp+0x70>
  409b30:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  409b34:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  409b38:	fa82 f54c 	uadd8	r5, r2, ip
  409b3c:	ea82 0406 	eor.w	r4, r2, r6
  409b40:	faa4 f48c 	sel	r4, r4, ip
  409b44:	bb6c      	cbnz	r4, 409ba2 <strcmp+0xda>
  409b46:	fa83 f54c 	uadd8	r5, r3, ip
  409b4a:	ea83 0507 	eor.w	r5, r3, r7
  409b4e:	faa5 f58c 	sel	r5, r5, ip
  409b52:	b995      	cbnz	r5, 409b7a <strcmp+0xb2>
  409b54:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  409b58:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  409b5c:	fa82 f54c 	uadd8	r5, r2, ip
  409b60:	ea82 0406 	eor.w	r4, r2, r6
  409b64:	faa4 f48c 	sel	r4, r4, ip
  409b68:	fa83 f54c 	uadd8	r5, r3, ip
  409b6c:	ea83 0507 	eor.w	r5, r3, r7
  409b70:	faa5 f58c 	sel	r5, r5, ip
  409b74:	4325      	orrs	r5, r4
  409b76:	d0db      	beq.n	409b30 <strcmp+0x68>
  409b78:	b99c      	cbnz	r4, 409ba2 <strcmp+0xda>
  409b7a:	ba2d      	rev	r5, r5
  409b7c:	fab5 f485 	clz	r4, r5
  409b80:	f024 0407 	bic.w	r4, r4, #7
  409b84:	fa27 f104 	lsr.w	r1, r7, r4
  409b88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  409b8c:	fa23 f304 	lsr.w	r3, r3, r4
  409b90:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  409b94:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409b98:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409b9c:	eba0 0001 	sub.w	r0, r0, r1
  409ba0:	4770      	bx	lr
  409ba2:	ba24      	rev	r4, r4
  409ba4:	fab4 f484 	clz	r4, r4
  409ba8:	f024 0407 	bic.w	r4, r4, #7
  409bac:	fa26 f104 	lsr.w	r1, r6, r4
  409bb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  409bb4:	fa22 f204 	lsr.w	r2, r2, r4
  409bb8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  409bbc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409bc0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409bc4:	eba0 0001 	sub.w	r0, r0, r1
  409bc8:	4770      	bx	lr
  409bca:	f014 0f03 	tst.w	r4, #3
  409bce:	d13c      	bne.n	409c4a <strcmp+0x182>
  409bd0:	f010 0403 	ands.w	r4, r0, #3
  409bd4:	d128      	bne.n	409c28 <strcmp+0x160>
  409bd6:	f850 2b08 	ldr.w	r2, [r0], #8
  409bda:	f851 3b08 	ldr.w	r3, [r1], #8
  409bde:	fa82 f54c 	uadd8	r5, r2, ip
  409be2:	ea82 0503 	eor.w	r5, r2, r3
  409be6:	faa5 f58c 	sel	r5, r5, ip
  409bea:	b95d      	cbnz	r5, 409c04 <strcmp+0x13c>
  409bec:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  409bf4:	fa82 f54c 	uadd8	r5, r2, ip
  409bf8:	ea82 0503 	eor.w	r5, r2, r3
  409bfc:	faa5 f58c 	sel	r5, r5, ip
  409c00:	2d00      	cmp	r5, #0
  409c02:	d0e8      	beq.n	409bd6 <strcmp+0x10e>
  409c04:	ba2d      	rev	r5, r5
  409c06:	fab5 f485 	clz	r4, r5
  409c0a:	f024 0407 	bic.w	r4, r4, #7
  409c0e:	fa23 f104 	lsr.w	r1, r3, r4
  409c12:	fa22 f204 	lsr.w	r2, r2, r4
  409c16:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  409c1a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409c1e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409c22:	eba0 0001 	sub.w	r0, r0, r1
  409c26:	4770      	bx	lr
  409c28:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  409c2c:	f020 0003 	bic.w	r0, r0, #3
  409c30:	f850 2b08 	ldr.w	r2, [r0], #8
  409c34:	f021 0103 	bic.w	r1, r1, #3
  409c38:	f851 3b08 	ldr.w	r3, [r1], #8
  409c3c:	fa0c f404 	lsl.w	r4, ip, r4
  409c40:	ea62 0204 	orn	r2, r2, r4
  409c44:	ea63 0304 	orn	r3, r3, r4
  409c48:	e7c9      	b.n	409bde <strcmp+0x116>
  409c4a:	f010 0403 	ands.w	r4, r0, #3
  409c4e:	d01a      	beq.n	409c86 <strcmp+0x1be>
  409c50:	eba1 0104 	sub.w	r1, r1, r4
  409c54:	f020 0003 	bic.w	r0, r0, #3
  409c58:	07e4      	lsls	r4, r4, #31
  409c5a:	f850 2b04 	ldr.w	r2, [r0], #4
  409c5e:	d006      	beq.n	409c6e <strcmp+0x1a6>
  409c60:	d20f      	bcs.n	409c82 <strcmp+0x1ba>
  409c62:	788b      	ldrb	r3, [r1, #2]
  409c64:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  409c68:	1ae4      	subs	r4, r4, r3
  409c6a:	d106      	bne.n	409c7a <strcmp+0x1b2>
  409c6c:	b12b      	cbz	r3, 409c7a <strcmp+0x1b2>
  409c6e:	78cb      	ldrb	r3, [r1, #3]
  409c70:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  409c74:	1ae4      	subs	r4, r4, r3
  409c76:	d100      	bne.n	409c7a <strcmp+0x1b2>
  409c78:	b91b      	cbnz	r3, 409c82 <strcmp+0x1ba>
  409c7a:	4620      	mov	r0, r4
  409c7c:	f85d 4b10 	ldr.w	r4, [sp], #16
  409c80:	4770      	bx	lr
  409c82:	f101 0104 	add.w	r1, r1, #4
  409c86:	f850 2b04 	ldr.w	r2, [r0], #4
  409c8a:	07cc      	lsls	r4, r1, #31
  409c8c:	f021 0103 	bic.w	r1, r1, #3
  409c90:	f851 3b04 	ldr.w	r3, [r1], #4
  409c94:	d848      	bhi.n	409d28 <strcmp+0x260>
  409c96:	d224      	bcs.n	409ce2 <strcmp+0x21a>
  409c98:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  409c9c:	fa82 f54c 	uadd8	r5, r2, ip
  409ca0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  409ca4:	faa5 f58c 	sel	r5, r5, ip
  409ca8:	d10a      	bne.n	409cc0 <strcmp+0x1f8>
  409caa:	b965      	cbnz	r5, 409cc6 <strcmp+0x1fe>
  409cac:	f851 3b04 	ldr.w	r3, [r1], #4
  409cb0:	ea84 0402 	eor.w	r4, r4, r2
  409cb4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  409cb8:	d10e      	bne.n	409cd8 <strcmp+0x210>
  409cba:	f850 2b04 	ldr.w	r2, [r0], #4
  409cbe:	e7eb      	b.n	409c98 <strcmp+0x1d0>
  409cc0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  409cc4:	e055      	b.n	409d72 <strcmp+0x2aa>
  409cc6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  409cca:	d14d      	bne.n	409d68 <strcmp+0x2a0>
  409ccc:	7808      	ldrb	r0, [r1, #0]
  409cce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409cd2:	f1c0 0000 	rsb	r0, r0, #0
  409cd6:	4770      	bx	lr
  409cd8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  409cdc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  409ce0:	e047      	b.n	409d72 <strcmp+0x2aa>
  409ce2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  409ce6:	fa82 f54c 	uadd8	r5, r2, ip
  409cea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  409cee:	faa5 f58c 	sel	r5, r5, ip
  409cf2:	d10a      	bne.n	409d0a <strcmp+0x242>
  409cf4:	b965      	cbnz	r5, 409d10 <strcmp+0x248>
  409cf6:	f851 3b04 	ldr.w	r3, [r1], #4
  409cfa:	ea84 0402 	eor.w	r4, r4, r2
  409cfe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  409d02:	d10c      	bne.n	409d1e <strcmp+0x256>
  409d04:	f850 2b04 	ldr.w	r2, [r0], #4
  409d08:	e7eb      	b.n	409ce2 <strcmp+0x21a>
  409d0a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  409d0e:	e030      	b.n	409d72 <strcmp+0x2aa>
  409d10:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  409d14:	d128      	bne.n	409d68 <strcmp+0x2a0>
  409d16:	880b      	ldrh	r3, [r1, #0]
  409d18:	ea4f 4212 	mov.w	r2, r2, lsr #16
  409d1c:	e029      	b.n	409d72 <strcmp+0x2aa>
  409d1e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  409d22:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  409d26:	e024      	b.n	409d72 <strcmp+0x2aa>
  409d28:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  409d2c:	fa82 f54c 	uadd8	r5, r2, ip
  409d30:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  409d34:	faa5 f58c 	sel	r5, r5, ip
  409d38:	d10a      	bne.n	409d50 <strcmp+0x288>
  409d3a:	b965      	cbnz	r5, 409d56 <strcmp+0x28e>
  409d3c:	f851 3b04 	ldr.w	r3, [r1], #4
  409d40:	ea84 0402 	eor.w	r4, r4, r2
  409d44:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  409d48:	d109      	bne.n	409d5e <strcmp+0x296>
  409d4a:	f850 2b04 	ldr.w	r2, [r0], #4
  409d4e:	e7eb      	b.n	409d28 <strcmp+0x260>
  409d50:	ea4f 6313 	mov.w	r3, r3, lsr #24
  409d54:	e00d      	b.n	409d72 <strcmp+0x2aa>
  409d56:	f015 0fff 	tst.w	r5, #255	; 0xff
  409d5a:	d105      	bne.n	409d68 <strcmp+0x2a0>
  409d5c:	680b      	ldr	r3, [r1, #0]
  409d5e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  409d62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  409d66:	e004      	b.n	409d72 <strcmp+0x2aa>
  409d68:	f04f 0000 	mov.w	r0, #0
  409d6c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409d70:	4770      	bx	lr
  409d72:	ba12      	rev	r2, r2
  409d74:	ba1b      	rev	r3, r3
  409d76:	fa82 f44c 	uadd8	r4, r2, ip
  409d7a:	ea82 0403 	eor.w	r4, r2, r3
  409d7e:	faa4 f58c 	sel	r5, r4, ip
  409d82:	fab5 f485 	clz	r4, r5
  409d86:	fa02 f204 	lsl.w	r2, r2, r4
  409d8a:	fa03 f304 	lsl.w	r3, r3, r4
  409d8e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  409d92:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409d96:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  409d9a:	4770      	bx	lr

00409d9c <strcpy>:
  409d9c:	ea80 0201 	eor.w	r2, r0, r1
  409da0:	4684      	mov	ip, r0
  409da2:	f012 0f03 	tst.w	r2, #3
  409da6:	d14f      	bne.n	409e48 <strcpy+0xac>
  409da8:	f011 0f03 	tst.w	r1, #3
  409dac:	d132      	bne.n	409e14 <strcpy+0x78>
  409dae:	f84d 4d04 	str.w	r4, [sp, #-4]!
  409db2:	f011 0f04 	tst.w	r1, #4
  409db6:	f851 3b04 	ldr.w	r3, [r1], #4
  409dba:	d00b      	beq.n	409dd4 <strcpy+0x38>
  409dbc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  409dc0:	439a      	bics	r2, r3
  409dc2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  409dc6:	bf04      	itt	eq
  409dc8:	f84c 3b04 	streq.w	r3, [ip], #4
  409dcc:	f851 3b04 	ldreq.w	r3, [r1], #4
  409dd0:	d116      	bne.n	409e00 <strcpy+0x64>
  409dd2:	bf00      	nop
  409dd4:	f851 4b04 	ldr.w	r4, [r1], #4
  409dd8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  409ddc:	439a      	bics	r2, r3
  409dde:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  409de2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  409de6:	d10b      	bne.n	409e00 <strcpy+0x64>
  409de8:	f84c 3b04 	str.w	r3, [ip], #4
  409dec:	43a2      	bics	r2, r4
  409dee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  409df2:	bf04      	itt	eq
  409df4:	f851 3b04 	ldreq.w	r3, [r1], #4
  409df8:	f84c 4b04 	streq.w	r4, [ip], #4
  409dfc:	d0ea      	beq.n	409dd4 <strcpy+0x38>
  409dfe:	4623      	mov	r3, r4
  409e00:	f80c 3b01 	strb.w	r3, [ip], #1
  409e04:	f013 0fff 	tst.w	r3, #255	; 0xff
  409e08:	ea4f 2333 	mov.w	r3, r3, ror #8
  409e0c:	d1f8      	bne.n	409e00 <strcpy+0x64>
  409e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  409e12:	4770      	bx	lr
  409e14:	f011 0f01 	tst.w	r1, #1
  409e18:	d006      	beq.n	409e28 <strcpy+0x8c>
  409e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
  409e1e:	f80c 2b01 	strb.w	r2, [ip], #1
  409e22:	2a00      	cmp	r2, #0
  409e24:	bf08      	it	eq
  409e26:	4770      	bxeq	lr
  409e28:	f011 0f02 	tst.w	r1, #2
  409e2c:	d0bf      	beq.n	409dae <strcpy+0x12>
  409e2e:	f831 2b02 	ldrh.w	r2, [r1], #2
  409e32:	f012 0fff 	tst.w	r2, #255	; 0xff
  409e36:	bf16      	itet	ne
  409e38:	f82c 2b02 	strhne.w	r2, [ip], #2
  409e3c:	f88c 2000 	strbeq.w	r2, [ip]
  409e40:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  409e44:	d1b3      	bne.n	409dae <strcpy+0x12>
  409e46:	4770      	bx	lr
  409e48:	f811 2b01 	ldrb.w	r2, [r1], #1
  409e4c:	f80c 2b01 	strb.w	r2, [ip], #1
  409e50:	2a00      	cmp	r2, #0
  409e52:	d1f9      	bne.n	409e48 <strcpy+0xac>
  409e54:	4770      	bx	lr
  409e56:	bf00      	nop
	...

00409e80 <strlen>:
  409e80:	f890 f000 	pld	[r0]
  409e84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  409e88:	f020 0107 	bic.w	r1, r0, #7
  409e8c:	f06f 0c00 	mvn.w	ip, #0
  409e90:	f010 0407 	ands.w	r4, r0, #7
  409e94:	f891 f020 	pld	[r1, #32]
  409e98:	f040 8049 	bne.w	409f2e <strlen+0xae>
  409e9c:	f04f 0400 	mov.w	r4, #0
  409ea0:	f06f 0007 	mvn.w	r0, #7
  409ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
  409ea8:	f891 f040 	pld	[r1, #64]	; 0x40
  409eac:	f100 0008 	add.w	r0, r0, #8
  409eb0:	fa82 f24c 	uadd8	r2, r2, ip
  409eb4:	faa4 f28c 	sel	r2, r4, ip
  409eb8:	fa83 f34c 	uadd8	r3, r3, ip
  409ebc:	faa2 f38c 	sel	r3, r2, ip
  409ec0:	bb4b      	cbnz	r3, 409f16 <strlen+0x96>
  409ec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  409ec6:	fa82 f24c 	uadd8	r2, r2, ip
  409eca:	f100 0008 	add.w	r0, r0, #8
  409ece:	faa4 f28c 	sel	r2, r4, ip
  409ed2:	fa83 f34c 	uadd8	r3, r3, ip
  409ed6:	faa2 f38c 	sel	r3, r2, ip
  409eda:	b9e3      	cbnz	r3, 409f16 <strlen+0x96>
  409edc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  409ee0:	fa82 f24c 	uadd8	r2, r2, ip
  409ee4:	f100 0008 	add.w	r0, r0, #8
  409ee8:	faa4 f28c 	sel	r2, r4, ip
  409eec:	fa83 f34c 	uadd8	r3, r3, ip
  409ef0:	faa2 f38c 	sel	r3, r2, ip
  409ef4:	b97b      	cbnz	r3, 409f16 <strlen+0x96>
  409ef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  409efa:	f101 0120 	add.w	r1, r1, #32
  409efe:	fa82 f24c 	uadd8	r2, r2, ip
  409f02:	f100 0008 	add.w	r0, r0, #8
  409f06:	faa4 f28c 	sel	r2, r4, ip
  409f0a:	fa83 f34c 	uadd8	r3, r3, ip
  409f0e:	faa2 f38c 	sel	r3, r2, ip
  409f12:	2b00      	cmp	r3, #0
  409f14:	d0c6      	beq.n	409ea4 <strlen+0x24>
  409f16:	2a00      	cmp	r2, #0
  409f18:	bf04      	itt	eq
  409f1a:	3004      	addeq	r0, #4
  409f1c:	461a      	moveq	r2, r3
  409f1e:	ba12      	rev	r2, r2
  409f20:	fab2 f282 	clz	r2, r2
  409f24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  409f28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  409f2c:	4770      	bx	lr
  409f2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  409f32:	f004 0503 	and.w	r5, r4, #3
  409f36:	f1c4 0000 	rsb	r0, r4, #0
  409f3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  409f3e:	f014 0f04 	tst.w	r4, #4
  409f42:	f891 f040 	pld	[r1, #64]	; 0x40
  409f46:	fa0c f505 	lsl.w	r5, ip, r5
  409f4a:	ea62 0205 	orn	r2, r2, r5
  409f4e:	bf1c      	itt	ne
  409f50:	ea63 0305 	ornne	r3, r3, r5
  409f54:	4662      	movne	r2, ip
  409f56:	f04f 0400 	mov.w	r4, #0
  409f5a:	e7a9      	b.n	409eb0 <strlen+0x30>

00409f5c <critical_factorization>:
  409f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409f60:	f04f 0e01 	mov.w	lr, #1
  409f64:	4674      	mov	r4, lr
  409f66:	2500      	movs	r5, #0
  409f68:	f04f 36ff 	mov.w	r6, #4294967295
  409f6c:	192b      	adds	r3, r5, r4
  409f6e:	428b      	cmp	r3, r1
  409f70:	eb00 0706 	add.w	r7, r0, r6
  409f74:	d20d      	bcs.n	409f92 <critical_factorization+0x36>
  409f76:	5d3f      	ldrb	r7, [r7, r4]
  409f78:	f810 c003 	ldrb.w	ip, [r0, r3]
  409f7c:	45bc      	cmp	ip, r7
  409f7e:	d22d      	bcs.n	409fdc <critical_factorization+0x80>
  409f80:	461d      	mov	r5, r3
  409f82:	2401      	movs	r4, #1
  409f84:	eba3 0e06 	sub.w	lr, r3, r6
  409f88:	192b      	adds	r3, r5, r4
  409f8a:	428b      	cmp	r3, r1
  409f8c:	eb00 0706 	add.w	r7, r0, r6
  409f90:	d3f1      	bcc.n	409f76 <critical_factorization+0x1a>
  409f92:	f04f 0801 	mov.w	r8, #1
  409f96:	f8c2 e000 	str.w	lr, [r2]
  409f9a:	4644      	mov	r4, r8
  409f9c:	2500      	movs	r5, #0
  409f9e:	f04f 37ff 	mov.w	r7, #4294967295
  409fa2:	192b      	adds	r3, r5, r4
  409fa4:	4299      	cmp	r1, r3
  409fa6:	eb00 0e07 	add.w	lr, r0, r7
  409faa:	d90e      	bls.n	409fca <critical_factorization+0x6e>
  409fac:	f81e e004 	ldrb.w	lr, [lr, r4]
  409fb0:	f810 c003 	ldrb.w	ip, [r0, r3]
  409fb4:	45f4      	cmp	ip, lr
  409fb6:	d918      	bls.n	409fea <critical_factorization+0x8e>
  409fb8:	461d      	mov	r5, r3
  409fba:	2401      	movs	r4, #1
  409fbc:	eba3 0807 	sub.w	r8, r3, r7
  409fc0:	192b      	adds	r3, r5, r4
  409fc2:	4299      	cmp	r1, r3
  409fc4:	eb00 0e07 	add.w	lr, r0, r7
  409fc8:	d8f0      	bhi.n	409fac <critical_factorization+0x50>
  409fca:	3701      	adds	r7, #1
  409fcc:	1c70      	adds	r0, r6, #1
  409fce:	4287      	cmp	r7, r0
  409fd0:	bf24      	itt	cs
  409fd2:	f8c2 8000 	strcs.w	r8, [r2]
  409fd6:	4638      	movcs	r0, r7
  409fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409fdc:	d00c      	beq.n	409ff8 <critical_factorization+0x9c>
  409fde:	f04f 0e01 	mov.w	lr, #1
  409fe2:	462e      	mov	r6, r5
  409fe4:	4674      	mov	r4, lr
  409fe6:	4475      	add	r5, lr
  409fe8:	e7c0      	b.n	409f6c <critical_factorization+0x10>
  409fea:	d00b      	beq.n	40a004 <critical_factorization+0xa8>
  409fec:	f04f 0801 	mov.w	r8, #1
  409ff0:	462f      	mov	r7, r5
  409ff2:	4644      	mov	r4, r8
  409ff4:	4445      	add	r5, r8
  409ff6:	e7d4      	b.n	409fa2 <critical_factorization+0x46>
  409ff8:	4574      	cmp	r4, lr
  409ffa:	bf12      	itee	ne
  409ffc:	3401      	addne	r4, #1
  409ffe:	461d      	moveq	r5, r3
  40a000:	2401      	moveq	r4, #1
  40a002:	e7b3      	b.n	409f6c <critical_factorization+0x10>
  40a004:	4544      	cmp	r4, r8
  40a006:	bf12      	itee	ne
  40a008:	3401      	addne	r4, #1
  40a00a:	461d      	moveq	r5, r3
  40a00c:	2401      	moveq	r4, #1
  40a00e:	e7c8      	b.n	409fa2 <critical_factorization+0x46>

0040a010 <two_way_long_needle>:
  40a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a014:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  40a018:	4616      	mov	r6, r2
  40a01a:	4605      	mov	r5, r0
  40a01c:	468b      	mov	fp, r1
  40a01e:	4610      	mov	r0, r2
  40a020:	4619      	mov	r1, r3
  40a022:	aa03      	add	r2, sp, #12
  40a024:	461c      	mov	r4, r3
  40a026:	f7ff ff99 	bl	409f5c <critical_factorization>
  40a02a:	ab03      	add	r3, sp, #12
  40a02c:	4681      	mov	r9, r0
  40a02e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  40a032:	f843 4f04 	str.w	r4, [r3, #4]!
  40a036:	4293      	cmp	r3, r2
  40a038:	d1fb      	bne.n	40a032 <two_way_long_needle+0x22>
  40a03a:	b14c      	cbz	r4, 40a050 <two_way_long_needle+0x40>
  40a03c:	1e63      	subs	r3, r4, #1
  40a03e:	1e72      	subs	r2, r6, #1
  40a040:	a804      	add	r0, sp, #16
  40a042:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40a046:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40a04a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40a04e:	d2f8      	bcs.n	40a042 <two_way_long_needle+0x32>
  40a050:	9903      	ldr	r1, [sp, #12]
  40a052:	464a      	mov	r2, r9
  40a054:	4431      	add	r1, r6
  40a056:	4630      	mov	r0, r6
  40a058:	f004 fc22 	bl	40e8a0 <memcmp>
  40a05c:	2800      	cmp	r0, #0
  40a05e:	d16f      	bne.n	40a140 <two_way_long_needle+0x130>
  40a060:	f109 33ff 	add.w	r3, r9, #4294967295
  40a064:	9300      	str	r3, [sp, #0]
  40a066:	18f3      	adds	r3, r6, r3
  40a068:	4682      	mov	sl, r0
  40a06a:	9301      	str	r3, [sp, #4]
  40a06c:	4623      	mov	r3, r4
  40a06e:	4680      	mov	r8, r0
  40a070:	4654      	mov	r4, sl
  40a072:	4658      	mov	r0, fp
  40a074:	469a      	mov	sl, r3
  40a076:	eb08 070a 	add.w	r7, r8, sl
  40a07a:	1a3a      	subs	r2, r7, r0
  40a07c:	2100      	movs	r1, #0
  40a07e:	4428      	add	r0, r5
  40a080:	f004 fbbe 	bl	40e800 <memchr>
  40a084:	2800      	cmp	r0, #0
  40a086:	d156      	bne.n	40a136 <two_way_long_needle+0x126>
  40a088:	2f00      	cmp	r7, #0
  40a08a:	d054      	beq.n	40a136 <two_way_long_needle+0x126>
  40a08c:	19eb      	adds	r3, r5, r7
  40a08e:	aa04      	add	r2, sp, #16
  40a090:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40a094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40a098:	b14b      	cbz	r3, 40a0ae <two_way_long_needle+0x9e>
  40a09a:	b124      	cbz	r4, 40a0a6 <two_way_long_needle+0x96>
  40a09c:	9a03      	ldr	r2, [sp, #12]
  40a09e:	4293      	cmp	r3, r2
  40a0a0:	d201      	bcs.n	40a0a6 <two_way_long_needle+0x96>
  40a0a2:	ebaa 0302 	sub.w	r3, sl, r2
  40a0a6:	4498      	add	r8, r3
  40a0a8:	2400      	movs	r4, #0
  40a0aa:	4638      	mov	r0, r7
  40a0ac:	e7e3      	b.n	40a076 <two_way_long_needle+0x66>
  40a0ae:	454c      	cmp	r4, r9
  40a0b0:	4623      	mov	r3, r4
  40a0b2:	f10a 3eff 	add.w	lr, sl, #4294967295
  40a0b6:	bf38      	it	cc
  40a0b8:	464b      	movcc	r3, r9
  40a0ba:	4573      	cmp	r3, lr
  40a0bc:	d213      	bcs.n	40a0e6 <two_way_long_needle+0xd6>
  40a0be:	eb08 0203 	add.w	r2, r8, r3
  40a0c2:	f816 c003 	ldrb.w	ip, [r6, r3]
  40a0c6:	5ca8      	ldrb	r0, [r5, r2]
  40a0c8:	4584      	cmp	ip, r0
  40a0ca:	442a      	add	r2, r5
  40a0cc:	eb06 0103 	add.w	r1, r6, r3
  40a0d0:	d006      	beq.n	40a0e0 <two_way_long_needle+0xd0>
  40a0d2:	e02c      	b.n	40a12e <two_way_long_needle+0x11e>
  40a0d4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40a0d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40a0dc:	4584      	cmp	ip, r0
  40a0de:	d126      	bne.n	40a12e <two_way_long_needle+0x11e>
  40a0e0:	3301      	adds	r3, #1
  40a0e2:	4573      	cmp	r3, lr
  40a0e4:	d3f6      	bcc.n	40a0d4 <two_way_long_needle+0xc4>
  40a0e6:	454c      	cmp	r4, r9
  40a0e8:	9900      	ldr	r1, [sp, #0]
  40a0ea:	f080 8089 	bcs.w	40a200 <two_way_long_needle+0x1f0>
  40a0ee:	9b00      	ldr	r3, [sp, #0]
  40a0f0:	eb08 0203 	add.w	r2, r8, r3
  40a0f4:	9b01      	ldr	r3, [sp, #4]
  40a0f6:	5ca8      	ldrb	r0, [r5, r2]
  40a0f8:	781b      	ldrb	r3, [r3, #0]
  40a0fa:	4298      	cmp	r0, r3
  40a0fc:	442a      	add	r2, r5
  40a0fe:	d17f      	bne.n	40a200 <two_way_long_needle+0x1f0>
  40a100:	9801      	ldr	r0, [sp, #4]
  40a102:	f104 3bff 	add.w	fp, r4, #4294967295
  40a106:	e006      	b.n	40a116 <two_way_long_needle+0x106>
  40a108:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40a10c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40a110:	45f4      	cmp	ip, lr
  40a112:	d103      	bne.n	40a11c <two_way_long_needle+0x10c>
  40a114:	4619      	mov	r1, r3
  40a116:	1e4b      	subs	r3, r1, #1
  40a118:	459b      	cmp	fp, r3
  40a11a:	d1f5      	bne.n	40a108 <two_way_long_needle+0xf8>
  40a11c:	3401      	adds	r4, #1
  40a11e:	428c      	cmp	r4, r1
  40a120:	d870      	bhi.n	40a204 <two_way_long_needle+0x1f4>
  40a122:	9c03      	ldr	r4, [sp, #12]
  40a124:	4638      	mov	r0, r7
  40a126:	44a0      	add	r8, r4
  40a128:	ebaa 0404 	sub.w	r4, sl, r4
  40a12c:	e7a3      	b.n	40a076 <two_way_long_needle+0x66>
  40a12e:	f1c9 0201 	rsb	r2, r9, #1
  40a132:	4490      	add	r8, r2
  40a134:	e7b7      	b.n	40a0a6 <two_way_long_needle+0x96>
  40a136:	2000      	movs	r0, #0
  40a138:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a140:	eba4 0309 	sub.w	r3, r4, r9
  40a144:	454b      	cmp	r3, r9
  40a146:	bf38      	it	cc
  40a148:	464b      	movcc	r3, r9
  40a14a:	3301      	adds	r3, #1
  40a14c:	f109 38ff 	add.w	r8, r9, #4294967295
  40a150:	9303      	str	r3, [sp, #12]
  40a152:	eb06 0308 	add.w	r3, r6, r8
  40a156:	4658      	mov	r0, fp
  40a158:	f04f 0a00 	mov.w	sl, #0
  40a15c:	46cb      	mov	fp, r9
  40a15e:	4699      	mov	r9, r3
  40a160:	eb0a 0704 	add.w	r7, sl, r4
  40a164:	1a3a      	subs	r2, r7, r0
  40a166:	2100      	movs	r1, #0
  40a168:	4428      	add	r0, r5
  40a16a:	f004 fb49 	bl	40e800 <memchr>
  40a16e:	2800      	cmp	r0, #0
  40a170:	d1e1      	bne.n	40a136 <two_way_long_needle+0x126>
  40a172:	2f00      	cmp	r7, #0
  40a174:	d0df      	beq.n	40a136 <two_way_long_needle+0x126>
  40a176:	19eb      	adds	r3, r5, r7
  40a178:	aa04      	add	r2, sp, #16
  40a17a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40a17e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40a182:	bba3      	cbnz	r3, 40a1ee <two_way_long_needle+0x1de>
  40a184:	1e61      	subs	r1, r4, #1
  40a186:	458b      	cmp	fp, r1
  40a188:	d215      	bcs.n	40a1b6 <two_way_long_needle+0x1a6>
  40a18a:	eb0a 020b 	add.w	r2, sl, fp
  40a18e:	f816 300b 	ldrb.w	r3, [r6, fp]
  40a192:	f815 e002 	ldrb.w	lr, [r5, r2]
  40a196:	459e      	cmp	lr, r3
  40a198:	442a      	add	r2, r5
  40a19a:	eb06 000b 	add.w	r0, r6, fp
  40a19e:	465b      	mov	r3, fp
  40a1a0:	d006      	beq.n	40a1b0 <two_way_long_needle+0x1a0>
  40a1a2:	e027      	b.n	40a1f4 <two_way_long_needle+0x1e4>
  40a1a4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  40a1a8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40a1ac:	45f4      	cmp	ip, lr
  40a1ae:	d121      	bne.n	40a1f4 <two_way_long_needle+0x1e4>
  40a1b0:	3301      	adds	r3, #1
  40a1b2:	428b      	cmp	r3, r1
  40a1b4:	d3f6      	bcc.n	40a1a4 <two_way_long_needle+0x194>
  40a1b6:	f1b8 3fff 	cmp.w	r8, #4294967295
  40a1ba:	d011      	beq.n	40a1e0 <two_way_long_needle+0x1d0>
  40a1bc:	eb0a 0208 	add.w	r2, sl, r8
  40a1c0:	f899 1000 	ldrb.w	r1, [r9]
  40a1c4:	5cab      	ldrb	r3, [r5, r2]
  40a1c6:	4299      	cmp	r1, r3
  40a1c8:	442a      	add	r2, r5
  40a1ca:	d10f      	bne.n	40a1ec <two_way_long_needle+0x1dc>
  40a1cc:	464b      	mov	r3, r9
  40a1ce:	e005      	b.n	40a1dc <two_way_long_needle+0x1cc>
  40a1d0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40a1d4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40a1d8:	4288      	cmp	r0, r1
  40a1da:	d107      	bne.n	40a1ec <two_way_long_needle+0x1dc>
  40a1dc:	42b3      	cmp	r3, r6
  40a1de:	d1f7      	bne.n	40a1d0 <two_way_long_needle+0x1c0>
  40a1e0:	eb05 000a 	add.w	r0, r5, sl
  40a1e4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1ec:	9b03      	ldr	r3, [sp, #12]
  40a1ee:	449a      	add	sl, r3
  40a1f0:	4638      	mov	r0, r7
  40a1f2:	e7b5      	b.n	40a160 <two_way_long_needle+0x150>
  40a1f4:	f1cb 0201 	rsb	r2, fp, #1
  40a1f8:	4492      	add	sl, r2
  40a1fa:	449a      	add	sl, r3
  40a1fc:	4638      	mov	r0, r7
  40a1fe:	e7af      	b.n	40a160 <two_way_long_needle+0x150>
  40a200:	4649      	mov	r1, r9
  40a202:	e78b      	b.n	40a11c <two_way_long_needle+0x10c>
  40a204:	eb05 0008 	add.w	r0, r5, r8
  40a208:	e796      	b.n	40a138 <two_way_long_needle+0x128>
  40a20a:	bf00      	nop

0040a20c <strstr>:
  40a20c:	7802      	ldrb	r2, [r0, #0]
  40a20e:	2a00      	cmp	r2, #0
  40a210:	f000 8101 	beq.w	40a416 <strstr+0x20a>
  40a214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a218:	f891 8000 	ldrb.w	r8, [r1]
  40a21c:	b085      	sub	sp, #20
  40a21e:	4644      	mov	r4, r8
  40a220:	f1b8 0f00 	cmp.w	r8, #0
  40a224:	d016      	beq.n	40a254 <strstr+0x48>
  40a226:	4686      	mov	lr, r0
  40a228:	f101 0c01 	add.w	ip, r1, #1
  40a22c:	2701      	movs	r7, #1
  40a22e:	e003      	b.n	40a238 <strstr+0x2c>
  40a230:	f813 4b01 	ldrb.w	r4, [r3], #1
  40a234:	b16c      	cbz	r4, 40a252 <strstr+0x46>
  40a236:	469c      	mov	ip, r3
  40a238:	42a2      	cmp	r2, r4
  40a23a:	bf14      	ite	ne
  40a23c:	2700      	movne	r7, #0
  40a23e:	f007 0701 	andeq.w	r7, r7, #1
  40a242:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  40a246:	4663      	mov	r3, ip
  40a248:	2a00      	cmp	r2, #0
  40a24a:	d1f1      	bne.n	40a230 <strstr+0x24>
  40a24c:	f89c 3000 	ldrb.w	r3, [ip]
  40a250:	b9fb      	cbnz	r3, 40a292 <strstr+0x86>
  40a252:	b117      	cbz	r7, 40a25a <strstr+0x4e>
  40a254:	b005      	add	sp, #20
  40a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a25a:	460e      	mov	r6, r1
  40a25c:	4605      	mov	r5, r0
  40a25e:	4641      	mov	r1, r8
  40a260:	3001      	adds	r0, #1
  40a262:	ebac 0406 	sub.w	r4, ip, r6
  40a266:	f005 f8b1 	bl	40f3cc <strchr>
  40a26a:	4607      	mov	r7, r0
  40a26c:	b188      	cbz	r0, 40a292 <strstr+0x86>
  40a26e:	2c01      	cmp	r4, #1
  40a270:	d0f0      	beq.n	40a254 <strstr+0x48>
  40a272:	1928      	adds	r0, r5, r4
  40a274:	4287      	cmp	r7, r0
  40a276:	bf94      	ite	ls
  40a278:	1bc1      	subls	r1, r0, r7
  40a27a:	2101      	movhi	r1, #1
  40a27c:	2c1f      	cmp	r4, #31
  40a27e:	468b      	mov	fp, r1
  40a280:	d90b      	bls.n	40a29a <strstr+0x8e>
  40a282:	4623      	mov	r3, r4
  40a284:	4632      	mov	r2, r6
  40a286:	4638      	mov	r0, r7
  40a288:	f7ff fec2 	bl	40a010 <two_way_long_needle>
  40a28c:	b005      	add	sp, #20
  40a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a292:	2000      	movs	r0, #0
  40a294:	b005      	add	sp, #20
  40a296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a29a:	aa03      	add	r2, sp, #12
  40a29c:	4621      	mov	r1, r4
  40a29e:	4630      	mov	r0, r6
  40a2a0:	f7ff fe5c 	bl	409f5c <critical_factorization>
  40a2a4:	9903      	ldr	r1, [sp, #12]
  40a2a6:	4680      	mov	r8, r0
  40a2a8:	4602      	mov	r2, r0
  40a2aa:	4431      	add	r1, r6
  40a2ac:	4630      	mov	r0, r6
  40a2ae:	f004 faf7 	bl	40e8a0 <memcmp>
  40a2b2:	2800      	cmp	r0, #0
  40a2b4:	d157      	bne.n	40a366 <strstr+0x15a>
  40a2b6:	f108 33ff 	add.w	r3, r8, #4294967295
  40a2ba:	9300      	str	r3, [sp, #0]
  40a2bc:	18f3      	adds	r3, r6, r3
  40a2be:	4681      	mov	r9, r0
  40a2c0:	4605      	mov	r5, r0
  40a2c2:	9301      	str	r3, [sp, #4]
  40a2c4:	4658      	mov	r0, fp
  40a2c6:	46b2      	mov	sl, r6
  40a2c8:	1966      	adds	r6, r4, r5
  40a2ca:	1a32      	subs	r2, r6, r0
  40a2cc:	2100      	movs	r1, #0
  40a2ce:	4438      	add	r0, r7
  40a2d0:	f004 fa96 	bl	40e800 <memchr>
  40a2d4:	2800      	cmp	r0, #0
  40a2d6:	d1dc      	bne.n	40a292 <strstr+0x86>
  40a2d8:	2e00      	cmp	r6, #0
  40a2da:	d0da      	beq.n	40a292 <strstr+0x86>
  40a2dc:	45c8      	cmp	r8, r9
  40a2de:	4643      	mov	r3, r8
  40a2e0:	bf38      	it	cc
  40a2e2:	464b      	movcc	r3, r9
  40a2e4:	429c      	cmp	r4, r3
  40a2e6:	d912      	bls.n	40a30e <strstr+0x102>
  40a2e8:	195a      	adds	r2, r3, r5
  40a2ea:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40a2ee:	5cb8      	ldrb	r0, [r7, r2]
  40a2f0:	4281      	cmp	r1, r0
  40a2f2:	443a      	add	r2, r7
  40a2f4:	eb0a 0e03 	add.w	lr, sl, r3
  40a2f8:	d006      	beq.n	40a308 <strstr+0xfc>
  40a2fa:	e02c      	b.n	40a356 <strstr+0x14a>
  40a2fc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  40a300:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40a304:	4288      	cmp	r0, r1
  40a306:	d126      	bne.n	40a356 <strstr+0x14a>
  40a308:	3301      	adds	r3, #1
  40a30a:	429c      	cmp	r4, r3
  40a30c:	d1f6      	bne.n	40a2fc <strstr+0xf0>
  40a30e:	45c8      	cmp	r8, r9
  40a310:	9900      	ldr	r1, [sp, #0]
  40a312:	f240 8083 	bls.w	40a41c <strstr+0x210>
  40a316:	9b00      	ldr	r3, [sp, #0]
  40a318:	18ea      	adds	r2, r5, r3
  40a31a:	9b01      	ldr	r3, [sp, #4]
  40a31c:	5cb8      	ldrb	r0, [r7, r2]
  40a31e:	781b      	ldrb	r3, [r3, #0]
  40a320:	4298      	cmp	r0, r3
  40a322:	443a      	add	r2, r7
  40a324:	d17a      	bne.n	40a41c <strstr+0x210>
  40a326:	9801      	ldr	r0, [sp, #4]
  40a328:	f109 3bff 	add.w	fp, r9, #4294967295
  40a32c:	e006      	b.n	40a33c <strstr+0x130>
  40a32e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40a332:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40a336:	45f4      	cmp	ip, lr
  40a338:	d103      	bne.n	40a342 <strstr+0x136>
  40a33a:	4619      	mov	r1, r3
  40a33c:	1e4b      	subs	r3, r1, #1
  40a33e:	455b      	cmp	r3, fp
  40a340:	d1f5      	bne.n	40a32e <strstr+0x122>
  40a342:	f109 0901 	add.w	r9, r9, #1
  40a346:	4589      	cmp	r9, r1
  40a348:	d857      	bhi.n	40a3fa <strstr+0x1ee>
  40a34a:	9b03      	ldr	r3, [sp, #12]
  40a34c:	4630      	mov	r0, r6
  40a34e:	441d      	add	r5, r3
  40a350:	eba4 0903 	sub.w	r9, r4, r3
  40a354:	e7b8      	b.n	40a2c8 <strstr+0xbc>
  40a356:	f1c8 0201 	rsb	r2, r8, #1
  40a35a:	4415      	add	r5, r2
  40a35c:	441d      	add	r5, r3
  40a35e:	f04f 0900 	mov.w	r9, #0
  40a362:	4630      	mov	r0, r6
  40a364:	e7b0      	b.n	40a2c8 <strstr+0xbc>
  40a366:	eba4 0308 	sub.w	r3, r4, r8
  40a36a:	4543      	cmp	r3, r8
  40a36c:	bf38      	it	cc
  40a36e:	4643      	movcc	r3, r8
  40a370:	3301      	adds	r3, #1
  40a372:	f108 39ff 	add.w	r9, r8, #4294967295
  40a376:	9303      	str	r3, [sp, #12]
  40a378:	eb06 0309 	add.w	r3, r6, r9
  40a37c:	4658      	mov	r0, fp
  40a37e:	2500      	movs	r5, #0
  40a380:	46bb      	mov	fp, r7
  40a382:	469a      	mov	sl, r3
  40a384:	1967      	adds	r7, r4, r5
  40a386:	1a3a      	subs	r2, r7, r0
  40a388:	2100      	movs	r1, #0
  40a38a:	4458      	add	r0, fp
  40a38c:	f004 fa38 	bl	40e800 <memchr>
  40a390:	2800      	cmp	r0, #0
  40a392:	f47f af7e 	bne.w	40a292 <strstr+0x86>
  40a396:	2f00      	cmp	r7, #0
  40a398:	f43f af7b 	beq.w	40a292 <strstr+0x86>
  40a39c:	4544      	cmp	r4, r8
  40a39e:	d915      	bls.n	40a3cc <strstr+0x1c0>
  40a3a0:	eb08 0205 	add.w	r2, r8, r5
  40a3a4:	f816 3008 	ldrb.w	r3, [r6, r8]
  40a3a8:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40a3ac:	4298      	cmp	r0, r3
  40a3ae:	445a      	add	r2, fp
  40a3b0:	eb06 0108 	add.w	r1, r6, r8
  40a3b4:	4643      	mov	r3, r8
  40a3b6:	d006      	beq.n	40a3c6 <strstr+0x1ba>
  40a3b8:	e023      	b.n	40a402 <strstr+0x1f6>
  40a3ba:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40a3be:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40a3c2:	4586      	cmp	lr, r0
  40a3c4:	d11d      	bne.n	40a402 <strstr+0x1f6>
  40a3c6:	3301      	adds	r3, #1
  40a3c8:	429c      	cmp	r4, r3
  40a3ca:	d1f6      	bne.n	40a3ba <strstr+0x1ae>
  40a3cc:	f1b9 3fff 	cmp.w	r9, #4294967295
  40a3d0:	d012      	beq.n	40a3f8 <strstr+0x1ec>
  40a3d2:	eb05 0209 	add.w	r2, r5, r9
  40a3d6:	f89a 3000 	ldrb.w	r3, [sl]
  40a3da:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40a3de:	4299      	cmp	r1, r3
  40a3e0:	445a      	add	r2, fp
  40a3e2:	d114      	bne.n	40a40e <strstr+0x202>
  40a3e4:	4653      	mov	r3, sl
  40a3e6:	e005      	b.n	40a3f4 <strstr+0x1e8>
  40a3e8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40a3ec:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40a3f0:	4288      	cmp	r0, r1
  40a3f2:	d10c      	bne.n	40a40e <strstr+0x202>
  40a3f4:	42b3      	cmp	r3, r6
  40a3f6:	d1f7      	bne.n	40a3e8 <strstr+0x1dc>
  40a3f8:	465f      	mov	r7, fp
  40a3fa:	1978      	adds	r0, r7, r5
  40a3fc:	b005      	add	sp, #20
  40a3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a402:	f1c8 0201 	rsb	r2, r8, #1
  40a406:	4415      	add	r5, r2
  40a408:	441d      	add	r5, r3
  40a40a:	4638      	mov	r0, r7
  40a40c:	e7ba      	b.n	40a384 <strstr+0x178>
  40a40e:	9b03      	ldr	r3, [sp, #12]
  40a410:	4638      	mov	r0, r7
  40a412:	441d      	add	r5, r3
  40a414:	e7b6      	b.n	40a384 <strstr+0x178>
  40a416:	780b      	ldrb	r3, [r1, #0]
  40a418:	b913      	cbnz	r3, 40a420 <strstr+0x214>
  40a41a:	4770      	bx	lr
  40a41c:	4641      	mov	r1, r8
  40a41e:	e790      	b.n	40a342 <strstr+0x136>
  40a420:	2000      	movs	r0, #0
  40a422:	4770      	bx	lr

0040a424 <_strtol_l.isra.0>:
  40a424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a428:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40a42c:	460f      	mov	r7, r1
  40a42e:	4680      	mov	r8, r0
  40a430:	4616      	mov	r6, r2
  40a432:	461d      	mov	r5, r3
  40a434:	468a      	mov	sl, r1
  40a436:	e000      	b.n	40a43a <_strtol_l.isra.0+0x16>
  40a438:	46a2      	mov	sl, r4
  40a43a:	4654      	mov	r4, sl
  40a43c:	4648      	mov	r0, r9
  40a43e:	f814 bb01 	ldrb.w	fp, [r4], #1
  40a442:	f003 fe77 	bl	40e134 <__locale_ctype_ptr_l>
  40a446:	4458      	add	r0, fp
  40a448:	7842      	ldrb	r2, [r0, #1]
  40a44a:	f012 0208 	ands.w	r2, r2, #8
  40a44e:	d1f3      	bne.n	40a438 <_strtol_l.isra.0+0x14>
  40a450:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  40a454:	d04f      	beq.n	40a4f6 <_strtol_l.isra.0+0xd2>
  40a456:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  40a45a:	bf04      	itt	eq
  40a45c:	f894 b000 	ldrbeq.w	fp, [r4]
  40a460:	f10a 0402 	addeq.w	r4, sl, #2
  40a464:	b11d      	cbz	r5, 40a46e <_strtol_l.isra.0+0x4a>
  40a466:	2d10      	cmp	r5, #16
  40a468:	d056      	beq.n	40a518 <_strtol_l.isra.0+0xf4>
  40a46a:	46ac      	mov	ip, r5
  40a46c:	e004      	b.n	40a478 <_strtol_l.isra.0+0x54>
  40a46e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  40a472:	d060      	beq.n	40a536 <_strtol_l.isra.0+0x112>
  40a474:	250a      	movs	r5, #10
  40a476:	46ac      	mov	ip, r5
  40a478:	2a00      	cmp	r2, #0
  40a47a:	bf0c      	ite	eq
  40a47c:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  40a480:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  40a484:	2100      	movs	r1, #0
  40a486:	fbb9 fefc 	udiv	lr, r9, ip
  40a48a:	4608      	mov	r0, r1
  40a48c:	fb0c 9a1e 	mls	sl, ip, lr, r9
  40a490:	e005      	b.n	40a49e <_strtol_l.isra.0+0x7a>
  40a492:	d029      	beq.n	40a4e8 <_strtol_l.isra.0+0xc4>
  40a494:	fb0c 3000 	mla	r0, ip, r0, r3
  40a498:	2101      	movs	r1, #1
  40a49a:	f814 bb01 	ldrb.w	fp, [r4], #1
  40a49e:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  40a4a2:	2b09      	cmp	r3, #9
  40a4a4:	d905      	bls.n	40a4b2 <_strtol_l.isra.0+0x8e>
  40a4a6:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  40a4aa:	2b19      	cmp	r3, #25
  40a4ac:	d80b      	bhi.n	40a4c6 <_strtol_l.isra.0+0xa2>
  40a4ae:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  40a4b2:	429d      	cmp	r5, r3
  40a4b4:	dd0f      	ble.n	40a4d6 <_strtol_l.isra.0+0xb2>
  40a4b6:	f1b1 3fff 	cmp.w	r1, #4294967295
  40a4ba:	d0ee      	beq.n	40a49a <_strtol_l.isra.0+0x76>
  40a4bc:	4586      	cmp	lr, r0
  40a4be:	d2e8      	bcs.n	40a492 <_strtol_l.isra.0+0x6e>
  40a4c0:	f04f 31ff 	mov.w	r1, #4294967295
  40a4c4:	e7e9      	b.n	40a49a <_strtol_l.isra.0+0x76>
  40a4c6:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  40a4ca:	2b19      	cmp	r3, #25
  40a4cc:	d803      	bhi.n	40a4d6 <_strtol_l.isra.0+0xb2>
  40a4ce:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  40a4d2:	429d      	cmp	r5, r3
  40a4d4:	dcef      	bgt.n	40a4b6 <_strtol_l.isra.0+0x92>
  40a4d6:	1c4b      	adds	r3, r1, #1
  40a4d8:	d013      	beq.n	40a502 <_strtol_l.isra.0+0xde>
  40a4da:	b102      	cbz	r2, 40a4de <_strtol_l.isra.0+0xba>
  40a4dc:	4240      	negs	r0, r0
  40a4de:	b146      	cbz	r6, 40a4f2 <_strtol_l.isra.0+0xce>
  40a4e0:	b9c1      	cbnz	r1, 40a514 <_strtol_l.isra.0+0xf0>
  40a4e2:	6037      	str	r7, [r6, #0]
  40a4e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a4e8:	459a      	cmp	sl, r3
  40a4ea:	dad3      	bge.n	40a494 <_strtol_l.isra.0+0x70>
  40a4ec:	f04f 31ff 	mov.w	r1, #4294967295
  40a4f0:	e7d3      	b.n	40a49a <_strtol_l.isra.0+0x76>
  40a4f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a4f6:	f894 b000 	ldrb.w	fp, [r4]
  40a4fa:	2201      	movs	r2, #1
  40a4fc:	f10a 0402 	add.w	r4, sl, #2
  40a500:	e7b0      	b.n	40a464 <_strtol_l.isra.0+0x40>
  40a502:	2322      	movs	r3, #34	; 0x22
  40a504:	f8c8 3000 	str.w	r3, [r8]
  40a508:	b1ee      	cbz	r6, 40a546 <_strtol_l.isra.0+0x122>
  40a50a:	1e67      	subs	r7, r4, #1
  40a50c:	4648      	mov	r0, r9
  40a50e:	6037      	str	r7, [r6, #0]
  40a510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a514:	4681      	mov	r9, r0
  40a516:	e7f8      	b.n	40a50a <_strtol_l.isra.0+0xe6>
  40a518:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  40a51c:	d1a5      	bne.n	40a46a <_strtol_l.isra.0+0x46>
  40a51e:	7823      	ldrb	r3, [r4, #0]
  40a520:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40a524:	2b58      	cmp	r3, #88	; 0x58
  40a526:	d1a0      	bne.n	40a46a <_strtol_l.isra.0+0x46>
  40a528:	f04f 0c10 	mov.w	ip, #16
  40a52c:	f894 b001 	ldrb.w	fp, [r4, #1]
  40a530:	4665      	mov	r5, ip
  40a532:	3402      	adds	r4, #2
  40a534:	e7a0      	b.n	40a478 <_strtol_l.isra.0+0x54>
  40a536:	7823      	ldrb	r3, [r4, #0]
  40a538:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40a53c:	2b58      	cmp	r3, #88	; 0x58
  40a53e:	d0f3      	beq.n	40a528 <_strtol_l.isra.0+0x104>
  40a540:	2508      	movs	r5, #8
  40a542:	46ac      	mov	ip, r5
  40a544:	e798      	b.n	40a478 <_strtol_l.isra.0+0x54>
  40a546:	4648      	mov	r0, r9
  40a548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a54c <strtol>:
  40a54c:	b530      	push	{r4, r5, lr}
  40a54e:	4c08      	ldr	r4, [pc, #32]	; (40a570 <strtol+0x24>)
  40a550:	4b08      	ldr	r3, [pc, #32]	; (40a574 <strtol+0x28>)
  40a552:	6825      	ldr	r5, [r4, #0]
  40a554:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  40a556:	b083      	sub	sp, #12
  40a558:	2c00      	cmp	r4, #0
  40a55a:	bf08      	it	eq
  40a55c:	461c      	moveq	r4, r3
  40a55e:	9400      	str	r4, [sp, #0]
  40a560:	4613      	mov	r3, r2
  40a562:	460a      	mov	r2, r1
  40a564:	4601      	mov	r1, r0
  40a566:	4628      	mov	r0, r5
  40a568:	f7ff ff5c 	bl	40a424 <_strtol_l.isra.0>
  40a56c:	b003      	add	sp, #12
  40a56e:	bd30      	pop	{r4, r5, pc}
  40a570:	20400078 	.word	0x20400078
  40a574:	204004ac 	.word	0x204004ac

0040a578 <_svfprintf_r>:
  40a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a57c:	b0c3      	sub	sp, #268	; 0x10c
  40a57e:	460c      	mov	r4, r1
  40a580:	910b      	str	r1, [sp, #44]	; 0x2c
  40a582:	4692      	mov	sl, r2
  40a584:	930f      	str	r3, [sp, #60]	; 0x3c
  40a586:	900c      	str	r0, [sp, #48]	; 0x30
  40a588:	f003 fdd8 	bl	40e13c <_localeconv_r>
  40a58c:	6803      	ldr	r3, [r0, #0]
  40a58e:	931a      	str	r3, [sp, #104]	; 0x68
  40a590:	4618      	mov	r0, r3
  40a592:	f7ff fc75 	bl	409e80 <strlen>
  40a596:	89a3      	ldrh	r3, [r4, #12]
  40a598:	9019      	str	r0, [sp, #100]	; 0x64
  40a59a:	0619      	lsls	r1, r3, #24
  40a59c:	d503      	bpl.n	40a5a6 <_svfprintf_r+0x2e>
  40a59e:	6923      	ldr	r3, [r4, #16]
  40a5a0:	2b00      	cmp	r3, #0
  40a5a2:	f001 8003 	beq.w	40b5ac <_svfprintf_r+0x1034>
  40a5a6:	2300      	movs	r3, #0
  40a5a8:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40a5ac:	9313      	str	r3, [sp, #76]	; 0x4c
  40a5ae:	9315      	str	r3, [sp, #84]	; 0x54
  40a5b0:	9314      	str	r3, [sp, #80]	; 0x50
  40a5b2:	9327      	str	r3, [sp, #156]	; 0x9c
  40a5b4:	9326      	str	r3, [sp, #152]	; 0x98
  40a5b6:	9318      	str	r3, [sp, #96]	; 0x60
  40a5b8:	931b      	str	r3, [sp, #108]	; 0x6c
  40a5ba:	9309      	str	r3, [sp, #36]	; 0x24
  40a5bc:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40a5c0:	46c8      	mov	r8, r9
  40a5c2:	9316      	str	r3, [sp, #88]	; 0x58
  40a5c4:	9317      	str	r3, [sp, #92]	; 0x5c
  40a5c6:	f89a 3000 	ldrb.w	r3, [sl]
  40a5ca:	4654      	mov	r4, sl
  40a5cc:	b1e3      	cbz	r3, 40a608 <_svfprintf_r+0x90>
  40a5ce:	2b25      	cmp	r3, #37	; 0x25
  40a5d0:	d102      	bne.n	40a5d8 <_svfprintf_r+0x60>
  40a5d2:	e019      	b.n	40a608 <_svfprintf_r+0x90>
  40a5d4:	2b25      	cmp	r3, #37	; 0x25
  40a5d6:	d003      	beq.n	40a5e0 <_svfprintf_r+0x68>
  40a5d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40a5dc:	2b00      	cmp	r3, #0
  40a5de:	d1f9      	bne.n	40a5d4 <_svfprintf_r+0x5c>
  40a5e0:	eba4 050a 	sub.w	r5, r4, sl
  40a5e4:	b185      	cbz	r5, 40a608 <_svfprintf_r+0x90>
  40a5e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a5e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40a5ea:	f8c8 a000 	str.w	sl, [r8]
  40a5ee:	3301      	adds	r3, #1
  40a5f0:	442a      	add	r2, r5
  40a5f2:	2b07      	cmp	r3, #7
  40a5f4:	f8c8 5004 	str.w	r5, [r8, #4]
  40a5f8:	9227      	str	r2, [sp, #156]	; 0x9c
  40a5fa:	9326      	str	r3, [sp, #152]	; 0x98
  40a5fc:	dc7f      	bgt.n	40a6fe <_svfprintf_r+0x186>
  40a5fe:	f108 0808 	add.w	r8, r8, #8
  40a602:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a604:	442b      	add	r3, r5
  40a606:	9309      	str	r3, [sp, #36]	; 0x24
  40a608:	7823      	ldrb	r3, [r4, #0]
  40a60a:	2b00      	cmp	r3, #0
  40a60c:	d07f      	beq.n	40a70e <_svfprintf_r+0x196>
  40a60e:	2300      	movs	r3, #0
  40a610:	461a      	mov	r2, r3
  40a612:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40a616:	4619      	mov	r1, r3
  40a618:	930d      	str	r3, [sp, #52]	; 0x34
  40a61a:	469b      	mov	fp, r3
  40a61c:	f04f 30ff 	mov.w	r0, #4294967295
  40a620:	7863      	ldrb	r3, [r4, #1]
  40a622:	900a      	str	r0, [sp, #40]	; 0x28
  40a624:	f104 0a01 	add.w	sl, r4, #1
  40a628:	f10a 0a01 	add.w	sl, sl, #1
  40a62c:	f1a3 0020 	sub.w	r0, r3, #32
  40a630:	2858      	cmp	r0, #88	; 0x58
  40a632:	f200 83c1 	bhi.w	40adb8 <_svfprintf_r+0x840>
  40a636:	e8df f010 	tbh	[pc, r0, lsl #1]
  40a63a:	0238      	.short	0x0238
  40a63c:	03bf03bf 	.word	0x03bf03bf
  40a640:	03bf0240 	.word	0x03bf0240
  40a644:	03bf03bf 	.word	0x03bf03bf
  40a648:	03bf03bf 	.word	0x03bf03bf
  40a64c:	024503bf 	.word	0x024503bf
  40a650:	03bf0203 	.word	0x03bf0203
  40a654:	026b005d 	.word	0x026b005d
  40a658:	028603bf 	.word	0x028603bf
  40a65c:	039d039d 	.word	0x039d039d
  40a660:	039d039d 	.word	0x039d039d
  40a664:	039d039d 	.word	0x039d039d
  40a668:	039d039d 	.word	0x039d039d
  40a66c:	03bf039d 	.word	0x03bf039d
  40a670:	03bf03bf 	.word	0x03bf03bf
  40a674:	03bf03bf 	.word	0x03bf03bf
  40a678:	03bf03bf 	.word	0x03bf03bf
  40a67c:	03bf03bf 	.word	0x03bf03bf
  40a680:	033703bf 	.word	0x033703bf
  40a684:	03bf0357 	.word	0x03bf0357
  40a688:	03bf0357 	.word	0x03bf0357
  40a68c:	03bf03bf 	.word	0x03bf03bf
  40a690:	039803bf 	.word	0x039803bf
  40a694:	03bf03bf 	.word	0x03bf03bf
  40a698:	03bf03ad 	.word	0x03bf03ad
  40a69c:	03bf03bf 	.word	0x03bf03bf
  40a6a0:	03bf03bf 	.word	0x03bf03bf
  40a6a4:	03bf0259 	.word	0x03bf0259
  40a6a8:	031e03bf 	.word	0x031e03bf
  40a6ac:	03bf03bf 	.word	0x03bf03bf
  40a6b0:	03bf03bf 	.word	0x03bf03bf
  40a6b4:	03bf03bf 	.word	0x03bf03bf
  40a6b8:	03bf03bf 	.word	0x03bf03bf
  40a6bc:	03bf03bf 	.word	0x03bf03bf
  40a6c0:	02db02c6 	.word	0x02db02c6
  40a6c4:	03570357 	.word	0x03570357
  40a6c8:	028b0357 	.word	0x028b0357
  40a6cc:	03bf02db 	.word	0x03bf02db
  40a6d0:	029003bf 	.word	0x029003bf
  40a6d4:	029d03bf 	.word	0x029d03bf
  40a6d8:	02b401cc 	.word	0x02b401cc
  40a6dc:	03bf0208 	.word	0x03bf0208
  40a6e0:	03bf01e1 	.word	0x03bf01e1
  40a6e4:	03bf007e 	.word	0x03bf007e
  40a6e8:	020d03bf 	.word	0x020d03bf
  40a6ec:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a6ee:	930f      	str	r3, [sp, #60]	; 0x3c
  40a6f0:	4240      	negs	r0, r0
  40a6f2:	900d      	str	r0, [sp, #52]	; 0x34
  40a6f4:	f04b 0b04 	orr.w	fp, fp, #4
  40a6f8:	f89a 3000 	ldrb.w	r3, [sl]
  40a6fc:	e794      	b.n	40a628 <_svfprintf_r+0xb0>
  40a6fe:	aa25      	add	r2, sp, #148	; 0x94
  40a700:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a702:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a704:	f004 fed6 	bl	40f4b4 <__ssprint_r>
  40a708:	b940      	cbnz	r0, 40a71c <_svfprintf_r+0x1a4>
  40a70a:	46c8      	mov	r8, r9
  40a70c:	e779      	b.n	40a602 <_svfprintf_r+0x8a>
  40a70e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40a710:	b123      	cbz	r3, 40a71c <_svfprintf_r+0x1a4>
  40a712:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a714:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a716:	aa25      	add	r2, sp, #148	; 0x94
  40a718:	f004 fecc 	bl	40f4b4 <__ssprint_r>
  40a71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a71e:	899b      	ldrh	r3, [r3, #12]
  40a720:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a724:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a726:	bf18      	it	ne
  40a728:	f04f 33ff 	movne.w	r3, #4294967295
  40a72c:	9309      	str	r3, [sp, #36]	; 0x24
  40a72e:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a730:	b043      	add	sp, #268	; 0x10c
  40a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a736:	f01b 0f20 	tst.w	fp, #32
  40a73a:	9311      	str	r3, [sp, #68]	; 0x44
  40a73c:	f040 81dd 	bne.w	40aafa <_svfprintf_r+0x582>
  40a740:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a742:	f01b 0f10 	tst.w	fp, #16
  40a746:	4613      	mov	r3, r2
  40a748:	f040 856e 	bne.w	40b228 <_svfprintf_r+0xcb0>
  40a74c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40a750:	f000 856a 	beq.w	40b228 <_svfprintf_r+0xcb0>
  40a754:	8814      	ldrh	r4, [r2, #0]
  40a756:	3204      	adds	r2, #4
  40a758:	2500      	movs	r5, #0
  40a75a:	2301      	movs	r3, #1
  40a75c:	920f      	str	r2, [sp, #60]	; 0x3c
  40a75e:	2700      	movs	r7, #0
  40a760:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40a764:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a766:	1c4a      	adds	r2, r1, #1
  40a768:	f000 8265 	beq.w	40ac36 <_svfprintf_r+0x6be>
  40a76c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40a770:	9207      	str	r2, [sp, #28]
  40a772:	ea54 0205 	orrs.w	r2, r4, r5
  40a776:	f040 8264 	bne.w	40ac42 <_svfprintf_r+0x6ca>
  40a77a:	2900      	cmp	r1, #0
  40a77c:	f040 843c 	bne.w	40aff8 <_svfprintf_r+0xa80>
  40a780:	2b00      	cmp	r3, #0
  40a782:	f040 84d7 	bne.w	40b134 <_svfprintf_r+0xbbc>
  40a786:	f01b 0301 	ands.w	r3, fp, #1
  40a78a:	930e      	str	r3, [sp, #56]	; 0x38
  40a78c:	f000 8604 	beq.w	40b398 <_svfprintf_r+0xe20>
  40a790:	ae42      	add	r6, sp, #264	; 0x108
  40a792:	2330      	movs	r3, #48	; 0x30
  40a794:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40a798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a79a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a79c:	4293      	cmp	r3, r2
  40a79e:	bfb8      	it	lt
  40a7a0:	4613      	movlt	r3, r2
  40a7a2:	9308      	str	r3, [sp, #32]
  40a7a4:	2300      	movs	r3, #0
  40a7a6:	9312      	str	r3, [sp, #72]	; 0x48
  40a7a8:	b117      	cbz	r7, 40a7b0 <_svfprintf_r+0x238>
  40a7aa:	9b08      	ldr	r3, [sp, #32]
  40a7ac:	3301      	adds	r3, #1
  40a7ae:	9308      	str	r3, [sp, #32]
  40a7b0:	9b07      	ldr	r3, [sp, #28]
  40a7b2:	f013 0302 	ands.w	r3, r3, #2
  40a7b6:	9310      	str	r3, [sp, #64]	; 0x40
  40a7b8:	d002      	beq.n	40a7c0 <_svfprintf_r+0x248>
  40a7ba:	9b08      	ldr	r3, [sp, #32]
  40a7bc:	3302      	adds	r3, #2
  40a7be:	9308      	str	r3, [sp, #32]
  40a7c0:	9b07      	ldr	r3, [sp, #28]
  40a7c2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40a7c6:	f040 830e 	bne.w	40ade6 <_svfprintf_r+0x86e>
  40a7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a7cc:	9a08      	ldr	r2, [sp, #32]
  40a7ce:	eba3 0b02 	sub.w	fp, r3, r2
  40a7d2:	f1bb 0f00 	cmp.w	fp, #0
  40a7d6:	f340 8306 	ble.w	40ade6 <_svfprintf_r+0x86e>
  40a7da:	f1bb 0f10 	cmp.w	fp, #16
  40a7de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a7e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40a7e2:	dd29      	ble.n	40a838 <_svfprintf_r+0x2c0>
  40a7e4:	4643      	mov	r3, r8
  40a7e6:	4621      	mov	r1, r4
  40a7e8:	46a8      	mov	r8, r5
  40a7ea:	2710      	movs	r7, #16
  40a7ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a7ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a7f0:	e006      	b.n	40a800 <_svfprintf_r+0x288>
  40a7f2:	f1ab 0b10 	sub.w	fp, fp, #16
  40a7f6:	f1bb 0f10 	cmp.w	fp, #16
  40a7fa:	f103 0308 	add.w	r3, r3, #8
  40a7fe:	dd18      	ble.n	40a832 <_svfprintf_r+0x2ba>
  40a800:	3201      	adds	r2, #1
  40a802:	48b7      	ldr	r0, [pc, #732]	; (40aae0 <_svfprintf_r+0x568>)
  40a804:	9226      	str	r2, [sp, #152]	; 0x98
  40a806:	3110      	adds	r1, #16
  40a808:	2a07      	cmp	r2, #7
  40a80a:	9127      	str	r1, [sp, #156]	; 0x9c
  40a80c:	e883 0081 	stmia.w	r3, {r0, r7}
  40a810:	ddef      	ble.n	40a7f2 <_svfprintf_r+0x27a>
  40a812:	aa25      	add	r2, sp, #148	; 0x94
  40a814:	4629      	mov	r1, r5
  40a816:	4620      	mov	r0, r4
  40a818:	f004 fe4c 	bl	40f4b4 <__ssprint_r>
  40a81c:	2800      	cmp	r0, #0
  40a81e:	f47f af7d 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40a822:	f1ab 0b10 	sub.w	fp, fp, #16
  40a826:	f1bb 0f10 	cmp.w	fp, #16
  40a82a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40a82c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40a82e:	464b      	mov	r3, r9
  40a830:	dce6      	bgt.n	40a800 <_svfprintf_r+0x288>
  40a832:	4645      	mov	r5, r8
  40a834:	460c      	mov	r4, r1
  40a836:	4698      	mov	r8, r3
  40a838:	3201      	adds	r2, #1
  40a83a:	4ba9      	ldr	r3, [pc, #676]	; (40aae0 <_svfprintf_r+0x568>)
  40a83c:	9226      	str	r2, [sp, #152]	; 0x98
  40a83e:	445c      	add	r4, fp
  40a840:	2a07      	cmp	r2, #7
  40a842:	9427      	str	r4, [sp, #156]	; 0x9c
  40a844:	e888 0808 	stmia.w	r8, {r3, fp}
  40a848:	f300 8498 	bgt.w	40b17c <_svfprintf_r+0xc04>
  40a84c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40a850:	f108 0808 	add.w	r8, r8, #8
  40a854:	b177      	cbz	r7, 40a874 <_svfprintf_r+0x2fc>
  40a856:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a858:	3301      	adds	r3, #1
  40a85a:	3401      	adds	r4, #1
  40a85c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40a860:	2201      	movs	r2, #1
  40a862:	2b07      	cmp	r3, #7
  40a864:	9427      	str	r4, [sp, #156]	; 0x9c
  40a866:	9326      	str	r3, [sp, #152]	; 0x98
  40a868:	e888 0006 	stmia.w	r8, {r1, r2}
  40a86c:	f300 83db 	bgt.w	40b026 <_svfprintf_r+0xaae>
  40a870:	f108 0808 	add.w	r8, r8, #8
  40a874:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a876:	b16b      	cbz	r3, 40a894 <_svfprintf_r+0x31c>
  40a878:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a87a:	3301      	adds	r3, #1
  40a87c:	3402      	adds	r4, #2
  40a87e:	a91e      	add	r1, sp, #120	; 0x78
  40a880:	2202      	movs	r2, #2
  40a882:	2b07      	cmp	r3, #7
  40a884:	9427      	str	r4, [sp, #156]	; 0x9c
  40a886:	9326      	str	r3, [sp, #152]	; 0x98
  40a888:	e888 0006 	stmia.w	r8, {r1, r2}
  40a88c:	f300 83d6 	bgt.w	40b03c <_svfprintf_r+0xac4>
  40a890:	f108 0808 	add.w	r8, r8, #8
  40a894:	2d80      	cmp	r5, #128	; 0x80
  40a896:	f000 8315 	beq.w	40aec4 <_svfprintf_r+0x94c>
  40a89a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a89c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a89e:	1a9f      	subs	r7, r3, r2
  40a8a0:	2f00      	cmp	r7, #0
  40a8a2:	dd36      	ble.n	40a912 <_svfprintf_r+0x39a>
  40a8a4:	2f10      	cmp	r7, #16
  40a8a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a8a8:	4d8e      	ldr	r5, [pc, #568]	; (40aae4 <_svfprintf_r+0x56c>)
  40a8aa:	dd27      	ble.n	40a8fc <_svfprintf_r+0x384>
  40a8ac:	4642      	mov	r2, r8
  40a8ae:	4621      	mov	r1, r4
  40a8b0:	46b0      	mov	r8, r6
  40a8b2:	f04f 0b10 	mov.w	fp, #16
  40a8b6:	462e      	mov	r6, r5
  40a8b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a8ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a8bc:	e004      	b.n	40a8c8 <_svfprintf_r+0x350>
  40a8be:	3f10      	subs	r7, #16
  40a8c0:	2f10      	cmp	r7, #16
  40a8c2:	f102 0208 	add.w	r2, r2, #8
  40a8c6:	dd15      	ble.n	40a8f4 <_svfprintf_r+0x37c>
  40a8c8:	3301      	adds	r3, #1
  40a8ca:	3110      	adds	r1, #16
  40a8cc:	2b07      	cmp	r3, #7
  40a8ce:	9127      	str	r1, [sp, #156]	; 0x9c
  40a8d0:	9326      	str	r3, [sp, #152]	; 0x98
  40a8d2:	e882 0840 	stmia.w	r2, {r6, fp}
  40a8d6:	ddf2      	ble.n	40a8be <_svfprintf_r+0x346>
  40a8d8:	aa25      	add	r2, sp, #148	; 0x94
  40a8da:	4629      	mov	r1, r5
  40a8dc:	4620      	mov	r0, r4
  40a8de:	f004 fde9 	bl	40f4b4 <__ssprint_r>
  40a8e2:	2800      	cmp	r0, #0
  40a8e4:	f47f af1a 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40a8e8:	3f10      	subs	r7, #16
  40a8ea:	2f10      	cmp	r7, #16
  40a8ec:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40a8ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a8f0:	464a      	mov	r2, r9
  40a8f2:	dce9      	bgt.n	40a8c8 <_svfprintf_r+0x350>
  40a8f4:	4635      	mov	r5, r6
  40a8f6:	460c      	mov	r4, r1
  40a8f8:	4646      	mov	r6, r8
  40a8fa:	4690      	mov	r8, r2
  40a8fc:	3301      	adds	r3, #1
  40a8fe:	443c      	add	r4, r7
  40a900:	2b07      	cmp	r3, #7
  40a902:	9427      	str	r4, [sp, #156]	; 0x9c
  40a904:	9326      	str	r3, [sp, #152]	; 0x98
  40a906:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a90a:	f300 8381 	bgt.w	40b010 <_svfprintf_r+0xa98>
  40a90e:	f108 0808 	add.w	r8, r8, #8
  40a912:	9b07      	ldr	r3, [sp, #28]
  40a914:	05df      	lsls	r7, r3, #23
  40a916:	f100 8268 	bmi.w	40adea <_svfprintf_r+0x872>
  40a91a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a91c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a91e:	f8c8 6000 	str.w	r6, [r8]
  40a922:	3301      	adds	r3, #1
  40a924:	440c      	add	r4, r1
  40a926:	2b07      	cmp	r3, #7
  40a928:	9427      	str	r4, [sp, #156]	; 0x9c
  40a92a:	f8c8 1004 	str.w	r1, [r8, #4]
  40a92e:	9326      	str	r3, [sp, #152]	; 0x98
  40a930:	f300 834d 	bgt.w	40afce <_svfprintf_r+0xa56>
  40a934:	f108 0808 	add.w	r8, r8, #8
  40a938:	9b07      	ldr	r3, [sp, #28]
  40a93a:	075b      	lsls	r3, r3, #29
  40a93c:	d53a      	bpl.n	40a9b4 <_svfprintf_r+0x43c>
  40a93e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a940:	9a08      	ldr	r2, [sp, #32]
  40a942:	1a9d      	subs	r5, r3, r2
  40a944:	2d00      	cmp	r5, #0
  40a946:	dd35      	ble.n	40a9b4 <_svfprintf_r+0x43c>
  40a948:	2d10      	cmp	r5, #16
  40a94a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a94c:	dd20      	ble.n	40a990 <_svfprintf_r+0x418>
  40a94e:	2610      	movs	r6, #16
  40a950:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a952:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40a956:	e004      	b.n	40a962 <_svfprintf_r+0x3ea>
  40a958:	3d10      	subs	r5, #16
  40a95a:	2d10      	cmp	r5, #16
  40a95c:	f108 0808 	add.w	r8, r8, #8
  40a960:	dd16      	ble.n	40a990 <_svfprintf_r+0x418>
  40a962:	3301      	adds	r3, #1
  40a964:	4a5e      	ldr	r2, [pc, #376]	; (40aae0 <_svfprintf_r+0x568>)
  40a966:	9326      	str	r3, [sp, #152]	; 0x98
  40a968:	3410      	adds	r4, #16
  40a96a:	2b07      	cmp	r3, #7
  40a96c:	9427      	str	r4, [sp, #156]	; 0x9c
  40a96e:	e888 0044 	stmia.w	r8, {r2, r6}
  40a972:	ddf1      	ble.n	40a958 <_svfprintf_r+0x3e0>
  40a974:	aa25      	add	r2, sp, #148	; 0x94
  40a976:	4659      	mov	r1, fp
  40a978:	4638      	mov	r0, r7
  40a97a:	f004 fd9b 	bl	40f4b4 <__ssprint_r>
  40a97e:	2800      	cmp	r0, #0
  40a980:	f47f aecc 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40a984:	3d10      	subs	r5, #16
  40a986:	2d10      	cmp	r5, #16
  40a988:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a98a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a98c:	46c8      	mov	r8, r9
  40a98e:	dce8      	bgt.n	40a962 <_svfprintf_r+0x3ea>
  40a990:	3301      	adds	r3, #1
  40a992:	4a53      	ldr	r2, [pc, #332]	; (40aae0 <_svfprintf_r+0x568>)
  40a994:	9326      	str	r3, [sp, #152]	; 0x98
  40a996:	442c      	add	r4, r5
  40a998:	2b07      	cmp	r3, #7
  40a99a:	9427      	str	r4, [sp, #156]	; 0x9c
  40a99c:	e888 0024 	stmia.w	r8, {r2, r5}
  40a9a0:	dd08      	ble.n	40a9b4 <_svfprintf_r+0x43c>
  40a9a2:	aa25      	add	r2, sp, #148	; 0x94
  40a9a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a9a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a9a8:	f004 fd84 	bl	40f4b4 <__ssprint_r>
  40a9ac:	2800      	cmp	r0, #0
  40a9ae:	f47f aeb5 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40a9b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a9b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a9b8:	9908      	ldr	r1, [sp, #32]
  40a9ba:	428a      	cmp	r2, r1
  40a9bc:	bfac      	ite	ge
  40a9be:	189b      	addge	r3, r3, r2
  40a9c0:	185b      	addlt	r3, r3, r1
  40a9c2:	9309      	str	r3, [sp, #36]	; 0x24
  40a9c4:	2c00      	cmp	r4, #0
  40a9c6:	f040 830d 	bne.w	40afe4 <_svfprintf_r+0xa6c>
  40a9ca:	2300      	movs	r3, #0
  40a9cc:	9326      	str	r3, [sp, #152]	; 0x98
  40a9ce:	46c8      	mov	r8, r9
  40a9d0:	e5f9      	b.n	40a5c6 <_svfprintf_r+0x4e>
  40a9d2:	9311      	str	r3, [sp, #68]	; 0x44
  40a9d4:	f01b 0320 	ands.w	r3, fp, #32
  40a9d8:	f040 81e3 	bne.w	40ada2 <_svfprintf_r+0x82a>
  40a9dc:	f01b 0210 	ands.w	r2, fp, #16
  40a9e0:	f040 842e 	bne.w	40b240 <_svfprintf_r+0xcc8>
  40a9e4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40a9e8:	f000 842a 	beq.w	40b240 <_svfprintf_r+0xcc8>
  40a9ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40a9ee:	4613      	mov	r3, r2
  40a9f0:	460a      	mov	r2, r1
  40a9f2:	3204      	adds	r2, #4
  40a9f4:	880c      	ldrh	r4, [r1, #0]
  40a9f6:	920f      	str	r2, [sp, #60]	; 0x3c
  40a9f8:	2500      	movs	r5, #0
  40a9fa:	e6b0      	b.n	40a75e <_svfprintf_r+0x1e6>
  40a9fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a9fe:	9311      	str	r3, [sp, #68]	; 0x44
  40aa00:	6816      	ldr	r6, [r2, #0]
  40aa02:	2400      	movs	r4, #0
  40aa04:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40aa08:	1d15      	adds	r5, r2, #4
  40aa0a:	2e00      	cmp	r6, #0
  40aa0c:	f000 86a7 	beq.w	40b75e <_svfprintf_r+0x11e6>
  40aa10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40aa12:	1c53      	adds	r3, r2, #1
  40aa14:	f000 8609 	beq.w	40b62a <_svfprintf_r+0x10b2>
  40aa18:	4621      	mov	r1, r4
  40aa1a:	4630      	mov	r0, r6
  40aa1c:	f003 fef0 	bl	40e800 <memchr>
  40aa20:	2800      	cmp	r0, #0
  40aa22:	f000 86e1 	beq.w	40b7e8 <_svfprintf_r+0x1270>
  40aa26:	1b83      	subs	r3, r0, r6
  40aa28:	930e      	str	r3, [sp, #56]	; 0x38
  40aa2a:	940a      	str	r4, [sp, #40]	; 0x28
  40aa2c:	950f      	str	r5, [sp, #60]	; 0x3c
  40aa2e:	f8cd b01c 	str.w	fp, [sp, #28]
  40aa32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40aa36:	9308      	str	r3, [sp, #32]
  40aa38:	9412      	str	r4, [sp, #72]	; 0x48
  40aa3a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40aa3e:	e6b3      	b.n	40a7a8 <_svfprintf_r+0x230>
  40aa40:	f89a 3000 	ldrb.w	r3, [sl]
  40aa44:	2201      	movs	r2, #1
  40aa46:	212b      	movs	r1, #43	; 0x2b
  40aa48:	e5ee      	b.n	40a628 <_svfprintf_r+0xb0>
  40aa4a:	f04b 0b20 	orr.w	fp, fp, #32
  40aa4e:	f89a 3000 	ldrb.w	r3, [sl]
  40aa52:	e5e9      	b.n	40a628 <_svfprintf_r+0xb0>
  40aa54:	9311      	str	r3, [sp, #68]	; 0x44
  40aa56:	2a00      	cmp	r2, #0
  40aa58:	f040 8795 	bne.w	40b986 <_svfprintf_r+0x140e>
  40aa5c:	4b22      	ldr	r3, [pc, #136]	; (40aae8 <_svfprintf_r+0x570>)
  40aa5e:	9318      	str	r3, [sp, #96]	; 0x60
  40aa60:	f01b 0f20 	tst.w	fp, #32
  40aa64:	f040 8111 	bne.w	40ac8a <_svfprintf_r+0x712>
  40aa68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40aa6a:	f01b 0f10 	tst.w	fp, #16
  40aa6e:	4613      	mov	r3, r2
  40aa70:	f040 83e1 	bne.w	40b236 <_svfprintf_r+0xcbe>
  40aa74:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40aa78:	f000 83dd 	beq.w	40b236 <_svfprintf_r+0xcbe>
  40aa7c:	3304      	adds	r3, #4
  40aa7e:	8814      	ldrh	r4, [r2, #0]
  40aa80:	930f      	str	r3, [sp, #60]	; 0x3c
  40aa82:	2500      	movs	r5, #0
  40aa84:	f01b 0f01 	tst.w	fp, #1
  40aa88:	f000 810c 	beq.w	40aca4 <_svfprintf_r+0x72c>
  40aa8c:	ea54 0305 	orrs.w	r3, r4, r5
  40aa90:	f000 8108 	beq.w	40aca4 <_svfprintf_r+0x72c>
  40aa94:	2330      	movs	r3, #48	; 0x30
  40aa96:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40aa9a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40aa9e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40aaa2:	f04b 0b02 	orr.w	fp, fp, #2
  40aaa6:	2302      	movs	r3, #2
  40aaa8:	e659      	b.n	40a75e <_svfprintf_r+0x1e6>
  40aaaa:	f89a 3000 	ldrb.w	r3, [sl]
  40aaae:	2900      	cmp	r1, #0
  40aab0:	f47f adba 	bne.w	40a628 <_svfprintf_r+0xb0>
  40aab4:	2201      	movs	r2, #1
  40aab6:	2120      	movs	r1, #32
  40aab8:	e5b6      	b.n	40a628 <_svfprintf_r+0xb0>
  40aaba:	f04b 0b01 	orr.w	fp, fp, #1
  40aabe:	f89a 3000 	ldrb.w	r3, [sl]
  40aac2:	e5b1      	b.n	40a628 <_svfprintf_r+0xb0>
  40aac4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40aac6:	6823      	ldr	r3, [r4, #0]
  40aac8:	930d      	str	r3, [sp, #52]	; 0x34
  40aaca:	4618      	mov	r0, r3
  40aacc:	2800      	cmp	r0, #0
  40aace:	4623      	mov	r3, r4
  40aad0:	f103 0304 	add.w	r3, r3, #4
  40aad4:	f6ff ae0a 	blt.w	40a6ec <_svfprintf_r+0x174>
  40aad8:	930f      	str	r3, [sp, #60]	; 0x3c
  40aada:	f89a 3000 	ldrb.w	r3, [sl]
  40aade:	e5a3      	b.n	40a628 <_svfprintf_r+0xb0>
  40aae0:	00411d38 	.word	0x00411d38
  40aae4:	00411d48 	.word	0x00411d48
  40aae8:	00411d18 	.word	0x00411d18
  40aaec:	f04b 0b10 	orr.w	fp, fp, #16
  40aaf0:	f01b 0f20 	tst.w	fp, #32
  40aaf4:	9311      	str	r3, [sp, #68]	; 0x44
  40aaf6:	f43f ae23 	beq.w	40a740 <_svfprintf_r+0x1c8>
  40aafa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40aafc:	3507      	adds	r5, #7
  40aafe:	f025 0307 	bic.w	r3, r5, #7
  40ab02:	f103 0208 	add.w	r2, r3, #8
  40ab06:	e9d3 4500 	ldrd	r4, r5, [r3]
  40ab0a:	920f      	str	r2, [sp, #60]	; 0x3c
  40ab0c:	2301      	movs	r3, #1
  40ab0e:	e626      	b.n	40a75e <_svfprintf_r+0x1e6>
  40ab10:	f89a 3000 	ldrb.w	r3, [sl]
  40ab14:	2b2a      	cmp	r3, #42	; 0x2a
  40ab16:	f10a 0401 	add.w	r4, sl, #1
  40ab1a:	f000 8727 	beq.w	40b96c <_svfprintf_r+0x13f4>
  40ab1e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40ab22:	2809      	cmp	r0, #9
  40ab24:	46a2      	mov	sl, r4
  40ab26:	f200 86ad 	bhi.w	40b884 <_svfprintf_r+0x130c>
  40ab2a:	2300      	movs	r3, #0
  40ab2c:	461c      	mov	r4, r3
  40ab2e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40ab32:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40ab36:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40ab3a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40ab3e:	2809      	cmp	r0, #9
  40ab40:	d9f5      	bls.n	40ab2e <_svfprintf_r+0x5b6>
  40ab42:	940a      	str	r4, [sp, #40]	; 0x28
  40ab44:	e572      	b.n	40a62c <_svfprintf_r+0xb4>
  40ab46:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40ab4a:	f89a 3000 	ldrb.w	r3, [sl]
  40ab4e:	e56b      	b.n	40a628 <_svfprintf_r+0xb0>
  40ab50:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40ab54:	f89a 3000 	ldrb.w	r3, [sl]
  40ab58:	e566      	b.n	40a628 <_svfprintf_r+0xb0>
  40ab5a:	f89a 3000 	ldrb.w	r3, [sl]
  40ab5e:	2b6c      	cmp	r3, #108	; 0x6c
  40ab60:	bf03      	ittte	eq
  40ab62:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40ab66:	f04b 0b20 	orreq.w	fp, fp, #32
  40ab6a:	f10a 0a01 	addeq.w	sl, sl, #1
  40ab6e:	f04b 0b10 	orrne.w	fp, fp, #16
  40ab72:	e559      	b.n	40a628 <_svfprintf_r+0xb0>
  40ab74:	2a00      	cmp	r2, #0
  40ab76:	f040 8711 	bne.w	40b99c <_svfprintf_r+0x1424>
  40ab7a:	f01b 0f20 	tst.w	fp, #32
  40ab7e:	f040 84f9 	bne.w	40b574 <_svfprintf_r+0xffc>
  40ab82:	f01b 0f10 	tst.w	fp, #16
  40ab86:	f040 84ac 	bne.w	40b4e2 <_svfprintf_r+0xf6a>
  40ab8a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40ab8e:	f000 84a8 	beq.w	40b4e2 <_svfprintf_r+0xf6a>
  40ab92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ab94:	6813      	ldr	r3, [r2, #0]
  40ab96:	3204      	adds	r2, #4
  40ab98:	920f      	str	r2, [sp, #60]	; 0x3c
  40ab9a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40ab9e:	801a      	strh	r2, [r3, #0]
  40aba0:	e511      	b.n	40a5c6 <_svfprintf_r+0x4e>
  40aba2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40aba4:	4bb3      	ldr	r3, [pc, #716]	; (40ae74 <_svfprintf_r+0x8fc>)
  40aba6:	680c      	ldr	r4, [r1, #0]
  40aba8:	9318      	str	r3, [sp, #96]	; 0x60
  40abaa:	2230      	movs	r2, #48	; 0x30
  40abac:	2378      	movs	r3, #120	; 0x78
  40abae:	3104      	adds	r1, #4
  40abb0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40abb4:	9311      	str	r3, [sp, #68]	; 0x44
  40abb6:	f04b 0b02 	orr.w	fp, fp, #2
  40abba:	910f      	str	r1, [sp, #60]	; 0x3c
  40abbc:	2500      	movs	r5, #0
  40abbe:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40abc2:	2302      	movs	r3, #2
  40abc4:	e5cb      	b.n	40a75e <_svfprintf_r+0x1e6>
  40abc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40abc8:	9311      	str	r3, [sp, #68]	; 0x44
  40abca:	680a      	ldr	r2, [r1, #0]
  40abcc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40abd0:	2300      	movs	r3, #0
  40abd2:	460a      	mov	r2, r1
  40abd4:	461f      	mov	r7, r3
  40abd6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40abda:	3204      	adds	r2, #4
  40abdc:	2301      	movs	r3, #1
  40abde:	9308      	str	r3, [sp, #32]
  40abe0:	f8cd b01c 	str.w	fp, [sp, #28]
  40abe4:	970a      	str	r7, [sp, #40]	; 0x28
  40abe6:	9712      	str	r7, [sp, #72]	; 0x48
  40abe8:	920f      	str	r2, [sp, #60]	; 0x3c
  40abea:	930e      	str	r3, [sp, #56]	; 0x38
  40abec:	ae28      	add	r6, sp, #160	; 0xa0
  40abee:	e5df      	b.n	40a7b0 <_svfprintf_r+0x238>
  40abf0:	9311      	str	r3, [sp, #68]	; 0x44
  40abf2:	2a00      	cmp	r2, #0
  40abf4:	f040 86ea 	bne.w	40b9cc <_svfprintf_r+0x1454>
  40abf8:	f01b 0f20 	tst.w	fp, #32
  40abfc:	d15d      	bne.n	40acba <_svfprintf_r+0x742>
  40abfe:	f01b 0f10 	tst.w	fp, #16
  40ac02:	f040 8308 	bne.w	40b216 <_svfprintf_r+0xc9e>
  40ac06:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40ac0a:	f000 8304 	beq.w	40b216 <_svfprintf_r+0xc9e>
  40ac0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40ac10:	f9b1 4000 	ldrsh.w	r4, [r1]
  40ac14:	3104      	adds	r1, #4
  40ac16:	17e5      	asrs	r5, r4, #31
  40ac18:	4622      	mov	r2, r4
  40ac1a:	462b      	mov	r3, r5
  40ac1c:	910f      	str	r1, [sp, #60]	; 0x3c
  40ac1e:	2a00      	cmp	r2, #0
  40ac20:	f173 0300 	sbcs.w	r3, r3, #0
  40ac24:	db58      	blt.n	40acd8 <_svfprintf_r+0x760>
  40ac26:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ac28:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40ac2c:	1c4a      	adds	r2, r1, #1
  40ac2e:	f04f 0301 	mov.w	r3, #1
  40ac32:	f47f ad9b 	bne.w	40a76c <_svfprintf_r+0x1f4>
  40ac36:	ea54 0205 	orrs.w	r2, r4, r5
  40ac3a:	f000 81df 	beq.w	40affc <_svfprintf_r+0xa84>
  40ac3e:	f8cd b01c 	str.w	fp, [sp, #28]
  40ac42:	2b01      	cmp	r3, #1
  40ac44:	f000 827b 	beq.w	40b13e <_svfprintf_r+0xbc6>
  40ac48:	2b02      	cmp	r3, #2
  40ac4a:	f040 8206 	bne.w	40b05a <_svfprintf_r+0xae2>
  40ac4e:	9818      	ldr	r0, [sp, #96]	; 0x60
  40ac50:	464e      	mov	r6, r9
  40ac52:	0923      	lsrs	r3, r4, #4
  40ac54:	f004 010f 	and.w	r1, r4, #15
  40ac58:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40ac5c:	092a      	lsrs	r2, r5, #4
  40ac5e:	461c      	mov	r4, r3
  40ac60:	4615      	mov	r5, r2
  40ac62:	5c43      	ldrb	r3, [r0, r1]
  40ac64:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40ac68:	ea54 0305 	orrs.w	r3, r4, r5
  40ac6c:	d1f1      	bne.n	40ac52 <_svfprintf_r+0x6da>
  40ac6e:	eba9 0306 	sub.w	r3, r9, r6
  40ac72:	930e      	str	r3, [sp, #56]	; 0x38
  40ac74:	e590      	b.n	40a798 <_svfprintf_r+0x220>
  40ac76:	9311      	str	r3, [sp, #68]	; 0x44
  40ac78:	2a00      	cmp	r2, #0
  40ac7a:	f040 86a3 	bne.w	40b9c4 <_svfprintf_r+0x144c>
  40ac7e:	4b7e      	ldr	r3, [pc, #504]	; (40ae78 <_svfprintf_r+0x900>)
  40ac80:	9318      	str	r3, [sp, #96]	; 0x60
  40ac82:	f01b 0f20 	tst.w	fp, #32
  40ac86:	f43f aeef 	beq.w	40aa68 <_svfprintf_r+0x4f0>
  40ac8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ac8c:	3507      	adds	r5, #7
  40ac8e:	f025 0307 	bic.w	r3, r5, #7
  40ac92:	f103 0208 	add.w	r2, r3, #8
  40ac96:	f01b 0f01 	tst.w	fp, #1
  40ac9a:	920f      	str	r2, [sp, #60]	; 0x3c
  40ac9c:	e9d3 4500 	ldrd	r4, r5, [r3]
  40aca0:	f47f aef4 	bne.w	40aa8c <_svfprintf_r+0x514>
  40aca4:	2302      	movs	r3, #2
  40aca6:	e55a      	b.n	40a75e <_svfprintf_r+0x1e6>
  40aca8:	9311      	str	r3, [sp, #68]	; 0x44
  40acaa:	2a00      	cmp	r2, #0
  40acac:	f040 8686 	bne.w	40b9bc <_svfprintf_r+0x1444>
  40acb0:	f04b 0b10 	orr.w	fp, fp, #16
  40acb4:	f01b 0f20 	tst.w	fp, #32
  40acb8:	d0a1      	beq.n	40abfe <_svfprintf_r+0x686>
  40acba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40acbc:	3507      	adds	r5, #7
  40acbe:	f025 0507 	bic.w	r5, r5, #7
  40acc2:	e9d5 2300 	ldrd	r2, r3, [r5]
  40acc6:	2a00      	cmp	r2, #0
  40acc8:	f105 0108 	add.w	r1, r5, #8
  40accc:	461d      	mov	r5, r3
  40acce:	f173 0300 	sbcs.w	r3, r3, #0
  40acd2:	910f      	str	r1, [sp, #60]	; 0x3c
  40acd4:	4614      	mov	r4, r2
  40acd6:	daa6      	bge.n	40ac26 <_svfprintf_r+0x6ae>
  40acd8:	272d      	movs	r7, #45	; 0x2d
  40acda:	4264      	negs	r4, r4
  40acdc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40ace0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40ace4:	2301      	movs	r3, #1
  40ace6:	e53d      	b.n	40a764 <_svfprintf_r+0x1ec>
  40ace8:	9311      	str	r3, [sp, #68]	; 0x44
  40acea:	2a00      	cmp	r2, #0
  40acec:	f040 8662 	bne.w	40b9b4 <_svfprintf_r+0x143c>
  40acf0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40acf2:	3507      	adds	r5, #7
  40acf4:	f025 0307 	bic.w	r3, r5, #7
  40acf8:	f103 0208 	add.w	r2, r3, #8
  40acfc:	920f      	str	r2, [sp, #60]	; 0x3c
  40acfe:	681a      	ldr	r2, [r3, #0]
  40ad00:	9215      	str	r2, [sp, #84]	; 0x54
  40ad02:	685b      	ldr	r3, [r3, #4]
  40ad04:	9314      	str	r3, [sp, #80]	; 0x50
  40ad06:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ad08:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40ad0a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40ad0e:	4628      	mov	r0, r5
  40ad10:	4621      	mov	r1, r4
  40ad12:	f04f 32ff 	mov.w	r2, #4294967295
  40ad16:	4b59      	ldr	r3, [pc, #356]	; (40ae7c <_svfprintf_r+0x904>)
  40ad18:	f005 fa9a 	bl	410250 <__aeabi_dcmpun>
  40ad1c:	2800      	cmp	r0, #0
  40ad1e:	f040 834a 	bne.w	40b3b6 <_svfprintf_r+0xe3e>
  40ad22:	4628      	mov	r0, r5
  40ad24:	4621      	mov	r1, r4
  40ad26:	f04f 32ff 	mov.w	r2, #4294967295
  40ad2a:	4b54      	ldr	r3, [pc, #336]	; (40ae7c <_svfprintf_r+0x904>)
  40ad2c:	f005 fa72 	bl	410214 <__aeabi_dcmple>
  40ad30:	2800      	cmp	r0, #0
  40ad32:	f040 8340 	bne.w	40b3b6 <_svfprintf_r+0xe3e>
  40ad36:	a815      	add	r0, sp, #84	; 0x54
  40ad38:	c80d      	ldmia	r0, {r0, r2, r3}
  40ad3a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40ad3c:	f005 fa60 	bl	410200 <__aeabi_dcmplt>
  40ad40:	2800      	cmp	r0, #0
  40ad42:	f040 8530 	bne.w	40b7a6 <_svfprintf_r+0x122e>
  40ad46:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40ad4a:	4e4d      	ldr	r6, [pc, #308]	; (40ae80 <_svfprintf_r+0x908>)
  40ad4c:	4b4d      	ldr	r3, [pc, #308]	; (40ae84 <_svfprintf_r+0x90c>)
  40ad4e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40ad52:	9007      	str	r0, [sp, #28]
  40ad54:	9811      	ldr	r0, [sp, #68]	; 0x44
  40ad56:	2203      	movs	r2, #3
  40ad58:	2100      	movs	r1, #0
  40ad5a:	9208      	str	r2, [sp, #32]
  40ad5c:	910a      	str	r1, [sp, #40]	; 0x28
  40ad5e:	2847      	cmp	r0, #71	; 0x47
  40ad60:	bfd8      	it	le
  40ad62:	461e      	movle	r6, r3
  40ad64:	920e      	str	r2, [sp, #56]	; 0x38
  40ad66:	9112      	str	r1, [sp, #72]	; 0x48
  40ad68:	e51e      	b.n	40a7a8 <_svfprintf_r+0x230>
  40ad6a:	f04b 0b08 	orr.w	fp, fp, #8
  40ad6e:	f89a 3000 	ldrb.w	r3, [sl]
  40ad72:	e459      	b.n	40a628 <_svfprintf_r+0xb0>
  40ad74:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40ad78:	2300      	movs	r3, #0
  40ad7a:	461c      	mov	r4, r3
  40ad7c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40ad80:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40ad84:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40ad88:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40ad8c:	2809      	cmp	r0, #9
  40ad8e:	d9f5      	bls.n	40ad7c <_svfprintf_r+0x804>
  40ad90:	940d      	str	r4, [sp, #52]	; 0x34
  40ad92:	e44b      	b.n	40a62c <_svfprintf_r+0xb4>
  40ad94:	f04b 0b10 	orr.w	fp, fp, #16
  40ad98:	9311      	str	r3, [sp, #68]	; 0x44
  40ad9a:	f01b 0320 	ands.w	r3, fp, #32
  40ad9e:	f43f ae1d 	beq.w	40a9dc <_svfprintf_r+0x464>
  40ada2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ada4:	3507      	adds	r5, #7
  40ada6:	f025 0307 	bic.w	r3, r5, #7
  40adaa:	f103 0208 	add.w	r2, r3, #8
  40adae:	e9d3 4500 	ldrd	r4, r5, [r3]
  40adb2:	920f      	str	r2, [sp, #60]	; 0x3c
  40adb4:	2300      	movs	r3, #0
  40adb6:	e4d2      	b.n	40a75e <_svfprintf_r+0x1e6>
  40adb8:	9311      	str	r3, [sp, #68]	; 0x44
  40adba:	2a00      	cmp	r2, #0
  40adbc:	f040 85e7 	bne.w	40b98e <_svfprintf_r+0x1416>
  40adc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40adc2:	2a00      	cmp	r2, #0
  40adc4:	f43f aca3 	beq.w	40a70e <_svfprintf_r+0x196>
  40adc8:	2300      	movs	r3, #0
  40adca:	2101      	movs	r1, #1
  40adcc:	461f      	mov	r7, r3
  40adce:	9108      	str	r1, [sp, #32]
  40add0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40add4:	f8cd b01c 	str.w	fp, [sp, #28]
  40add8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40addc:	930a      	str	r3, [sp, #40]	; 0x28
  40adde:	9312      	str	r3, [sp, #72]	; 0x48
  40ade0:	910e      	str	r1, [sp, #56]	; 0x38
  40ade2:	ae28      	add	r6, sp, #160	; 0xa0
  40ade4:	e4e4      	b.n	40a7b0 <_svfprintf_r+0x238>
  40ade6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ade8:	e534      	b.n	40a854 <_svfprintf_r+0x2dc>
  40adea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40adec:	2b65      	cmp	r3, #101	; 0x65
  40adee:	f340 80a7 	ble.w	40af40 <_svfprintf_r+0x9c8>
  40adf2:	a815      	add	r0, sp, #84	; 0x54
  40adf4:	c80d      	ldmia	r0, {r0, r2, r3}
  40adf6:	9914      	ldr	r1, [sp, #80]	; 0x50
  40adf8:	f005 f9f8 	bl	4101ec <__aeabi_dcmpeq>
  40adfc:	2800      	cmp	r0, #0
  40adfe:	f000 8150 	beq.w	40b0a2 <_svfprintf_r+0xb2a>
  40ae02:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ae04:	4a20      	ldr	r2, [pc, #128]	; (40ae88 <_svfprintf_r+0x910>)
  40ae06:	f8c8 2000 	str.w	r2, [r8]
  40ae0a:	3301      	adds	r3, #1
  40ae0c:	3401      	adds	r4, #1
  40ae0e:	2201      	movs	r2, #1
  40ae10:	2b07      	cmp	r3, #7
  40ae12:	9427      	str	r4, [sp, #156]	; 0x9c
  40ae14:	9326      	str	r3, [sp, #152]	; 0x98
  40ae16:	f8c8 2004 	str.w	r2, [r8, #4]
  40ae1a:	f300 836a 	bgt.w	40b4f2 <_svfprintf_r+0xf7a>
  40ae1e:	f108 0808 	add.w	r8, r8, #8
  40ae22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40ae24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40ae26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ae28:	4293      	cmp	r3, r2
  40ae2a:	db03      	blt.n	40ae34 <_svfprintf_r+0x8bc>
  40ae2c:	9b07      	ldr	r3, [sp, #28]
  40ae2e:	07dd      	lsls	r5, r3, #31
  40ae30:	f57f ad82 	bpl.w	40a938 <_svfprintf_r+0x3c0>
  40ae34:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ae36:	9919      	ldr	r1, [sp, #100]	; 0x64
  40ae38:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40ae3a:	f8c8 2000 	str.w	r2, [r8]
  40ae3e:	3301      	adds	r3, #1
  40ae40:	440c      	add	r4, r1
  40ae42:	2b07      	cmp	r3, #7
  40ae44:	f8c8 1004 	str.w	r1, [r8, #4]
  40ae48:	9427      	str	r4, [sp, #156]	; 0x9c
  40ae4a:	9326      	str	r3, [sp, #152]	; 0x98
  40ae4c:	f300 839e 	bgt.w	40b58c <_svfprintf_r+0x1014>
  40ae50:	f108 0808 	add.w	r8, r8, #8
  40ae54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ae56:	1e5e      	subs	r6, r3, #1
  40ae58:	2e00      	cmp	r6, #0
  40ae5a:	f77f ad6d 	ble.w	40a938 <_svfprintf_r+0x3c0>
  40ae5e:	2e10      	cmp	r6, #16
  40ae60:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ae62:	4d0a      	ldr	r5, [pc, #40]	; (40ae8c <_svfprintf_r+0x914>)
  40ae64:	f340 81f5 	ble.w	40b252 <_svfprintf_r+0xcda>
  40ae68:	4622      	mov	r2, r4
  40ae6a:	2710      	movs	r7, #16
  40ae6c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40ae70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ae72:	e013      	b.n	40ae9c <_svfprintf_r+0x924>
  40ae74:	00411d18 	.word	0x00411d18
  40ae78:	00411d04 	.word	0x00411d04
  40ae7c:	7fefffff 	.word	0x7fefffff
  40ae80:	00411cf8 	.word	0x00411cf8
  40ae84:	00411cf4 	.word	0x00411cf4
  40ae88:	00411d34 	.word	0x00411d34
  40ae8c:	00411d48 	.word	0x00411d48
  40ae90:	f108 0808 	add.w	r8, r8, #8
  40ae94:	3e10      	subs	r6, #16
  40ae96:	2e10      	cmp	r6, #16
  40ae98:	f340 81da 	ble.w	40b250 <_svfprintf_r+0xcd8>
  40ae9c:	3301      	adds	r3, #1
  40ae9e:	3210      	adds	r2, #16
  40aea0:	2b07      	cmp	r3, #7
  40aea2:	9227      	str	r2, [sp, #156]	; 0x9c
  40aea4:	9326      	str	r3, [sp, #152]	; 0x98
  40aea6:	e888 00a0 	stmia.w	r8, {r5, r7}
  40aeaa:	ddf1      	ble.n	40ae90 <_svfprintf_r+0x918>
  40aeac:	aa25      	add	r2, sp, #148	; 0x94
  40aeae:	4621      	mov	r1, r4
  40aeb0:	4658      	mov	r0, fp
  40aeb2:	f004 faff 	bl	40f4b4 <__ssprint_r>
  40aeb6:	2800      	cmp	r0, #0
  40aeb8:	f47f ac30 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40aebc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40aebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40aec0:	46c8      	mov	r8, r9
  40aec2:	e7e7      	b.n	40ae94 <_svfprintf_r+0x91c>
  40aec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40aec6:	9a08      	ldr	r2, [sp, #32]
  40aec8:	1a9f      	subs	r7, r3, r2
  40aeca:	2f00      	cmp	r7, #0
  40aecc:	f77f ace5 	ble.w	40a89a <_svfprintf_r+0x322>
  40aed0:	2f10      	cmp	r7, #16
  40aed2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40aed4:	4db6      	ldr	r5, [pc, #728]	; (40b1b0 <_svfprintf_r+0xc38>)
  40aed6:	dd27      	ble.n	40af28 <_svfprintf_r+0x9b0>
  40aed8:	4642      	mov	r2, r8
  40aeda:	4621      	mov	r1, r4
  40aedc:	46b0      	mov	r8, r6
  40aede:	f04f 0b10 	mov.w	fp, #16
  40aee2:	462e      	mov	r6, r5
  40aee4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40aee6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40aee8:	e004      	b.n	40aef4 <_svfprintf_r+0x97c>
  40aeea:	3f10      	subs	r7, #16
  40aeec:	2f10      	cmp	r7, #16
  40aeee:	f102 0208 	add.w	r2, r2, #8
  40aef2:	dd15      	ble.n	40af20 <_svfprintf_r+0x9a8>
  40aef4:	3301      	adds	r3, #1
  40aef6:	3110      	adds	r1, #16
  40aef8:	2b07      	cmp	r3, #7
  40aefa:	9127      	str	r1, [sp, #156]	; 0x9c
  40aefc:	9326      	str	r3, [sp, #152]	; 0x98
  40aefe:	e882 0840 	stmia.w	r2, {r6, fp}
  40af02:	ddf2      	ble.n	40aeea <_svfprintf_r+0x972>
  40af04:	aa25      	add	r2, sp, #148	; 0x94
  40af06:	4629      	mov	r1, r5
  40af08:	4620      	mov	r0, r4
  40af0a:	f004 fad3 	bl	40f4b4 <__ssprint_r>
  40af0e:	2800      	cmp	r0, #0
  40af10:	f47f ac04 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40af14:	3f10      	subs	r7, #16
  40af16:	2f10      	cmp	r7, #16
  40af18:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40af1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40af1c:	464a      	mov	r2, r9
  40af1e:	dce9      	bgt.n	40aef4 <_svfprintf_r+0x97c>
  40af20:	4635      	mov	r5, r6
  40af22:	460c      	mov	r4, r1
  40af24:	4646      	mov	r6, r8
  40af26:	4690      	mov	r8, r2
  40af28:	3301      	adds	r3, #1
  40af2a:	443c      	add	r4, r7
  40af2c:	2b07      	cmp	r3, #7
  40af2e:	9427      	str	r4, [sp, #156]	; 0x9c
  40af30:	9326      	str	r3, [sp, #152]	; 0x98
  40af32:	e888 00a0 	stmia.w	r8, {r5, r7}
  40af36:	f300 8232 	bgt.w	40b39e <_svfprintf_r+0xe26>
  40af3a:	f108 0808 	add.w	r8, r8, #8
  40af3e:	e4ac      	b.n	40a89a <_svfprintf_r+0x322>
  40af40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40af42:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40af44:	2b01      	cmp	r3, #1
  40af46:	f340 81fe 	ble.w	40b346 <_svfprintf_r+0xdce>
  40af4a:	3701      	adds	r7, #1
  40af4c:	3401      	adds	r4, #1
  40af4e:	2301      	movs	r3, #1
  40af50:	2f07      	cmp	r7, #7
  40af52:	9427      	str	r4, [sp, #156]	; 0x9c
  40af54:	9726      	str	r7, [sp, #152]	; 0x98
  40af56:	f8c8 6000 	str.w	r6, [r8]
  40af5a:	f8c8 3004 	str.w	r3, [r8, #4]
  40af5e:	f300 8203 	bgt.w	40b368 <_svfprintf_r+0xdf0>
  40af62:	f108 0808 	add.w	r8, r8, #8
  40af66:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40af68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40af6a:	f8c8 3000 	str.w	r3, [r8]
  40af6e:	3701      	adds	r7, #1
  40af70:	4414      	add	r4, r2
  40af72:	2f07      	cmp	r7, #7
  40af74:	9427      	str	r4, [sp, #156]	; 0x9c
  40af76:	9726      	str	r7, [sp, #152]	; 0x98
  40af78:	f8c8 2004 	str.w	r2, [r8, #4]
  40af7c:	f300 8200 	bgt.w	40b380 <_svfprintf_r+0xe08>
  40af80:	f108 0808 	add.w	r8, r8, #8
  40af84:	a815      	add	r0, sp, #84	; 0x54
  40af86:	c80d      	ldmia	r0, {r0, r2, r3}
  40af88:	9914      	ldr	r1, [sp, #80]	; 0x50
  40af8a:	f005 f92f 	bl	4101ec <__aeabi_dcmpeq>
  40af8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40af90:	2800      	cmp	r0, #0
  40af92:	f040 8101 	bne.w	40b198 <_svfprintf_r+0xc20>
  40af96:	3b01      	subs	r3, #1
  40af98:	3701      	adds	r7, #1
  40af9a:	3601      	adds	r6, #1
  40af9c:	441c      	add	r4, r3
  40af9e:	2f07      	cmp	r7, #7
  40afa0:	9726      	str	r7, [sp, #152]	; 0x98
  40afa2:	9427      	str	r4, [sp, #156]	; 0x9c
  40afa4:	f8c8 6000 	str.w	r6, [r8]
  40afa8:	f8c8 3004 	str.w	r3, [r8, #4]
  40afac:	f300 8127 	bgt.w	40b1fe <_svfprintf_r+0xc86>
  40afb0:	f108 0808 	add.w	r8, r8, #8
  40afb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40afb6:	f8c8 2004 	str.w	r2, [r8, #4]
  40afba:	3701      	adds	r7, #1
  40afbc:	4414      	add	r4, r2
  40afbe:	ab21      	add	r3, sp, #132	; 0x84
  40afc0:	2f07      	cmp	r7, #7
  40afc2:	9427      	str	r4, [sp, #156]	; 0x9c
  40afc4:	9726      	str	r7, [sp, #152]	; 0x98
  40afc6:	f8c8 3000 	str.w	r3, [r8]
  40afca:	f77f acb3 	ble.w	40a934 <_svfprintf_r+0x3bc>
  40afce:	aa25      	add	r2, sp, #148	; 0x94
  40afd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40afd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40afd4:	f004 fa6e 	bl	40f4b4 <__ssprint_r>
  40afd8:	2800      	cmp	r0, #0
  40afda:	f47f ab9f 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40afde:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40afe0:	46c8      	mov	r8, r9
  40afe2:	e4a9      	b.n	40a938 <_svfprintf_r+0x3c0>
  40afe4:	aa25      	add	r2, sp, #148	; 0x94
  40afe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40afe8:	980c      	ldr	r0, [sp, #48]	; 0x30
  40afea:	f004 fa63 	bl	40f4b4 <__ssprint_r>
  40afee:	2800      	cmp	r0, #0
  40aff0:	f43f aceb 	beq.w	40a9ca <_svfprintf_r+0x452>
  40aff4:	f7ff bb92 	b.w	40a71c <_svfprintf_r+0x1a4>
  40aff8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40affc:	2b01      	cmp	r3, #1
  40affe:	f000 8134 	beq.w	40b26a <_svfprintf_r+0xcf2>
  40b002:	2b02      	cmp	r3, #2
  40b004:	d125      	bne.n	40b052 <_svfprintf_r+0xada>
  40b006:	f8cd b01c 	str.w	fp, [sp, #28]
  40b00a:	2400      	movs	r4, #0
  40b00c:	2500      	movs	r5, #0
  40b00e:	e61e      	b.n	40ac4e <_svfprintf_r+0x6d6>
  40b010:	aa25      	add	r2, sp, #148	; 0x94
  40b012:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b014:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b016:	f004 fa4d 	bl	40f4b4 <__ssprint_r>
  40b01a:	2800      	cmp	r0, #0
  40b01c:	f47f ab7e 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b020:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b022:	46c8      	mov	r8, r9
  40b024:	e475      	b.n	40a912 <_svfprintf_r+0x39a>
  40b026:	aa25      	add	r2, sp, #148	; 0x94
  40b028:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b02a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b02c:	f004 fa42 	bl	40f4b4 <__ssprint_r>
  40b030:	2800      	cmp	r0, #0
  40b032:	f47f ab73 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b036:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b038:	46c8      	mov	r8, r9
  40b03a:	e41b      	b.n	40a874 <_svfprintf_r+0x2fc>
  40b03c:	aa25      	add	r2, sp, #148	; 0x94
  40b03e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b040:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b042:	f004 fa37 	bl	40f4b4 <__ssprint_r>
  40b046:	2800      	cmp	r0, #0
  40b048:	f47f ab68 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b04c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b04e:	46c8      	mov	r8, r9
  40b050:	e420      	b.n	40a894 <_svfprintf_r+0x31c>
  40b052:	f8cd b01c 	str.w	fp, [sp, #28]
  40b056:	2400      	movs	r4, #0
  40b058:	2500      	movs	r5, #0
  40b05a:	4649      	mov	r1, r9
  40b05c:	e000      	b.n	40b060 <_svfprintf_r+0xae8>
  40b05e:	4631      	mov	r1, r6
  40b060:	08e2      	lsrs	r2, r4, #3
  40b062:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40b066:	08e8      	lsrs	r0, r5, #3
  40b068:	f004 0307 	and.w	r3, r4, #7
  40b06c:	4605      	mov	r5, r0
  40b06e:	4614      	mov	r4, r2
  40b070:	3330      	adds	r3, #48	; 0x30
  40b072:	ea54 0205 	orrs.w	r2, r4, r5
  40b076:	f801 3c01 	strb.w	r3, [r1, #-1]
  40b07a:	f101 36ff 	add.w	r6, r1, #4294967295
  40b07e:	d1ee      	bne.n	40b05e <_svfprintf_r+0xae6>
  40b080:	9a07      	ldr	r2, [sp, #28]
  40b082:	07d2      	lsls	r2, r2, #31
  40b084:	f57f adf3 	bpl.w	40ac6e <_svfprintf_r+0x6f6>
  40b088:	2b30      	cmp	r3, #48	; 0x30
  40b08a:	f43f adf0 	beq.w	40ac6e <_svfprintf_r+0x6f6>
  40b08e:	3902      	subs	r1, #2
  40b090:	2330      	movs	r3, #48	; 0x30
  40b092:	f806 3c01 	strb.w	r3, [r6, #-1]
  40b096:	eba9 0301 	sub.w	r3, r9, r1
  40b09a:	930e      	str	r3, [sp, #56]	; 0x38
  40b09c:	460e      	mov	r6, r1
  40b09e:	f7ff bb7b 	b.w	40a798 <_svfprintf_r+0x220>
  40b0a2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40b0a4:	2900      	cmp	r1, #0
  40b0a6:	f340 822e 	ble.w	40b506 <_svfprintf_r+0xf8e>
  40b0aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b0ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40b0ae:	4293      	cmp	r3, r2
  40b0b0:	bfa8      	it	ge
  40b0b2:	4613      	movge	r3, r2
  40b0b4:	2b00      	cmp	r3, #0
  40b0b6:	461f      	mov	r7, r3
  40b0b8:	dd0d      	ble.n	40b0d6 <_svfprintf_r+0xb5e>
  40b0ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b0bc:	f8c8 6000 	str.w	r6, [r8]
  40b0c0:	3301      	adds	r3, #1
  40b0c2:	443c      	add	r4, r7
  40b0c4:	2b07      	cmp	r3, #7
  40b0c6:	9427      	str	r4, [sp, #156]	; 0x9c
  40b0c8:	f8c8 7004 	str.w	r7, [r8, #4]
  40b0cc:	9326      	str	r3, [sp, #152]	; 0x98
  40b0ce:	f300 831f 	bgt.w	40b710 <_svfprintf_r+0x1198>
  40b0d2:	f108 0808 	add.w	r8, r8, #8
  40b0d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b0d8:	2f00      	cmp	r7, #0
  40b0da:	bfa8      	it	ge
  40b0dc:	1bdb      	subge	r3, r3, r7
  40b0de:	2b00      	cmp	r3, #0
  40b0e0:	461f      	mov	r7, r3
  40b0e2:	f340 80d6 	ble.w	40b292 <_svfprintf_r+0xd1a>
  40b0e6:	2f10      	cmp	r7, #16
  40b0e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b0ea:	4d31      	ldr	r5, [pc, #196]	; (40b1b0 <_svfprintf_r+0xc38>)
  40b0ec:	f340 81ed 	ble.w	40b4ca <_svfprintf_r+0xf52>
  40b0f0:	4642      	mov	r2, r8
  40b0f2:	4621      	mov	r1, r4
  40b0f4:	46b0      	mov	r8, r6
  40b0f6:	f04f 0b10 	mov.w	fp, #16
  40b0fa:	462e      	mov	r6, r5
  40b0fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b0fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40b100:	e004      	b.n	40b10c <_svfprintf_r+0xb94>
  40b102:	3208      	adds	r2, #8
  40b104:	3f10      	subs	r7, #16
  40b106:	2f10      	cmp	r7, #16
  40b108:	f340 81db 	ble.w	40b4c2 <_svfprintf_r+0xf4a>
  40b10c:	3301      	adds	r3, #1
  40b10e:	3110      	adds	r1, #16
  40b110:	2b07      	cmp	r3, #7
  40b112:	9127      	str	r1, [sp, #156]	; 0x9c
  40b114:	9326      	str	r3, [sp, #152]	; 0x98
  40b116:	e882 0840 	stmia.w	r2, {r6, fp}
  40b11a:	ddf2      	ble.n	40b102 <_svfprintf_r+0xb8a>
  40b11c:	aa25      	add	r2, sp, #148	; 0x94
  40b11e:	4629      	mov	r1, r5
  40b120:	4620      	mov	r0, r4
  40b122:	f004 f9c7 	bl	40f4b4 <__ssprint_r>
  40b126:	2800      	cmp	r0, #0
  40b128:	f47f aaf8 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b12c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40b12e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b130:	464a      	mov	r2, r9
  40b132:	e7e7      	b.n	40b104 <_svfprintf_r+0xb8c>
  40b134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b136:	930e      	str	r3, [sp, #56]	; 0x38
  40b138:	464e      	mov	r6, r9
  40b13a:	f7ff bb2d 	b.w	40a798 <_svfprintf_r+0x220>
  40b13e:	2d00      	cmp	r5, #0
  40b140:	bf08      	it	eq
  40b142:	2c0a      	cmpeq	r4, #10
  40b144:	f0c0 808f 	bcc.w	40b266 <_svfprintf_r+0xcee>
  40b148:	464e      	mov	r6, r9
  40b14a:	4620      	mov	r0, r4
  40b14c:	4629      	mov	r1, r5
  40b14e:	220a      	movs	r2, #10
  40b150:	2300      	movs	r3, #0
  40b152:	f005 f8bb 	bl	4102cc <__aeabi_uldivmod>
  40b156:	3230      	adds	r2, #48	; 0x30
  40b158:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40b15c:	4620      	mov	r0, r4
  40b15e:	4629      	mov	r1, r5
  40b160:	2300      	movs	r3, #0
  40b162:	220a      	movs	r2, #10
  40b164:	f005 f8b2 	bl	4102cc <__aeabi_uldivmod>
  40b168:	4604      	mov	r4, r0
  40b16a:	460d      	mov	r5, r1
  40b16c:	ea54 0305 	orrs.w	r3, r4, r5
  40b170:	d1eb      	bne.n	40b14a <_svfprintf_r+0xbd2>
  40b172:	eba9 0306 	sub.w	r3, r9, r6
  40b176:	930e      	str	r3, [sp, #56]	; 0x38
  40b178:	f7ff bb0e 	b.w	40a798 <_svfprintf_r+0x220>
  40b17c:	aa25      	add	r2, sp, #148	; 0x94
  40b17e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b180:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b182:	f004 f997 	bl	40f4b4 <__ssprint_r>
  40b186:	2800      	cmp	r0, #0
  40b188:	f47f aac8 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b18c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40b190:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b192:	46c8      	mov	r8, r9
  40b194:	f7ff bb5e 	b.w	40a854 <_svfprintf_r+0x2dc>
  40b198:	1e5e      	subs	r6, r3, #1
  40b19a:	2e00      	cmp	r6, #0
  40b19c:	f77f af0a 	ble.w	40afb4 <_svfprintf_r+0xa3c>
  40b1a0:	2e10      	cmp	r6, #16
  40b1a2:	4d03      	ldr	r5, [pc, #12]	; (40b1b0 <_svfprintf_r+0xc38>)
  40b1a4:	dd22      	ble.n	40b1ec <_svfprintf_r+0xc74>
  40b1a6:	4622      	mov	r2, r4
  40b1a8:	f04f 0b10 	mov.w	fp, #16
  40b1ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b1ae:	e006      	b.n	40b1be <_svfprintf_r+0xc46>
  40b1b0:	00411d48 	.word	0x00411d48
  40b1b4:	3e10      	subs	r6, #16
  40b1b6:	2e10      	cmp	r6, #16
  40b1b8:	f108 0808 	add.w	r8, r8, #8
  40b1bc:	dd15      	ble.n	40b1ea <_svfprintf_r+0xc72>
  40b1be:	3701      	adds	r7, #1
  40b1c0:	3210      	adds	r2, #16
  40b1c2:	2f07      	cmp	r7, #7
  40b1c4:	9227      	str	r2, [sp, #156]	; 0x9c
  40b1c6:	9726      	str	r7, [sp, #152]	; 0x98
  40b1c8:	e888 0820 	stmia.w	r8, {r5, fp}
  40b1cc:	ddf2      	ble.n	40b1b4 <_svfprintf_r+0xc3c>
  40b1ce:	aa25      	add	r2, sp, #148	; 0x94
  40b1d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b1d2:	4620      	mov	r0, r4
  40b1d4:	f004 f96e 	bl	40f4b4 <__ssprint_r>
  40b1d8:	2800      	cmp	r0, #0
  40b1da:	f47f aa9f 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b1de:	3e10      	subs	r6, #16
  40b1e0:	2e10      	cmp	r6, #16
  40b1e2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b1e4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40b1e6:	46c8      	mov	r8, r9
  40b1e8:	dce9      	bgt.n	40b1be <_svfprintf_r+0xc46>
  40b1ea:	4614      	mov	r4, r2
  40b1ec:	3701      	adds	r7, #1
  40b1ee:	4434      	add	r4, r6
  40b1f0:	2f07      	cmp	r7, #7
  40b1f2:	9427      	str	r4, [sp, #156]	; 0x9c
  40b1f4:	9726      	str	r7, [sp, #152]	; 0x98
  40b1f6:	e888 0060 	stmia.w	r8, {r5, r6}
  40b1fa:	f77f aed9 	ble.w	40afb0 <_svfprintf_r+0xa38>
  40b1fe:	aa25      	add	r2, sp, #148	; 0x94
  40b200:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b202:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b204:	f004 f956 	bl	40f4b4 <__ssprint_r>
  40b208:	2800      	cmp	r0, #0
  40b20a:	f47f aa87 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b20e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b210:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40b212:	46c8      	mov	r8, r9
  40b214:	e6ce      	b.n	40afb4 <_svfprintf_r+0xa3c>
  40b216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b218:	6814      	ldr	r4, [r2, #0]
  40b21a:	4613      	mov	r3, r2
  40b21c:	3304      	adds	r3, #4
  40b21e:	17e5      	asrs	r5, r4, #31
  40b220:	930f      	str	r3, [sp, #60]	; 0x3c
  40b222:	4622      	mov	r2, r4
  40b224:	462b      	mov	r3, r5
  40b226:	e4fa      	b.n	40ac1e <_svfprintf_r+0x6a6>
  40b228:	3204      	adds	r2, #4
  40b22a:	681c      	ldr	r4, [r3, #0]
  40b22c:	920f      	str	r2, [sp, #60]	; 0x3c
  40b22e:	2301      	movs	r3, #1
  40b230:	2500      	movs	r5, #0
  40b232:	f7ff ba94 	b.w	40a75e <_svfprintf_r+0x1e6>
  40b236:	681c      	ldr	r4, [r3, #0]
  40b238:	3304      	adds	r3, #4
  40b23a:	930f      	str	r3, [sp, #60]	; 0x3c
  40b23c:	2500      	movs	r5, #0
  40b23e:	e421      	b.n	40aa84 <_svfprintf_r+0x50c>
  40b240:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40b242:	460a      	mov	r2, r1
  40b244:	3204      	adds	r2, #4
  40b246:	680c      	ldr	r4, [r1, #0]
  40b248:	920f      	str	r2, [sp, #60]	; 0x3c
  40b24a:	2500      	movs	r5, #0
  40b24c:	f7ff ba87 	b.w	40a75e <_svfprintf_r+0x1e6>
  40b250:	4614      	mov	r4, r2
  40b252:	3301      	adds	r3, #1
  40b254:	4434      	add	r4, r6
  40b256:	2b07      	cmp	r3, #7
  40b258:	9427      	str	r4, [sp, #156]	; 0x9c
  40b25a:	9326      	str	r3, [sp, #152]	; 0x98
  40b25c:	e888 0060 	stmia.w	r8, {r5, r6}
  40b260:	f77f ab68 	ble.w	40a934 <_svfprintf_r+0x3bc>
  40b264:	e6b3      	b.n	40afce <_svfprintf_r+0xa56>
  40b266:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40b26a:	f8cd b01c 	str.w	fp, [sp, #28]
  40b26e:	ae42      	add	r6, sp, #264	; 0x108
  40b270:	3430      	adds	r4, #48	; 0x30
  40b272:	2301      	movs	r3, #1
  40b274:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40b278:	930e      	str	r3, [sp, #56]	; 0x38
  40b27a:	f7ff ba8d 	b.w	40a798 <_svfprintf_r+0x220>
  40b27e:	aa25      	add	r2, sp, #148	; 0x94
  40b280:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b282:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b284:	f004 f916 	bl	40f4b4 <__ssprint_r>
  40b288:	2800      	cmp	r0, #0
  40b28a:	f47f aa47 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b28e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b290:	46c8      	mov	r8, r9
  40b292:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40b294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b296:	429a      	cmp	r2, r3
  40b298:	db44      	blt.n	40b324 <_svfprintf_r+0xdac>
  40b29a:	9b07      	ldr	r3, [sp, #28]
  40b29c:	07d9      	lsls	r1, r3, #31
  40b29e:	d441      	bmi.n	40b324 <_svfprintf_r+0xdac>
  40b2a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b2a2:	9812      	ldr	r0, [sp, #72]	; 0x48
  40b2a4:	1a9a      	subs	r2, r3, r2
  40b2a6:	1a1d      	subs	r5, r3, r0
  40b2a8:	4295      	cmp	r5, r2
  40b2aa:	bfa8      	it	ge
  40b2ac:	4615      	movge	r5, r2
  40b2ae:	2d00      	cmp	r5, #0
  40b2b0:	dd0e      	ble.n	40b2d0 <_svfprintf_r+0xd58>
  40b2b2:	9926      	ldr	r1, [sp, #152]	; 0x98
  40b2b4:	f8c8 5004 	str.w	r5, [r8, #4]
  40b2b8:	3101      	adds	r1, #1
  40b2ba:	4406      	add	r6, r0
  40b2bc:	442c      	add	r4, r5
  40b2be:	2907      	cmp	r1, #7
  40b2c0:	f8c8 6000 	str.w	r6, [r8]
  40b2c4:	9427      	str	r4, [sp, #156]	; 0x9c
  40b2c6:	9126      	str	r1, [sp, #152]	; 0x98
  40b2c8:	f300 823b 	bgt.w	40b742 <_svfprintf_r+0x11ca>
  40b2cc:	f108 0808 	add.w	r8, r8, #8
  40b2d0:	2d00      	cmp	r5, #0
  40b2d2:	bfac      	ite	ge
  40b2d4:	1b56      	subge	r6, r2, r5
  40b2d6:	4616      	movlt	r6, r2
  40b2d8:	2e00      	cmp	r6, #0
  40b2da:	f77f ab2d 	ble.w	40a938 <_svfprintf_r+0x3c0>
  40b2de:	2e10      	cmp	r6, #16
  40b2e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b2e2:	4db0      	ldr	r5, [pc, #704]	; (40b5a4 <_svfprintf_r+0x102c>)
  40b2e4:	ddb5      	ble.n	40b252 <_svfprintf_r+0xcda>
  40b2e6:	4622      	mov	r2, r4
  40b2e8:	2710      	movs	r7, #16
  40b2ea:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b2ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40b2f0:	e004      	b.n	40b2fc <_svfprintf_r+0xd84>
  40b2f2:	f108 0808 	add.w	r8, r8, #8
  40b2f6:	3e10      	subs	r6, #16
  40b2f8:	2e10      	cmp	r6, #16
  40b2fa:	dda9      	ble.n	40b250 <_svfprintf_r+0xcd8>
  40b2fc:	3301      	adds	r3, #1
  40b2fe:	3210      	adds	r2, #16
  40b300:	2b07      	cmp	r3, #7
  40b302:	9227      	str	r2, [sp, #156]	; 0x9c
  40b304:	9326      	str	r3, [sp, #152]	; 0x98
  40b306:	e888 00a0 	stmia.w	r8, {r5, r7}
  40b30a:	ddf2      	ble.n	40b2f2 <_svfprintf_r+0xd7a>
  40b30c:	aa25      	add	r2, sp, #148	; 0x94
  40b30e:	4621      	mov	r1, r4
  40b310:	4658      	mov	r0, fp
  40b312:	f004 f8cf 	bl	40f4b4 <__ssprint_r>
  40b316:	2800      	cmp	r0, #0
  40b318:	f47f aa00 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b31c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b31e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b320:	46c8      	mov	r8, r9
  40b322:	e7e8      	b.n	40b2f6 <_svfprintf_r+0xd7e>
  40b324:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b326:	9819      	ldr	r0, [sp, #100]	; 0x64
  40b328:	991a      	ldr	r1, [sp, #104]	; 0x68
  40b32a:	f8c8 1000 	str.w	r1, [r8]
  40b32e:	3301      	adds	r3, #1
  40b330:	4404      	add	r4, r0
  40b332:	2b07      	cmp	r3, #7
  40b334:	9427      	str	r4, [sp, #156]	; 0x9c
  40b336:	f8c8 0004 	str.w	r0, [r8, #4]
  40b33a:	9326      	str	r3, [sp, #152]	; 0x98
  40b33c:	f300 81f5 	bgt.w	40b72a <_svfprintf_r+0x11b2>
  40b340:	f108 0808 	add.w	r8, r8, #8
  40b344:	e7ac      	b.n	40b2a0 <_svfprintf_r+0xd28>
  40b346:	9b07      	ldr	r3, [sp, #28]
  40b348:	07da      	lsls	r2, r3, #31
  40b34a:	f53f adfe 	bmi.w	40af4a <_svfprintf_r+0x9d2>
  40b34e:	3701      	adds	r7, #1
  40b350:	3401      	adds	r4, #1
  40b352:	2301      	movs	r3, #1
  40b354:	2f07      	cmp	r7, #7
  40b356:	9427      	str	r4, [sp, #156]	; 0x9c
  40b358:	9726      	str	r7, [sp, #152]	; 0x98
  40b35a:	f8c8 6000 	str.w	r6, [r8]
  40b35e:	f8c8 3004 	str.w	r3, [r8, #4]
  40b362:	f77f ae25 	ble.w	40afb0 <_svfprintf_r+0xa38>
  40b366:	e74a      	b.n	40b1fe <_svfprintf_r+0xc86>
  40b368:	aa25      	add	r2, sp, #148	; 0x94
  40b36a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b36c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b36e:	f004 f8a1 	bl	40f4b4 <__ssprint_r>
  40b372:	2800      	cmp	r0, #0
  40b374:	f47f a9d2 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b378:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b37a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40b37c:	46c8      	mov	r8, r9
  40b37e:	e5f2      	b.n	40af66 <_svfprintf_r+0x9ee>
  40b380:	aa25      	add	r2, sp, #148	; 0x94
  40b382:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b384:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b386:	f004 f895 	bl	40f4b4 <__ssprint_r>
  40b38a:	2800      	cmp	r0, #0
  40b38c:	f47f a9c6 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b390:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b392:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40b394:	46c8      	mov	r8, r9
  40b396:	e5f5      	b.n	40af84 <_svfprintf_r+0xa0c>
  40b398:	464e      	mov	r6, r9
  40b39a:	f7ff b9fd 	b.w	40a798 <_svfprintf_r+0x220>
  40b39e:	aa25      	add	r2, sp, #148	; 0x94
  40b3a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b3a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b3a4:	f004 f886 	bl	40f4b4 <__ssprint_r>
  40b3a8:	2800      	cmp	r0, #0
  40b3aa:	f47f a9b7 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b3ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b3b0:	46c8      	mov	r8, r9
  40b3b2:	f7ff ba72 	b.w	40a89a <_svfprintf_r+0x322>
  40b3b6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40b3b8:	4622      	mov	r2, r4
  40b3ba:	4620      	mov	r0, r4
  40b3bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40b3be:	4623      	mov	r3, r4
  40b3c0:	4621      	mov	r1, r4
  40b3c2:	f004 ff45 	bl	410250 <__aeabi_dcmpun>
  40b3c6:	2800      	cmp	r0, #0
  40b3c8:	f040 8286 	bne.w	40b8d8 <_svfprintf_r+0x1360>
  40b3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b3ce:	3301      	adds	r3, #1
  40b3d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b3d2:	f023 0320 	bic.w	r3, r3, #32
  40b3d6:	930e      	str	r3, [sp, #56]	; 0x38
  40b3d8:	f000 81e2 	beq.w	40b7a0 <_svfprintf_r+0x1228>
  40b3dc:	2b47      	cmp	r3, #71	; 0x47
  40b3de:	f000 811e 	beq.w	40b61e <_svfprintf_r+0x10a6>
  40b3e2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40b3e6:	9307      	str	r3, [sp, #28]
  40b3e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b3ea:	1e1f      	subs	r7, r3, #0
  40b3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40b3ee:	9308      	str	r3, [sp, #32]
  40b3f0:	bfbb      	ittet	lt
  40b3f2:	463b      	movlt	r3, r7
  40b3f4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40b3f8:	2300      	movge	r3, #0
  40b3fa:	232d      	movlt	r3, #45	; 0x2d
  40b3fc:	9310      	str	r3, [sp, #64]	; 0x40
  40b3fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b400:	2b66      	cmp	r3, #102	; 0x66
  40b402:	f000 81bb 	beq.w	40b77c <_svfprintf_r+0x1204>
  40b406:	2b46      	cmp	r3, #70	; 0x46
  40b408:	f000 80df 	beq.w	40b5ca <_svfprintf_r+0x1052>
  40b40c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b40e:	9a08      	ldr	r2, [sp, #32]
  40b410:	2b45      	cmp	r3, #69	; 0x45
  40b412:	bf0c      	ite	eq
  40b414:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40b416:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40b418:	a823      	add	r0, sp, #140	; 0x8c
  40b41a:	a920      	add	r1, sp, #128	; 0x80
  40b41c:	bf08      	it	eq
  40b41e:	1c5d      	addeq	r5, r3, #1
  40b420:	9004      	str	r0, [sp, #16]
  40b422:	9103      	str	r1, [sp, #12]
  40b424:	a81f      	add	r0, sp, #124	; 0x7c
  40b426:	2102      	movs	r1, #2
  40b428:	463b      	mov	r3, r7
  40b42a:	9002      	str	r0, [sp, #8]
  40b42c:	9501      	str	r5, [sp, #4]
  40b42e:	9100      	str	r1, [sp, #0]
  40b430:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b432:	f001 faa1 	bl	40c978 <_dtoa_r>
  40b436:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b438:	2b67      	cmp	r3, #103	; 0x67
  40b43a:	4606      	mov	r6, r0
  40b43c:	f040 81e0 	bne.w	40b800 <_svfprintf_r+0x1288>
  40b440:	f01b 0f01 	tst.w	fp, #1
  40b444:	f000 8246 	beq.w	40b8d4 <_svfprintf_r+0x135c>
  40b448:	1974      	adds	r4, r6, r5
  40b44a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40b44c:	9808      	ldr	r0, [sp, #32]
  40b44e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40b450:	4639      	mov	r1, r7
  40b452:	f004 fecb 	bl	4101ec <__aeabi_dcmpeq>
  40b456:	2800      	cmp	r0, #0
  40b458:	f040 8165 	bne.w	40b726 <_svfprintf_r+0x11ae>
  40b45c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40b45e:	42a3      	cmp	r3, r4
  40b460:	d206      	bcs.n	40b470 <_svfprintf_r+0xef8>
  40b462:	2130      	movs	r1, #48	; 0x30
  40b464:	1c5a      	adds	r2, r3, #1
  40b466:	9223      	str	r2, [sp, #140]	; 0x8c
  40b468:	7019      	strb	r1, [r3, #0]
  40b46a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40b46c:	429c      	cmp	r4, r3
  40b46e:	d8f9      	bhi.n	40b464 <_svfprintf_r+0xeec>
  40b470:	1b9b      	subs	r3, r3, r6
  40b472:	9313      	str	r3, [sp, #76]	; 0x4c
  40b474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b476:	2b47      	cmp	r3, #71	; 0x47
  40b478:	f000 80e9 	beq.w	40b64e <_svfprintf_r+0x10d6>
  40b47c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b47e:	2b65      	cmp	r3, #101	; 0x65
  40b480:	f340 81cd 	ble.w	40b81e <_svfprintf_r+0x12a6>
  40b484:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b486:	2b66      	cmp	r3, #102	; 0x66
  40b488:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40b48a:	9312      	str	r3, [sp, #72]	; 0x48
  40b48c:	f000 819e 	beq.w	40b7cc <_svfprintf_r+0x1254>
  40b490:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b492:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40b494:	4619      	mov	r1, r3
  40b496:	4291      	cmp	r1, r2
  40b498:	f300 818a 	bgt.w	40b7b0 <_svfprintf_r+0x1238>
  40b49c:	f01b 0f01 	tst.w	fp, #1
  40b4a0:	f040 8213 	bne.w	40b8ca <_svfprintf_r+0x1352>
  40b4a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40b4a8:	9308      	str	r3, [sp, #32]
  40b4aa:	2367      	movs	r3, #103	; 0x67
  40b4ac:	920e      	str	r2, [sp, #56]	; 0x38
  40b4ae:	9311      	str	r3, [sp, #68]	; 0x44
  40b4b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b4b2:	2b00      	cmp	r3, #0
  40b4b4:	f040 80c4 	bne.w	40b640 <_svfprintf_r+0x10c8>
  40b4b8:	930a      	str	r3, [sp, #40]	; 0x28
  40b4ba:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40b4be:	f7ff b973 	b.w	40a7a8 <_svfprintf_r+0x230>
  40b4c2:	4635      	mov	r5, r6
  40b4c4:	460c      	mov	r4, r1
  40b4c6:	4646      	mov	r6, r8
  40b4c8:	4690      	mov	r8, r2
  40b4ca:	3301      	adds	r3, #1
  40b4cc:	443c      	add	r4, r7
  40b4ce:	2b07      	cmp	r3, #7
  40b4d0:	9427      	str	r4, [sp, #156]	; 0x9c
  40b4d2:	9326      	str	r3, [sp, #152]	; 0x98
  40b4d4:	e888 00a0 	stmia.w	r8, {r5, r7}
  40b4d8:	f73f aed1 	bgt.w	40b27e <_svfprintf_r+0xd06>
  40b4dc:	f108 0808 	add.w	r8, r8, #8
  40b4e0:	e6d7      	b.n	40b292 <_svfprintf_r+0xd1a>
  40b4e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b4e4:	6813      	ldr	r3, [r2, #0]
  40b4e6:	3204      	adds	r2, #4
  40b4e8:	920f      	str	r2, [sp, #60]	; 0x3c
  40b4ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b4ec:	601a      	str	r2, [r3, #0]
  40b4ee:	f7ff b86a 	b.w	40a5c6 <_svfprintf_r+0x4e>
  40b4f2:	aa25      	add	r2, sp, #148	; 0x94
  40b4f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b4f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b4f8:	f003 ffdc 	bl	40f4b4 <__ssprint_r>
  40b4fc:	2800      	cmp	r0, #0
  40b4fe:	f47f a90d 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b502:	46c8      	mov	r8, r9
  40b504:	e48d      	b.n	40ae22 <_svfprintf_r+0x8aa>
  40b506:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b508:	4a27      	ldr	r2, [pc, #156]	; (40b5a8 <_svfprintf_r+0x1030>)
  40b50a:	f8c8 2000 	str.w	r2, [r8]
  40b50e:	3301      	adds	r3, #1
  40b510:	3401      	adds	r4, #1
  40b512:	2201      	movs	r2, #1
  40b514:	2b07      	cmp	r3, #7
  40b516:	9427      	str	r4, [sp, #156]	; 0x9c
  40b518:	9326      	str	r3, [sp, #152]	; 0x98
  40b51a:	f8c8 2004 	str.w	r2, [r8, #4]
  40b51e:	dc72      	bgt.n	40b606 <_svfprintf_r+0x108e>
  40b520:	f108 0808 	add.w	r8, r8, #8
  40b524:	b929      	cbnz	r1, 40b532 <_svfprintf_r+0xfba>
  40b526:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b528:	b91b      	cbnz	r3, 40b532 <_svfprintf_r+0xfba>
  40b52a:	9b07      	ldr	r3, [sp, #28]
  40b52c:	07d8      	lsls	r0, r3, #31
  40b52e:	f57f aa03 	bpl.w	40a938 <_svfprintf_r+0x3c0>
  40b532:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b534:	9819      	ldr	r0, [sp, #100]	; 0x64
  40b536:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40b538:	f8c8 2000 	str.w	r2, [r8]
  40b53c:	3301      	adds	r3, #1
  40b53e:	4602      	mov	r2, r0
  40b540:	4422      	add	r2, r4
  40b542:	2b07      	cmp	r3, #7
  40b544:	9227      	str	r2, [sp, #156]	; 0x9c
  40b546:	f8c8 0004 	str.w	r0, [r8, #4]
  40b54a:	9326      	str	r3, [sp, #152]	; 0x98
  40b54c:	f300 818d 	bgt.w	40b86a <_svfprintf_r+0x12f2>
  40b550:	f108 0808 	add.w	r8, r8, #8
  40b554:	2900      	cmp	r1, #0
  40b556:	f2c0 8165 	blt.w	40b824 <_svfprintf_r+0x12ac>
  40b55a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40b55c:	f8c8 6000 	str.w	r6, [r8]
  40b560:	3301      	adds	r3, #1
  40b562:	188c      	adds	r4, r1, r2
  40b564:	2b07      	cmp	r3, #7
  40b566:	9427      	str	r4, [sp, #156]	; 0x9c
  40b568:	9326      	str	r3, [sp, #152]	; 0x98
  40b56a:	f8c8 1004 	str.w	r1, [r8, #4]
  40b56e:	f77f a9e1 	ble.w	40a934 <_svfprintf_r+0x3bc>
  40b572:	e52c      	b.n	40afce <_svfprintf_r+0xa56>
  40b574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b576:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b578:	6813      	ldr	r3, [r2, #0]
  40b57a:	17cd      	asrs	r5, r1, #31
  40b57c:	4608      	mov	r0, r1
  40b57e:	3204      	adds	r2, #4
  40b580:	4629      	mov	r1, r5
  40b582:	920f      	str	r2, [sp, #60]	; 0x3c
  40b584:	e9c3 0100 	strd	r0, r1, [r3]
  40b588:	f7ff b81d 	b.w	40a5c6 <_svfprintf_r+0x4e>
  40b58c:	aa25      	add	r2, sp, #148	; 0x94
  40b58e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b590:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b592:	f003 ff8f 	bl	40f4b4 <__ssprint_r>
  40b596:	2800      	cmp	r0, #0
  40b598:	f47f a8c0 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b59c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b59e:	46c8      	mov	r8, r9
  40b5a0:	e458      	b.n	40ae54 <_svfprintf_r+0x8dc>
  40b5a2:	bf00      	nop
  40b5a4:	00411d48 	.word	0x00411d48
  40b5a8:	00411d34 	.word	0x00411d34
  40b5ac:	2140      	movs	r1, #64	; 0x40
  40b5ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b5b0:	f002 fe5a 	bl	40e268 <_malloc_r>
  40b5b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b5b6:	6010      	str	r0, [r2, #0]
  40b5b8:	6110      	str	r0, [r2, #16]
  40b5ba:	2800      	cmp	r0, #0
  40b5bc:	f000 81f2 	beq.w	40b9a4 <_svfprintf_r+0x142c>
  40b5c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b5c2:	2340      	movs	r3, #64	; 0x40
  40b5c4:	6153      	str	r3, [r2, #20]
  40b5c6:	f7fe bfee 	b.w	40a5a6 <_svfprintf_r+0x2e>
  40b5ca:	a823      	add	r0, sp, #140	; 0x8c
  40b5cc:	a920      	add	r1, sp, #128	; 0x80
  40b5ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40b5d0:	9004      	str	r0, [sp, #16]
  40b5d2:	9103      	str	r1, [sp, #12]
  40b5d4:	a81f      	add	r0, sp, #124	; 0x7c
  40b5d6:	2103      	movs	r1, #3
  40b5d8:	9002      	str	r0, [sp, #8]
  40b5da:	9a08      	ldr	r2, [sp, #32]
  40b5dc:	9401      	str	r4, [sp, #4]
  40b5de:	463b      	mov	r3, r7
  40b5e0:	9100      	str	r1, [sp, #0]
  40b5e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b5e4:	f001 f9c8 	bl	40c978 <_dtoa_r>
  40b5e8:	4625      	mov	r5, r4
  40b5ea:	4606      	mov	r6, r0
  40b5ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b5ee:	2b46      	cmp	r3, #70	; 0x46
  40b5f0:	eb06 0405 	add.w	r4, r6, r5
  40b5f4:	f47f af29 	bne.w	40b44a <_svfprintf_r+0xed2>
  40b5f8:	7833      	ldrb	r3, [r6, #0]
  40b5fa:	2b30      	cmp	r3, #48	; 0x30
  40b5fc:	f000 8178 	beq.w	40b8f0 <_svfprintf_r+0x1378>
  40b600:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40b602:	442c      	add	r4, r5
  40b604:	e721      	b.n	40b44a <_svfprintf_r+0xed2>
  40b606:	aa25      	add	r2, sp, #148	; 0x94
  40b608:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b60a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b60c:	f003 ff52 	bl	40f4b4 <__ssprint_r>
  40b610:	2800      	cmp	r0, #0
  40b612:	f47f a883 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b616:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40b618:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b61a:	46c8      	mov	r8, r9
  40b61c:	e782      	b.n	40b524 <_svfprintf_r+0xfac>
  40b61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b620:	2b00      	cmp	r3, #0
  40b622:	bf08      	it	eq
  40b624:	2301      	moveq	r3, #1
  40b626:	930a      	str	r3, [sp, #40]	; 0x28
  40b628:	e6db      	b.n	40b3e2 <_svfprintf_r+0xe6a>
  40b62a:	4630      	mov	r0, r6
  40b62c:	940a      	str	r4, [sp, #40]	; 0x28
  40b62e:	f7fe fc27 	bl	409e80 <strlen>
  40b632:	950f      	str	r5, [sp, #60]	; 0x3c
  40b634:	900e      	str	r0, [sp, #56]	; 0x38
  40b636:	f8cd b01c 	str.w	fp, [sp, #28]
  40b63a:	4603      	mov	r3, r0
  40b63c:	f7ff b9f9 	b.w	40aa32 <_svfprintf_r+0x4ba>
  40b640:	272d      	movs	r7, #45	; 0x2d
  40b642:	2300      	movs	r3, #0
  40b644:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40b648:	930a      	str	r3, [sp, #40]	; 0x28
  40b64a:	f7ff b8ae 	b.w	40a7aa <_svfprintf_r+0x232>
  40b64e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40b650:	9312      	str	r3, [sp, #72]	; 0x48
  40b652:	461a      	mov	r2, r3
  40b654:	3303      	adds	r3, #3
  40b656:	db04      	blt.n	40b662 <_svfprintf_r+0x10ea>
  40b658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b65a:	4619      	mov	r1, r3
  40b65c:	4291      	cmp	r1, r2
  40b65e:	f6bf af17 	bge.w	40b490 <_svfprintf_r+0xf18>
  40b662:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b664:	3b02      	subs	r3, #2
  40b666:	9311      	str	r3, [sp, #68]	; 0x44
  40b668:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40b66c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40b670:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b672:	3b01      	subs	r3, #1
  40b674:	2b00      	cmp	r3, #0
  40b676:	931f      	str	r3, [sp, #124]	; 0x7c
  40b678:	bfbd      	ittte	lt
  40b67a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40b67c:	f1c3 0301 	rsblt	r3, r3, #1
  40b680:	222d      	movlt	r2, #45	; 0x2d
  40b682:	222b      	movge	r2, #43	; 0x2b
  40b684:	2b09      	cmp	r3, #9
  40b686:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40b68a:	f340 8116 	ble.w	40b8ba <_svfprintf_r+0x1342>
  40b68e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40b692:	4620      	mov	r0, r4
  40b694:	4dab      	ldr	r5, [pc, #684]	; (40b944 <_svfprintf_r+0x13cc>)
  40b696:	e000      	b.n	40b69a <_svfprintf_r+0x1122>
  40b698:	4610      	mov	r0, r2
  40b69a:	fb85 1203 	smull	r1, r2, r5, r3
  40b69e:	17d9      	asrs	r1, r3, #31
  40b6a0:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40b6a4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40b6a8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40b6ac:	3230      	adds	r2, #48	; 0x30
  40b6ae:	2909      	cmp	r1, #9
  40b6b0:	f800 2c01 	strb.w	r2, [r0, #-1]
  40b6b4:	460b      	mov	r3, r1
  40b6b6:	f100 32ff 	add.w	r2, r0, #4294967295
  40b6ba:	dced      	bgt.n	40b698 <_svfprintf_r+0x1120>
  40b6bc:	3330      	adds	r3, #48	; 0x30
  40b6be:	3802      	subs	r0, #2
  40b6c0:	b2d9      	uxtb	r1, r3
  40b6c2:	4284      	cmp	r4, r0
  40b6c4:	f802 1c01 	strb.w	r1, [r2, #-1]
  40b6c8:	f240 8165 	bls.w	40b996 <_svfprintf_r+0x141e>
  40b6cc:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40b6d0:	4613      	mov	r3, r2
  40b6d2:	e001      	b.n	40b6d8 <_svfprintf_r+0x1160>
  40b6d4:	f813 1b01 	ldrb.w	r1, [r3], #1
  40b6d8:	f800 1b01 	strb.w	r1, [r0], #1
  40b6dc:	42a3      	cmp	r3, r4
  40b6de:	d1f9      	bne.n	40b6d4 <_svfprintf_r+0x115c>
  40b6e0:	3301      	adds	r3, #1
  40b6e2:	1a9b      	subs	r3, r3, r2
  40b6e4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40b6e8:	4413      	add	r3, r2
  40b6ea:	aa21      	add	r2, sp, #132	; 0x84
  40b6ec:	1a9b      	subs	r3, r3, r2
  40b6ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40b6f0:	931b      	str	r3, [sp, #108]	; 0x6c
  40b6f2:	2a01      	cmp	r2, #1
  40b6f4:	4413      	add	r3, r2
  40b6f6:	930e      	str	r3, [sp, #56]	; 0x38
  40b6f8:	f340 8119 	ble.w	40b92e <_svfprintf_r+0x13b6>
  40b6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b6fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40b700:	4413      	add	r3, r2
  40b702:	930e      	str	r3, [sp, #56]	; 0x38
  40b704:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b708:	9308      	str	r3, [sp, #32]
  40b70a:	2300      	movs	r3, #0
  40b70c:	9312      	str	r3, [sp, #72]	; 0x48
  40b70e:	e6cf      	b.n	40b4b0 <_svfprintf_r+0xf38>
  40b710:	aa25      	add	r2, sp, #148	; 0x94
  40b712:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b714:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b716:	f003 fecd 	bl	40f4b4 <__ssprint_r>
  40b71a:	2800      	cmp	r0, #0
  40b71c:	f47e affe 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b720:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b722:	46c8      	mov	r8, r9
  40b724:	e4d7      	b.n	40b0d6 <_svfprintf_r+0xb5e>
  40b726:	4623      	mov	r3, r4
  40b728:	e6a2      	b.n	40b470 <_svfprintf_r+0xef8>
  40b72a:	aa25      	add	r2, sp, #148	; 0x94
  40b72c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b72e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b730:	f003 fec0 	bl	40f4b4 <__ssprint_r>
  40b734:	2800      	cmp	r0, #0
  40b736:	f47e aff1 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b73a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40b73c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b73e:	46c8      	mov	r8, r9
  40b740:	e5ae      	b.n	40b2a0 <_svfprintf_r+0xd28>
  40b742:	aa25      	add	r2, sp, #148	; 0x94
  40b744:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b746:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b748:	f003 feb4 	bl	40f4b4 <__ssprint_r>
  40b74c:	2800      	cmp	r0, #0
  40b74e:	f47e afe5 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b752:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40b754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b756:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b758:	1a9a      	subs	r2, r3, r2
  40b75a:	46c8      	mov	r8, r9
  40b75c:	e5b8      	b.n	40b2d0 <_svfprintf_r+0xd58>
  40b75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b760:	9612      	str	r6, [sp, #72]	; 0x48
  40b762:	2b06      	cmp	r3, #6
  40b764:	bf28      	it	cs
  40b766:	2306      	movcs	r3, #6
  40b768:	960a      	str	r6, [sp, #40]	; 0x28
  40b76a:	4637      	mov	r7, r6
  40b76c:	9308      	str	r3, [sp, #32]
  40b76e:	950f      	str	r5, [sp, #60]	; 0x3c
  40b770:	f8cd b01c 	str.w	fp, [sp, #28]
  40b774:	930e      	str	r3, [sp, #56]	; 0x38
  40b776:	4e74      	ldr	r6, [pc, #464]	; (40b948 <_svfprintf_r+0x13d0>)
  40b778:	f7ff b816 	b.w	40a7a8 <_svfprintf_r+0x230>
  40b77c:	a823      	add	r0, sp, #140	; 0x8c
  40b77e:	a920      	add	r1, sp, #128	; 0x80
  40b780:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b782:	9004      	str	r0, [sp, #16]
  40b784:	9103      	str	r1, [sp, #12]
  40b786:	a81f      	add	r0, sp, #124	; 0x7c
  40b788:	2103      	movs	r1, #3
  40b78a:	9002      	str	r0, [sp, #8]
  40b78c:	9a08      	ldr	r2, [sp, #32]
  40b78e:	9501      	str	r5, [sp, #4]
  40b790:	463b      	mov	r3, r7
  40b792:	9100      	str	r1, [sp, #0]
  40b794:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b796:	f001 f8ef 	bl	40c978 <_dtoa_r>
  40b79a:	4606      	mov	r6, r0
  40b79c:	1944      	adds	r4, r0, r5
  40b79e:	e72b      	b.n	40b5f8 <_svfprintf_r+0x1080>
  40b7a0:	2306      	movs	r3, #6
  40b7a2:	930a      	str	r3, [sp, #40]	; 0x28
  40b7a4:	e61d      	b.n	40b3e2 <_svfprintf_r+0xe6a>
  40b7a6:	272d      	movs	r7, #45	; 0x2d
  40b7a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40b7ac:	f7ff bacd 	b.w	40ad4a <_svfprintf_r+0x7d2>
  40b7b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40b7b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b7b4:	4413      	add	r3, r2
  40b7b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40b7b8:	930e      	str	r3, [sp, #56]	; 0x38
  40b7ba:	2a00      	cmp	r2, #0
  40b7bc:	f340 80b0 	ble.w	40b920 <_svfprintf_r+0x13a8>
  40b7c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b7c4:	9308      	str	r3, [sp, #32]
  40b7c6:	2367      	movs	r3, #103	; 0x67
  40b7c8:	9311      	str	r3, [sp, #68]	; 0x44
  40b7ca:	e671      	b.n	40b4b0 <_svfprintf_r+0xf38>
  40b7cc:	2b00      	cmp	r3, #0
  40b7ce:	f340 80c3 	ble.w	40b958 <_svfprintf_r+0x13e0>
  40b7d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b7d4:	2a00      	cmp	r2, #0
  40b7d6:	f040 8099 	bne.w	40b90c <_svfprintf_r+0x1394>
  40b7da:	f01b 0f01 	tst.w	fp, #1
  40b7de:	f040 8095 	bne.w	40b90c <_svfprintf_r+0x1394>
  40b7e2:	9308      	str	r3, [sp, #32]
  40b7e4:	930e      	str	r3, [sp, #56]	; 0x38
  40b7e6:	e663      	b.n	40b4b0 <_svfprintf_r+0xf38>
  40b7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b7ea:	9308      	str	r3, [sp, #32]
  40b7ec:	930e      	str	r3, [sp, #56]	; 0x38
  40b7ee:	900a      	str	r0, [sp, #40]	; 0x28
  40b7f0:	950f      	str	r5, [sp, #60]	; 0x3c
  40b7f2:	f8cd b01c 	str.w	fp, [sp, #28]
  40b7f6:	9012      	str	r0, [sp, #72]	; 0x48
  40b7f8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40b7fc:	f7fe bfd4 	b.w	40a7a8 <_svfprintf_r+0x230>
  40b800:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b802:	2b47      	cmp	r3, #71	; 0x47
  40b804:	f47f ae20 	bne.w	40b448 <_svfprintf_r+0xed0>
  40b808:	f01b 0f01 	tst.w	fp, #1
  40b80c:	f47f aeee 	bne.w	40b5ec <_svfprintf_r+0x1074>
  40b810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40b812:	1b9b      	subs	r3, r3, r6
  40b814:	9313      	str	r3, [sp, #76]	; 0x4c
  40b816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b818:	2b47      	cmp	r3, #71	; 0x47
  40b81a:	f43f af18 	beq.w	40b64e <_svfprintf_r+0x10d6>
  40b81e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40b820:	9312      	str	r3, [sp, #72]	; 0x48
  40b822:	e721      	b.n	40b668 <_svfprintf_r+0x10f0>
  40b824:	424f      	negs	r7, r1
  40b826:	3110      	adds	r1, #16
  40b828:	4d48      	ldr	r5, [pc, #288]	; (40b94c <_svfprintf_r+0x13d4>)
  40b82a:	da2f      	bge.n	40b88c <_svfprintf_r+0x1314>
  40b82c:	2410      	movs	r4, #16
  40b82e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b832:	e004      	b.n	40b83e <_svfprintf_r+0x12c6>
  40b834:	f108 0808 	add.w	r8, r8, #8
  40b838:	3f10      	subs	r7, #16
  40b83a:	2f10      	cmp	r7, #16
  40b83c:	dd26      	ble.n	40b88c <_svfprintf_r+0x1314>
  40b83e:	3301      	adds	r3, #1
  40b840:	3210      	adds	r2, #16
  40b842:	2b07      	cmp	r3, #7
  40b844:	9227      	str	r2, [sp, #156]	; 0x9c
  40b846:	9326      	str	r3, [sp, #152]	; 0x98
  40b848:	f8c8 5000 	str.w	r5, [r8]
  40b84c:	f8c8 4004 	str.w	r4, [r8, #4]
  40b850:	ddf0      	ble.n	40b834 <_svfprintf_r+0x12bc>
  40b852:	aa25      	add	r2, sp, #148	; 0x94
  40b854:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b856:	4658      	mov	r0, fp
  40b858:	f003 fe2c 	bl	40f4b4 <__ssprint_r>
  40b85c:	2800      	cmp	r0, #0
  40b85e:	f47e af5d 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b862:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b864:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b866:	46c8      	mov	r8, r9
  40b868:	e7e6      	b.n	40b838 <_svfprintf_r+0x12c0>
  40b86a:	aa25      	add	r2, sp, #148	; 0x94
  40b86c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b86e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b870:	f003 fe20 	bl	40f4b4 <__ssprint_r>
  40b874:	2800      	cmp	r0, #0
  40b876:	f47e af51 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b87a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40b87c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b87e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b880:	46c8      	mov	r8, r9
  40b882:	e667      	b.n	40b554 <_svfprintf_r+0xfdc>
  40b884:	2000      	movs	r0, #0
  40b886:	900a      	str	r0, [sp, #40]	; 0x28
  40b888:	f7fe bed0 	b.w	40a62c <_svfprintf_r+0xb4>
  40b88c:	3301      	adds	r3, #1
  40b88e:	443a      	add	r2, r7
  40b890:	2b07      	cmp	r3, #7
  40b892:	e888 00a0 	stmia.w	r8, {r5, r7}
  40b896:	9227      	str	r2, [sp, #156]	; 0x9c
  40b898:	9326      	str	r3, [sp, #152]	; 0x98
  40b89a:	f108 0808 	add.w	r8, r8, #8
  40b89e:	f77f ae5c 	ble.w	40b55a <_svfprintf_r+0xfe2>
  40b8a2:	aa25      	add	r2, sp, #148	; 0x94
  40b8a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b8a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b8a8:	f003 fe04 	bl	40f4b4 <__ssprint_r>
  40b8ac:	2800      	cmp	r0, #0
  40b8ae:	f47e af35 	bne.w	40a71c <_svfprintf_r+0x1a4>
  40b8b2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b8b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b8b6:	46c8      	mov	r8, r9
  40b8b8:	e64f      	b.n	40b55a <_svfprintf_r+0xfe2>
  40b8ba:	3330      	adds	r3, #48	; 0x30
  40b8bc:	2230      	movs	r2, #48	; 0x30
  40b8be:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40b8c2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40b8c6:	ab22      	add	r3, sp, #136	; 0x88
  40b8c8:	e70f      	b.n	40b6ea <_svfprintf_r+0x1172>
  40b8ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b8cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40b8ce:	4413      	add	r3, r2
  40b8d0:	930e      	str	r3, [sp, #56]	; 0x38
  40b8d2:	e775      	b.n	40b7c0 <_svfprintf_r+0x1248>
  40b8d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40b8d6:	e5cb      	b.n	40b470 <_svfprintf_r+0xef8>
  40b8d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b8da:	4e1d      	ldr	r6, [pc, #116]	; (40b950 <_svfprintf_r+0x13d8>)
  40b8dc:	2b00      	cmp	r3, #0
  40b8de:	bfb6      	itet	lt
  40b8e0:	272d      	movlt	r7, #45	; 0x2d
  40b8e2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40b8e6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40b8ea:	4b1a      	ldr	r3, [pc, #104]	; (40b954 <_svfprintf_r+0x13dc>)
  40b8ec:	f7ff ba2f 	b.w	40ad4e <_svfprintf_r+0x7d6>
  40b8f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40b8f2:	9808      	ldr	r0, [sp, #32]
  40b8f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40b8f6:	4639      	mov	r1, r7
  40b8f8:	f004 fc78 	bl	4101ec <__aeabi_dcmpeq>
  40b8fc:	2800      	cmp	r0, #0
  40b8fe:	f47f ae7f 	bne.w	40b600 <_svfprintf_r+0x1088>
  40b902:	f1c5 0501 	rsb	r5, r5, #1
  40b906:	951f      	str	r5, [sp, #124]	; 0x7c
  40b908:	442c      	add	r4, r5
  40b90a:	e59e      	b.n	40b44a <_svfprintf_r+0xed2>
  40b90c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b90e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40b910:	4413      	add	r3, r2
  40b912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b914:	441a      	add	r2, r3
  40b916:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40b91a:	920e      	str	r2, [sp, #56]	; 0x38
  40b91c:	9308      	str	r3, [sp, #32]
  40b91e:	e5c7      	b.n	40b4b0 <_svfprintf_r+0xf38>
  40b920:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40b924:	f1c3 0301 	rsb	r3, r3, #1
  40b928:	441a      	add	r2, r3
  40b92a:	4613      	mov	r3, r2
  40b92c:	e7d0      	b.n	40b8d0 <_svfprintf_r+0x1358>
  40b92e:	f01b 0301 	ands.w	r3, fp, #1
  40b932:	9312      	str	r3, [sp, #72]	; 0x48
  40b934:	f47f aee2 	bne.w	40b6fc <_svfprintf_r+0x1184>
  40b938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b93a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b93e:	9308      	str	r3, [sp, #32]
  40b940:	e5b6      	b.n	40b4b0 <_svfprintf_r+0xf38>
  40b942:	bf00      	nop
  40b944:	66666667 	.word	0x66666667
  40b948:	00411d2c 	.word	0x00411d2c
  40b94c:	00411d48 	.word	0x00411d48
  40b950:	00411d00 	.word	0x00411d00
  40b954:	00411cfc 	.word	0x00411cfc
  40b958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b95a:	b913      	cbnz	r3, 40b962 <_svfprintf_r+0x13ea>
  40b95c:	f01b 0f01 	tst.w	fp, #1
  40b960:	d002      	beq.n	40b968 <_svfprintf_r+0x13f0>
  40b962:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40b964:	3301      	adds	r3, #1
  40b966:	e7d4      	b.n	40b912 <_svfprintf_r+0x139a>
  40b968:	2301      	movs	r3, #1
  40b96a:	e73a      	b.n	40b7e2 <_svfprintf_r+0x126a>
  40b96c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40b96e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40b972:	6828      	ldr	r0, [r5, #0]
  40b974:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40b978:	900a      	str	r0, [sp, #40]	; 0x28
  40b97a:	4628      	mov	r0, r5
  40b97c:	3004      	adds	r0, #4
  40b97e:	46a2      	mov	sl, r4
  40b980:	900f      	str	r0, [sp, #60]	; 0x3c
  40b982:	f7fe be51 	b.w	40a628 <_svfprintf_r+0xb0>
  40b986:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b98a:	f7ff b867 	b.w	40aa5c <_svfprintf_r+0x4e4>
  40b98e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b992:	f7ff ba15 	b.w	40adc0 <_svfprintf_r+0x848>
  40b996:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40b99a:	e6a6      	b.n	40b6ea <_svfprintf_r+0x1172>
  40b99c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b9a0:	f7ff b8eb 	b.w	40ab7a <_svfprintf_r+0x602>
  40b9a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b9a6:	230c      	movs	r3, #12
  40b9a8:	6013      	str	r3, [r2, #0]
  40b9aa:	f04f 33ff 	mov.w	r3, #4294967295
  40b9ae:	9309      	str	r3, [sp, #36]	; 0x24
  40b9b0:	f7fe bebd 	b.w	40a72e <_svfprintf_r+0x1b6>
  40b9b4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b9b8:	f7ff b99a 	b.w	40acf0 <_svfprintf_r+0x778>
  40b9bc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b9c0:	f7ff b976 	b.w	40acb0 <_svfprintf_r+0x738>
  40b9c4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b9c8:	f7ff b959 	b.w	40ac7e <_svfprintf_r+0x706>
  40b9cc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b9d0:	f7ff b912 	b.w	40abf8 <_svfprintf_r+0x680>

0040b9d4 <__sprint_r.part.0>:
  40b9d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b9d8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40b9da:	049c      	lsls	r4, r3, #18
  40b9dc:	4693      	mov	fp, r2
  40b9de:	d52f      	bpl.n	40ba40 <__sprint_r.part.0+0x6c>
  40b9e0:	6893      	ldr	r3, [r2, #8]
  40b9e2:	6812      	ldr	r2, [r2, #0]
  40b9e4:	b353      	cbz	r3, 40ba3c <__sprint_r.part.0+0x68>
  40b9e6:	460e      	mov	r6, r1
  40b9e8:	4607      	mov	r7, r0
  40b9ea:	f102 0908 	add.w	r9, r2, #8
  40b9ee:	e919 0420 	ldmdb	r9, {r5, sl}
  40b9f2:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40b9f6:	d017      	beq.n	40ba28 <__sprint_r.part.0+0x54>
  40b9f8:	3d04      	subs	r5, #4
  40b9fa:	2400      	movs	r4, #0
  40b9fc:	e001      	b.n	40ba02 <__sprint_r.part.0+0x2e>
  40b9fe:	45a0      	cmp	r8, r4
  40ba00:	d010      	beq.n	40ba24 <__sprint_r.part.0+0x50>
  40ba02:	4632      	mov	r2, r6
  40ba04:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40ba08:	4638      	mov	r0, r7
  40ba0a:	f002 f879 	bl	40db00 <_fputwc_r>
  40ba0e:	1c43      	adds	r3, r0, #1
  40ba10:	f104 0401 	add.w	r4, r4, #1
  40ba14:	d1f3      	bne.n	40b9fe <__sprint_r.part.0+0x2a>
  40ba16:	2300      	movs	r3, #0
  40ba18:	f8cb 3008 	str.w	r3, [fp, #8]
  40ba1c:	f8cb 3004 	str.w	r3, [fp, #4]
  40ba20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba24:	f8db 3008 	ldr.w	r3, [fp, #8]
  40ba28:	f02a 0a03 	bic.w	sl, sl, #3
  40ba2c:	eba3 030a 	sub.w	r3, r3, sl
  40ba30:	f8cb 3008 	str.w	r3, [fp, #8]
  40ba34:	f109 0908 	add.w	r9, r9, #8
  40ba38:	2b00      	cmp	r3, #0
  40ba3a:	d1d8      	bne.n	40b9ee <__sprint_r.part.0+0x1a>
  40ba3c:	2000      	movs	r0, #0
  40ba3e:	e7ea      	b.n	40ba16 <__sprint_r.part.0+0x42>
  40ba40:	f002 f9c8 	bl	40ddd4 <__sfvwrite_r>
  40ba44:	2300      	movs	r3, #0
  40ba46:	f8cb 3008 	str.w	r3, [fp, #8]
  40ba4a:	f8cb 3004 	str.w	r3, [fp, #4]
  40ba4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba52:	bf00      	nop

0040ba54 <_vfiprintf_r>:
  40ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ba58:	b0ad      	sub	sp, #180	; 0xb4
  40ba5a:	461d      	mov	r5, r3
  40ba5c:	468b      	mov	fp, r1
  40ba5e:	4690      	mov	r8, r2
  40ba60:	9307      	str	r3, [sp, #28]
  40ba62:	9006      	str	r0, [sp, #24]
  40ba64:	b118      	cbz	r0, 40ba6e <_vfiprintf_r+0x1a>
  40ba66:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ba68:	2b00      	cmp	r3, #0
  40ba6a:	f000 80f3 	beq.w	40bc54 <_vfiprintf_r+0x200>
  40ba6e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40ba72:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40ba76:	07df      	lsls	r7, r3, #31
  40ba78:	b281      	uxth	r1, r0
  40ba7a:	d402      	bmi.n	40ba82 <_vfiprintf_r+0x2e>
  40ba7c:	058e      	lsls	r6, r1, #22
  40ba7e:	f140 80fc 	bpl.w	40bc7a <_vfiprintf_r+0x226>
  40ba82:	048c      	lsls	r4, r1, #18
  40ba84:	d40a      	bmi.n	40ba9c <_vfiprintf_r+0x48>
  40ba86:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40ba8a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40ba8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40ba92:	f8ab 100c 	strh.w	r1, [fp, #12]
  40ba96:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40ba9a:	b289      	uxth	r1, r1
  40ba9c:	0708      	lsls	r0, r1, #28
  40ba9e:	f140 80b3 	bpl.w	40bc08 <_vfiprintf_r+0x1b4>
  40baa2:	f8db 3010 	ldr.w	r3, [fp, #16]
  40baa6:	2b00      	cmp	r3, #0
  40baa8:	f000 80ae 	beq.w	40bc08 <_vfiprintf_r+0x1b4>
  40baac:	f001 031a 	and.w	r3, r1, #26
  40bab0:	2b0a      	cmp	r3, #10
  40bab2:	f000 80b5 	beq.w	40bc20 <_vfiprintf_r+0x1cc>
  40bab6:	2300      	movs	r3, #0
  40bab8:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40babc:	930b      	str	r3, [sp, #44]	; 0x2c
  40babe:	9311      	str	r3, [sp, #68]	; 0x44
  40bac0:	9310      	str	r3, [sp, #64]	; 0x40
  40bac2:	9303      	str	r3, [sp, #12]
  40bac4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40bac8:	46ca      	mov	sl, r9
  40baca:	f8cd b010 	str.w	fp, [sp, #16]
  40bace:	f898 3000 	ldrb.w	r3, [r8]
  40bad2:	4644      	mov	r4, r8
  40bad4:	b1fb      	cbz	r3, 40bb16 <_vfiprintf_r+0xc2>
  40bad6:	2b25      	cmp	r3, #37	; 0x25
  40bad8:	d102      	bne.n	40bae0 <_vfiprintf_r+0x8c>
  40bada:	e01c      	b.n	40bb16 <_vfiprintf_r+0xc2>
  40badc:	2b25      	cmp	r3, #37	; 0x25
  40bade:	d003      	beq.n	40bae8 <_vfiprintf_r+0x94>
  40bae0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40bae4:	2b00      	cmp	r3, #0
  40bae6:	d1f9      	bne.n	40badc <_vfiprintf_r+0x88>
  40bae8:	eba4 0508 	sub.w	r5, r4, r8
  40baec:	b19d      	cbz	r5, 40bb16 <_vfiprintf_r+0xc2>
  40baee:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40baf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40baf2:	f8ca 8000 	str.w	r8, [sl]
  40baf6:	3301      	adds	r3, #1
  40baf8:	442a      	add	r2, r5
  40bafa:	2b07      	cmp	r3, #7
  40bafc:	f8ca 5004 	str.w	r5, [sl, #4]
  40bb00:	9211      	str	r2, [sp, #68]	; 0x44
  40bb02:	9310      	str	r3, [sp, #64]	; 0x40
  40bb04:	dd7a      	ble.n	40bbfc <_vfiprintf_r+0x1a8>
  40bb06:	2a00      	cmp	r2, #0
  40bb08:	f040 84b0 	bne.w	40c46c <_vfiprintf_r+0xa18>
  40bb0c:	9b03      	ldr	r3, [sp, #12]
  40bb0e:	9210      	str	r2, [sp, #64]	; 0x40
  40bb10:	442b      	add	r3, r5
  40bb12:	46ca      	mov	sl, r9
  40bb14:	9303      	str	r3, [sp, #12]
  40bb16:	7823      	ldrb	r3, [r4, #0]
  40bb18:	2b00      	cmp	r3, #0
  40bb1a:	f000 83e0 	beq.w	40c2de <_vfiprintf_r+0x88a>
  40bb1e:	2000      	movs	r0, #0
  40bb20:	f04f 0300 	mov.w	r3, #0
  40bb24:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40bb28:	f104 0801 	add.w	r8, r4, #1
  40bb2c:	7862      	ldrb	r2, [r4, #1]
  40bb2e:	4605      	mov	r5, r0
  40bb30:	4606      	mov	r6, r0
  40bb32:	4603      	mov	r3, r0
  40bb34:	f04f 34ff 	mov.w	r4, #4294967295
  40bb38:	f108 0801 	add.w	r8, r8, #1
  40bb3c:	f1a2 0120 	sub.w	r1, r2, #32
  40bb40:	2958      	cmp	r1, #88	; 0x58
  40bb42:	f200 82de 	bhi.w	40c102 <_vfiprintf_r+0x6ae>
  40bb46:	e8df f011 	tbh	[pc, r1, lsl #1]
  40bb4a:	0221      	.short	0x0221
  40bb4c:	02dc02dc 	.word	0x02dc02dc
  40bb50:	02dc0229 	.word	0x02dc0229
  40bb54:	02dc02dc 	.word	0x02dc02dc
  40bb58:	02dc02dc 	.word	0x02dc02dc
  40bb5c:	028902dc 	.word	0x028902dc
  40bb60:	02dc0295 	.word	0x02dc0295
  40bb64:	02bd00a2 	.word	0x02bd00a2
  40bb68:	019f02dc 	.word	0x019f02dc
  40bb6c:	01a401a4 	.word	0x01a401a4
  40bb70:	01a401a4 	.word	0x01a401a4
  40bb74:	01a401a4 	.word	0x01a401a4
  40bb78:	01a401a4 	.word	0x01a401a4
  40bb7c:	02dc01a4 	.word	0x02dc01a4
  40bb80:	02dc02dc 	.word	0x02dc02dc
  40bb84:	02dc02dc 	.word	0x02dc02dc
  40bb88:	02dc02dc 	.word	0x02dc02dc
  40bb8c:	02dc02dc 	.word	0x02dc02dc
  40bb90:	01b202dc 	.word	0x01b202dc
  40bb94:	02dc02dc 	.word	0x02dc02dc
  40bb98:	02dc02dc 	.word	0x02dc02dc
  40bb9c:	02dc02dc 	.word	0x02dc02dc
  40bba0:	02dc02dc 	.word	0x02dc02dc
  40bba4:	02dc02dc 	.word	0x02dc02dc
  40bba8:	02dc0197 	.word	0x02dc0197
  40bbac:	02dc02dc 	.word	0x02dc02dc
  40bbb0:	02dc02dc 	.word	0x02dc02dc
  40bbb4:	02dc019b 	.word	0x02dc019b
  40bbb8:	025302dc 	.word	0x025302dc
  40bbbc:	02dc02dc 	.word	0x02dc02dc
  40bbc0:	02dc02dc 	.word	0x02dc02dc
  40bbc4:	02dc02dc 	.word	0x02dc02dc
  40bbc8:	02dc02dc 	.word	0x02dc02dc
  40bbcc:	02dc02dc 	.word	0x02dc02dc
  40bbd0:	021b025a 	.word	0x021b025a
  40bbd4:	02dc02dc 	.word	0x02dc02dc
  40bbd8:	026e02dc 	.word	0x026e02dc
  40bbdc:	02dc021b 	.word	0x02dc021b
  40bbe0:	027302dc 	.word	0x027302dc
  40bbe4:	01f502dc 	.word	0x01f502dc
  40bbe8:	02090182 	.word	0x02090182
  40bbec:	02dc02d7 	.word	0x02dc02d7
  40bbf0:	02dc029a 	.word	0x02dc029a
  40bbf4:	02dc00a7 	.word	0x02dc00a7
  40bbf8:	022e02dc 	.word	0x022e02dc
  40bbfc:	f10a 0a08 	add.w	sl, sl, #8
  40bc00:	9b03      	ldr	r3, [sp, #12]
  40bc02:	442b      	add	r3, r5
  40bc04:	9303      	str	r3, [sp, #12]
  40bc06:	e786      	b.n	40bb16 <_vfiprintf_r+0xc2>
  40bc08:	4659      	mov	r1, fp
  40bc0a:	9806      	ldr	r0, [sp, #24]
  40bc0c:	f000 fdac 	bl	40c768 <__swsetup_r>
  40bc10:	bb18      	cbnz	r0, 40bc5a <_vfiprintf_r+0x206>
  40bc12:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40bc16:	f001 031a 	and.w	r3, r1, #26
  40bc1a:	2b0a      	cmp	r3, #10
  40bc1c:	f47f af4b 	bne.w	40bab6 <_vfiprintf_r+0x62>
  40bc20:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40bc24:	2b00      	cmp	r3, #0
  40bc26:	f6ff af46 	blt.w	40bab6 <_vfiprintf_r+0x62>
  40bc2a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40bc2e:	07db      	lsls	r3, r3, #31
  40bc30:	d405      	bmi.n	40bc3e <_vfiprintf_r+0x1ea>
  40bc32:	058f      	lsls	r7, r1, #22
  40bc34:	d403      	bmi.n	40bc3e <_vfiprintf_r+0x1ea>
  40bc36:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40bc3a:	f002 fa93 	bl	40e164 <__retarget_lock_release_recursive>
  40bc3e:	462b      	mov	r3, r5
  40bc40:	4642      	mov	r2, r8
  40bc42:	4659      	mov	r1, fp
  40bc44:	9806      	ldr	r0, [sp, #24]
  40bc46:	f000 fd4d 	bl	40c6e4 <__sbprintf>
  40bc4a:	9003      	str	r0, [sp, #12]
  40bc4c:	9803      	ldr	r0, [sp, #12]
  40bc4e:	b02d      	add	sp, #180	; 0xb4
  40bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc54:	f001 feb2 	bl	40d9bc <__sinit>
  40bc58:	e709      	b.n	40ba6e <_vfiprintf_r+0x1a>
  40bc5a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40bc5e:	07d9      	lsls	r1, r3, #31
  40bc60:	d404      	bmi.n	40bc6c <_vfiprintf_r+0x218>
  40bc62:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40bc66:	059a      	lsls	r2, r3, #22
  40bc68:	f140 84aa 	bpl.w	40c5c0 <_vfiprintf_r+0xb6c>
  40bc6c:	f04f 33ff 	mov.w	r3, #4294967295
  40bc70:	9303      	str	r3, [sp, #12]
  40bc72:	9803      	ldr	r0, [sp, #12]
  40bc74:	b02d      	add	sp, #180	; 0xb4
  40bc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc7a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40bc7e:	f002 fa6f 	bl	40e160 <__retarget_lock_acquire_recursive>
  40bc82:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40bc86:	b281      	uxth	r1, r0
  40bc88:	e6fb      	b.n	40ba82 <_vfiprintf_r+0x2e>
  40bc8a:	4276      	negs	r6, r6
  40bc8c:	9207      	str	r2, [sp, #28]
  40bc8e:	f043 0304 	orr.w	r3, r3, #4
  40bc92:	f898 2000 	ldrb.w	r2, [r8]
  40bc96:	e74f      	b.n	40bb38 <_vfiprintf_r+0xe4>
  40bc98:	9608      	str	r6, [sp, #32]
  40bc9a:	069e      	lsls	r6, r3, #26
  40bc9c:	f100 8450 	bmi.w	40c540 <_vfiprintf_r+0xaec>
  40bca0:	9907      	ldr	r1, [sp, #28]
  40bca2:	06dd      	lsls	r5, r3, #27
  40bca4:	460a      	mov	r2, r1
  40bca6:	f100 83ef 	bmi.w	40c488 <_vfiprintf_r+0xa34>
  40bcaa:	0658      	lsls	r0, r3, #25
  40bcac:	f140 83ec 	bpl.w	40c488 <_vfiprintf_r+0xa34>
  40bcb0:	880e      	ldrh	r6, [r1, #0]
  40bcb2:	3104      	adds	r1, #4
  40bcb4:	2700      	movs	r7, #0
  40bcb6:	2201      	movs	r2, #1
  40bcb8:	9107      	str	r1, [sp, #28]
  40bcba:	f04f 0100 	mov.w	r1, #0
  40bcbe:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40bcc2:	2500      	movs	r5, #0
  40bcc4:	1c61      	adds	r1, r4, #1
  40bcc6:	f000 8116 	beq.w	40bef6 <_vfiprintf_r+0x4a2>
  40bcca:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40bcce:	9102      	str	r1, [sp, #8]
  40bcd0:	ea56 0107 	orrs.w	r1, r6, r7
  40bcd4:	f040 8114 	bne.w	40bf00 <_vfiprintf_r+0x4ac>
  40bcd8:	2c00      	cmp	r4, #0
  40bcda:	f040 835c 	bne.w	40c396 <_vfiprintf_r+0x942>
  40bcde:	2a00      	cmp	r2, #0
  40bce0:	f040 83b7 	bne.w	40c452 <_vfiprintf_r+0x9fe>
  40bce4:	f013 0301 	ands.w	r3, r3, #1
  40bce8:	9305      	str	r3, [sp, #20]
  40bcea:	f000 8457 	beq.w	40c59c <_vfiprintf_r+0xb48>
  40bcee:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40bcf2:	2330      	movs	r3, #48	; 0x30
  40bcf4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40bcf8:	9b05      	ldr	r3, [sp, #20]
  40bcfa:	42a3      	cmp	r3, r4
  40bcfc:	bfb8      	it	lt
  40bcfe:	4623      	movlt	r3, r4
  40bd00:	9301      	str	r3, [sp, #4]
  40bd02:	b10d      	cbz	r5, 40bd08 <_vfiprintf_r+0x2b4>
  40bd04:	3301      	adds	r3, #1
  40bd06:	9301      	str	r3, [sp, #4]
  40bd08:	9b02      	ldr	r3, [sp, #8]
  40bd0a:	f013 0302 	ands.w	r3, r3, #2
  40bd0e:	9309      	str	r3, [sp, #36]	; 0x24
  40bd10:	d002      	beq.n	40bd18 <_vfiprintf_r+0x2c4>
  40bd12:	9b01      	ldr	r3, [sp, #4]
  40bd14:	3302      	adds	r3, #2
  40bd16:	9301      	str	r3, [sp, #4]
  40bd18:	9b02      	ldr	r3, [sp, #8]
  40bd1a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40bd1e:	930a      	str	r3, [sp, #40]	; 0x28
  40bd20:	f040 8217 	bne.w	40c152 <_vfiprintf_r+0x6fe>
  40bd24:	9b08      	ldr	r3, [sp, #32]
  40bd26:	9a01      	ldr	r2, [sp, #4]
  40bd28:	1a9d      	subs	r5, r3, r2
  40bd2a:	2d00      	cmp	r5, #0
  40bd2c:	f340 8211 	ble.w	40c152 <_vfiprintf_r+0x6fe>
  40bd30:	2d10      	cmp	r5, #16
  40bd32:	f340 8490 	ble.w	40c656 <_vfiprintf_r+0xc02>
  40bd36:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40bd38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bd3a:	4ec4      	ldr	r6, [pc, #784]	; (40c04c <_vfiprintf_r+0x5f8>)
  40bd3c:	46d6      	mov	lr, sl
  40bd3e:	2710      	movs	r7, #16
  40bd40:	46a2      	mov	sl, r4
  40bd42:	4619      	mov	r1, r3
  40bd44:	9c06      	ldr	r4, [sp, #24]
  40bd46:	e007      	b.n	40bd58 <_vfiprintf_r+0x304>
  40bd48:	f101 0c02 	add.w	ip, r1, #2
  40bd4c:	f10e 0e08 	add.w	lr, lr, #8
  40bd50:	4601      	mov	r1, r0
  40bd52:	3d10      	subs	r5, #16
  40bd54:	2d10      	cmp	r5, #16
  40bd56:	dd11      	ble.n	40bd7c <_vfiprintf_r+0x328>
  40bd58:	1c48      	adds	r0, r1, #1
  40bd5a:	3210      	adds	r2, #16
  40bd5c:	2807      	cmp	r0, #7
  40bd5e:	9211      	str	r2, [sp, #68]	; 0x44
  40bd60:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40bd64:	9010      	str	r0, [sp, #64]	; 0x40
  40bd66:	ddef      	ble.n	40bd48 <_vfiprintf_r+0x2f4>
  40bd68:	2a00      	cmp	r2, #0
  40bd6a:	f040 81e4 	bne.w	40c136 <_vfiprintf_r+0x6e2>
  40bd6e:	3d10      	subs	r5, #16
  40bd70:	2d10      	cmp	r5, #16
  40bd72:	4611      	mov	r1, r2
  40bd74:	f04f 0c01 	mov.w	ip, #1
  40bd78:	46ce      	mov	lr, r9
  40bd7a:	dced      	bgt.n	40bd58 <_vfiprintf_r+0x304>
  40bd7c:	4654      	mov	r4, sl
  40bd7e:	4661      	mov	r1, ip
  40bd80:	46f2      	mov	sl, lr
  40bd82:	442a      	add	r2, r5
  40bd84:	2907      	cmp	r1, #7
  40bd86:	9211      	str	r2, [sp, #68]	; 0x44
  40bd88:	f8ca 6000 	str.w	r6, [sl]
  40bd8c:	f8ca 5004 	str.w	r5, [sl, #4]
  40bd90:	9110      	str	r1, [sp, #64]	; 0x40
  40bd92:	f300 82ec 	bgt.w	40c36e <_vfiprintf_r+0x91a>
  40bd96:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40bd9a:	f10a 0a08 	add.w	sl, sl, #8
  40bd9e:	1c48      	adds	r0, r1, #1
  40bda0:	2d00      	cmp	r5, #0
  40bda2:	f040 81de 	bne.w	40c162 <_vfiprintf_r+0x70e>
  40bda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bda8:	2b00      	cmp	r3, #0
  40bdaa:	f000 81f8 	beq.w	40c19e <_vfiprintf_r+0x74a>
  40bdae:	3202      	adds	r2, #2
  40bdb0:	a90e      	add	r1, sp, #56	; 0x38
  40bdb2:	2302      	movs	r3, #2
  40bdb4:	2807      	cmp	r0, #7
  40bdb6:	9211      	str	r2, [sp, #68]	; 0x44
  40bdb8:	9010      	str	r0, [sp, #64]	; 0x40
  40bdba:	e88a 000a 	stmia.w	sl, {r1, r3}
  40bdbe:	f340 81ea 	ble.w	40c196 <_vfiprintf_r+0x742>
  40bdc2:	2a00      	cmp	r2, #0
  40bdc4:	f040 838c 	bne.w	40c4e0 <_vfiprintf_r+0xa8c>
  40bdc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bdca:	2b80      	cmp	r3, #128	; 0x80
  40bdcc:	f04f 0001 	mov.w	r0, #1
  40bdd0:	4611      	mov	r1, r2
  40bdd2:	46ca      	mov	sl, r9
  40bdd4:	f040 81e7 	bne.w	40c1a6 <_vfiprintf_r+0x752>
  40bdd8:	9b08      	ldr	r3, [sp, #32]
  40bdda:	9d01      	ldr	r5, [sp, #4]
  40bddc:	1b5e      	subs	r6, r3, r5
  40bdde:	2e00      	cmp	r6, #0
  40bde0:	f340 81e1 	ble.w	40c1a6 <_vfiprintf_r+0x752>
  40bde4:	2e10      	cmp	r6, #16
  40bde6:	4d9a      	ldr	r5, [pc, #616]	; (40c050 <_vfiprintf_r+0x5fc>)
  40bde8:	f340 8450 	ble.w	40c68c <_vfiprintf_r+0xc38>
  40bdec:	46d4      	mov	ip, sl
  40bdee:	2710      	movs	r7, #16
  40bdf0:	46a2      	mov	sl, r4
  40bdf2:	9c06      	ldr	r4, [sp, #24]
  40bdf4:	e007      	b.n	40be06 <_vfiprintf_r+0x3b2>
  40bdf6:	f101 0e02 	add.w	lr, r1, #2
  40bdfa:	f10c 0c08 	add.w	ip, ip, #8
  40bdfe:	4601      	mov	r1, r0
  40be00:	3e10      	subs	r6, #16
  40be02:	2e10      	cmp	r6, #16
  40be04:	dd11      	ble.n	40be2a <_vfiprintf_r+0x3d6>
  40be06:	1c48      	adds	r0, r1, #1
  40be08:	3210      	adds	r2, #16
  40be0a:	2807      	cmp	r0, #7
  40be0c:	9211      	str	r2, [sp, #68]	; 0x44
  40be0e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40be12:	9010      	str	r0, [sp, #64]	; 0x40
  40be14:	ddef      	ble.n	40bdf6 <_vfiprintf_r+0x3a2>
  40be16:	2a00      	cmp	r2, #0
  40be18:	f040 829d 	bne.w	40c356 <_vfiprintf_r+0x902>
  40be1c:	3e10      	subs	r6, #16
  40be1e:	2e10      	cmp	r6, #16
  40be20:	f04f 0e01 	mov.w	lr, #1
  40be24:	4611      	mov	r1, r2
  40be26:	46cc      	mov	ip, r9
  40be28:	dced      	bgt.n	40be06 <_vfiprintf_r+0x3b2>
  40be2a:	4654      	mov	r4, sl
  40be2c:	46e2      	mov	sl, ip
  40be2e:	4432      	add	r2, r6
  40be30:	f1be 0f07 	cmp.w	lr, #7
  40be34:	9211      	str	r2, [sp, #68]	; 0x44
  40be36:	e88a 0060 	stmia.w	sl, {r5, r6}
  40be3a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40be3e:	f300 8369 	bgt.w	40c514 <_vfiprintf_r+0xac0>
  40be42:	f10a 0a08 	add.w	sl, sl, #8
  40be46:	f10e 0001 	add.w	r0, lr, #1
  40be4a:	4671      	mov	r1, lr
  40be4c:	e1ab      	b.n	40c1a6 <_vfiprintf_r+0x752>
  40be4e:	9608      	str	r6, [sp, #32]
  40be50:	f013 0220 	ands.w	r2, r3, #32
  40be54:	f040 838c 	bne.w	40c570 <_vfiprintf_r+0xb1c>
  40be58:	f013 0110 	ands.w	r1, r3, #16
  40be5c:	f040 831a 	bne.w	40c494 <_vfiprintf_r+0xa40>
  40be60:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40be64:	f000 8316 	beq.w	40c494 <_vfiprintf_r+0xa40>
  40be68:	9807      	ldr	r0, [sp, #28]
  40be6a:	460a      	mov	r2, r1
  40be6c:	4601      	mov	r1, r0
  40be6e:	3104      	adds	r1, #4
  40be70:	8806      	ldrh	r6, [r0, #0]
  40be72:	9107      	str	r1, [sp, #28]
  40be74:	2700      	movs	r7, #0
  40be76:	e720      	b.n	40bcba <_vfiprintf_r+0x266>
  40be78:	9608      	str	r6, [sp, #32]
  40be7a:	f043 0310 	orr.w	r3, r3, #16
  40be7e:	e7e7      	b.n	40be50 <_vfiprintf_r+0x3fc>
  40be80:	9608      	str	r6, [sp, #32]
  40be82:	f043 0310 	orr.w	r3, r3, #16
  40be86:	e708      	b.n	40bc9a <_vfiprintf_r+0x246>
  40be88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40be8c:	f898 2000 	ldrb.w	r2, [r8]
  40be90:	e652      	b.n	40bb38 <_vfiprintf_r+0xe4>
  40be92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40be96:	2600      	movs	r6, #0
  40be98:	f818 2b01 	ldrb.w	r2, [r8], #1
  40be9c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40bea0:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40bea4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40bea8:	2909      	cmp	r1, #9
  40beaa:	d9f5      	bls.n	40be98 <_vfiprintf_r+0x444>
  40beac:	e646      	b.n	40bb3c <_vfiprintf_r+0xe8>
  40beae:	9608      	str	r6, [sp, #32]
  40beb0:	2800      	cmp	r0, #0
  40beb2:	f040 8408 	bne.w	40c6c6 <_vfiprintf_r+0xc72>
  40beb6:	f043 0310 	orr.w	r3, r3, #16
  40beba:	069e      	lsls	r6, r3, #26
  40bebc:	f100 834c 	bmi.w	40c558 <_vfiprintf_r+0xb04>
  40bec0:	06dd      	lsls	r5, r3, #27
  40bec2:	f100 82f3 	bmi.w	40c4ac <_vfiprintf_r+0xa58>
  40bec6:	0658      	lsls	r0, r3, #25
  40bec8:	f140 82f0 	bpl.w	40c4ac <_vfiprintf_r+0xa58>
  40becc:	9d07      	ldr	r5, [sp, #28]
  40bece:	f9b5 6000 	ldrsh.w	r6, [r5]
  40bed2:	462a      	mov	r2, r5
  40bed4:	17f7      	asrs	r7, r6, #31
  40bed6:	3204      	adds	r2, #4
  40bed8:	4630      	mov	r0, r6
  40beda:	4639      	mov	r1, r7
  40bedc:	9207      	str	r2, [sp, #28]
  40bede:	2800      	cmp	r0, #0
  40bee0:	f171 0200 	sbcs.w	r2, r1, #0
  40bee4:	f2c0 835d 	blt.w	40c5a2 <_vfiprintf_r+0xb4e>
  40bee8:	1c61      	adds	r1, r4, #1
  40beea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40beee:	f04f 0201 	mov.w	r2, #1
  40bef2:	f47f aeea 	bne.w	40bcca <_vfiprintf_r+0x276>
  40bef6:	ea56 0107 	orrs.w	r1, r6, r7
  40befa:	f000 824d 	beq.w	40c398 <_vfiprintf_r+0x944>
  40befe:	9302      	str	r3, [sp, #8]
  40bf00:	2a01      	cmp	r2, #1
  40bf02:	f000 828c 	beq.w	40c41e <_vfiprintf_r+0x9ca>
  40bf06:	2a02      	cmp	r2, #2
  40bf08:	f040 825c 	bne.w	40c3c4 <_vfiprintf_r+0x970>
  40bf0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40bf0e:	46cb      	mov	fp, r9
  40bf10:	0933      	lsrs	r3, r6, #4
  40bf12:	f006 010f 	and.w	r1, r6, #15
  40bf16:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40bf1a:	093a      	lsrs	r2, r7, #4
  40bf1c:	461e      	mov	r6, r3
  40bf1e:	4617      	mov	r7, r2
  40bf20:	5c43      	ldrb	r3, [r0, r1]
  40bf22:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40bf26:	ea56 0307 	orrs.w	r3, r6, r7
  40bf2a:	d1f1      	bne.n	40bf10 <_vfiprintf_r+0x4bc>
  40bf2c:	eba9 030b 	sub.w	r3, r9, fp
  40bf30:	9305      	str	r3, [sp, #20]
  40bf32:	e6e1      	b.n	40bcf8 <_vfiprintf_r+0x2a4>
  40bf34:	2800      	cmp	r0, #0
  40bf36:	f040 83c0 	bne.w	40c6ba <_vfiprintf_r+0xc66>
  40bf3a:	0699      	lsls	r1, r3, #26
  40bf3c:	f100 8367 	bmi.w	40c60e <_vfiprintf_r+0xbba>
  40bf40:	06da      	lsls	r2, r3, #27
  40bf42:	f100 80f1 	bmi.w	40c128 <_vfiprintf_r+0x6d4>
  40bf46:	065b      	lsls	r3, r3, #25
  40bf48:	f140 80ee 	bpl.w	40c128 <_vfiprintf_r+0x6d4>
  40bf4c:	9a07      	ldr	r2, [sp, #28]
  40bf4e:	6813      	ldr	r3, [r2, #0]
  40bf50:	3204      	adds	r2, #4
  40bf52:	9207      	str	r2, [sp, #28]
  40bf54:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40bf58:	801a      	strh	r2, [r3, #0]
  40bf5a:	e5b8      	b.n	40bace <_vfiprintf_r+0x7a>
  40bf5c:	9807      	ldr	r0, [sp, #28]
  40bf5e:	4a3d      	ldr	r2, [pc, #244]	; (40c054 <_vfiprintf_r+0x600>)
  40bf60:	9608      	str	r6, [sp, #32]
  40bf62:	920b      	str	r2, [sp, #44]	; 0x2c
  40bf64:	6806      	ldr	r6, [r0, #0]
  40bf66:	2278      	movs	r2, #120	; 0x78
  40bf68:	2130      	movs	r1, #48	; 0x30
  40bf6a:	3004      	adds	r0, #4
  40bf6c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40bf70:	f043 0302 	orr.w	r3, r3, #2
  40bf74:	9007      	str	r0, [sp, #28]
  40bf76:	2700      	movs	r7, #0
  40bf78:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40bf7c:	2202      	movs	r2, #2
  40bf7e:	e69c      	b.n	40bcba <_vfiprintf_r+0x266>
  40bf80:	9608      	str	r6, [sp, #32]
  40bf82:	2800      	cmp	r0, #0
  40bf84:	d099      	beq.n	40beba <_vfiprintf_r+0x466>
  40bf86:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40bf8a:	e796      	b.n	40beba <_vfiprintf_r+0x466>
  40bf8c:	f898 2000 	ldrb.w	r2, [r8]
  40bf90:	2d00      	cmp	r5, #0
  40bf92:	f47f add1 	bne.w	40bb38 <_vfiprintf_r+0xe4>
  40bf96:	2001      	movs	r0, #1
  40bf98:	2520      	movs	r5, #32
  40bf9a:	e5cd      	b.n	40bb38 <_vfiprintf_r+0xe4>
  40bf9c:	f043 0301 	orr.w	r3, r3, #1
  40bfa0:	f898 2000 	ldrb.w	r2, [r8]
  40bfa4:	e5c8      	b.n	40bb38 <_vfiprintf_r+0xe4>
  40bfa6:	9608      	str	r6, [sp, #32]
  40bfa8:	2800      	cmp	r0, #0
  40bfaa:	f040 8393 	bne.w	40c6d4 <_vfiprintf_r+0xc80>
  40bfae:	4929      	ldr	r1, [pc, #164]	; (40c054 <_vfiprintf_r+0x600>)
  40bfb0:	910b      	str	r1, [sp, #44]	; 0x2c
  40bfb2:	069f      	lsls	r7, r3, #26
  40bfb4:	f100 82e8 	bmi.w	40c588 <_vfiprintf_r+0xb34>
  40bfb8:	9807      	ldr	r0, [sp, #28]
  40bfba:	06de      	lsls	r6, r3, #27
  40bfbc:	4601      	mov	r1, r0
  40bfbe:	f100 8270 	bmi.w	40c4a2 <_vfiprintf_r+0xa4e>
  40bfc2:	065d      	lsls	r5, r3, #25
  40bfc4:	f140 826d 	bpl.w	40c4a2 <_vfiprintf_r+0xa4e>
  40bfc8:	3104      	adds	r1, #4
  40bfca:	8806      	ldrh	r6, [r0, #0]
  40bfcc:	9107      	str	r1, [sp, #28]
  40bfce:	2700      	movs	r7, #0
  40bfd0:	07d8      	lsls	r0, r3, #31
  40bfd2:	f140 8222 	bpl.w	40c41a <_vfiprintf_r+0x9c6>
  40bfd6:	ea56 0107 	orrs.w	r1, r6, r7
  40bfda:	f000 821e 	beq.w	40c41a <_vfiprintf_r+0x9c6>
  40bfde:	2130      	movs	r1, #48	; 0x30
  40bfe0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40bfe4:	f043 0302 	orr.w	r3, r3, #2
  40bfe8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40bfec:	2202      	movs	r2, #2
  40bfee:	e664      	b.n	40bcba <_vfiprintf_r+0x266>
  40bff0:	9608      	str	r6, [sp, #32]
  40bff2:	2800      	cmp	r0, #0
  40bff4:	f040 836b 	bne.w	40c6ce <_vfiprintf_r+0xc7a>
  40bff8:	4917      	ldr	r1, [pc, #92]	; (40c058 <_vfiprintf_r+0x604>)
  40bffa:	910b      	str	r1, [sp, #44]	; 0x2c
  40bffc:	e7d9      	b.n	40bfb2 <_vfiprintf_r+0x55e>
  40bffe:	9907      	ldr	r1, [sp, #28]
  40c000:	9608      	str	r6, [sp, #32]
  40c002:	680a      	ldr	r2, [r1, #0]
  40c004:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40c008:	f04f 0000 	mov.w	r0, #0
  40c00c:	460a      	mov	r2, r1
  40c00e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40c012:	3204      	adds	r2, #4
  40c014:	2001      	movs	r0, #1
  40c016:	9001      	str	r0, [sp, #4]
  40c018:	9207      	str	r2, [sp, #28]
  40c01a:	9005      	str	r0, [sp, #20]
  40c01c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40c020:	9302      	str	r3, [sp, #8]
  40c022:	2400      	movs	r4, #0
  40c024:	e670      	b.n	40bd08 <_vfiprintf_r+0x2b4>
  40c026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c02a:	f898 2000 	ldrb.w	r2, [r8]
  40c02e:	e583      	b.n	40bb38 <_vfiprintf_r+0xe4>
  40c030:	f898 2000 	ldrb.w	r2, [r8]
  40c034:	2a6c      	cmp	r2, #108	; 0x6c
  40c036:	bf03      	ittte	eq
  40c038:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40c03c:	f043 0320 	orreq.w	r3, r3, #32
  40c040:	f108 0801 	addeq.w	r8, r8, #1
  40c044:	f043 0310 	orrne.w	r3, r3, #16
  40c048:	e576      	b.n	40bb38 <_vfiprintf_r+0xe4>
  40c04a:	bf00      	nop
  40c04c:	00411d58 	.word	0x00411d58
  40c050:	00411d68 	.word	0x00411d68
  40c054:	00411d18 	.word	0x00411d18
  40c058:	00411d04 	.word	0x00411d04
  40c05c:	9907      	ldr	r1, [sp, #28]
  40c05e:	680e      	ldr	r6, [r1, #0]
  40c060:	460a      	mov	r2, r1
  40c062:	2e00      	cmp	r6, #0
  40c064:	f102 0204 	add.w	r2, r2, #4
  40c068:	f6ff ae0f 	blt.w	40bc8a <_vfiprintf_r+0x236>
  40c06c:	9207      	str	r2, [sp, #28]
  40c06e:	f898 2000 	ldrb.w	r2, [r8]
  40c072:	e561      	b.n	40bb38 <_vfiprintf_r+0xe4>
  40c074:	f898 2000 	ldrb.w	r2, [r8]
  40c078:	2001      	movs	r0, #1
  40c07a:	252b      	movs	r5, #43	; 0x2b
  40c07c:	e55c      	b.n	40bb38 <_vfiprintf_r+0xe4>
  40c07e:	9907      	ldr	r1, [sp, #28]
  40c080:	9608      	str	r6, [sp, #32]
  40c082:	f8d1 b000 	ldr.w	fp, [r1]
  40c086:	f04f 0200 	mov.w	r2, #0
  40c08a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40c08e:	1d0e      	adds	r6, r1, #4
  40c090:	f1bb 0f00 	cmp.w	fp, #0
  40c094:	f000 82e5 	beq.w	40c662 <_vfiprintf_r+0xc0e>
  40c098:	1c67      	adds	r7, r4, #1
  40c09a:	f000 82c4 	beq.w	40c626 <_vfiprintf_r+0xbd2>
  40c09e:	4622      	mov	r2, r4
  40c0a0:	2100      	movs	r1, #0
  40c0a2:	4658      	mov	r0, fp
  40c0a4:	9301      	str	r3, [sp, #4]
  40c0a6:	f002 fbab 	bl	40e800 <memchr>
  40c0aa:	9b01      	ldr	r3, [sp, #4]
  40c0ac:	2800      	cmp	r0, #0
  40c0ae:	f000 82e5 	beq.w	40c67c <_vfiprintf_r+0xc28>
  40c0b2:	eba0 020b 	sub.w	r2, r0, fp
  40c0b6:	9205      	str	r2, [sp, #20]
  40c0b8:	9607      	str	r6, [sp, #28]
  40c0ba:	9302      	str	r3, [sp, #8]
  40c0bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40c0c0:	2400      	movs	r4, #0
  40c0c2:	e619      	b.n	40bcf8 <_vfiprintf_r+0x2a4>
  40c0c4:	f898 2000 	ldrb.w	r2, [r8]
  40c0c8:	2a2a      	cmp	r2, #42	; 0x2a
  40c0ca:	f108 0701 	add.w	r7, r8, #1
  40c0ce:	f000 82e9 	beq.w	40c6a4 <_vfiprintf_r+0xc50>
  40c0d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40c0d6:	2909      	cmp	r1, #9
  40c0d8:	46b8      	mov	r8, r7
  40c0da:	f04f 0400 	mov.w	r4, #0
  40c0de:	f63f ad2d 	bhi.w	40bb3c <_vfiprintf_r+0xe8>
  40c0e2:	f818 2b01 	ldrb.w	r2, [r8], #1
  40c0e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40c0ea:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40c0ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40c0f2:	2909      	cmp	r1, #9
  40c0f4:	d9f5      	bls.n	40c0e2 <_vfiprintf_r+0x68e>
  40c0f6:	e521      	b.n	40bb3c <_vfiprintf_r+0xe8>
  40c0f8:	f043 0320 	orr.w	r3, r3, #32
  40c0fc:	f898 2000 	ldrb.w	r2, [r8]
  40c100:	e51a      	b.n	40bb38 <_vfiprintf_r+0xe4>
  40c102:	9608      	str	r6, [sp, #32]
  40c104:	2800      	cmp	r0, #0
  40c106:	f040 82db 	bne.w	40c6c0 <_vfiprintf_r+0xc6c>
  40c10a:	2a00      	cmp	r2, #0
  40c10c:	f000 80e7 	beq.w	40c2de <_vfiprintf_r+0x88a>
  40c110:	2101      	movs	r1, #1
  40c112:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40c116:	f04f 0200 	mov.w	r2, #0
  40c11a:	9101      	str	r1, [sp, #4]
  40c11c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40c120:	9105      	str	r1, [sp, #20]
  40c122:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40c126:	e77b      	b.n	40c020 <_vfiprintf_r+0x5cc>
  40c128:	9a07      	ldr	r2, [sp, #28]
  40c12a:	6813      	ldr	r3, [r2, #0]
  40c12c:	3204      	adds	r2, #4
  40c12e:	9207      	str	r2, [sp, #28]
  40c130:	9a03      	ldr	r2, [sp, #12]
  40c132:	601a      	str	r2, [r3, #0]
  40c134:	e4cb      	b.n	40bace <_vfiprintf_r+0x7a>
  40c136:	aa0f      	add	r2, sp, #60	; 0x3c
  40c138:	9904      	ldr	r1, [sp, #16]
  40c13a:	4620      	mov	r0, r4
  40c13c:	f7ff fc4a 	bl	40b9d4 <__sprint_r.part.0>
  40c140:	2800      	cmp	r0, #0
  40c142:	f040 8139 	bne.w	40c3b8 <_vfiprintf_r+0x964>
  40c146:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c148:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c14a:	f101 0c01 	add.w	ip, r1, #1
  40c14e:	46ce      	mov	lr, r9
  40c150:	e5ff      	b.n	40bd52 <_vfiprintf_r+0x2fe>
  40c152:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c154:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c156:	1c48      	adds	r0, r1, #1
  40c158:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40c15c:	2d00      	cmp	r5, #0
  40c15e:	f43f ae22 	beq.w	40bda6 <_vfiprintf_r+0x352>
  40c162:	3201      	adds	r2, #1
  40c164:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40c168:	2101      	movs	r1, #1
  40c16a:	2807      	cmp	r0, #7
  40c16c:	9211      	str	r2, [sp, #68]	; 0x44
  40c16e:	9010      	str	r0, [sp, #64]	; 0x40
  40c170:	f8ca 5000 	str.w	r5, [sl]
  40c174:	f8ca 1004 	str.w	r1, [sl, #4]
  40c178:	f340 8108 	ble.w	40c38c <_vfiprintf_r+0x938>
  40c17c:	2a00      	cmp	r2, #0
  40c17e:	f040 81bc 	bne.w	40c4fa <_vfiprintf_r+0xaa6>
  40c182:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c184:	2b00      	cmp	r3, #0
  40c186:	f43f ae1f 	beq.w	40bdc8 <_vfiprintf_r+0x374>
  40c18a:	ab0e      	add	r3, sp, #56	; 0x38
  40c18c:	2202      	movs	r2, #2
  40c18e:	4608      	mov	r0, r1
  40c190:	931c      	str	r3, [sp, #112]	; 0x70
  40c192:	921d      	str	r2, [sp, #116]	; 0x74
  40c194:	46ca      	mov	sl, r9
  40c196:	4601      	mov	r1, r0
  40c198:	f10a 0a08 	add.w	sl, sl, #8
  40c19c:	3001      	adds	r0, #1
  40c19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c1a0:	2b80      	cmp	r3, #128	; 0x80
  40c1a2:	f43f ae19 	beq.w	40bdd8 <_vfiprintf_r+0x384>
  40c1a6:	9b05      	ldr	r3, [sp, #20]
  40c1a8:	1ae4      	subs	r4, r4, r3
  40c1aa:	2c00      	cmp	r4, #0
  40c1ac:	dd2e      	ble.n	40c20c <_vfiprintf_r+0x7b8>
  40c1ae:	2c10      	cmp	r4, #16
  40c1b0:	4db3      	ldr	r5, [pc, #716]	; (40c480 <_vfiprintf_r+0xa2c>)
  40c1b2:	dd1e      	ble.n	40c1f2 <_vfiprintf_r+0x79e>
  40c1b4:	46d6      	mov	lr, sl
  40c1b6:	2610      	movs	r6, #16
  40c1b8:	9f06      	ldr	r7, [sp, #24]
  40c1ba:	f8dd a010 	ldr.w	sl, [sp, #16]
  40c1be:	e006      	b.n	40c1ce <_vfiprintf_r+0x77a>
  40c1c0:	1c88      	adds	r0, r1, #2
  40c1c2:	f10e 0e08 	add.w	lr, lr, #8
  40c1c6:	4619      	mov	r1, r3
  40c1c8:	3c10      	subs	r4, #16
  40c1ca:	2c10      	cmp	r4, #16
  40c1cc:	dd10      	ble.n	40c1f0 <_vfiprintf_r+0x79c>
  40c1ce:	1c4b      	adds	r3, r1, #1
  40c1d0:	3210      	adds	r2, #16
  40c1d2:	2b07      	cmp	r3, #7
  40c1d4:	9211      	str	r2, [sp, #68]	; 0x44
  40c1d6:	e88e 0060 	stmia.w	lr, {r5, r6}
  40c1da:	9310      	str	r3, [sp, #64]	; 0x40
  40c1dc:	ddf0      	ble.n	40c1c0 <_vfiprintf_r+0x76c>
  40c1de:	2a00      	cmp	r2, #0
  40c1e0:	d165      	bne.n	40c2ae <_vfiprintf_r+0x85a>
  40c1e2:	3c10      	subs	r4, #16
  40c1e4:	2c10      	cmp	r4, #16
  40c1e6:	f04f 0001 	mov.w	r0, #1
  40c1ea:	4611      	mov	r1, r2
  40c1ec:	46ce      	mov	lr, r9
  40c1ee:	dcee      	bgt.n	40c1ce <_vfiprintf_r+0x77a>
  40c1f0:	46f2      	mov	sl, lr
  40c1f2:	4422      	add	r2, r4
  40c1f4:	2807      	cmp	r0, #7
  40c1f6:	9211      	str	r2, [sp, #68]	; 0x44
  40c1f8:	f8ca 5000 	str.w	r5, [sl]
  40c1fc:	f8ca 4004 	str.w	r4, [sl, #4]
  40c200:	9010      	str	r0, [sp, #64]	; 0x40
  40c202:	f300 8085 	bgt.w	40c310 <_vfiprintf_r+0x8bc>
  40c206:	f10a 0a08 	add.w	sl, sl, #8
  40c20a:	3001      	adds	r0, #1
  40c20c:	9905      	ldr	r1, [sp, #20]
  40c20e:	f8ca b000 	str.w	fp, [sl]
  40c212:	440a      	add	r2, r1
  40c214:	2807      	cmp	r0, #7
  40c216:	9211      	str	r2, [sp, #68]	; 0x44
  40c218:	f8ca 1004 	str.w	r1, [sl, #4]
  40c21c:	9010      	str	r0, [sp, #64]	; 0x40
  40c21e:	f340 8082 	ble.w	40c326 <_vfiprintf_r+0x8d2>
  40c222:	2a00      	cmp	r2, #0
  40c224:	f040 8118 	bne.w	40c458 <_vfiprintf_r+0xa04>
  40c228:	9b02      	ldr	r3, [sp, #8]
  40c22a:	9210      	str	r2, [sp, #64]	; 0x40
  40c22c:	0758      	lsls	r0, r3, #29
  40c22e:	d535      	bpl.n	40c29c <_vfiprintf_r+0x848>
  40c230:	9b08      	ldr	r3, [sp, #32]
  40c232:	9901      	ldr	r1, [sp, #4]
  40c234:	1a5c      	subs	r4, r3, r1
  40c236:	2c00      	cmp	r4, #0
  40c238:	f340 80e7 	ble.w	40c40a <_vfiprintf_r+0x9b6>
  40c23c:	46ca      	mov	sl, r9
  40c23e:	2c10      	cmp	r4, #16
  40c240:	f340 8218 	ble.w	40c674 <_vfiprintf_r+0xc20>
  40c244:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c246:	4e8f      	ldr	r6, [pc, #572]	; (40c484 <_vfiprintf_r+0xa30>)
  40c248:	9f06      	ldr	r7, [sp, #24]
  40c24a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40c24e:	2510      	movs	r5, #16
  40c250:	e006      	b.n	40c260 <_vfiprintf_r+0x80c>
  40c252:	1c88      	adds	r0, r1, #2
  40c254:	f10a 0a08 	add.w	sl, sl, #8
  40c258:	4619      	mov	r1, r3
  40c25a:	3c10      	subs	r4, #16
  40c25c:	2c10      	cmp	r4, #16
  40c25e:	dd11      	ble.n	40c284 <_vfiprintf_r+0x830>
  40c260:	1c4b      	adds	r3, r1, #1
  40c262:	3210      	adds	r2, #16
  40c264:	2b07      	cmp	r3, #7
  40c266:	9211      	str	r2, [sp, #68]	; 0x44
  40c268:	f8ca 6000 	str.w	r6, [sl]
  40c26c:	f8ca 5004 	str.w	r5, [sl, #4]
  40c270:	9310      	str	r3, [sp, #64]	; 0x40
  40c272:	ddee      	ble.n	40c252 <_vfiprintf_r+0x7fe>
  40c274:	bb42      	cbnz	r2, 40c2c8 <_vfiprintf_r+0x874>
  40c276:	3c10      	subs	r4, #16
  40c278:	2c10      	cmp	r4, #16
  40c27a:	f04f 0001 	mov.w	r0, #1
  40c27e:	4611      	mov	r1, r2
  40c280:	46ca      	mov	sl, r9
  40c282:	dced      	bgt.n	40c260 <_vfiprintf_r+0x80c>
  40c284:	4422      	add	r2, r4
  40c286:	2807      	cmp	r0, #7
  40c288:	9211      	str	r2, [sp, #68]	; 0x44
  40c28a:	f8ca 6000 	str.w	r6, [sl]
  40c28e:	f8ca 4004 	str.w	r4, [sl, #4]
  40c292:	9010      	str	r0, [sp, #64]	; 0x40
  40c294:	dd51      	ble.n	40c33a <_vfiprintf_r+0x8e6>
  40c296:	2a00      	cmp	r2, #0
  40c298:	f040 819b 	bne.w	40c5d2 <_vfiprintf_r+0xb7e>
  40c29c:	9b03      	ldr	r3, [sp, #12]
  40c29e:	9a08      	ldr	r2, [sp, #32]
  40c2a0:	9901      	ldr	r1, [sp, #4]
  40c2a2:	428a      	cmp	r2, r1
  40c2a4:	bfac      	ite	ge
  40c2a6:	189b      	addge	r3, r3, r2
  40c2a8:	185b      	addlt	r3, r3, r1
  40c2aa:	9303      	str	r3, [sp, #12]
  40c2ac:	e04e      	b.n	40c34c <_vfiprintf_r+0x8f8>
  40c2ae:	aa0f      	add	r2, sp, #60	; 0x3c
  40c2b0:	4651      	mov	r1, sl
  40c2b2:	4638      	mov	r0, r7
  40c2b4:	f7ff fb8e 	bl	40b9d4 <__sprint_r.part.0>
  40c2b8:	2800      	cmp	r0, #0
  40c2ba:	f040 813f 	bne.w	40c53c <_vfiprintf_r+0xae8>
  40c2be:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c2c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c2c2:	1c48      	adds	r0, r1, #1
  40c2c4:	46ce      	mov	lr, r9
  40c2c6:	e77f      	b.n	40c1c8 <_vfiprintf_r+0x774>
  40c2c8:	aa0f      	add	r2, sp, #60	; 0x3c
  40c2ca:	4659      	mov	r1, fp
  40c2cc:	4638      	mov	r0, r7
  40c2ce:	f7ff fb81 	bl	40b9d4 <__sprint_r.part.0>
  40c2d2:	b960      	cbnz	r0, 40c2ee <_vfiprintf_r+0x89a>
  40c2d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c2d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c2d8:	1c48      	adds	r0, r1, #1
  40c2da:	46ca      	mov	sl, r9
  40c2dc:	e7bd      	b.n	40c25a <_vfiprintf_r+0x806>
  40c2de:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c2e0:	f8dd b010 	ldr.w	fp, [sp, #16]
  40c2e4:	2b00      	cmp	r3, #0
  40c2e6:	f040 81d4 	bne.w	40c692 <_vfiprintf_r+0xc3e>
  40c2ea:	2300      	movs	r3, #0
  40c2ec:	9310      	str	r3, [sp, #64]	; 0x40
  40c2ee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40c2f2:	f013 0f01 	tst.w	r3, #1
  40c2f6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40c2fa:	d102      	bne.n	40c302 <_vfiprintf_r+0x8ae>
  40c2fc:	059a      	lsls	r2, r3, #22
  40c2fe:	f140 80de 	bpl.w	40c4be <_vfiprintf_r+0xa6a>
  40c302:	065b      	lsls	r3, r3, #25
  40c304:	f53f acb2 	bmi.w	40bc6c <_vfiprintf_r+0x218>
  40c308:	9803      	ldr	r0, [sp, #12]
  40c30a:	b02d      	add	sp, #180	; 0xb4
  40c30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c310:	2a00      	cmp	r2, #0
  40c312:	f040 8106 	bne.w	40c522 <_vfiprintf_r+0xace>
  40c316:	9a05      	ldr	r2, [sp, #20]
  40c318:	921d      	str	r2, [sp, #116]	; 0x74
  40c31a:	2301      	movs	r3, #1
  40c31c:	9211      	str	r2, [sp, #68]	; 0x44
  40c31e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40c322:	9310      	str	r3, [sp, #64]	; 0x40
  40c324:	46ca      	mov	sl, r9
  40c326:	f10a 0a08 	add.w	sl, sl, #8
  40c32a:	9b02      	ldr	r3, [sp, #8]
  40c32c:	0759      	lsls	r1, r3, #29
  40c32e:	d504      	bpl.n	40c33a <_vfiprintf_r+0x8e6>
  40c330:	9b08      	ldr	r3, [sp, #32]
  40c332:	9901      	ldr	r1, [sp, #4]
  40c334:	1a5c      	subs	r4, r3, r1
  40c336:	2c00      	cmp	r4, #0
  40c338:	dc81      	bgt.n	40c23e <_vfiprintf_r+0x7ea>
  40c33a:	9b03      	ldr	r3, [sp, #12]
  40c33c:	9908      	ldr	r1, [sp, #32]
  40c33e:	9801      	ldr	r0, [sp, #4]
  40c340:	4281      	cmp	r1, r0
  40c342:	bfac      	ite	ge
  40c344:	185b      	addge	r3, r3, r1
  40c346:	181b      	addlt	r3, r3, r0
  40c348:	9303      	str	r3, [sp, #12]
  40c34a:	bb72      	cbnz	r2, 40c3aa <_vfiprintf_r+0x956>
  40c34c:	2300      	movs	r3, #0
  40c34e:	9310      	str	r3, [sp, #64]	; 0x40
  40c350:	46ca      	mov	sl, r9
  40c352:	f7ff bbbc 	b.w	40bace <_vfiprintf_r+0x7a>
  40c356:	aa0f      	add	r2, sp, #60	; 0x3c
  40c358:	9904      	ldr	r1, [sp, #16]
  40c35a:	4620      	mov	r0, r4
  40c35c:	f7ff fb3a 	bl	40b9d4 <__sprint_r.part.0>
  40c360:	bb50      	cbnz	r0, 40c3b8 <_vfiprintf_r+0x964>
  40c362:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c364:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c366:	f101 0e01 	add.w	lr, r1, #1
  40c36a:	46cc      	mov	ip, r9
  40c36c:	e548      	b.n	40be00 <_vfiprintf_r+0x3ac>
  40c36e:	2a00      	cmp	r2, #0
  40c370:	f040 8140 	bne.w	40c5f4 <_vfiprintf_r+0xba0>
  40c374:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40c378:	2900      	cmp	r1, #0
  40c37a:	f000 811b 	beq.w	40c5b4 <_vfiprintf_r+0xb60>
  40c37e:	2201      	movs	r2, #1
  40c380:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40c384:	4610      	mov	r0, r2
  40c386:	921d      	str	r2, [sp, #116]	; 0x74
  40c388:	911c      	str	r1, [sp, #112]	; 0x70
  40c38a:	46ca      	mov	sl, r9
  40c38c:	4601      	mov	r1, r0
  40c38e:	f10a 0a08 	add.w	sl, sl, #8
  40c392:	3001      	adds	r0, #1
  40c394:	e507      	b.n	40bda6 <_vfiprintf_r+0x352>
  40c396:	9b02      	ldr	r3, [sp, #8]
  40c398:	2a01      	cmp	r2, #1
  40c39a:	f000 8098 	beq.w	40c4ce <_vfiprintf_r+0xa7a>
  40c39e:	2a02      	cmp	r2, #2
  40c3a0:	d10d      	bne.n	40c3be <_vfiprintf_r+0x96a>
  40c3a2:	9302      	str	r3, [sp, #8]
  40c3a4:	2600      	movs	r6, #0
  40c3a6:	2700      	movs	r7, #0
  40c3a8:	e5b0      	b.n	40bf0c <_vfiprintf_r+0x4b8>
  40c3aa:	aa0f      	add	r2, sp, #60	; 0x3c
  40c3ac:	9904      	ldr	r1, [sp, #16]
  40c3ae:	9806      	ldr	r0, [sp, #24]
  40c3b0:	f7ff fb10 	bl	40b9d4 <__sprint_r.part.0>
  40c3b4:	2800      	cmp	r0, #0
  40c3b6:	d0c9      	beq.n	40c34c <_vfiprintf_r+0x8f8>
  40c3b8:	f8dd b010 	ldr.w	fp, [sp, #16]
  40c3bc:	e797      	b.n	40c2ee <_vfiprintf_r+0x89a>
  40c3be:	9302      	str	r3, [sp, #8]
  40c3c0:	2600      	movs	r6, #0
  40c3c2:	2700      	movs	r7, #0
  40c3c4:	4649      	mov	r1, r9
  40c3c6:	e000      	b.n	40c3ca <_vfiprintf_r+0x976>
  40c3c8:	4659      	mov	r1, fp
  40c3ca:	08f2      	lsrs	r2, r6, #3
  40c3cc:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40c3d0:	08f8      	lsrs	r0, r7, #3
  40c3d2:	f006 0307 	and.w	r3, r6, #7
  40c3d6:	4607      	mov	r7, r0
  40c3d8:	4616      	mov	r6, r2
  40c3da:	3330      	adds	r3, #48	; 0x30
  40c3dc:	ea56 0207 	orrs.w	r2, r6, r7
  40c3e0:	f801 3c01 	strb.w	r3, [r1, #-1]
  40c3e4:	f101 3bff 	add.w	fp, r1, #4294967295
  40c3e8:	d1ee      	bne.n	40c3c8 <_vfiprintf_r+0x974>
  40c3ea:	9a02      	ldr	r2, [sp, #8]
  40c3ec:	07d6      	lsls	r6, r2, #31
  40c3ee:	f57f ad9d 	bpl.w	40bf2c <_vfiprintf_r+0x4d8>
  40c3f2:	2b30      	cmp	r3, #48	; 0x30
  40c3f4:	f43f ad9a 	beq.w	40bf2c <_vfiprintf_r+0x4d8>
  40c3f8:	3902      	subs	r1, #2
  40c3fa:	2330      	movs	r3, #48	; 0x30
  40c3fc:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40c400:	eba9 0301 	sub.w	r3, r9, r1
  40c404:	9305      	str	r3, [sp, #20]
  40c406:	468b      	mov	fp, r1
  40c408:	e476      	b.n	40bcf8 <_vfiprintf_r+0x2a4>
  40c40a:	9b03      	ldr	r3, [sp, #12]
  40c40c:	9a08      	ldr	r2, [sp, #32]
  40c40e:	428a      	cmp	r2, r1
  40c410:	bfac      	ite	ge
  40c412:	189b      	addge	r3, r3, r2
  40c414:	185b      	addlt	r3, r3, r1
  40c416:	9303      	str	r3, [sp, #12]
  40c418:	e798      	b.n	40c34c <_vfiprintf_r+0x8f8>
  40c41a:	2202      	movs	r2, #2
  40c41c:	e44d      	b.n	40bcba <_vfiprintf_r+0x266>
  40c41e:	2f00      	cmp	r7, #0
  40c420:	bf08      	it	eq
  40c422:	2e0a      	cmpeq	r6, #10
  40c424:	d352      	bcc.n	40c4cc <_vfiprintf_r+0xa78>
  40c426:	46cb      	mov	fp, r9
  40c428:	4630      	mov	r0, r6
  40c42a:	4639      	mov	r1, r7
  40c42c:	220a      	movs	r2, #10
  40c42e:	2300      	movs	r3, #0
  40c430:	f003 ff4c 	bl	4102cc <__aeabi_uldivmod>
  40c434:	3230      	adds	r2, #48	; 0x30
  40c436:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40c43a:	4630      	mov	r0, r6
  40c43c:	4639      	mov	r1, r7
  40c43e:	2300      	movs	r3, #0
  40c440:	220a      	movs	r2, #10
  40c442:	f003 ff43 	bl	4102cc <__aeabi_uldivmod>
  40c446:	4606      	mov	r6, r0
  40c448:	460f      	mov	r7, r1
  40c44a:	ea56 0307 	orrs.w	r3, r6, r7
  40c44e:	d1eb      	bne.n	40c428 <_vfiprintf_r+0x9d4>
  40c450:	e56c      	b.n	40bf2c <_vfiprintf_r+0x4d8>
  40c452:	9405      	str	r4, [sp, #20]
  40c454:	46cb      	mov	fp, r9
  40c456:	e44f      	b.n	40bcf8 <_vfiprintf_r+0x2a4>
  40c458:	aa0f      	add	r2, sp, #60	; 0x3c
  40c45a:	9904      	ldr	r1, [sp, #16]
  40c45c:	9806      	ldr	r0, [sp, #24]
  40c45e:	f7ff fab9 	bl	40b9d4 <__sprint_r.part.0>
  40c462:	2800      	cmp	r0, #0
  40c464:	d1a8      	bne.n	40c3b8 <_vfiprintf_r+0x964>
  40c466:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c468:	46ca      	mov	sl, r9
  40c46a:	e75e      	b.n	40c32a <_vfiprintf_r+0x8d6>
  40c46c:	aa0f      	add	r2, sp, #60	; 0x3c
  40c46e:	9904      	ldr	r1, [sp, #16]
  40c470:	9806      	ldr	r0, [sp, #24]
  40c472:	f7ff faaf 	bl	40b9d4 <__sprint_r.part.0>
  40c476:	2800      	cmp	r0, #0
  40c478:	d19e      	bne.n	40c3b8 <_vfiprintf_r+0x964>
  40c47a:	46ca      	mov	sl, r9
  40c47c:	f7ff bbc0 	b.w	40bc00 <_vfiprintf_r+0x1ac>
  40c480:	00411d68 	.word	0x00411d68
  40c484:	00411d58 	.word	0x00411d58
  40c488:	3104      	adds	r1, #4
  40c48a:	6816      	ldr	r6, [r2, #0]
  40c48c:	9107      	str	r1, [sp, #28]
  40c48e:	2201      	movs	r2, #1
  40c490:	2700      	movs	r7, #0
  40c492:	e412      	b.n	40bcba <_vfiprintf_r+0x266>
  40c494:	9807      	ldr	r0, [sp, #28]
  40c496:	4601      	mov	r1, r0
  40c498:	3104      	adds	r1, #4
  40c49a:	6806      	ldr	r6, [r0, #0]
  40c49c:	9107      	str	r1, [sp, #28]
  40c49e:	2700      	movs	r7, #0
  40c4a0:	e40b      	b.n	40bcba <_vfiprintf_r+0x266>
  40c4a2:	680e      	ldr	r6, [r1, #0]
  40c4a4:	3104      	adds	r1, #4
  40c4a6:	9107      	str	r1, [sp, #28]
  40c4a8:	2700      	movs	r7, #0
  40c4aa:	e591      	b.n	40bfd0 <_vfiprintf_r+0x57c>
  40c4ac:	9907      	ldr	r1, [sp, #28]
  40c4ae:	680e      	ldr	r6, [r1, #0]
  40c4b0:	460a      	mov	r2, r1
  40c4b2:	17f7      	asrs	r7, r6, #31
  40c4b4:	3204      	adds	r2, #4
  40c4b6:	9207      	str	r2, [sp, #28]
  40c4b8:	4630      	mov	r0, r6
  40c4ba:	4639      	mov	r1, r7
  40c4bc:	e50f      	b.n	40bede <_vfiprintf_r+0x48a>
  40c4be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40c4c2:	f001 fe4f 	bl	40e164 <__retarget_lock_release_recursive>
  40c4c6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40c4ca:	e71a      	b.n	40c302 <_vfiprintf_r+0x8ae>
  40c4cc:	9b02      	ldr	r3, [sp, #8]
  40c4ce:	9302      	str	r3, [sp, #8]
  40c4d0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40c4d4:	3630      	adds	r6, #48	; 0x30
  40c4d6:	2301      	movs	r3, #1
  40c4d8:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40c4dc:	9305      	str	r3, [sp, #20]
  40c4de:	e40b      	b.n	40bcf8 <_vfiprintf_r+0x2a4>
  40c4e0:	aa0f      	add	r2, sp, #60	; 0x3c
  40c4e2:	9904      	ldr	r1, [sp, #16]
  40c4e4:	9806      	ldr	r0, [sp, #24]
  40c4e6:	f7ff fa75 	bl	40b9d4 <__sprint_r.part.0>
  40c4ea:	2800      	cmp	r0, #0
  40c4ec:	f47f af64 	bne.w	40c3b8 <_vfiprintf_r+0x964>
  40c4f0:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c4f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c4f4:	1c48      	adds	r0, r1, #1
  40c4f6:	46ca      	mov	sl, r9
  40c4f8:	e651      	b.n	40c19e <_vfiprintf_r+0x74a>
  40c4fa:	aa0f      	add	r2, sp, #60	; 0x3c
  40c4fc:	9904      	ldr	r1, [sp, #16]
  40c4fe:	9806      	ldr	r0, [sp, #24]
  40c500:	f7ff fa68 	bl	40b9d4 <__sprint_r.part.0>
  40c504:	2800      	cmp	r0, #0
  40c506:	f47f af57 	bne.w	40c3b8 <_vfiprintf_r+0x964>
  40c50a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c50c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c50e:	1c48      	adds	r0, r1, #1
  40c510:	46ca      	mov	sl, r9
  40c512:	e448      	b.n	40bda6 <_vfiprintf_r+0x352>
  40c514:	2a00      	cmp	r2, #0
  40c516:	f040 8091 	bne.w	40c63c <_vfiprintf_r+0xbe8>
  40c51a:	2001      	movs	r0, #1
  40c51c:	4611      	mov	r1, r2
  40c51e:	46ca      	mov	sl, r9
  40c520:	e641      	b.n	40c1a6 <_vfiprintf_r+0x752>
  40c522:	aa0f      	add	r2, sp, #60	; 0x3c
  40c524:	9904      	ldr	r1, [sp, #16]
  40c526:	9806      	ldr	r0, [sp, #24]
  40c528:	f7ff fa54 	bl	40b9d4 <__sprint_r.part.0>
  40c52c:	2800      	cmp	r0, #0
  40c52e:	f47f af43 	bne.w	40c3b8 <_vfiprintf_r+0x964>
  40c532:	9810      	ldr	r0, [sp, #64]	; 0x40
  40c534:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c536:	3001      	adds	r0, #1
  40c538:	46ca      	mov	sl, r9
  40c53a:	e667      	b.n	40c20c <_vfiprintf_r+0x7b8>
  40c53c:	46d3      	mov	fp, sl
  40c53e:	e6d6      	b.n	40c2ee <_vfiprintf_r+0x89a>
  40c540:	9e07      	ldr	r6, [sp, #28]
  40c542:	3607      	adds	r6, #7
  40c544:	f026 0207 	bic.w	r2, r6, #7
  40c548:	f102 0108 	add.w	r1, r2, #8
  40c54c:	e9d2 6700 	ldrd	r6, r7, [r2]
  40c550:	9107      	str	r1, [sp, #28]
  40c552:	2201      	movs	r2, #1
  40c554:	f7ff bbb1 	b.w	40bcba <_vfiprintf_r+0x266>
  40c558:	9e07      	ldr	r6, [sp, #28]
  40c55a:	3607      	adds	r6, #7
  40c55c:	f026 0607 	bic.w	r6, r6, #7
  40c560:	e9d6 0100 	ldrd	r0, r1, [r6]
  40c564:	f106 0208 	add.w	r2, r6, #8
  40c568:	9207      	str	r2, [sp, #28]
  40c56a:	4606      	mov	r6, r0
  40c56c:	460f      	mov	r7, r1
  40c56e:	e4b6      	b.n	40bede <_vfiprintf_r+0x48a>
  40c570:	9e07      	ldr	r6, [sp, #28]
  40c572:	3607      	adds	r6, #7
  40c574:	f026 0207 	bic.w	r2, r6, #7
  40c578:	f102 0108 	add.w	r1, r2, #8
  40c57c:	e9d2 6700 	ldrd	r6, r7, [r2]
  40c580:	9107      	str	r1, [sp, #28]
  40c582:	2200      	movs	r2, #0
  40c584:	f7ff bb99 	b.w	40bcba <_vfiprintf_r+0x266>
  40c588:	9e07      	ldr	r6, [sp, #28]
  40c58a:	3607      	adds	r6, #7
  40c58c:	f026 0107 	bic.w	r1, r6, #7
  40c590:	f101 0008 	add.w	r0, r1, #8
  40c594:	9007      	str	r0, [sp, #28]
  40c596:	e9d1 6700 	ldrd	r6, r7, [r1]
  40c59a:	e519      	b.n	40bfd0 <_vfiprintf_r+0x57c>
  40c59c:	46cb      	mov	fp, r9
  40c59e:	f7ff bbab 	b.w	40bcf8 <_vfiprintf_r+0x2a4>
  40c5a2:	252d      	movs	r5, #45	; 0x2d
  40c5a4:	4276      	negs	r6, r6
  40c5a6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40c5aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c5ae:	2201      	movs	r2, #1
  40c5b0:	f7ff bb88 	b.w	40bcc4 <_vfiprintf_r+0x270>
  40c5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c5b6:	b9b3      	cbnz	r3, 40c5e6 <_vfiprintf_r+0xb92>
  40c5b8:	4611      	mov	r1, r2
  40c5ba:	2001      	movs	r0, #1
  40c5bc:	46ca      	mov	sl, r9
  40c5be:	e5f2      	b.n	40c1a6 <_vfiprintf_r+0x752>
  40c5c0:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40c5c4:	f001 fdce 	bl	40e164 <__retarget_lock_release_recursive>
  40c5c8:	f04f 33ff 	mov.w	r3, #4294967295
  40c5cc:	9303      	str	r3, [sp, #12]
  40c5ce:	f7ff bb50 	b.w	40bc72 <_vfiprintf_r+0x21e>
  40c5d2:	aa0f      	add	r2, sp, #60	; 0x3c
  40c5d4:	9904      	ldr	r1, [sp, #16]
  40c5d6:	9806      	ldr	r0, [sp, #24]
  40c5d8:	f7ff f9fc 	bl	40b9d4 <__sprint_r.part.0>
  40c5dc:	2800      	cmp	r0, #0
  40c5de:	f47f aeeb 	bne.w	40c3b8 <_vfiprintf_r+0x964>
  40c5e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c5e4:	e6a9      	b.n	40c33a <_vfiprintf_r+0x8e6>
  40c5e6:	ab0e      	add	r3, sp, #56	; 0x38
  40c5e8:	2202      	movs	r2, #2
  40c5ea:	931c      	str	r3, [sp, #112]	; 0x70
  40c5ec:	921d      	str	r2, [sp, #116]	; 0x74
  40c5ee:	2001      	movs	r0, #1
  40c5f0:	46ca      	mov	sl, r9
  40c5f2:	e5d0      	b.n	40c196 <_vfiprintf_r+0x742>
  40c5f4:	aa0f      	add	r2, sp, #60	; 0x3c
  40c5f6:	9904      	ldr	r1, [sp, #16]
  40c5f8:	9806      	ldr	r0, [sp, #24]
  40c5fa:	f7ff f9eb 	bl	40b9d4 <__sprint_r.part.0>
  40c5fe:	2800      	cmp	r0, #0
  40c600:	f47f aeda 	bne.w	40c3b8 <_vfiprintf_r+0x964>
  40c604:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c606:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c608:	1c48      	adds	r0, r1, #1
  40c60a:	46ca      	mov	sl, r9
  40c60c:	e5a4      	b.n	40c158 <_vfiprintf_r+0x704>
  40c60e:	9a07      	ldr	r2, [sp, #28]
  40c610:	9903      	ldr	r1, [sp, #12]
  40c612:	6813      	ldr	r3, [r2, #0]
  40c614:	17cd      	asrs	r5, r1, #31
  40c616:	4608      	mov	r0, r1
  40c618:	3204      	adds	r2, #4
  40c61a:	4629      	mov	r1, r5
  40c61c:	9207      	str	r2, [sp, #28]
  40c61e:	e9c3 0100 	strd	r0, r1, [r3]
  40c622:	f7ff ba54 	b.w	40bace <_vfiprintf_r+0x7a>
  40c626:	4658      	mov	r0, fp
  40c628:	9607      	str	r6, [sp, #28]
  40c62a:	9302      	str	r3, [sp, #8]
  40c62c:	f7fd fc28 	bl	409e80 <strlen>
  40c630:	2400      	movs	r4, #0
  40c632:	9005      	str	r0, [sp, #20]
  40c634:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40c638:	f7ff bb5e 	b.w	40bcf8 <_vfiprintf_r+0x2a4>
  40c63c:	aa0f      	add	r2, sp, #60	; 0x3c
  40c63e:	9904      	ldr	r1, [sp, #16]
  40c640:	9806      	ldr	r0, [sp, #24]
  40c642:	f7ff f9c7 	bl	40b9d4 <__sprint_r.part.0>
  40c646:	2800      	cmp	r0, #0
  40c648:	f47f aeb6 	bne.w	40c3b8 <_vfiprintf_r+0x964>
  40c64c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c64e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c650:	1c48      	adds	r0, r1, #1
  40c652:	46ca      	mov	sl, r9
  40c654:	e5a7      	b.n	40c1a6 <_vfiprintf_r+0x752>
  40c656:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c658:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c65a:	4e20      	ldr	r6, [pc, #128]	; (40c6dc <_vfiprintf_r+0xc88>)
  40c65c:	3101      	adds	r1, #1
  40c65e:	f7ff bb90 	b.w	40bd82 <_vfiprintf_r+0x32e>
  40c662:	2c06      	cmp	r4, #6
  40c664:	bf28      	it	cs
  40c666:	2406      	movcs	r4, #6
  40c668:	9405      	str	r4, [sp, #20]
  40c66a:	9607      	str	r6, [sp, #28]
  40c66c:	9401      	str	r4, [sp, #4]
  40c66e:	f8df b070 	ldr.w	fp, [pc, #112]	; 40c6e0 <_vfiprintf_r+0xc8c>
  40c672:	e4d5      	b.n	40c020 <_vfiprintf_r+0x5cc>
  40c674:	9810      	ldr	r0, [sp, #64]	; 0x40
  40c676:	4e19      	ldr	r6, [pc, #100]	; (40c6dc <_vfiprintf_r+0xc88>)
  40c678:	3001      	adds	r0, #1
  40c67a:	e603      	b.n	40c284 <_vfiprintf_r+0x830>
  40c67c:	9405      	str	r4, [sp, #20]
  40c67e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40c682:	9607      	str	r6, [sp, #28]
  40c684:	9302      	str	r3, [sp, #8]
  40c686:	4604      	mov	r4, r0
  40c688:	f7ff bb36 	b.w	40bcf8 <_vfiprintf_r+0x2a4>
  40c68c:	4686      	mov	lr, r0
  40c68e:	f7ff bbce 	b.w	40be2e <_vfiprintf_r+0x3da>
  40c692:	9806      	ldr	r0, [sp, #24]
  40c694:	aa0f      	add	r2, sp, #60	; 0x3c
  40c696:	4659      	mov	r1, fp
  40c698:	f7ff f99c 	bl	40b9d4 <__sprint_r.part.0>
  40c69c:	2800      	cmp	r0, #0
  40c69e:	f43f ae24 	beq.w	40c2ea <_vfiprintf_r+0x896>
  40c6a2:	e624      	b.n	40c2ee <_vfiprintf_r+0x89a>
  40c6a4:	9907      	ldr	r1, [sp, #28]
  40c6a6:	f898 2001 	ldrb.w	r2, [r8, #1]
  40c6aa:	680c      	ldr	r4, [r1, #0]
  40c6ac:	3104      	adds	r1, #4
  40c6ae:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40c6b2:	46b8      	mov	r8, r7
  40c6b4:	9107      	str	r1, [sp, #28]
  40c6b6:	f7ff ba3f 	b.w	40bb38 <_vfiprintf_r+0xe4>
  40c6ba:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c6be:	e43c      	b.n	40bf3a <_vfiprintf_r+0x4e6>
  40c6c0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c6c4:	e521      	b.n	40c10a <_vfiprintf_r+0x6b6>
  40c6c6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c6ca:	f7ff bbf4 	b.w	40beb6 <_vfiprintf_r+0x462>
  40c6ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c6d2:	e491      	b.n	40bff8 <_vfiprintf_r+0x5a4>
  40c6d4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40c6d8:	e469      	b.n	40bfae <_vfiprintf_r+0x55a>
  40c6da:	bf00      	nop
  40c6dc:	00411d58 	.word	0x00411d58
  40c6e0:	00411d2c 	.word	0x00411d2c

0040c6e4 <__sbprintf>:
  40c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c6e8:	460c      	mov	r4, r1
  40c6ea:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40c6ee:	8989      	ldrh	r1, [r1, #12]
  40c6f0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40c6f2:	89e5      	ldrh	r5, [r4, #14]
  40c6f4:	9619      	str	r6, [sp, #100]	; 0x64
  40c6f6:	f021 0102 	bic.w	r1, r1, #2
  40c6fa:	4606      	mov	r6, r0
  40c6fc:	69e0      	ldr	r0, [r4, #28]
  40c6fe:	f8ad 100c 	strh.w	r1, [sp, #12]
  40c702:	4617      	mov	r7, r2
  40c704:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40c708:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40c70a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40c70e:	4698      	mov	r8, r3
  40c710:	ad1a      	add	r5, sp, #104	; 0x68
  40c712:	2300      	movs	r3, #0
  40c714:	9007      	str	r0, [sp, #28]
  40c716:	a816      	add	r0, sp, #88	; 0x58
  40c718:	9209      	str	r2, [sp, #36]	; 0x24
  40c71a:	9306      	str	r3, [sp, #24]
  40c71c:	9500      	str	r5, [sp, #0]
  40c71e:	9504      	str	r5, [sp, #16]
  40c720:	9102      	str	r1, [sp, #8]
  40c722:	9105      	str	r1, [sp, #20]
  40c724:	f001 fd18 	bl	40e158 <__retarget_lock_init_recursive>
  40c728:	4643      	mov	r3, r8
  40c72a:	463a      	mov	r2, r7
  40c72c:	4669      	mov	r1, sp
  40c72e:	4630      	mov	r0, r6
  40c730:	f7ff f990 	bl	40ba54 <_vfiprintf_r>
  40c734:	1e05      	subs	r5, r0, #0
  40c736:	db07      	blt.n	40c748 <__sbprintf+0x64>
  40c738:	4630      	mov	r0, r6
  40c73a:	4669      	mov	r1, sp
  40c73c:	f001 f8e6 	bl	40d90c <_fflush_r>
  40c740:	2800      	cmp	r0, #0
  40c742:	bf18      	it	ne
  40c744:	f04f 35ff 	movne.w	r5, #4294967295
  40c748:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40c74c:	065b      	lsls	r3, r3, #25
  40c74e:	d503      	bpl.n	40c758 <__sbprintf+0x74>
  40c750:	89a3      	ldrh	r3, [r4, #12]
  40c752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c756:	81a3      	strh	r3, [r4, #12]
  40c758:	9816      	ldr	r0, [sp, #88]	; 0x58
  40c75a:	f001 fcff 	bl	40e15c <__retarget_lock_close_recursive>
  40c75e:	4628      	mov	r0, r5
  40c760:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40c764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040c768 <__swsetup_r>:
  40c768:	b538      	push	{r3, r4, r5, lr}
  40c76a:	4b30      	ldr	r3, [pc, #192]	; (40c82c <__swsetup_r+0xc4>)
  40c76c:	681b      	ldr	r3, [r3, #0]
  40c76e:	4605      	mov	r5, r0
  40c770:	460c      	mov	r4, r1
  40c772:	b113      	cbz	r3, 40c77a <__swsetup_r+0x12>
  40c774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40c776:	2a00      	cmp	r2, #0
  40c778:	d038      	beq.n	40c7ec <__swsetup_r+0x84>
  40c77a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c77e:	b293      	uxth	r3, r2
  40c780:	0718      	lsls	r0, r3, #28
  40c782:	d50c      	bpl.n	40c79e <__swsetup_r+0x36>
  40c784:	6920      	ldr	r0, [r4, #16]
  40c786:	b1a8      	cbz	r0, 40c7b4 <__swsetup_r+0x4c>
  40c788:	f013 0201 	ands.w	r2, r3, #1
  40c78c:	d01e      	beq.n	40c7cc <__swsetup_r+0x64>
  40c78e:	6963      	ldr	r3, [r4, #20]
  40c790:	2200      	movs	r2, #0
  40c792:	425b      	negs	r3, r3
  40c794:	61a3      	str	r3, [r4, #24]
  40c796:	60a2      	str	r2, [r4, #8]
  40c798:	b1f0      	cbz	r0, 40c7d8 <__swsetup_r+0x70>
  40c79a:	2000      	movs	r0, #0
  40c79c:	bd38      	pop	{r3, r4, r5, pc}
  40c79e:	06d9      	lsls	r1, r3, #27
  40c7a0:	d53c      	bpl.n	40c81c <__swsetup_r+0xb4>
  40c7a2:	0758      	lsls	r0, r3, #29
  40c7a4:	d426      	bmi.n	40c7f4 <__swsetup_r+0x8c>
  40c7a6:	6920      	ldr	r0, [r4, #16]
  40c7a8:	f042 0308 	orr.w	r3, r2, #8
  40c7ac:	81a3      	strh	r3, [r4, #12]
  40c7ae:	b29b      	uxth	r3, r3
  40c7b0:	2800      	cmp	r0, #0
  40c7b2:	d1e9      	bne.n	40c788 <__swsetup_r+0x20>
  40c7b4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40c7b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40c7bc:	d0e4      	beq.n	40c788 <__swsetup_r+0x20>
  40c7be:	4628      	mov	r0, r5
  40c7c0:	4621      	mov	r1, r4
  40c7c2:	f001 fcff 	bl	40e1c4 <__smakebuf_r>
  40c7c6:	89a3      	ldrh	r3, [r4, #12]
  40c7c8:	6920      	ldr	r0, [r4, #16]
  40c7ca:	e7dd      	b.n	40c788 <__swsetup_r+0x20>
  40c7cc:	0799      	lsls	r1, r3, #30
  40c7ce:	bf58      	it	pl
  40c7d0:	6962      	ldrpl	r2, [r4, #20]
  40c7d2:	60a2      	str	r2, [r4, #8]
  40c7d4:	2800      	cmp	r0, #0
  40c7d6:	d1e0      	bne.n	40c79a <__swsetup_r+0x32>
  40c7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c7dc:	061a      	lsls	r2, r3, #24
  40c7de:	d5dd      	bpl.n	40c79c <__swsetup_r+0x34>
  40c7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c7e4:	81a3      	strh	r3, [r4, #12]
  40c7e6:	f04f 30ff 	mov.w	r0, #4294967295
  40c7ea:	bd38      	pop	{r3, r4, r5, pc}
  40c7ec:	4618      	mov	r0, r3
  40c7ee:	f001 f8e5 	bl	40d9bc <__sinit>
  40c7f2:	e7c2      	b.n	40c77a <__swsetup_r+0x12>
  40c7f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40c7f6:	b151      	cbz	r1, 40c80e <__swsetup_r+0xa6>
  40c7f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40c7fc:	4299      	cmp	r1, r3
  40c7fe:	d004      	beq.n	40c80a <__swsetup_r+0xa2>
  40c800:	4628      	mov	r0, r5
  40c802:	f001 fa01 	bl	40dc08 <_free_r>
  40c806:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c80a:	2300      	movs	r3, #0
  40c80c:	6323      	str	r3, [r4, #48]	; 0x30
  40c80e:	2300      	movs	r3, #0
  40c810:	6920      	ldr	r0, [r4, #16]
  40c812:	6063      	str	r3, [r4, #4]
  40c814:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40c818:	6020      	str	r0, [r4, #0]
  40c81a:	e7c5      	b.n	40c7a8 <__swsetup_r+0x40>
  40c81c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40c820:	2309      	movs	r3, #9
  40c822:	602b      	str	r3, [r5, #0]
  40c824:	f04f 30ff 	mov.w	r0, #4294967295
  40c828:	81a2      	strh	r2, [r4, #12]
  40c82a:	bd38      	pop	{r3, r4, r5, pc}
  40c82c:	20400078 	.word	0x20400078

0040c830 <register_fini>:
  40c830:	4b02      	ldr	r3, [pc, #8]	; (40c83c <register_fini+0xc>)
  40c832:	b113      	cbz	r3, 40c83a <register_fini+0xa>
  40c834:	4802      	ldr	r0, [pc, #8]	; (40c840 <register_fini+0x10>)
  40c836:	f000 b805 	b.w	40c844 <atexit>
  40c83a:	4770      	bx	lr
  40c83c:	00000000 	.word	0x00000000
  40c840:	0040da2d 	.word	0x0040da2d

0040c844 <atexit>:
  40c844:	2300      	movs	r3, #0
  40c846:	4601      	mov	r1, r0
  40c848:	461a      	mov	r2, r3
  40c84a:	4618      	mov	r0, r3
  40c84c:	f002 bf56 	b.w	40f6fc <__register_exitproc>

0040c850 <quorem>:
  40c850:	6902      	ldr	r2, [r0, #16]
  40c852:	690b      	ldr	r3, [r1, #16]
  40c854:	4293      	cmp	r3, r2
  40c856:	f300 808d 	bgt.w	40c974 <quorem+0x124>
  40c85a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c85e:	f103 38ff 	add.w	r8, r3, #4294967295
  40c862:	f101 0714 	add.w	r7, r1, #20
  40c866:	f100 0b14 	add.w	fp, r0, #20
  40c86a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40c86e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40c872:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40c876:	b083      	sub	sp, #12
  40c878:	3201      	adds	r2, #1
  40c87a:	fbb3 f9f2 	udiv	r9, r3, r2
  40c87e:	eb0b 0304 	add.w	r3, fp, r4
  40c882:	9400      	str	r4, [sp, #0]
  40c884:	eb07 0a04 	add.w	sl, r7, r4
  40c888:	9301      	str	r3, [sp, #4]
  40c88a:	f1b9 0f00 	cmp.w	r9, #0
  40c88e:	d039      	beq.n	40c904 <quorem+0xb4>
  40c890:	2500      	movs	r5, #0
  40c892:	462e      	mov	r6, r5
  40c894:	46bc      	mov	ip, r7
  40c896:	46de      	mov	lr, fp
  40c898:	f85c 4b04 	ldr.w	r4, [ip], #4
  40c89c:	f8de 3000 	ldr.w	r3, [lr]
  40c8a0:	b2a2      	uxth	r2, r4
  40c8a2:	fb09 5502 	mla	r5, r9, r2, r5
  40c8a6:	0c22      	lsrs	r2, r4, #16
  40c8a8:	0c2c      	lsrs	r4, r5, #16
  40c8aa:	fb09 4202 	mla	r2, r9, r2, r4
  40c8ae:	b2ad      	uxth	r5, r5
  40c8b0:	1b75      	subs	r5, r6, r5
  40c8b2:	b296      	uxth	r6, r2
  40c8b4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40c8b8:	fa15 f383 	uxtah	r3, r5, r3
  40c8bc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40c8c0:	b29b      	uxth	r3, r3
  40c8c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40c8c6:	45e2      	cmp	sl, ip
  40c8c8:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40c8cc:	f84e 3b04 	str.w	r3, [lr], #4
  40c8d0:	ea4f 4626 	mov.w	r6, r6, asr #16
  40c8d4:	d2e0      	bcs.n	40c898 <quorem+0x48>
  40c8d6:	9b00      	ldr	r3, [sp, #0]
  40c8d8:	f85b 3003 	ldr.w	r3, [fp, r3]
  40c8dc:	b993      	cbnz	r3, 40c904 <quorem+0xb4>
  40c8de:	9c01      	ldr	r4, [sp, #4]
  40c8e0:	1f23      	subs	r3, r4, #4
  40c8e2:	459b      	cmp	fp, r3
  40c8e4:	d20c      	bcs.n	40c900 <quorem+0xb0>
  40c8e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40c8ea:	b94b      	cbnz	r3, 40c900 <quorem+0xb0>
  40c8ec:	f1a4 0308 	sub.w	r3, r4, #8
  40c8f0:	e002      	b.n	40c8f8 <quorem+0xa8>
  40c8f2:	681a      	ldr	r2, [r3, #0]
  40c8f4:	3b04      	subs	r3, #4
  40c8f6:	b91a      	cbnz	r2, 40c900 <quorem+0xb0>
  40c8f8:	459b      	cmp	fp, r3
  40c8fa:	f108 38ff 	add.w	r8, r8, #4294967295
  40c8fe:	d3f8      	bcc.n	40c8f2 <quorem+0xa2>
  40c900:	f8c0 8010 	str.w	r8, [r0, #16]
  40c904:	4604      	mov	r4, r0
  40c906:	f002 fa69 	bl	40eddc <__mcmp>
  40c90a:	2800      	cmp	r0, #0
  40c90c:	db2e      	blt.n	40c96c <quorem+0x11c>
  40c90e:	f109 0901 	add.w	r9, r9, #1
  40c912:	465d      	mov	r5, fp
  40c914:	2300      	movs	r3, #0
  40c916:	f857 1b04 	ldr.w	r1, [r7], #4
  40c91a:	6828      	ldr	r0, [r5, #0]
  40c91c:	b28a      	uxth	r2, r1
  40c91e:	1a9a      	subs	r2, r3, r2
  40c920:	0c0b      	lsrs	r3, r1, #16
  40c922:	fa12 f280 	uxtah	r2, r2, r0
  40c926:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40c92a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40c92e:	b292      	uxth	r2, r2
  40c930:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40c934:	45ba      	cmp	sl, r7
  40c936:	f845 2b04 	str.w	r2, [r5], #4
  40c93a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40c93e:	d2ea      	bcs.n	40c916 <quorem+0xc6>
  40c940:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40c944:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40c948:	b982      	cbnz	r2, 40c96c <quorem+0x11c>
  40c94a:	1f1a      	subs	r2, r3, #4
  40c94c:	4593      	cmp	fp, r2
  40c94e:	d20b      	bcs.n	40c968 <quorem+0x118>
  40c950:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40c954:	b942      	cbnz	r2, 40c968 <quorem+0x118>
  40c956:	3b08      	subs	r3, #8
  40c958:	e002      	b.n	40c960 <quorem+0x110>
  40c95a:	681a      	ldr	r2, [r3, #0]
  40c95c:	3b04      	subs	r3, #4
  40c95e:	b91a      	cbnz	r2, 40c968 <quorem+0x118>
  40c960:	459b      	cmp	fp, r3
  40c962:	f108 38ff 	add.w	r8, r8, #4294967295
  40c966:	d3f8      	bcc.n	40c95a <quorem+0x10a>
  40c968:	f8c4 8010 	str.w	r8, [r4, #16]
  40c96c:	4648      	mov	r0, r9
  40c96e:	b003      	add	sp, #12
  40c970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c974:	2000      	movs	r0, #0
  40c976:	4770      	bx	lr

0040c978 <_dtoa_r>:
  40c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c97c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40c97e:	b09b      	sub	sp, #108	; 0x6c
  40c980:	4604      	mov	r4, r0
  40c982:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40c984:	4692      	mov	sl, r2
  40c986:	469b      	mov	fp, r3
  40c988:	b141      	cbz	r1, 40c99c <_dtoa_r+0x24>
  40c98a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40c98c:	604a      	str	r2, [r1, #4]
  40c98e:	2301      	movs	r3, #1
  40c990:	4093      	lsls	r3, r2
  40c992:	608b      	str	r3, [r1, #8]
  40c994:	f002 f84a 	bl	40ea2c <_Bfree>
  40c998:	2300      	movs	r3, #0
  40c99a:	6423      	str	r3, [r4, #64]	; 0x40
  40c99c:	f1bb 0f00 	cmp.w	fp, #0
  40c9a0:	465d      	mov	r5, fp
  40c9a2:	db35      	blt.n	40ca10 <_dtoa_r+0x98>
  40c9a4:	2300      	movs	r3, #0
  40c9a6:	6033      	str	r3, [r6, #0]
  40c9a8:	4b9d      	ldr	r3, [pc, #628]	; (40cc20 <_dtoa_r+0x2a8>)
  40c9aa:	43ab      	bics	r3, r5
  40c9ac:	d015      	beq.n	40c9da <_dtoa_r+0x62>
  40c9ae:	4650      	mov	r0, sl
  40c9b0:	4659      	mov	r1, fp
  40c9b2:	2200      	movs	r2, #0
  40c9b4:	2300      	movs	r3, #0
  40c9b6:	f003 fc19 	bl	4101ec <__aeabi_dcmpeq>
  40c9ba:	4680      	mov	r8, r0
  40c9bc:	2800      	cmp	r0, #0
  40c9be:	d02d      	beq.n	40ca1c <_dtoa_r+0xa4>
  40c9c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40c9c2:	2301      	movs	r3, #1
  40c9c4:	6013      	str	r3, [r2, #0]
  40c9c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40c9c8:	2b00      	cmp	r3, #0
  40c9ca:	f000 80bd 	beq.w	40cb48 <_dtoa_r+0x1d0>
  40c9ce:	4895      	ldr	r0, [pc, #596]	; (40cc24 <_dtoa_r+0x2ac>)
  40c9d0:	6018      	str	r0, [r3, #0]
  40c9d2:	3801      	subs	r0, #1
  40c9d4:	b01b      	add	sp, #108	; 0x6c
  40c9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9da:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40c9dc:	f242 730f 	movw	r3, #9999	; 0x270f
  40c9e0:	6013      	str	r3, [r2, #0]
  40c9e2:	f1ba 0f00 	cmp.w	sl, #0
  40c9e6:	d10d      	bne.n	40ca04 <_dtoa_r+0x8c>
  40c9e8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40c9ec:	b955      	cbnz	r5, 40ca04 <_dtoa_r+0x8c>
  40c9ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40c9f0:	488d      	ldr	r0, [pc, #564]	; (40cc28 <_dtoa_r+0x2b0>)
  40c9f2:	2b00      	cmp	r3, #0
  40c9f4:	d0ee      	beq.n	40c9d4 <_dtoa_r+0x5c>
  40c9f6:	f100 0308 	add.w	r3, r0, #8
  40c9fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40c9fc:	6013      	str	r3, [r2, #0]
  40c9fe:	b01b      	add	sp, #108	; 0x6c
  40ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ca04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40ca06:	4889      	ldr	r0, [pc, #548]	; (40cc2c <_dtoa_r+0x2b4>)
  40ca08:	2b00      	cmp	r3, #0
  40ca0a:	d0e3      	beq.n	40c9d4 <_dtoa_r+0x5c>
  40ca0c:	1cc3      	adds	r3, r0, #3
  40ca0e:	e7f4      	b.n	40c9fa <_dtoa_r+0x82>
  40ca10:	2301      	movs	r3, #1
  40ca12:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40ca16:	6033      	str	r3, [r6, #0]
  40ca18:	46ab      	mov	fp, r5
  40ca1a:	e7c5      	b.n	40c9a8 <_dtoa_r+0x30>
  40ca1c:	aa18      	add	r2, sp, #96	; 0x60
  40ca1e:	ab19      	add	r3, sp, #100	; 0x64
  40ca20:	9201      	str	r2, [sp, #4]
  40ca22:	9300      	str	r3, [sp, #0]
  40ca24:	4652      	mov	r2, sl
  40ca26:	465b      	mov	r3, fp
  40ca28:	4620      	mov	r0, r4
  40ca2a:	f002 fa77 	bl	40ef1c <__d2b>
  40ca2e:	0d2b      	lsrs	r3, r5, #20
  40ca30:	4681      	mov	r9, r0
  40ca32:	d071      	beq.n	40cb18 <_dtoa_r+0x1a0>
  40ca34:	f3cb 0213 	ubfx	r2, fp, #0, #20
  40ca38:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40ca3c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40ca3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40ca42:	4650      	mov	r0, sl
  40ca44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40ca48:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40ca4c:	2200      	movs	r2, #0
  40ca4e:	4b78      	ldr	r3, [pc, #480]	; (40cc30 <_dtoa_r+0x2b8>)
  40ca50:	f002 ffb0 	bl	40f9b4 <__aeabi_dsub>
  40ca54:	a36c      	add	r3, pc, #432	; (adr r3, 40cc08 <_dtoa_r+0x290>)
  40ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ca5a:	f003 f95f 	bl	40fd1c <__aeabi_dmul>
  40ca5e:	a36c      	add	r3, pc, #432	; (adr r3, 40cc10 <_dtoa_r+0x298>)
  40ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ca64:	f002 ffa8 	bl	40f9b8 <__adddf3>
  40ca68:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40ca6c:	4630      	mov	r0, r6
  40ca6e:	f003 f8ef 	bl	40fc50 <__aeabi_i2d>
  40ca72:	a369      	add	r3, pc, #420	; (adr r3, 40cc18 <_dtoa_r+0x2a0>)
  40ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ca78:	f003 f950 	bl	40fd1c <__aeabi_dmul>
  40ca7c:	4602      	mov	r2, r0
  40ca7e:	460b      	mov	r3, r1
  40ca80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ca84:	f002 ff98 	bl	40f9b8 <__adddf3>
  40ca88:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40ca8c:	f003 fbf6 	bl	41027c <__aeabi_d2iz>
  40ca90:	2200      	movs	r2, #0
  40ca92:	9002      	str	r0, [sp, #8]
  40ca94:	2300      	movs	r3, #0
  40ca96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40ca9a:	f003 fbb1 	bl	410200 <__aeabi_dcmplt>
  40ca9e:	2800      	cmp	r0, #0
  40caa0:	f040 8173 	bne.w	40cd8a <_dtoa_r+0x412>
  40caa4:	9d02      	ldr	r5, [sp, #8]
  40caa6:	2d16      	cmp	r5, #22
  40caa8:	f200 815d 	bhi.w	40cd66 <_dtoa_r+0x3ee>
  40caac:	4b61      	ldr	r3, [pc, #388]	; (40cc34 <_dtoa_r+0x2bc>)
  40caae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40cab2:	e9d3 0100 	ldrd	r0, r1, [r3]
  40cab6:	4652      	mov	r2, sl
  40cab8:	465b      	mov	r3, fp
  40caba:	f003 fbbf 	bl	41023c <__aeabi_dcmpgt>
  40cabe:	2800      	cmp	r0, #0
  40cac0:	f000 81c5 	beq.w	40ce4e <_dtoa_r+0x4d6>
  40cac4:	1e6b      	subs	r3, r5, #1
  40cac6:	9302      	str	r3, [sp, #8]
  40cac8:	2300      	movs	r3, #0
  40caca:	930e      	str	r3, [sp, #56]	; 0x38
  40cacc:	1bbf      	subs	r7, r7, r6
  40cace:	1e7b      	subs	r3, r7, #1
  40cad0:	9306      	str	r3, [sp, #24]
  40cad2:	f100 8154 	bmi.w	40cd7e <_dtoa_r+0x406>
  40cad6:	2300      	movs	r3, #0
  40cad8:	9308      	str	r3, [sp, #32]
  40cada:	9b02      	ldr	r3, [sp, #8]
  40cadc:	2b00      	cmp	r3, #0
  40cade:	f2c0 8145 	blt.w	40cd6c <_dtoa_r+0x3f4>
  40cae2:	9a06      	ldr	r2, [sp, #24]
  40cae4:	930d      	str	r3, [sp, #52]	; 0x34
  40cae6:	4611      	mov	r1, r2
  40cae8:	4419      	add	r1, r3
  40caea:	2300      	movs	r3, #0
  40caec:	9106      	str	r1, [sp, #24]
  40caee:	930c      	str	r3, [sp, #48]	; 0x30
  40caf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40caf2:	2b09      	cmp	r3, #9
  40caf4:	d82a      	bhi.n	40cb4c <_dtoa_r+0x1d4>
  40caf6:	2b05      	cmp	r3, #5
  40caf8:	f340 865b 	ble.w	40d7b2 <_dtoa_r+0xe3a>
  40cafc:	3b04      	subs	r3, #4
  40cafe:	9324      	str	r3, [sp, #144]	; 0x90
  40cb00:	2500      	movs	r5, #0
  40cb02:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cb04:	3b02      	subs	r3, #2
  40cb06:	2b03      	cmp	r3, #3
  40cb08:	f200 8642 	bhi.w	40d790 <_dtoa_r+0xe18>
  40cb0c:	e8df f013 	tbh	[pc, r3, lsl #1]
  40cb10:	02c903d4 	.word	0x02c903d4
  40cb14:	046103df 	.word	0x046103df
  40cb18:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40cb1a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40cb1c:	443e      	add	r6, r7
  40cb1e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40cb22:	2b20      	cmp	r3, #32
  40cb24:	f340 818e 	ble.w	40ce44 <_dtoa_r+0x4cc>
  40cb28:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40cb2c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40cb30:	409d      	lsls	r5, r3
  40cb32:	fa2a f000 	lsr.w	r0, sl, r0
  40cb36:	4328      	orrs	r0, r5
  40cb38:	f003 f87a 	bl	40fc30 <__aeabi_ui2d>
  40cb3c:	2301      	movs	r3, #1
  40cb3e:	3e01      	subs	r6, #1
  40cb40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40cb44:	9314      	str	r3, [sp, #80]	; 0x50
  40cb46:	e781      	b.n	40ca4c <_dtoa_r+0xd4>
  40cb48:	483b      	ldr	r0, [pc, #236]	; (40cc38 <_dtoa_r+0x2c0>)
  40cb4a:	e743      	b.n	40c9d4 <_dtoa_r+0x5c>
  40cb4c:	2100      	movs	r1, #0
  40cb4e:	6461      	str	r1, [r4, #68]	; 0x44
  40cb50:	4620      	mov	r0, r4
  40cb52:	9125      	str	r1, [sp, #148]	; 0x94
  40cb54:	f001 ff44 	bl	40e9e0 <_Balloc>
  40cb58:	f04f 33ff 	mov.w	r3, #4294967295
  40cb5c:	930a      	str	r3, [sp, #40]	; 0x28
  40cb5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40cb60:	930f      	str	r3, [sp, #60]	; 0x3c
  40cb62:	2301      	movs	r3, #1
  40cb64:	9004      	str	r0, [sp, #16]
  40cb66:	6420      	str	r0, [r4, #64]	; 0x40
  40cb68:	9224      	str	r2, [sp, #144]	; 0x90
  40cb6a:	930b      	str	r3, [sp, #44]	; 0x2c
  40cb6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40cb6e:	2b00      	cmp	r3, #0
  40cb70:	f2c0 80d9 	blt.w	40cd26 <_dtoa_r+0x3ae>
  40cb74:	9a02      	ldr	r2, [sp, #8]
  40cb76:	2a0e      	cmp	r2, #14
  40cb78:	f300 80d5 	bgt.w	40cd26 <_dtoa_r+0x3ae>
  40cb7c:	4b2d      	ldr	r3, [pc, #180]	; (40cc34 <_dtoa_r+0x2bc>)
  40cb7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
  40cb86:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40cb8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40cb8c:	2b00      	cmp	r3, #0
  40cb8e:	f2c0 83ba 	blt.w	40d306 <_dtoa_r+0x98e>
  40cb92:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40cb96:	4650      	mov	r0, sl
  40cb98:	462a      	mov	r2, r5
  40cb9a:	4633      	mov	r3, r6
  40cb9c:	4659      	mov	r1, fp
  40cb9e:	f003 f9e7 	bl	40ff70 <__aeabi_ddiv>
  40cba2:	f003 fb6b 	bl	41027c <__aeabi_d2iz>
  40cba6:	4680      	mov	r8, r0
  40cba8:	f003 f852 	bl	40fc50 <__aeabi_i2d>
  40cbac:	462a      	mov	r2, r5
  40cbae:	4633      	mov	r3, r6
  40cbb0:	f003 f8b4 	bl	40fd1c <__aeabi_dmul>
  40cbb4:	460b      	mov	r3, r1
  40cbb6:	4602      	mov	r2, r0
  40cbb8:	4659      	mov	r1, fp
  40cbba:	4650      	mov	r0, sl
  40cbbc:	f002 fefa 	bl	40f9b4 <__aeabi_dsub>
  40cbc0:	9d04      	ldr	r5, [sp, #16]
  40cbc2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40cbc6:	702b      	strb	r3, [r5, #0]
  40cbc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cbca:	2b01      	cmp	r3, #1
  40cbcc:	4606      	mov	r6, r0
  40cbce:	460f      	mov	r7, r1
  40cbd0:	f105 0501 	add.w	r5, r5, #1
  40cbd4:	d068      	beq.n	40cca8 <_dtoa_r+0x330>
  40cbd6:	2200      	movs	r2, #0
  40cbd8:	4b18      	ldr	r3, [pc, #96]	; (40cc3c <_dtoa_r+0x2c4>)
  40cbda:	f003 f89f 	bl	40fd1c <__aeabi_dmul>
  40cbde:	2200      	movs	r2, #0
  40cbe0:	2300      	movs	r3, #0
  40cbe2:	4606      	mov	r6, r0
  40cbe4:	460f      	mov	r7, r1
  40cbe6:	f003 fb01 	bl	4101ec <__aeabi_dcmpeq>
  40cbea:	2800      	cmp	r0, #0
  40cbec:	f040 8088 	bne.w	40cd00 <_dtoa_r+0x388>
  40cbf0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40cbf4:	f04f 0a00 	mov.w	sl, #0
  40cbf8:	f8df b040 	ldr.w	fp, [pc, #64]	; 40cc3c <_dtoa_r+0x2c4>
  40cbfc:	940c      	str	r4, [sp, #48]	; 0x30
  40cbfe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40cc02:	e028      	b.n	40cc56 <_dtoa_r+0x2de>
  40cc04:	f3af 8000 	nop.w
  40cc08:	636f4361 	.word	0x636f4361
  40cc0c:	3fd287a7 	.word	0x3fd287a7
  40cc10:	8b60c8b3 	.word	0x8b60c8b3
  40cc14:	3fc68a28 	.word	0x3fc68a28
  40cc18:	509f79fb 	.word	0x509f79fb
  40cc1c:	3fd34413 	.word	0x3fd34413
  40cc20:	7ff00000 	.word	0x7ff00000
  40cc24:	00411d35 	.word	0x00411d35
  40cc28:	00411d78 	.word	0x00411d78
  40cc2c:	00411d84 	.word	0x00411d84
  40cc30:	3ff80000 	.word	0x3ff80000
  40cc34:	00411dc0 	.word	0x00411dc0
  40cc38:	00411d34 	.word	0x00411d34
  40cc3c:	40240000 	.word	0x40240000
  40cc40:	f003 f86c 	bl	40fd1c <__aeabi_dmul>
  40cc44:	2200      	movs	r2, #0
  40cc46:	2300      	movs	r3, #0
  40cc48:	4606      	mov	r6, r0
  40cc4a:	460f      	mov	r7, r1
  40cc4c:	f003 face 	bl	4101ec <__aeabi_dcmpeq>
  40cc50:	2800      	cmp	r0, #0
  40cc52:	f040 83c1 	bne.w	40d3d8 <_dtoa_r+0xa60>
  40cc56:	4642      	mov	r2, r8
  40cc58:	464b      	mov	r3, r9
  40cc5a:	4630      	mov	r0, r6
  40cc5c:	4639      	mov	r1, r7
  40cc5e:	f003 f987 	bl	40ff70 <__aeabi_ddiv>
  40cc62:	f003 fb0b 	bl	41027c <__aeabi_d2iz>
  40cc66:	4604      	mov	r4, r0
  40cc68:	f002 fff2 	bl	40fc50 <__aeabi_i2d>
  40cc6c:	4642      	mov	r2, r8
  40cc6e:	464b      	mov	r3, r9
  40cc70:	f003 f854 	bl	40fd1c <__aeabi_dmul>
  40cc74:	4602      	mov	r2, r0
  40cc76:	460b      	mov	r3, r1
  40cc78:	4630      	mov	r0, r6
  40cc7a:	4639      	mov	r1, r7
  40cc7c:	f002 fe9a 	bl	40f9b4 <__aeabi_dsub>
  40cc80:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40cc84:	9e04      	ldr	r6, [sp, #16]
  40cc86:	f805 eb01 	strb.w	lr, [r5], #1
  40cc8a:	eba5 0e06 	sub.w	lr, r5, r6
  40cc8e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40cc90:	45b6      	cmp	lr, r6
  40cc92:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40cc96:	4652      	mov	r2, sl
  40cc98:	465b      	mov	r3, fp
  40cc9a:	d1d1      	bne.n	40cc40 <_dtoa_r+0x2c8>
  40cc9c:	46a0      	mov	r8, r4
  40cc9e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40cca2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40cca4:	4606      	mov	r6, r0
  40cca6:	460f      	mov	r7, r1
  40cca8:	4632      	mov	r2, r6
  40ccaa:	463b      	mov	r3, r7
  40ccac:	4630      	mov	r0, r6
  40ccae:	4639      	mov	r1, r7
  40ccb0:	f002 fe82 	bl	40f9b8 <__adddf3>
  40ccb4:	4606      	mov	r6, r0
  40ccb6:	460f      	mov	r7, r1
  40ccb8:	4602      	mov	r2, r0
  40ccba:	460b      	mov	r3, r1
  40ccbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40ccc0:	f003 fa9e 	bl	410200 <__aeabi_dcmplt>
  40ccc4:	b948      	cbnz	r0, 40ccda <_dtoa_r+0x362>
  40ccc6:	4632      	mov	r2, r6
  40ccc8:	463b      	mov	r3, r7
  40ccca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40ccce:	f003 fa8d 	bl	4101ec <__aeabi_dcmpeq>
  40ccd2:	b1a8      	cbz	r0, 40cd00 <_dtoa_r+0x388>
  40ccd4:	f018 0f01 	tst.w	r8, #1
  40ccd8:	d012      	beq.n	40cd00 <_dtoa_r+0x388>
  40ccda:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40ccde:	9a04      	ldr	r2, [sp, #16]
  40cce0:	1e6b      	subs	r3, r5, #1
  40cce2:	e004      	b.n	40ccee <_dtoa_r+0x376>
  40cce4:	429a      	cmp	r2, r3
  40cce6:	f000 8401 	beq.w	40d4ec <_dtoa_r+0xb74>
  40ccea:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40ccee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40ccf2:	f103 0501 	add.w	r5, r3, #1
  40ccf6:	d0f5      	beq.n	40cce4 <_dtoa_r+0x36c>
  40ccf8:	f108 0801 	add.w	r8, r8, #1
  40ccfc:	f883 8000 	strb.w	r8, [r3]
  40cd00:	4649      	mov	r1, r9
  40cd02:	4620      	mov	r0, r4
  40cd04:	f001 fe92 	bl	40ea2c <_Bfree>
  40cd08:	2200      	movs	r2, #0
  40cd0a:	9b02      	ldr	r3, [sp, #8]
  40cd0c:	702a      	strb	r2, [r5, #0]
  40cd0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40cd10:	3301      	adds	r3, #1
  40cd12:	6013      	str	r3, [r2, #0]
  40cd14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40cd16:	2b00      	cmp	r3, #0
  40cd18:	f000 839e 	beq.w	40d458 <_dtoa_r+0xae0>
  40cd1c:	9804      	ldr	r0, [sp, #16]
  40cd1e:	601d      	str	r5, [r3, #0]
  40cd20:	b01b      	add	sp, #108	; 0x6c
  40cd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cd26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cd28:	2a00      	cmp	r2, #0
  40cd2a:	d03e      	beq.n	40cdaa <_dtoa_r+0x432>
  40cd2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40cd2e:	2a01      	cmp	r2, #1
  40cd30:	f340 8311 	ble.w	40d356 <_dtoa_r+0x9de>
  40cd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cd36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40cd38:	1e5f      	subs	r7, r3, #1
  40cd3a:	42ba      	cmp	r2, r7
  40cd3c:	f2c0 838f 	blt.w	40d45e <_dtoa_r+0xae6>
  40cd40:	1bd7      	subs	r7, r2, r7
  40cd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cd44:	2b00      	cmp	r3, #0
  40cd46:	f2c0 848b 	blt.w	40d660 <_dtoa_r+0xce8>
  40cd4a:	9d08      	ldr	r5, [sp, #32]
  40cd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cd4e:	9a08      	ldr	r2, [sp, #32]
  40cd50:	441a      	add	r2, r3
  40cd52:	9208      	str	r2, [sp, #32]
  40cd54:	9a06      	ldr	r2, [sp, #24]
  40cd56:	2101      	movs	r1, #1
  40cd58:	441a      	add	r2, r3
  40cd5a:	4620      	mov	r0, r4
  40cd5c:	9206      	str	r2, [sp, #24]
  40cd5e:	f001 feff 	bl	40eb60 <__i2b>
  40cd62:	4606      	mov	r6, r0
  40cd64:	e024      	b.n	40cdb0 <_dtoa_r+0x438>
  40cd66:	2301      	movs	r3, #1
  40cd68:	930e      	str	r3, [sp, #56]	; 0x38
  40cd6a:	e6af      	b.n	40cacc <_dtoa_r+0x154>
  40cd6c:	9a08      	ldr	r2, [sp, #32]
  40cd6e:	9b02      	ldr	r3, [sp, #8]
  40cd70:	1ad2      	subs	r2, r2, r3
  40cd72:	425b      	negs	r3, r3
  40cd74:	930c      	str	r3, [sp, #48]	; 0x30
  40cd76:	2300      	movs	r3, #0
  40cd78:	9208      	str	r2, [sp, #32]
  40cd7a:	930d      	str	r3, [sp, #52]	; 0x34
  40cd7c:	e6b8      	b.n	40caf0 <_dtoa_r+0x178>
  40cd7e:	f1c7 0301 	rsb	r3, r7, #1
  40cd82:	9308      	str	r3, [sp, #32]
  40cd84:	2300      	movs	r3, #0
  40cd86:	9306      	str	r3, [sp, #24]
  40cd88:	e6a7      	b.n	40cada <_dtoa_r+0x162>
  40cd8a:	9d02      	ldr	r5, [sp, #8]
  40cd8c:	4628      	mov	r0, r5
  40cd8e:	f002 ff5f 	bl	40fc50 <__aeabi_i2d>
  40cd92:	4602      	mov	r2, r0
  40cd94:	460b      	mov	r3, r1
  40cd96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40cd9a:	f003 fa27 	bl	4101ec <__aeabi_dcmpeq>
  40cd9e:	2800      	cmp	r0, #0
  40cda0:	f47f ae80 	bne.w	40caa4 <_dtoa_r+0x12c>
  40cda4:	1e6b      	subs	r3, r5, #1
  40cda6:	9302      	str	r3, [sp, #8]
  40cda8:	e67c      	b.n	40caa4 <_dtoa_r+0x12c>
  40cdaa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40cdac:	9d08      	ldr	r5, [sp, #32]
  40cdae:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40cdb0:	2d00      	cmp	r5, #0
  40cdb2:	dd0c      	ble.n	40cdce <_dtoa_r+0x456>
  40cdb4:	9906      	ldr	r1, [sp, #24]
  40cdb6:	2900      	cmp	r1, #0
  40cdb8:	460b      	mov	r3, r1
  40cdba:	dd08      	ble.n	40cdce <_dtoa_r+0x456>
  40cdbc:	42a9      	cmp	r1, r5
  40cdbe:	9a08      	ldr	r2, [sp, #32]
  40cdc0:	bfa8      	it	ge
  40cdc2:	462b      	movge	r3, r5
  40cdc4:	1ad2      	subs	r2, r2, r3
  40cdc6:	1aed      	subs	r5, r5, r3
  40cdc8:	1acb      	subs	r3, r1, r3
  40cdca:	9208      	str	r2, [sp, #32]
  40cdcc:	9306      	str	r3, [sp, #24]
  40cdce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cdd0:	b1d3      	cbz	r3, 40ce08 <_dtoa_r+0x490>
  40cdd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cdd4:	2b00      	cmp	r3, #0
  40cdd6:	f000 82b7 	beq.w	40d348 <_dtoa_r+0x9d0>
  40cdda:	2f00      	cmp	r7, #0
  40cddc:	dd10      	ble.n	40ce00 <_dtoa_r+0x488>
  40cdde:	4631      	mov	r1, r6
  40cde0:	463a      	mov	r2, r7
  40cde2:	4620      	mov	r0, r4
  40cde4:	f001 ff58 	bl	40ec98 <__pow5mult>
  40cde8:	464a      	mov	r2, r9
  40cdea:	4601      	mov	r1, r0
  40cdec:	4606      	mov	r6, r0
  40cdee:	4620      	mov	r0, r4
  40cdf0:	f001 fec0 	bl	40eb74 <__multiply>
  40cdf4:	4649      	mov	r1, r9
  40cdf6:	4680      	mov	r8, r0
  40cdf8:	4620      	mov	r0, r4
  40cdfa:	f001 fe17 	bl	40ea2c <_Bfree>
  40cdfe:	46c1      	mov	r9, r8
  40ce00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ce02:	1bda      	subs	r2, r3, r7
  40ce04:	f040 82a1 	bne.w	40d34a <_dtoa_r+0x9d2>
  40ce08:	2101      	movs	r1, #1
  40ce0a:	4620      	mov	r0, r4
  40ce0c:	f001 fea8 	bl	40eb60 <__i2b>
  40ce10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ce12:	2b00      	cmp	r3, #0
  40ce14:	4680      	mov	r8, r0
  40ce16:	dd1c      	ble.n	40ce52 <_dtoa_r+0x4da>
  40ce18:	4601      	mov	r1, r0
  40ce1a:	461a      	mov	r2, r3
  40ce1c:	4620      	mov	r0, r4
  40ce1e:	f001 ff3b 	bl	40ec98 <__pow5mult>
  40ce22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ce24:	2b01      	cmp	r3, #1
  40ce26:	4680      	mov	r8, r0
  40ce28:	f340 8254 	ble.w	40d2d4 <_dtoa_r+0x95c>
  40ce2c:	2300      	movs	r3, #0
  40ce2e:	930c      	str	r3, [sp, #48]	; 0x30
  40ce30:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ce34:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40ce38:	6918      	ldr	r0, [r3, #16]
  40ce3a:	f001 fe41 	bl	40eac0 <__hi0bits>
  40ce3e:	f1c0 0020 	rsb	r0, r0, #32
  40ce42:	e010      	b.n	40ce66 <_dtoa_r+0x4ee>
  40ce44:	f1c3 0520 	rsb	r5, r3, #32
  40ce48:	fa0a f005 	lsl.w	r0, sl, r5
  40ce4c:	e674      	b.n	40cb38 <_dtoa_r+0x1c0>
  40ce4e:	900e      	str	r0, [sp, #56]	; 0x38
  40ce50:	e63c      	b.n	40cacc <_dtoa_r+0x154>
  40ce52:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ce54:	2b01      	cmp	r3, #1
  40ce56:	f340 8287 	ble.w	40d368 <_dtoa_r+0x9f0>
  40ce5a:	2300      	movs	r3, #0
  40ce5c:	930c      	str	r3, [sp, #48]	; 0x30
  40ce5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ce60:	2001      	movs	r0, #1
  40ce62:	2b00      	cmp	r3, #0
  40ce64:	d1e4      	bne.n	40ce30 <_dtoa_r+0x4b8>
  40ce66:	9a06      	ldr	r2, [sp, #24]
  40ce68:	4410      	add	r0, r2
  40ce6a:	f010 001f 	ands.w	r0, r0, #31
  40ce6e:	f000 80a1 	beq.w	40cfb4 <_dtoa_r+0x63c>
  40ce72:	f1c0 0320 	rsb	r3, r0, #32
  40ce76:	2b04      	cmp	r3, #4
  40ce78:	f340 849e 	ble.w	40d7b8 <_dtoa_r+0xe40>
  40ce7c:	9b08      	ldr	r3, [sp, #32]
  40ce7e:	f1c0 001c 	rsb	r0, r0, #28
  40ce82:	4403      	add	r3, r0
  40ce84:	9308      	str	r3, [sp, #32]
  40ce86:	4613      	mov	r3, r2
  40ce88:	4403      	add	r3, r0
  40ce8a:	4405      	add	r5, r0
  40ce8c:	9306      	str	r3, [sp, #24]
  40ce8e:	9b08      	ldr	r3, [sp, #32]
  40ce90:	2b00      	cmp	r3, #0
  40ce92:	dd05      	ble.n	40cea0 <_dtoa_r+0x528>
  40ce94:	4649      	mov	r1, r9
  40ce96:	461a      	mov	r2, r3
  40ce98:	4620      	mov	r0, r4
  40ce9a:	f001 ff4d 	bl	40ed38 <__lshift>
  40ce9e:	4681      	mov	r9, r0
  40cea0:	9b06      	ldr	r3, [sp, #24]
  40cea2:	2b00      	cmp	r3, #0
  40cea4:	dd05      	ble.n	40ceb2 <_dtoa_r+0x53a>
  40cea6:	4641      	mov	r1, r8
  40cea8:	461a      	mov	r2, r3
  40ceaa:	4620      	mov	r0, r4
  40ceac:	f001 ff44 	bl	40ed38 <__lshift>
  40ceb0:	4680      	mov	r8, r0
  40ceb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ceb4:	2b00      	cmp	r3, #0
  40ceb6:	f040 8086 	bne.w	40cfc6 <_dtoa_r+0x64e>
  40ceba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cebc:	2b00      	cmp	r3, #0
  40cebe:	f340 8266 	ble.w	40d38e <_dtoa_r+0xa16>
  40cec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cec4:	2b00      	cmp	r3, #0
  40cec6:	f000 8098 	beq.w	40cffa <_dtoa_r+0x682>
  40ceca:	2d00      	cmp	r5, #0
  40cecc:	dd05      	ble.n	40ceda <_dtoa_r+0x562>
  40cece:	4631      	mov	r1, r6
  40ced0:	462a      	mov	r2, r5
  40ced2:	4620      	mov	r0, r4
  40ced4:	f001 ff30 	bl	40ed38 <__lshift>
  40ced8:	4606      	mov	r6, r0
  40ceda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cedc:	2b00      	cmp	r3, #0
  40cede:	f040 8337 	bne.w	40d550 <_dtoa_r+0xbd8>
  40cee2:	9606      	str	r6, [sp, #24]
  40cee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cee6:	9a04      	ldr	r2, [sp, #16]
  40cee8:	f8dd b018 	ldr.w	fp, [sp, #24]
  40ceec:	3b01      	subs	r3, #1
  40ceee:	18d3      	adds	r3, r2, r3
  40cef0:	930b      	str	r3, [sp, #44]	; 0x2c
  40cef2:	f00a 0301 	and.w	r3, sl, #1
  40cef6:	930c      	str	r3, [sp, #48]	; 0x30
  40cef8:	4617      	mov	r7, r2
  40cefa:	46c2      	mov	sl, r8
  40cefc:	4651      	mov	r1, sl
  40cefe:	4648      	mov	r0, r9
  40cf00:	f7ff fca6 	bl	40c850 <quorem>
  40cf04:	4631      	mov	r1, r6
  40cf06:	4605      	mov	r5, r0
  40cf08:	4648      	mov	r0, r9
  40cf0a:	f001 ff67 	bl	40eddc <__mcmp>
  40cf0e:	465a      	mov	r2, fp
  40cf10:	900a      	str	r0, [sp, #40]	; 0x28
  40cf12:	4651      	mov	r1, sl
  40cf14:	4620      	mov	r0, r4
  40cf16:	f001 ff7d 	bl	40ee14 <__mdiff>
  40cf1a:	68c2      	ldr	r2, [r0, #12]
  40cf1c:	4680      	mov	r8, r0
  40cf1e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40cf22:	2a00      	cmp	r2, #0
  40cf24:	f040 822b 	bne.w	40d37e <_dtoa_r+0xa06>
  40cf28:	4601      	mov	r1, r0
  40cf2a:	4648      	mov	r0, r9
  40cf2c:	9308      	str	r3, [sp, #32]
  40cf2e:	f001 ff55 	bl	40eddc <__mcmp>
  40cf32:	4641      	mov	r1, r8
  40cf34:	9006      	str	r0, [sp, #24]
  40cf36:	4620      	mov	r0, r4
  40cf38:	f001 fd78 	bl	40ea2c <_Bfree>
  40cf3c:	9a06      	ldr	r2, [sp, #24]
  40cf3e:	9b08      	ldr	r3, [sp, #32]
  40cf40:	b932      	cbnz	r2, 40cf50 <_dtoa_r+0x5d8>
  40cf42:	9924      	ldr	r1, [sp, #144]	; 0x90
  40cf44:	b921      	cbnz	r1, 40cf50 <_dtoa_r+0x5d8>
  40cf46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40cf48:	2a00      	cmp	r2, #0
  40cf4a:	f000 83ef 	beq.w	40d72c <_dtoa_r+0xdb4>
  40cf4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40cf50:	990a      	ldr	r1, [sp, #40]	; 0x28
  40cf52:	2900      	cmp	r1, #0
  40cf54:	f2c0 829f 	blt.w	40d496 <_dtoa_r+0xb1e>
  40cf58:	d105      	bne.n	40cf66 <_dtoa_r+0x5ee>
  40cf5a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40cf5c:	b919      	cbnz	r1, 40cf66 <_dtoa_r+0x5ee>
  40cf5e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40cf60:	2900      	cmp	r1, #0
  40cf62:	f000 8298 	beq.w	40d496 <_dtoa_r+0xb1e>
  40cf66:	2a00      	cmp	r2, #0
  40cf68:	f300 8306 	bgt.w	40d578 <_dtoa_r+0xc00>
  40cf6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cf6e:	703b      	strb	r3, [r7, #0]
  40cf70:	f107 0801 	add.w	r8, r7, #1
  40cf74:	4297      	cmp	r7, r2
  40cf76:	4645      	mov	r5, r8
  40cf78:	f000 830c 	beq.w	40d594 <_dtoa_r+0xc1c>
  40cf7c:	4649      	mov	r1, r9
  40cf7e:	2300      	movs	r3, #0
  40cf80:	220a      	movs	r2, #10
  40cf82:	4620      	mov	r0, r4
  40cf84:	f001 fd5c 	bl	40ea40 <__multadd>
  40cf88:	455e      	cmp	r6, fp
  40cf8a:	4681      	mov	r9, r0
  40cf8c:	4631      	mov	r1, r6
  40cf8e:	f04f 0300 	mov.w	r3, #0
  40cf92:	f04f 020a 	mov.w	r2, #10
  40cf96:	4620      	mov	r0, r4
  40cf98:	f000 81eb 	beq.w	40d372 <_dtoa_r+0x9fa>
  40cf9c:	f001 fd50 	bl	40ea40 <__multadd>
  40cfa0:	4659      	mov	r1, fp
  40cfa2:	4606      	mov	r6, r0
  40cfa4:	2300      	movs	r3, #0
  40cfa6:	220a      	movs	r2, #10
  40cfa8:	4620      	mov	r0, r4
  40cfaa:	f001 fd49 	bl	40ea40 <__multadd>
  40cfae:	4647      	mov	r7, r8
  40cfb0:	4683      	mov	fp, r0
  40cfb2:	e7a3      	b.n	40cefc <_dtoa_r+0x584>
  40cfb4:	201c      	movs	r0, #28
  40cfb6:	9b08      	ldr	r3, [sp, #32]
  40cfb8:	4403      	add	r3, r0
  40cfba:	9308      	str	r3, [sp, #32]
  40cfbc:	9b06      	ldr	r3, [sp, #24]
  40cfbe:	4403      	add	r3, r0
  40cfc0:	4405      	add	r5, r0
  40cfc2:	9306      	str	r3, [sp, #24]
  40cfc4:	e763      	b.n	40ce8e <_dtoa_r+0x516>
  40cfc6:	4641      	mov	r1, r8
  40cfc8:	4648      	mov	r0, r9
  40cfca:	f001 ff07 	bl	40eddc <__mcmp>
  40cfce:	2800      	cmp	r0, #0
  40cfd0:	f6bf af73 	bge.w	40ceba <_dtoa_r+0x542>
  40cfd4:	9f02      	ldr	r7, [sp, #8]
  40cfd6:	4649      	mov	r1, r9
  40cfd8:	2300      	movs	r3, #0
  40cfda:	220a      	movs	r2, #10
  40cfdc:	4620      	mov	r0, r4
  40cfde:	3f01      	subs	r7, #1
  40cfe0:	9702      	str	r7, [sp, #8]
  40cfe2:	f001 fd2d 	bl	40ea40 <__multadd>
  40cfe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cfe8:	4681      	mov	r9, r0
  40cfea:	2b00      	cmp	r3, #0
  40cfec:	f040 83b6 	bne.w	40d75c <_dtoa_r+0xde4>
  40cff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40cff2:	2b00      	cmp	r3, #0
  40cff4:	f340 83bf 	ble.w	40d776 <_dtoa_r+0xdfe>
  40cff8:	930a      	str	r3, [sp, #40]	; 0x28
  40cffa:	f8dd b010 	ldr.w	fp, [sp, #16]
  40cffe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40d000:	465d      	mov	r5, fp
  40d002:	e002      	b.n	40d00a <_dtoa_r+0x692>
  40d004:	f001 fd1c 	bl	40ea40 <__multadd>
  40d008:	4681      	mov	r9, r0
  40d00a:	4641      	mov	r1, r8
  40d00c:	4648      	mov	r0, r9
  40d00e:	f7ff fc1f 	bl	40c850 <quorem>
  40d012:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40d016:	f805 ab01 	strb.w	sl, [r5], #1
  40d01a:	eba5 030b 	sub.w	r3, r5, fp
  40d01e:	42bb      	cmp	r3, r7
  40d020:	f04f 020a 	mov.w	r2, #10
  40d024:	f04f 0300 	mov.w	r3, #0
  40d028:	4649      	mov	r1, r9
  40d02a:	4620      	mov	r0, r4
  40d02c:	dbea      	blt.n	40d004 <_dtoa_r+0x68c>
  40d02e:	9b04      	ldr	r3, [sp, #16]
  40d030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d032:	2a01      	cmp	r2, #1
  40d034:	bfac      	ite	ge
  40d036:	189b      	addge	r3, r3, r2
  40d038:	3301      	addlt	r3, #1
  40d03a:	461d      	mov	r5, r3
  40d03c:	f04f 0b00 	mov.w	fp, #0
  40d040:	4649      	mov	r1, r9
  40d042:	2201      	movs	r2, #1
  40d044:	4620      	mov	r0, r4
  40d046:	f001 fe77 	bl	40ed38 <__lshift>
  40d04a:	4641      	mov	r1, r8
  40d04c:	4681      	mov	r9, r0
  40d04e:	f001 fec5 	bl	40eddc <__mcmp>
  40d052:	2800      	cmp	r0, #0
  40d054:	f340 823d 	ble.w	40d4d2 <_dtoa_r+0xb5a>
  40d058:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40d05c:	9904      	ldr	r1, [sp, #16]
  40d05e:	1e6b      	subs	r3, r5, #1
  40d060:	e004      	b.n	40d06c <_dtoa_r+0x6f4>
  40d062:	428b      	cmp	r3, r1
  40d064:	f000 81ae 	beq.w	40d3c4 <_dtoa_r+0xa4c>
  40d068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40d06c:	2a39      	cmp	r2, #57	; 0x39
  40d06e:	f103 0501 	add.w	r5, r3, #1
  40d072:	d0f6      	beq.n	40d062 <_dtoa_r+0x6ea>
  40d074:	3201      	adds	r2, #1
  40d076:	701a      	strb	r2, [r3, #0]
  40d078:	4641      	mov	r1, r8
  40d07a:	4620      	mov	r0, r4
  40d07c:	f001 fcd6 	bl	40ea2c <_Bfree>
  40d080:	2e00      	cmp	r6, #0
  40d082:	f43f ae3d 	beq.w	40cd00 <_dtoa_r+0x388>
  40d086:	f1bb 0f00 	cmp.w	fp, #0
  40d08a:	d005      	beq.n	40d098 <_dtoa_r+0x720>
  40d08c:	45b3      	cmp	fp, r6
  40d08e:	d003      	beq.n	40d098 <_dtoa_r+0x720>
  40d090:	4659      	mov	r1, fp
  40d092:	4620      	mov	r0, r4
  40d094:	f001 fcca 	bl	40ea2c <_Bfree>
  40d098:	4631      	mov	r1, r6
  40d09a:	4620      	mov	r0, r4
  40d09c:	f001 fcc6 	bl	40ea2c <_Bfree>
  40d0a0:	e62e      	b.n	40cd00 <_dtoa_r+0x388>
  40d0a2:	2300      	movs	r3, #0
  40d0a4:	930b      	str	r3, [sp, #44]	; 0x2c
  40d0a6:	9b02      	ldr	r3, [sp, #8]
  40d0a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40d0aa:	4413      	add	r3, r2
  40d0ac:	930f      	str	r3, [sp, #60]	; 0x3c
  40d0ae:	3301      	adds	r3, #1
  40d0b0:	2b01      	cmp	r3, #1
  40d0b2:	461f      	mov	r7, r3
  40d0b4:	461e      	mov	r6, r3
  40d0b6:	930a      	str	r3, [sp, #40]	; 0x28
  40d0b8:	bfb8      	it	lt
  40d0ba:	2701      	movlt	r7, #1
  40d0bc:	2100      	movs	r1, #0
  40d0be:	2f17      	cmp	r7, #23
  40d0c0:	6461      	str	r1, [r4, #68]	; 0x44
  40d0c2:	d90a      	bls.n	40d0da <_dtoa_r+0x762>
  40d0c4:	2201      	movs	r2, #1
  40d0c6:	2304      	movs	r3, #4
  40d0c8:	005b      	lsls	r3, r3, #1
  40d0ca:	f103 0014 	add.w	r0, r3, #20
  40d0ce:	4287      	cmp	r7, r0
  40d0d0:	4611      	mov	r1, r2
  40d0d2:	f102 0201 	add.w	r2, r2, #1
  40d0d6:	d2f7      	bcs.n	40d0c8 <_dtoa_r+0x750>
  40d0d8:	6461      	str	r1, [r4, #68]	; 0x44
  40d0da:	4620      	mov	r0, r4
  40d0dc:	f001 fc80 	bl	40e9e0 <_Balloc>
  40d0e0:	2e0e      	cmp	r6, #14
  40d0e2:	9004      	str	r0, [sp, #16]
  40d0e4:	6420      	str	r0, [r4, #64]	; 0x40
  40d0e6:	f63f ad41 	bhi.w	40cb6c <_dtoa_r+0x1f4>
  40d0ea:	2d00      	cmp	r5, #0
  40d0ec:	f43f ad3e 	beq.w	40cb6c <_dtoa_r+0x1f4>
  40d0f0:	9902      	ldr	r1, [sp, #8]
  40d0f2:	2900      	cmp	r1, #0
  40d0f4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40d0f8:	f340 8202 	ble.w	40d500 <_dtoa_r+0xb88>
  40d0fc:	4bb8      	ldr	r3, [pc, #736]	; (40d3e0 <_dtoa_r+0xa68>)
  40d0fe:	f001 020f 	and.w	r2, r1, #15
  40d102:	110d      	asrs	r5, r1, #4
  40d104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d108:	06e9      	lsls	r1, r5, #27
  40d10a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40d10e:	f140 81ae 	bpl.w	40d46e <_dtoa_r+0xaf6>
  40d112:	4bb4      	ldr	r3, [pc, #720]	; (40d3e4 <_dtoa_r+0xa6c>)
  40d114:	4650      	mov	r0, sl
  40d116:	4659      	mov	r1, fp
  40d118:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40d11c:	f002 ff28 	bl	40ff70 <__aeabi_ddiv>
  40d120:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40d124:	f005 050f 	and.w	r5, r5, #15
  40d128:	f04f 0a03 	mov.w	sl, #3
  40d12c:	b18d      	cbz	r5, 40d152 <_dtoa_r+0x7da>
  40d12e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40d3e4 <_dtoa_r+0xa6c>
  40d132:	07ea      	lsls	r2, r5, #31
  40d134:	d509      	bpl.n	40d14a <_dtoa_r+0x7d2>
  40d136:	4630      	mov	r0, r6
  40d138:	4639      	mov	r1, r7
  40d13a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40d13e:	f002 fded 	bl	40fd1c <__aeabi_dmul>
  40d142:	f10a 0a01 	add.w	sl, sl, #1
  40d146:	4606      	mov	r6, r0
  40d148:	460f      	mov	r7, r1
  40d14a:	106d      	asrs	r5, r5, #1
  40d14c:	f108 0808 	add.w	r8, r8, #8
  40d150:	d1ef      	bne.n	40d132 <_dtoa_r+0x7ba>
  40d152:	463b      	mov	r3, r7
  40d154:	4632      	mov	r2, r6
  40d156:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40d15a:	f002 ff09 	bl	40ff70 <__aeabi_ddiv>
  40d15e:	4607      	mov	r7, r0
  40d160:	4688      	mov	r8, r1
  40d162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d164:	b143      	cbz	r3, 40d178 <_dtoa_r+0x800>
  40d166:	2200      	movs	r2, #0
  40d168:	4b9f      	ldr	r3, [pc, #636]	; (40d3e8 <_dtoa_r+0xa70>)
  40d16a:	4638      	mov	r0, r7
  40d16c:	4641      	mov	r1, r8
  40d16e:	f003 f847 	bl	410200 <__aeabi_dcmplt>
  40d172:	2800      	cmp	r0, #0
  40d174:	f040 8286 	bne.w	40d684 <_dtoa_r+0xd0c>
  40d178:	4650      	mov	r0, sl
  40d17a:	f002 fd69 	bl	40fc50 <__aeabi_i2d>
  40d17e:	463a      	mov	r2, r7
  40d180:	4643      	mov	r3, r8
  40d182:	f002 fdcb 	bl	40fd1c <__aeabi_dmul>
  40d186:	4b99      	ldr	r3, [pc, #612]	; (40d3ec <_dtoa_r+0xa74>)
  40d188:	2200      	movs	r2, #0
  40d18a:	f002 fc15 	bl	40f9b8 <__adddf3>
  40d18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d190:	4605      	mov	r5, r0
  40d192:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40d196:	2b00      	cmp	r3, #0
  40d198:	f000 813e 	beq.w	40d418 <_dtoa_r+0xaa0>
  40d19c:	9b02      	ldr	r3, [sp, #8]
  40d19e:	9315      	str	r3, [sp, #84]	; 0x54
  40d1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d1a2:	9312      	str	r3, [sp, #72]	; 0x48
  40d1a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d1a6:	2b00      	cmp	r3, #0
  40d1a8:	f000 81fa 	beq.w	40d5a0 <_dtoa_r+0xc28>
  40d1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d1ae:	4b8c      	ldr	r3, [pc, #560]	; (40d3e0 <_dtoa_r+0xa68>)
  40d1b0:	498f      	ldr	r1, [pc, #572]	; (40d3f0 <_dtoa_r+0xa78>)
  40d1b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d1b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40d1ba:	2000      	movs	r0, #0
  40d1bc:	f002 fed8 	bl	40ff70 <__aeabi_ddiv>
  40d1c0:	462a      	mov	r2, r5
  40d1c2:	4633      	mov	r3, r6
  40d1c4:	f002 fbf6 	bl	40f9b4 <__aeabi_dsub>
  40d1c8:	4682      	mov	sl, r0
  40d1ca:	468b      	mov	fp, r1
  40d1cc:	4638      	mov	r0, r7
  40d1ce:	4641      	mov	r1, r8
  40d1d0:	f003 f854 	bl	41027c <__aeabi_d2iz>
  40d1d4:	4605      	mov	r5, r0
  40d1d6:	f002 fd3b 	bl	40fc50 <__aeabi_i2d>
  40d1da:	4602      	mov	r2, r0
  40d1dc:	460b      	mov	r3, r1
  40d1de:	4638      	mov	r0, r7
  40d1e0:	4641      	mov	r1, r8
  40d1e2:	f002 fbe7 	bl	40f9b4 <__aeabi_dsub>
  40d1e6:	3530      	adds	r5, #48	; 0x30
  40d1e8:	fa5f f885 	uxtb.w	r8, r5
  40d1ec:	9d04      	ldr	r5, [sp, #16]
  40d1ee:	4606      	mov	r6, r0
  40d1f0:	460f      	mov	r7, r1
  40d1f2:	f885 8000 	strb.w	r8, [r5]
  40d1f6:	4602      	mov	r2, r0
  40d1f8:	460b      	mov	r3, r1
  40d1fa:	4650      	mov	r0, sl
  40d1fc:	4659      	mov	r1, fp
  40d1fe:	3501      	adds	r5, #1
  40d200:	f003 f81c 	bl	41023c <__aeabi_dcmpgt>
  40d204:	2800      	cmp	r0, #0
  40d206:	d154      	bne.n	40d2b2 <_dtoa_r+0x93a>
  40d208:	4632      	mov	r2, r6
  40d20a:	463b      	mov	r3, r7
  40d20c:	2000      	movs	r0, #0
  40d20e:	4976      	ldr	r1, [pc, #472]	; (40d3e8 <_dtoa_r+0xa70>)
  40d210:	f002 fbd0 	bl	40f9b4 <__aeabi_dsub>
  40d214:	4602      	mov	r2, r0
  40d216:	460b      	mov	r3, r1
  40d218:	4650      	mov	r0, sl
  40d21a:	4659      	mov	r1, fp
  40d21c:	f003 f80e 	bl	41023c <__aeabi_dcmpgt>
  40d220:	2800      	cmp	r0, #0
  40d222:	f040 8270 	bne.w	40d706 <_dtoa_r+0xd8e>
  40d226:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d228:	2a01      	cmp	r2, #1
  40d22a:	f000 8111 	beq.w	40d450 <_dtoa_r+0xad8>
  40d22e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d230:	9a04      	ldr	r2, [sp, #16]
  40d232:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40d236:	4413      	add	r3, r2
  40d238:	4699      	mov	r9, r3
  40d23a:	e00d      	b.n	40d258 <_dtoa_r+0x8e0>
  40d23c:	2000      	movs	r0, #0
  40d23e:	496a      	ldr	r1, [pc, #424]	; (40d3e8 <_dtoa_r+0xa70>)
  40d240:	f002 fbb8 	bl	40f9b4 <__aeabi_dsub>
  40d244:	4652      	mov	r2, sl
  40d246:	465b      	mov	r3, fp
  40d248:	f002 ffda 	bl	410200 <__aeabi_dcmplt>
  40d24c:	2800      	cmp	r0, #0
  40d24e:	f040 8258 	bne.w	40d702 <_dtoa_r+0xd8a>
  40d252:	454d      	cmp	r5, r9
  40d254:	f000 80fa 	beq.w	40d44c <_dtoa_r+0xad4>
  40d258:	4650      	mov	r0, sl
  40d25a:	4659      	mov	r1, fp
  40d25c:	2200      	movs	r2, #0
  40d25e:	4b65      	ldr	r3, [pc, #404]	; (40d3f4 <_dtoa_r+0xa7c>)
  40d260:	f002 fd5c 	bl	40fd1c <__aeabi_dmul>
  40d264:	2200      	movs	r2, #0
  40d266:	4b63      	ldr	r3, [pc, #396]	; (40d3f4 <_dtoa_r+0xa7c>)
  40d268:	4682      	mov	sl, r0
  40d26a:	468b      	mov	fp, r1
  40d26c:	4630      	mov	r0, r6
  40d26e:	4639      	mov	r1, r7
  40d270:	f002 fd54 	bl	40fd1c <__aeabi_dmul>
  40d274:	460f      	mov	r7, r1
  40d276:	4606      	mov	r6, r0
  40d278:	f003 f800 	bl	41027c <__aeabi_d2iz>
  40d27c:	4680      	mov	r8, r0
  40d27e:	f002 fce7 	bl	40fc50 <__aeabi_i2d>
  40d282:	4602      	mov	r2, r0
  40d284:	460b      	mov	r3, r1
  40d286:	4630      	mov	r0, r6
  40d288:	4639      	mov	r1, r7
  40d28a:	f002 fb93 	bl	40f9b4 <__aeabi_dsub>
  40d28e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40d292:	fa5f f888 	uxtb.w	r8, r8
  40d296:	4652      	mov	r2, sl
  40d298:	465b      	mov	r3, fp
  40d29a:	f805 8b01 	strb.w	r8, [r5], #1
  40d29e:	4606      	mov	r6, r0
  40d2a0:	460f      	mov	r7, r1
  40d2a2:	f002 ffad 	bl	410200 <__aeabi_dcmplt>
  40d2a6:	4632      	mov	r2, r6
  40d2a8:	463b      	mov	r3, r7
  40d2aa:	2800      	cmp	r0, #0
  40d2ac:	d0c6      	beq.n	40d23c <_dtoa_r+0x8c4>
  40d2ae:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40d2b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d2b4:	9302      	str	r3, [sp, #8]
  40d2b6:	e523      	b.n	40cd00 <_dtoa_r+0x388>
  40d2b8:	2300      	movs	r3, #0
  40d2ba:	930b      	str	r3, [sp, #44]	; 0x2c
  40d2bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40d2be:	2b00      	cmp	r3, #0
  40d2c0:	f340 80dc 	ble.w	40d47c <_dtoa_r+0xb04>
  40d2c4:	461f      	mov	r7, r3
  40d2c6:	461e      	mov	r6, r3
  40d2c8:	930f      	str	r3, [sp, #60]	; 0x3c
  40d2ca:	930a      	str	r3, [sp, #40]	; 0x28
  40d2cc:	e6f6      	b.n	40d0bc <_dtoa_r+0x744>
  40d2ce:	2301      	movs	r3, #1
  40d2d0:	930b      	str	r3, [sp, #44]	; 0x2c
  40d2d2:	e7f3      	b.n	40d2bc <_dtoa_r+0x944>
  40d2d4:	f1ba 0f00 	cmp.w	sl, #0
  40d2d8:	f47f ada8 	bne.w	40ce2c <_dtoa_r+0x4b4>
  40d2dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40d2e0:	2b00      	cmp	r3, #0
  40d2e2:	f47f adba 	bne.w	40ce5a <_dtoa_r+0x4e2>
  40d2e6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40d2ea:	0d3f      	lsrs	r7, r7, #20
  40d2ec:	053f      	lsls	r7, r7, #20
  40d2ee:	2f00      	cmp	r7, #0
  40d2f0:	f000 820d 	beq.w	40d70e <_dtoa_r+0xd96>
  40d2f4:	9b08      	ldr	r3, [sp, #32]
  40d2f6:	3301      	adds	r3, #1
  40d2f8:	9308      	str	r3, [sp, #32]
  40d2fa:	9b06      	ldr	r3, [sp, #24]
  40d2fc:	3301      	adds	r3, #1
  40d2fe:	9306      	str	r3, [sp, #24]
  40d300:	2301      	movs	r3, #1
  40d302:	930c      	str	r3, [sp, #48]	; 0x30
  40d304:	e5ab      	b.n	40ce5e <_dtoa_r+0x4e6>
  40d306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d308:	2b00      	cmp	r3, #0
  40d30a:	f73f ac42 	bgt.w	40cb92 <_dtoa_r+0x21a>
  40d30e:	f040 8221 	bne.w	40d754 <_dtoa_r+0xddc>
  40d312:	2200      	movs	r2, #0
  40d314:	4b38      	ldr	r3, [pc, #224]	; (40d3f8 <_dtoa_r+0xa80>)
  40d316:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40d31a:	f002 fcff 	bl	40fd1c <__aeabi_dmul>
  40d31e:	4652      	mov	r2, sl
  40d320:	465b      	mov	r3, fp
  40d322:	f002 ff81 	bl	410228 <__aeabi_dcmpge>
  40d326:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40d32a:	4646      	mov	r6, r8
  40d32c:	2800      	cmp	r0, #0
  40d32e:	d041      	beq.n	40d3b4 <_dtoa_r+0xa3c>
  40d330:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40d332:	9d04      	ldr	r5, [sp, #16]
  40d334:	43db      	mvns	r3, r3
  40d336:	9302      	str	r3, [sp, #8]
  40d338:	4641      	mov	r1, r8
  40d33a:	4620      	mov	r0, r4
  40d33c:	f001 fb76 	bl	40ea2c <_Bfree>
  40d340:	2e00      	cmp	r6, #0
  40d342:	f43f acdd 	beq.w	40cd00 <_dtoa_r+0x388>
  40d346:	e6a7      	b.n	40d098 <_dtoa_r+0x720>
  40d348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d34a:	4649      	mov	r1, r9
  40d34c:	4620      	mov	r0, r4
  40d34e:	f001 fca3 	bl	40ec98 <__pow5mult>
  40d352:	4681      	mov	r9, r0
  40d354:	e558      	b.n	40ce08 <_dtoa_r+0x490>
  40d356:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40d358:	2a00      	cmp	r2, #0
  40d35a:	f000 8187 	beq.w	40d66c <_dtoa_r+0xcf4>
  40d35e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40d362:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40d364:	9d08      	ldr	r5, [sp, #32]
  40d366:	e4f2      	b.n	40cd4e <_dtoa_r+0x3d6>
  40d368:	f1ba 0f00 	cmp.w	sl, #0
  40d36c:	f47f ad75 	bne.w	40ce5a <_dtoa_r+0x4e2>
  40d370:	e7b4      	b.n	40d2dc <_dtoa_r+0x964>
  40d372:	f001 fb65 	bl	40ea40 <__multadd>
  40d376:	4647      	mov	r7, r8
  40d378:	4606      	mov	r6, r0
  40d37a:	4683      	mov	fp, r0
  40d37c:	e5be      	b.n	40cefc <_dtoa_r+0x584>
  40d37e:	4601      	mov	r1, r0
  40d380:	4620      	mov	r0, r4
  40d382:	9306      	str	r3, [sp, #24]
  40d384:	f001 fb52 	bl	40ea2c <_Bfree>
  40d388:	2201      	movs	r2, #1
  40d38a:	9b06      	ldr	r3, [sp, #24]
  40d38c:	e5e0      	b.n	40cf50 <_dtoa_r+0x5d8>
  40d38e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d390:	2b02      	cmp	r3, #2
  40d392:	f77f ad96 	ble.w	40cec2 <_dtoa_r+0x54a>
  40d396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d398:	2b00      	cmp	r3, #0
  40d39a:	d1c9      	bne.n	40d330 <_dtoa_r+0x9b8>
  40d39c:	4641      	mov	r1, r8
  40d39e:	2205      	movs	r2, #5
  40d3a0:	4620      	mov	r0, r4
  40d3a2:	f001 fb4d 	bl	40ea40 <__multadd>
  40d3a6:	4601      	mov	r1, r0
  40d3a8:	4680      	mov	r8, r0
  40d3aa:	4648      	mov	r0, r9
  40d3ac:	f001 fd16 	bl	40eddc <__mcmp>
  40d3b0:	2800      	cmp	r0, #0
  40d3b2:	ddbd      	ble.n	40d330 <_dtoa_r+0x9b8>
  40d3b4:	9a02      	ldr	r2, [sp, #8]
  40d3b6:	9904      	ldr	r1, [sp, #16]
  40d3b8:	2331      	movs	r3, #49	; 0x31
  40d3ba:	3201      	adds	r2, #1
  40d3bc:	9202      	str	r2, [sp, #8]
  40d3be:	700b      	strb	r3, [r1, #0]
  40d3c0:	1c4d      	adds	r5, r1, #1
  40d3c2:	e7b9      	b.n	40d338 <_dtoa_r+0x9c0>
  40d3c4:	9a02      	ldr	r2, [sp, #8]
  40d3c6:	3201      	adds	r2, #1
  40d3c8:	9202      	str	r2, [sp, #8]
  40d3ca:	9a04      	ldr	r2, [sp, #16]
  40d3cc:	2331      	movs	r3, #49	; 0x31
  40d3ce:	7013      	strb	r3, [r2, #0]
  40d3d0:	e652      	b.n	40d078 <_dtoa_r+0x700>
  40d3d2:	2301      	movs	r3, #1
  40d3d4:	930b      	str	r3, [sp, #44]	; 0x2c
  40d3d6:	e666      	b.n	40d0a6 <_dtoa_r+0x72e>
  40d3d8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40d3dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d3de:	e48f      	b.n	40cd00 <_dtoa_r+0x388>
  40d3e0:	00411dc0 	.word	0x00411dc0
  40d3e4:	00411d98 	.word	0x00411d98
  40d3e8:	3ff00000 	.word	0x3ff00000
  40d3ec:	401c0000 	.word	0x401c0000
  40d3f0:	3fe00000 	.word	0x3fe00000
  40d3f4:	40240000 	.word	0x40240000
  40d3f8:	40140000 	.word	0x40140000
  40d3fc:	4650      	mov	r0, sl
  40d3fe:	f002 fc27 	bl	40fc50 <__aeabi_i2d>
  40d402:	463a      	mov	r2, r7
  40d404:	4643      	mov	r3, r8
  40d406:	f002 fc89 	bl	40fd1c <__aeabi_dmul>
  40d40a:	2200      	movs	r2, #0
  40d40c:	4bc1      	ldr	r3, [pc, #772]	; (40d714 <_dtoa_r+0xd9c>)
  40d40e:	f002 fad3 	bl	40f9b8 <__adddf3>
  40d412:	4605      	mov	r5, r0
  40d414:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40d418:	4641      	mov	r1, r8
  40d41a:	2200      	movs	r2, #0
  40d41c:	4bbe      	ldr	r3, [pc, #760]	; (40d718 <_dtoa_r+0xda0>)
  40d41e:	4638      	mov	r0, r7
  40d420:	f002 fac8 	bl	40f9b4 <__aeabi_dsub>
  40d424:	462a      	mov	r2, r5
  40d426:	4633      	mov	r3, r6
  40d428:	4682      	mov	sl, r0
  40d42a:	468b      	mov	fp, r1
  40d42c:	f002 ff06 	bl	41023c <__aeabi_dcmpgt>
  40d430:	4680      	mov	r8, r0
  40d432:	2800      	cmp	r0, #0
  40d434:	f040 8110 	bne.w	40d658 <_dtoa_r+0xce0>
  40d438:	462a      	mov	r2, r5
  40d43a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40d43e:	4650      	mov	r0, sl
  40d440:	4659      	mov	r1, fp
  40d442:	f002 fedd 	bl	410200 <__aeabi_dcmplt>
  40d446:	b118      	cbz	r0, 40d450 <_dtoa_r+0xad8>
  40d448:	4646      	mov	r6, r8
  40d44a:	e771      	b.n	40d330 <_dtoa_r+0x9b8>
  40d44c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40d450:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40d454:	f7ff bb8a 	b.w	40cb6c <_dtoa_r+0x1f4>
  40d458:	9804      	ldr	r0, [sp, #16]
  40d45a:	f7ff babb 	b.w	40c9d4 <_dtoa_r+0x5c>
  40d45e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d462:	970c      	str	r7, [sp, #48]	; 0x30
  40d464:	1afb      	subs	r3, r7, r3
  40d466:	441a      	add	r2, r3
  40d468:	920d      	str	r2, [sp, #52]	; 0x34
  40d46a:	2700      	movs	r7, #0
  40d46c:	e469      	b.n	40cd42 <_dtoa_r+0x3ca>
  40d46e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40d472:	f04f 0a02 	mov.w	sl, #2
  40d476:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40d47a:	e657      	b.n	40d12c <_dtoa_r+0x7b4>
  40d47c:	2100      	movs	r1, #0
  40d47e:	2301      	movs	r3, #1
  40d480:	6461      	str	r1, [r4, #68]	; 0x44
  40d482:	4620      	mov	r0, r4
  40d484:	9325      	str	r3, [sp, #148]	; 0x94
  40d486:	f001 faab 	bl	40e9e0 <_Balloc>
  40d48a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40d48c:	9004      	str	r0, [sp, #16]
  40d48e:	6420      	str	r0, [r4, #64]	; 0x40
  40d490:	930a      	str	r3, [sp, #40]	; 0x28
  40d492:	930f      	str	r3, [sp, #60]	; 0x3c
  40d494:	e629      	b.n	40d0ea <_dtoa_r+0x772>
  40d496:	2a00      	cmp	r2, #0
  40d498:	46d0      	mov	r8, sl
  40d49a:	f8cd b018 	str.w	fp, [sp, #24]
  40d49e:	469a      	mov	sl, r3
  40d4a0:	dd11      	ble.n	40d4c6 <_dtoa_r+0xb4e>
  40d4a2:	4649      	mov	r1, r9
  40d4a4:	2201      	movs	r2, #1
  40d4a6:	4620      	mov	r0, r4
  40d4a8:	f001 fc46 	bl	40ed38 <__lshift>
  40d4ac:	4641      	mov	r1, r8
  40d4ae:	4681      	mov	r9, r0
  40d4b0:	f001 fc94 	bl	40eddc <__mcmp>
  40d4b4:	2800      	cmp	r0, #0
  40d4b6:	f340 8146 	ble.w	40d746 <_dtoa_r+0xdce>
  40d4ba:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40d4be:	f000 8106 	beq.w	40d6ce <_dtoa_r+0xd56>
  40d4c2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40d4c6:	46b3      	mov	fp, r6
  40d4c8:	f887 a000 	strb.w	sl, [r7]
  40d4cc:	1c7d      	adds	r5, r7, #1
  40d4ce:	9e06      	ldr	r6, [sp, #24]
  40d4d0:	e5d2      	b.n	40d078 <_dtoa_r+0x700>
  40d4d2:	d104      	bne.n	40d4de <_dtoa_r+0xb66>
  40d4d4:	f01a 0f01 	tst.w	sl, #1
  40d4d8:	d001      	beq.n	40d4de <_dtoa_r+0xb66>
  40d4da:	e5bd      	b.n	40d058 <_dtoa_r+0x6e0>
  40d4dc:	4615      	mov	r5, r2
  40d4de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40d4e2:	2b30      	cmp	r3, #48	; 0x30
  40d4e4:	f105 32ff 	add.w	r2, r5, #4294967295
  40d4e8:	d0f8      	beq.n	40d4dc <_dtoa_r+0xb64>
  40d4ea:	e5c5      	b.n	40d078 <_dtoa_r+0x700>
  40d4ec:	9904      	ldr	r1, [sp, #16]
  40d4ee:	2230      	movs	r2, #48	; 0x30
  40d4f0:	700a      	strb	r2, [r1, #0]
  40d4f2:	9a02      	ldr	r2, [sp, #8]
  40d4f4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40d4f8:	3201      	adds	r2, #1
  40d4fa:	9202      	str	r2, [sp, #8]
  40d4fc:	f7ff bbfc 	b.w	40ccf8 <_dtoa_r+0x380>
  40d500:	f000 80bb 	beq.w	40d67a <_dtoa_r+0xd02>
  40d504:	9b02      	ldr	r3, [sp, #8]
  40d506:	425d      	negs	r5, r3
  40d508:	4b84      	ldr	r3, [pc, #528]	; (40d71c <_dtoa_r+0xda4>)
  40d50a:	f005 020f 	and.w	r2, r5, #15
  40d50e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d512:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d516:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40d51a:	f002 fbff 	bl	40fd1c <__aeabi_dmul>
  40d51e:	112d      	asrs	r5, r5, #4
  40d520:	4607      	mov	r7, r0
  40d522:	4688      	mov	r8, r1
  40d524:	f000 812c 	beq.w	40d780 <_dtoa_r+0xe08>
  40d528:	4e7d      	ldr	r6, [pc, #500]	; (40d720 <_dtoa_r+0xda8>)
  40d52a:	f04f 0a02 	mov.w	sl, #2
  40d52e:	07eb      	lsls	r3, r5, #31
  40d530:	d509      	bpl.n	40d546 <_dtoa_r+0xbce>
  40d532:	4638      	mov	r0, r7
  40d534:	4641      	mov	r1, r8
  40d536:	e9d6 2300 	ldrd	r2, r3, [r6]
  40d53a:	f002 fbef 	bl	40fd1c <__aeabi_dmul>
  40d53e:	f10a 0a01 	add.w	sl, sl, #1
  40d542:	4607      	mov	r7, r0
  40d544:	4688      	mov	r8, r1
  40d546:	106d      	asrs	r5, r5, #1
  40d548:	f106 0608 	add.w	r6, r6, #8
  40d54c:	d1ef      	bne.n	40d52e <_dtoa_r+0xbb6>
  40d54e:	e608      	b.n	40d162 <_dtoa_r+0x7ea>
  40d550:	6871      	ldr	r1, [r6, #4]
  40d552:	4620      	mov	r0, r4
  40d554:	f001 fa44 	bl	40e9e0 <_Balloc>
  40d558:	6933      	ldr	r3, [r6, #16]
  40d55a:	3302      	adds	r3, #2
  40d55c:	009a      	lsls	r2, r3, #2
  40d55e:	4605      	mov	r5, r0
  40d560:	f106 010c 	add.w	r1, r6, #12
  40d564:	300c      	adds	r0, #12
  40d566:	f7fc f8c7 	bl	4096f8 <memcpy>
  40d56a:	4629      	mov	r1, r5
  40d56c:	2201      	movs	r2, #1
  40d56e:	4620      	mov	r0, r4
  40d570:	f001 fbe2 	bl	40ed38 <__lshift>
  40d574:	9006      	str	r0, [sp, #24]
  40d576:	e4b5      	b.n	40cee4 <_dtoa_r+0x56c>
  40d578:	2b39      	cmp	r3, #57	; 0x39
  40d57a:	f8cd b018 	str.w	fp, [sp, #24]
  40d57e:	46d0      	mov	r8, sl
  40d580:	f000 80a5 	beq.w	40d6ce <_dtoa_r+0xd56>
  40d584:	f103 0a01 	add.w	sl, r3, #1
  40d588:	46b3      	mov	fp, r6
  40d58a:	f887 a000 	strb.w	sl, [r7]
  40d58e:	1c7d      	adds	r5, r7, #1
  40d590:	9e06      	ldr	r6, [sp, #24]
  40d592:	e571      	b.n	40d078 <_dtoa_r+0x700>
  40d594:	465a      	mov	r2, fp
  40d596:	46d0      	mov	r8, sl
  40d598:	46b3      	mov	fp, r6
  40d59a:	469a      	mov	sl, r3
  40d59c:	4616      	mov	r6, r2
  40d59e:	e54f      	b.n	40d040 <_dtoa_r+0x6c8>
  40d5a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d5a2:	495e      	ldr	r1, [pc, #376]	; (40d71c <_dtoa_r+0xda4>)
  40d5a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40d5a8:	462a      	mov	r2, r5
  40d5aa:	4633      	mov	r3, r6
  40d5ac:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40d5b0:	f002 fbb4 	bl	40fd1c <__aeabi_dmul>
  40d5b4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40d5b8:	4638      	mov	r0, r7
  40d5ba:	4641      	mov	r1, r8
  40d5bc:	f002 fe5e 	bl	41027c <__aeabi_d2iz>
  40d5c0:	4605      	mov	r5, r0
  40d5c2:	f002 fb45 	bl	40fc50 <__aeabi_i2d>
  40d5c6:	460b      	mov	r3, r1
  40d5c8:	4602      	mov	r2, r0
  40d5ca:	4641      	mov	r1, r8
  40d5cc:	4638      	mov	r0, r7
  40d5ce:	f002 f9f1 	bl	40f9b4 <__aeabi_dsub>
  40d5d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d5d4:	460f      	mov	r7, r1
  40d5d6:	9904      	ldr	r1, [sp, #16]
  40d5d8:	3530      	adds	r5, #48	; 0x30
  40d5da:	2b01      	cmp	r3, #1
  40d5dc:	700d      	strb	r5, [r1, #0]
  40d5de:	4606      	mov	r6, r0
  40d5e0:	f101 0501 	add.w	r5, r1, #1
  40d5e4:	d026      	beq.n	40d634 <_dtoa_r+0xcbc>
  40d5e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d5e8:	9a04      	ldr	r2, [sp, #16]
  40d5ea:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40d728 <_dtoa_r+0xdb0>
  40d5ee:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40d5f2:	4413      	add	r3, r2
  40d5f4:	f04f 0a00 	mov.w	sl, #0
  40d5f8:	4699      	mov	r9, r3
  40d5fa:	4652      	mov	r2, sl
  40d5fc:	465b      	mov	r3, fp
  40d5fe:	4630      	mov	r0, r6
  40d600:	4639      	mov	r1, r7
  40d602:	f002 fb8b 	bl	40fd1c <__aeabi_dmul>
  40d606:	460f      	mov	r7, r1
  40d608:	4606      	mov	r6, r0
  40d60a:	f002 fe37 	bl	41027c <__aeabi_d2iz>
  40d60e:	4680      	mov	r8, r0
  40d610:	f002 fb1e 	bl	40fc50 <__aeabi_i2d>
  40d614:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40d618:	4602      	mov	r2, r0
  40d61a:	460b      	mov	r3, r1
  40d61c:	4630      	mov	r0, r6
  40d61e:	4639      	mov	r1, r7
  40d620:	f002 f9c8 	bl	40f9b4 <__aeabi_dsub>
  40d624:	f805 8b01 	strb.w	r8, [r5], #1
  40d628:	454d      	cmp	r5, r9
  40d62a:	4606      	mov	r6, r0
  40d62c:	460f      	mov	r7, r1
  40d62e:	d1e4      	bne.n	40d5fa <_dtoa_r+0xc82>
  40d630:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40d634:	4b3b      	ldr	r3, [pc, #236]	; (40d724 <_dtoa_r+0xdac>)
  40d636:	2200      	movs	r2, #0
  40d638:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40d63c:	f002 f9bc 	bl	40f9b8 <__adddf3>
  40d640:	4632      	mov	r2, r6
  40d642:	463b      	mov	r3, r7
  40d644:	f002 fddc 	bl	410200 <__aeabi_dcmplt>
  40d648:	2800      	cmp	r0, #0
  40d64a:	d046      	beq.n	40d6da <_dtoa_r+0xd62>
  40d64c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d64e:	9302      	str	r3, [sp, #8]
  40d650:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40d654:	f7ff bb43 	b.w	40ccde <_dtoa_r+0x366>
  40d658:	f04f 0800 	mov.w	r8, #0
  40d65c:	4646      	mov	r6, r8
  40d65e:	e6a9      	b.n	40d3b4 <_dtoa_r+0xa3c>
  40d660:	9b08      	ldr	r3, [sp, #32]
  40d662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d664:	1a9d      	subs	r5, r3, r2
  40d666:	2300      	movs	r3, #0
  40d668:	f7ff bb71 	b.w	40cd4e <_dtoa_r+0x3d6>
  40d66c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d66e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40d670:	9d08      	ldr	r5, [sp, #32]
  40d672:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40d676:	f7ff bb6a 	b.w	40cd4e <_dtoa_r+0x3d6>
  40d67a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40d67e:	f04f 0a02 	mov.w	sl, #2
  40d682:	e56e      	b.n	40d162 <_dtoa_r+0x7ea>
  40d684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d686:	2b00      	cmp	r3, #0
  40d688:	f43f aeb8 	beq.w	40d3fc <_dtoa_r+0xa84>
  40d68c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d68e:	2b00      	cmp	r3, #0
  40d690:	f77f aede 	ble.w	40d450 <_dtoa_r+0xad8>
  40d694:	2200      	movs	r2, #0
  40d696:	4b24      	ldr	r3, [pc, #144]	; (40d728 <_dtoa_r+0xdb0>)
  40d698:	4638      	mov	r0, r7
  40d69a:	4641      	mov	r1, r8
  40d69c:	f002 fb3e 	bl	40fd1c <__aeabi_dmul>
  40d6a0:	4607      	mov	r7, r0
  40d6a2:	4688      	mov	r8, r1
  40d6a4:	f10a 0001 	add.w	r0, sl, #1
  40d6a8:	f002 fad2 	bl	40fc50 <__aeabi_i2d>
  40d6ac:	463a      	mov	r2, r7
  40d6ae:	4643      	mov	r3, r8
  40d6b0:	f002 fb34 	bl	40fd1c <__aeabi_dmul>
  40d6b4:	2200      	movs	r2, #0
  40d6b6:	4b17      	ldr	r3, [pc, #92]	; (40d714 <_dtoa_r+0xd9c>)
  40d6b8:	f002 f97e 	bl	40f9b8 <__adddf3>
  40d6bc:	9a02      	ldr	r2, [sp, #8]
  40d6be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d6c0:	9312      	str	r3, [sp, #72]	; 0x48
  40d6c2:	3a01      	subs	r2, #1
  40d6c4:	4605      	mov	r5, r0
  40d6c6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40d6ca:	9215      	str	r2, [sp, #84]	; 0x54
  40d6cc:	e56a      	b.n	40d1a4 <_dtoa_r+0x82c>
  40d6ce:	2239      	movs	r2, #57	; 0x39
  40d6d0:	46b3      	mov	fp, r6
  40d6d2:	703a      	strb	r2, [r7, #0]
  40d6d4:	9e06      	ldr	r6, [sp, #24]
  40d6d6:	1c7d      	adds	r5, r7, #1
  40d6d8:	e4c0      	b.n	40d05c <_dtoa_r+0x6e4>
  40d6da:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40d6de:	2000      	movs	r0, #0
  40d6e0:	4910      	ldr	r1, [pc, #64]	; (40d724 <_dtoa_r+0xdac>)
  40d6e2:	f002 f967 	bl	40f9b4 <__aeabi_dsub>
  40d6e6:	4632      	mov	r2, r6
  40d6e8:	463b      	mov	r3, r7
  40d6ea:	f002 fda7 	bl	41023c <__aeabi_dcmpgt>
  40d6ee:	b908      	cbnz	r0, 40d6f4 <_dtoa_r+0xd7c>
  40d6f0:	e6ae      	b.n	40d450 <_dtoa_r+0xad8>
  40d6f2:	4615      	mov	r5, r2
  40d6f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40d6f8:	2b30      	cmp	r3, #48	; 0x30
  40d6fa:	f105 32ff 	add.w	r2, r5, #4294967295
  40d6fe:	d0f8      	beq.n	40d6f2 <_dtoa_r+0xd7a>
  40d700:	e5d7      	b.n	40d2b2 <_dtoa_r+0x93a>
  40d702:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40d706:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d708:	9302      	str	r3, [sp, #8]
  40d70a:	f7ff bae8 	b.w	40ccde <_dtoa_r+0x366>
  40d70e:	970c      	str	r7, [sp, #48]	; 0x30
  40d710:	f7ff bba5 	b.w	40ce5e <_dtoa_r+0x4e6>
  40d714:	401c0000 	.word	0x401c0000
  40d718:	40140000 	.word	0x40140000
  40d71c:	00411dc0 	.word	0x00411dc0
  40d720:	00411d98 	.word	0x00411d98
  40d724:	3fe00000 	.word	0x3fe00000
  40d728:	40240000 	.word	0x40240000
  40d72c:	2b39      	cmp	r3, #57	; 0x39
  40d72e:	f8cd b018 	str.w	fp, [sp, #24]
  40d732:	46d0      	mov	r8, sl
  40d734:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40d738:	469a      	mov	sl, r3
  40d73a:	d0c8      	beq.n	40d6ce <_dtoa_r+0xd56>
  40d73c:	f1bb 0f00 	cmp.w	fp, #0
  40d740:	f73f aebf 	bgt.w	40d4c2 <_dtoa_r+0xb4a>
  40d744:	e6bf      	b.n	40d4c6 <_dtoa_r+0xb4e>
  40d746:	f47f aebe 	bne.w	40d4c6 <_dtoa_r+0xb4e>
  40d74a:	f01a 0f01 	tst.w	sl, #1
  40d74e:	f43f aeba 	beq.w	40d4c6 <_dtoa_r+0xb4e>
  40d752:	e6b2      	b.n	40d4ba <_dtoa_r+0xb42>
  40d754:	f04f 0800 	mov.w	r8, #0
  40d758:	4646      	mov	r6, r8
  40d75a:	e5e9      	b.n	40d330 <_dtoa_r+0x9b8>
  40d75c:	4631      	mov	r1, r6
  40d75e:	2300      	movs	r3, #0
  40d760:	220a      	movs	r2, #10
  40d762:	4620      	mov	r0, r4
  40d764:	f001 f96c 	bl	40ea40 <__multadd>
  40d768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d76a:	2b00      	cmp	r3, #0
  40d76c:	4606      	mov	r6, r0
  40d76e:	dd0a      	ble.n	40d786 <_dtoa_r+0xe0e>
  40d770:	930a      	str	r3, [sp, #40]	; 0x28
  40d772:	f7ff bbaa 	b.w	40ceca <_dtoa_r+0x552>
  40d776:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d778:	2b02      	cmp	r3, #2
  40d77a:	dc23      	bgt.n	40d7c4 <_dtoa_r+0xe4c>
  40d77c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d77e:	e43b      	b.n	40cff8 <_dtoa_r+0x680>
  40d780:	f04f 0a02 	mov.w	sl, #2
  40d784:	e4ed      	b.n	40d162 <_dtoa_r+0x7ea>
  40d786:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d788:	2b02      	cmp	r3, #2
  40d78a:	dc1b      	bgt.n	40d7c4 <_dtoa_r+0xe4c>
  40d78c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d78e:	e7ef      	b.n	40d770 <_dtoa_r+0xdf8>
  40d790:	2500      	movs	r5, #0
  40d792:	6465      	str	r5, [r4, #68]	; 0x44
  40d794:	4629      	mov	r1, r5
  40d796:	4620      	mov	r0, r4
  40d798:	f001 f922 	bl	40e9e0 <_Balloc>
  40d79c:	f04f 33ff 	mov.w	r3, #4294967295
  40d7a0:	930a      	str	r3, [sp, #40]	; 0x28
  40d7a2:	930f      	str	r3, [sp, #60]	; 0x3c
  40d7a4:	2301      	movs	r3, #1
  40d7a6:	9004      	str	r0, [sp, #16]
  40d7a8:	9525      	str	r5, [sp, #148]	; 0x94
  40d7aa:	6420      	str	r0, [r4, #64]	; 0x40
  40d7ac:	930b      	str	r3, [sp, #44]	; 0x2c
  40d7ae:	f7ff b9dd 	b.w	40cb6c <_dtoa_r+0x1f4>
  40d7b2:	2501      	movs	r5, #1
  40d7b4:	f7ff b9a5 	b.w	40cb02 <_dtoa_r+0x18a>
  40d7b8:	f43f ab69 	beq.w	40ce8e <_dtoa_r+0x516>
  40d7bc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40d7c0:	f7ff bbf9 	b.w	40cfb6 <_dtoa_r+0x63e>
  40d7c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d7c6:	930a      	str	r3, [sp, #40]	; 0x28
  40d7c8:	e5e5      	b.n	40d396 <_dtoa_r+0xa1e>
  40d7ca:	bf00      	nop

0040d7cc <__sflush_r>:
  40d7cc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40d7d0:	b29a      	uxth	r2, r3
  40d7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d7d6:	460d      	mov	r5, r1
  40d7d8:	0711      	lsls	r1, r2, #28
  40d7da:	4680      	mov	r8, r0
  40d7dc:	d43a      	bmi.n	40d854 <__sflush_r+0x88>
  40d7de:	686a      	ldr	r2, [r5, #4]
  40d7e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40d7e4:	2a00      	cmp	r2, #0
  40d7e6:	81ab      	strh	r3, [r5, #12]
  40d7e8:	dd6f      	ble.n	40d8ca <__sflush_r+0xfe>
  40d7ea:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40d7ec:	2c00      	cmp	r4, #0
  40d7ee:	d049      	beq.n	40d884 <__sflush_r+0xb8>
  40d7f0:	2200      	movs	r2, #0
  40d7f2:	b29b      	uxth	r3, r3
  40d7f4:	f8d8 6000 	ldr.w	r6, [r8]
  40d7f8:	f8c8 2000 	str.w	r2, [r8]
  40d7fc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40d800:	d067      	beq.n	40d8d2 <__sflush_r+0x106>
  40d802:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40d804:	075f      	lsls	r7, r3, #29
  40d806:	d505      	bpl.n	40d814 <__sflush_r+0x48>
  40d808:	6869      	ldr	r1, [r5, #4]
  40d80a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40d80c:	1a52      	subs	r2, r2, r1
  40d80e:	b10b      	cbz	r3, 40d814 <__sflush_r+0x48>
  40d810:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40d812:	1ad2      	subs	r2, r2, r3
  40d814:	2300      	movs	r3, #0
  40d816:	69e9      	ldr	r1, [r5, #28]
  40d818:	4640      	mov	r0, r8
  40d81a:	47a0      	blx	r4
  40d81c:	1c44      	adds	r4, r0, #1
  40d81e:	d03c      	beq.n	40d89a <__sflush_r+0xce>
  40d820:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40d824:	692a      	ldr	r2, [r5, #16]
  40d826:	602a      	str	r2, [r5, #0]
  40d828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40d82c:	2200      	movs	r2, #0
  40d82e:	81ab      	strh	r3, [r5, #12]
  40d830:	04db      	lsls	r3, r3, #19
  40d832:	606a      	str	r2, [r5, #4]
  40d834:	d447      	bmi.n	40d8c6 <__sflush_r+0xfa>
  40d836:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40d838:	f8c8 6000 	str.w	r6, [r8]
  40d83c:	b311      	cbz	r1, 40d884 <__sflush_r+0xb8>
  40d83e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40d842:	4299      	cmp	r1, r3
  40d844:	d002      	beq.n	40d84c <__sflush_r+0x80>
  40d846:	4640      	mov	r0, r8
  40d848:	f000 f9de 	bl	40dc08 <_free_r>
  40d84c:	2000      	movs	r0, #0
  40d84e:	6328      	str	r0, [r5, #48]	; 0x30
  40d850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d854:	692e      	ldr	r6, [r5, #16]
  40d856:	b1ae      	cbz	r6, 40d884 <__sflush_r+0xb8>
  40d858:	682c      	ldr	r4, [r5, #0]
  40d85a:	602e      	str	r6, [r5, #0]
  40d85c:	0791      	lsls	r1, r2, #30
  40d85e:	bf0c      	ite	eq
  40d860:	696b      	ldreq	r3, [r5, #20]
  40d862:	2300      	movne	r3, #0
  40d864:	1ba4      	subs	r4, r4, r6
  40d866:	60ab      	str	r3, [r5, #8]
  40d868:	e00a      	b.n	40d880 <__sflush_r+0xb4>
  40d86a:	4623      	mov	r3, r4
  40d86c:	4632      	mov	r2, r6
  40d86e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40d870:	69e9      	ldr	r1, [r5, #28]
  40d872:	4640      	mov	r0, r8
  40d874:	47b8      	blx	r7
  40d876:	2800      	cmp	r0, #0
  40d878:	eba4 0400 	sub.w	r4, r4, r0
  40d87c:	4406      	add	r6, r0
  40d87e:	dd04      	ble.n	40d88a <__sflush_r+0xbe>
  40d880:	2c00      	cmp	r4, #0
  40d882:	dcf2      	bgt.n	40d86a <__sflush_r+0x9e>
  40d884:	2000      	movs	r0, #0
  40d886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d88a:	89ab      	ldrh	r3, [r5, #12]
  40d88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d890:	81ab      	strh	r3, [r5, #12]
  40d892:	f04f 30ff 	mov.w	r0, #4294967295
  40d896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d89a:	f8d8 4000 	ldr.w	r4, [r8]
  40d89e:	2c1d      	cmp	r4, #29
  40d8a0:	d8f3      	bhi.n	40d88a <__sflush_r+0xbe>
  40d8a2:	4b19      	ldr	r3, [pc, #100]	; (40d908 <__sflush_r+0x13c>)
  40d8a4:	40e3      	lsrs	r3, r4
  40d8a6:	43db      	mvns	r3, r3
  40d8a8:	f013 0301 	ands.w	r3, r3, #1
  40d8ac:	d1ed      	bne.n	40d88a <__sflush_r+0xbe>
  40d8ae:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40d8b2:	606b      	str	r3, [r5, #4]
  40d8b4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40d8b8:	6929      	ldr	r1, [r5, #16]
  40d8ba:	81ab      	strh	r3, [r5, #12]
  40d8bc:	04da      	lsls	r2, r3, #19
  40d8be:	6029      	str	r1, [r5, #0]
  40d8c0:	d5b9      	bpl.n	40d836 <__sflush_r+0x6a>
  40d8c2:	2c00      	cmp	r4, #0
  40d8c4:	d1b7      	bne.n	40d836 <__sflush_r+0x6a>
  40d8c6:	6528      	str	r0, [r5, #80]	; 0x50
  40d8c8:	e7b5      	b.n	40d836 <__sflush_r+0x6a>
  40d8ca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40d8cc:	2a00      	cmp	r2, #0
  40d8ce:	dc8c      	bgt.n	40d7ea <__sflush_r+0x1e>
  40d8d0:	e7d8      	b.n	40d884 <__sflush_r+0xb8>
  40d8d2:	2301      	movs	r3, #1
  40d8d4:	69e9      	ldr	r1, [r5, #28]
  40d8d6:	4640      	mov	r0, r8
  40d8d8:	47a0      	blx	r4
  40d8da:	1c43      	adds	r3, r0, #1
  40d8dc:	4602      	mov	r2, r0
  40d8de:	d002      	beq.n	40d8e6 <__sflush_r+0x11a>
  40d8e0:	89ab      	ldrh	r3, [r5, #12]
  40d8e2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40d8e4:	e78e      	b.n	40d804 <__sflush_r+0x38>
  40d8e6:	f8d8 3000 	ldr.w	r3, [r8]
  40d8ea:	2b00      	cmp	r3, #0
  40d8ec:	d0f8      	beq.n	40d8e0 <__sflush_r+0x114>
  40d8ee:	2b1d      	cmp	r3, #29
  40d8f0:	d001      	beq.n	40d8f6 <__sflush_r+0x12a>
  40d8f2:	2b16      	cmp	r3, #22
  40d8f4:	d102      	bne.n	40d8fc <__sflush_r+0x130>
  40d8f6:	f8c8 6000 	str.w	r6, [r8]
  40d8fa:	e7c3      	b.n	40d884 <__sflush_r+0xb8>
  40d8fc:	89ab      	ldrh	r3, [r5, #12]
  40d8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d902:	81ab      	strh	r3, [r5, #12]
  40d904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d908:	20400001 	.word	0x20400001

0040d90c <_fflush_r>:
  40d90c:	b538      	push	{r3, r4, r5, lr}
  40d90e:	460d      	mov	r5, r1
  40d910:	4604      	mov	r4, r0
  40d912:	b108      	cbz	r0, 40d918 <_fflush_r+0xc>
  40d914:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d916:	b1bb      	cbz	r3, 40d948 <_fflush_r+0x3c>
  40d918:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40d91c:	b188      	cbz	r0, 40d942 <_fflush_r+0x36>
  40d91e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40d920:	07db      	lsls	r3, r3, #31
  40d922:	d401      	bmi.n	40d928 <_fflush_r+0x1c>
  40d924:	0581      	lsls	r1, r0, #22
  40d926:	d517      	bpl.n	40d958 <_fflush_r+0x4c>
  40d928:	4620      	mov	r0, r4
  40d92a:	4629      	mov	r1, r5
  40d92c:	f7ff ff4e 	bl	40d7cc <__sflush_r>
  40d930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40d932:	07da      	lsls	r2, r3, #31
  40d934:	4604      	mov	r4, r0
  40d936:	d402      	bmi.n	40d93e <_fflush_r+0x32>
  40d938:	89ab      	ldrh	r3, [r5, #12]
  40d93a:	059b      	lsls	r3, r3, #22
  40d93c:	d507      	bpl.n	40d94e <_fflush_r+0x42>
  40d93e:	4620      	mov	r0, r4
  40d940:	bd38      	pop	{r3, r4, r5, pc}
  40d942:	4604      	mov	r4, r0
  40d944:	4620      	mov	r0, r4
  40d946:	bd38      	pop	{r3, r4, r5, pc}
  40d948:	f000 f838 	bl	40d9bc <__sinit>
  40d94c:	e7e4      	b.n	40d918 <_fflush_r+0xc>
  40d94e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40d950:	f000 fc08 	bl	40e164 <__retarget_lock_release_recursive>
  40d954:	4620      	mov	r0, r4
  40d956:	bd38      	pop	{r3, r4, r5, pc}
  40d958:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40d95a:	f000 fc01 	bl	40e160 <__retarget_lock_acquire_recursive>
  40d95e:	e7e3      	b.n	40d928 <_fflush_r+0x1c>

0040d960 <_cleanup_r>:
  40d960:	4901      	ldr	r1, [pc, #4]	; (40d968 <_cleanup_r+0x8>)
  40d962:	f000 bbaf 	b.w	40e0c4 <_fwalk_reent>
  40d966:	bf00      	nop
  40d968:	0040f845 	.word	0x0040f845

0040d96c <std.isra.0>:
  40d96c:	b510      	push	{r4, lr}
  40d96e:	2300      	movs	r3, #0
  40d970:	4604      	mov	r4, r0
  40d972:	8181      	strh	r1, [r0, #12]
  40d974:	81c2      	strh	r2, [r0, #14]
  40d976:	6003      	str	r3, [r0, #0]
  40d978:	6043      	str	r3, [r0, #4]
  40d97a:	6083      	str	r3, [r0, #8]
  40d97c:	6643      	str	r3, [r0, #100]	; 0x64
  40d97e:	6103      	str	r3, [r0, #16]
  40d980:	6143      	str	r3, [r0, #20]
  40d982:	6183      	str	r3, [r0, #24]
  40d984:	4619      	mov	r1, r3
  40d986:	2208      	movs	r2, #8
  40d988:	305c      	adds	r0, #92	; 0x5c
  40d98a:	f7fb ff4f 	bl	40982c <memset>
  40d98e:	4807      	ldr	r0, [pc, #28]	; (40d9ac <std.isra.0+0x40>)
  40d990:	4907      	ldr	r1, [pc, #28]	; (40d9b0 <std.isra.0+0x44>)
  40d992:	4a08      	ldr	r2, [pc, #32]	; (40d9b4 <std.isra.0+0x48>)
  40d994:	4b08      	ldr	r3, [pc, #32]	; (40d9b8 <std.isra.0+0x4c>)
  40d996:	6220      	str	r0, [r4, #32]
  40d998:	61e4      	str	r4, [r4, #28]
  40d99a:	6261      	str	r1, [r4, #36]	; 0x24
  40d99c:	62a2      	str	r2, [r4, #40]	; 0x28
  40d99e:	62e3      	str	r3, [r4, #44]	; 0x2c
  40d9a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40d9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40d9a8:	f000 bbd6 	b.w	40e158 <__retarget_lock_init_recursive>
  40d9ac:	0040f345 	.word	0x0040f345
  40d9b0:	0040f369 	.word	0x0040f369
  40d9b4:	0040f3a5 	.word	0x0040f3a5
  40d9b8:	0040f3c5 	.word	0x0040f3c5

0040d9bc <__sinit>:
  40d9bc:	b510      	push	{r4, lr}
  40d9be:	4604      	mov	r4, r0
  40d9c0:	4812      	ldr	r0, [pc, #72]	; (40da0c <__sinit+0x50>)
  40d9c2:	f000 fbcd 	bl	40e160 <__retarget_lock_acquire_recursive>
  40d9c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40d9c8:	b9d2      	cbnz	r2, 40da00 <__sinit+0x44>
  40d9ca:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40d9ce:	4810      	ldr	r0, [pc, #64]	; (40da10 <__sinit+0x54>)
  40d9d0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40d9d4:	2103      	movs	r1, #3
  40d9d6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40d9da:	63e0      	str	r0, [r4, #60]	; 0x3c
  40d9dc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40d9e0:	6860      	ldr	r0, [r4, #4]
  40d9e2:	2104      	movs	r1, #4
  40d9e4:	f7ff ffc2 	bl	40d96c <std.isra.0>
  40d9e8:	2201      	movs	r2, #1
  40d9ea:	2109      	movs	r1, #9
  40d9ec:	68a0      	ldr	r0, [r4, #8]
  40d9ee:	f7ff ffbd 	bl	40d96c <std.isra.0>
  40d9f2:	2202      	movs	r2, #2
  40d9f4:	2112      	movs	r1, #18
  40d9f6:	68e0      	ldr	r0, [r4, #12]
  40d9f8:	f7ff ffb8 	bl	40d96c <std.isra.0>
  40d9fc:	2301      	movs	r3, #1
  40d9fe:	63a3      	str	r3, [r4, #56]	; 0x38
  40da00:	4802      	ldr	r0, [pc, #8]	; (40da0c <__sinit+0x50>)
  40da02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40da06:	f000 bbad 	b.w	40e164 <__retarget_lock_release_recursive>
  40da0a:	bf00      	nop
  40da0c:	20410a3c 	.word	0x20410a3c
  40da10:	0040d961 	.word	0x0040d961

0040da14 <__sfp_lock_acquire>:
  40da14:	4801      	ldr	r0, [pc, #4]	; (40da1c <__sfp_lock_acquire+0x8>)
  40da16:	f000 bba3 	b.w	40e160 <__retarget_lock_acquire_recursive>
  40da1a:	bf00      	nop
  40da1c:	20410a50 	.word	0x20410a50

0040da20 <__sfp_lock_release>:
  40da20:	4801      	ldr	r0, [pc, #4]	; (40da28 <__sfp_lock_release+0x8>)
  40da22:	f000 bb9f 	b.w	40e164 <__retarget_lock_release_recursive>
  40da26:	bf00      	nop
  40da28:	20410a50 	.word	0x20410a50

0040da2c <__libc_fini_array>:
  40da2c:	b538      	push	{r3, r4, r5, lr}
  40da2e:	4c0a      	ldr	r4, [pc, #40]	; (40da58 <__libc_fini_array+0x2c>)
  40da30:	4d0a      	ldr	r5, [pc, #40]	; (40da5c <__libc_fini_array+0x30>)
  40da32:	1b64      	subs	r4, r4, r5
  40da34:	10a4      	asrs	r4, r4, #2
  40da36:	d00a      	beq.n	40da4e <__libc_fini_array+0x22>
  40da38:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40da3c:	3b01      	subs	r3, #1
  40da3e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40da42:	3c01      	subs	r4, #1
  40da44:	f855 3904 	ldr.w	r3, [r5], #-4
  40da48:	4798      	blx	r3
  40da4a:	2c00      	cmp	r4, #0
  40da4c:	d1f9      	bne.n	40da42 <__libc_fini_array+0x16>
  40da4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40da52:	f004 baab 	b.w	411fac <_fini>
  40da56:	bf00      	nop
  40da58:	00411fbc 	.word	0x00411fbc
  40da5c:	00411fb8 	.word	0x00411fb8

0040da60 <__fputwc>:
  40da60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40da64:	b082      	sub	sp, #8
  40da66:	4680      	mov	r8, r0
  40da68:	4689      	mov	r9, r1
  40da6a:	4614      	mov	r4, r2
  40da6c:	f000 fb54 	bl	40e118 <__locale_mb_cur_max>
  40da70:	2801      	cmp	r0, #1
  40da72:	d036      	beq.n	40dae2 <__fputwc+0x82>
  40da74:	464a      	mov	r2, r9
  40da76:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40da7a:	a901      	add	r1, sp, #4
  40da7c:	4640      	mov	r0, r8
  40da7e:	f001 fdef 	bl	40f660 <_wcrtomb_r>
  40da82:	1c42      	adds	r2, r0, #1
  40da84:	4606      	mov	r6, r0
  40da86:	d025      	beq.n	40dad4 <__fputwc+0x74>
  40da88:	b3a8      	cbz	r0, 40daf6 <__fputwc+0x96>
  40da8a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40da8e:	2500      	movs	r5, #0
  40da90:	f10d 0a04 	add.w	sl, sp, #4
  40da94:	e009      	b.n	40daaa <__fputwc+0x4a>
  40da96:	6823      	ldr	r3, [r4, #0]
  40da98:	1c5a      	adds	r2, r3, #1
  40da9a:	6022      	str	r2, [r4, #0]
  40da9c:	f883 e000 	strb.w	lr, [r3]
  40daa0:	3501      	adds	r5, #1
  40daa2:	42b5      	cmp	r5, r6
  40daa4:	d227      	bcs.n	40daf6 <__fputwc+0x96>
  40daa6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40daaa:	68a3      	ldr	r3, [r4, #8]
  40daac:	3b01      	subs	r3, #1
  40daae:	2b00      	cmp	r3, #0
  40dab0:	60a3      	str	r3, [r4, #8]
  40dab2:	daf0      	bge.n	40da96 <__fputwc+0x36>
  40dab4:	69a7      	ldr	r7, [r4, #24]
  40dab6:	42bb      	cmp	r3, r7
  40dab8:	4671      	mov	r1, lr
  40daba:	4622      	mov	r2, r4
  40dabc:	4640      	mov	r0, r8
  40dabe:	db02      	blt.n	40dac6 <__fputwc+0x66>
  40dac0:	f1be 0f0a 	cmp.w	lr, #10
  40dac4:	d1e7      	bne.n	40da96 <__fputwc+0x36>
  40dac6:	f001 fd73 	bl	40f5b0 <__swbuf_r>
  40daca:	1c43      	adds	r3, r0, #1
  40dacc:	d1e8      	bne.n	40daa0 <__fputwc+0x40>
  40dace:	b002      	add	sp, #8
  40dad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40dad4:	89a3      	ldrh	r3, [r4, #12]
  40dad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40dada:	81a3      	strh	r3, [r4, #12]
  40dadc:	b002      	add	sp, #8
  40dade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40dae2:	f109 33ff 	add.w	r3, r9, #4294967295
  40dae6:	2bfe      	cmp	r3, #254	; 0xfe
  40dae8:	d8c4      	bhi.n	40da74 <__fputwc+0x14>
  40daea:	fa5f fe89 	uxtb.w	lr, r9
  40daee:	4606      	mov	r6, r0
  40daf0:	f88d e004 	strb.w	lr, [sp, #4]
  40daf4:	e7cb      	b.n	40da8e <__fputwc+0x2e>
  40daf6:	4648      	mov	r0, r9
  40daf8:	b002      	add	sp, #8
  40dafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40dafe:	bf00      	nop

0040db00 <_fputwc_r>:
  40db00:	b530      	push	{r4, r5, lr}
  40db02:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40db04:	f013 0f01 	tst.w	r3, #1
  40db08:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40db0c:	4614      	mov	r4, r2
  40db0e:	b083      	sub	sp, #12
  40db10:	4605      	mov	r5, r0
  40db12:	b29a      	uxth	r2, r3
  40db14:	d101      	bne.n	40db1a <_fputwc_r+0x1a>
  40db16:	0590      	lsls	r0, r2, #22
  40db18:	d51c      	bpl.n	40db54 <_fputwc_r+0x54>
  40db1a:	0490      	lsls	r0, r2, #18
  40db1c:	d406      	bmi.n	40db2c <_fputwc_r+0x2c>
  40db1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40db20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40db24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40db28:	81a3      	strh	r3, [r4, #12]
  40db2a:	6662      	str	r2, [r4, #100]	; 0x64
  40db2c:	4628      	mov	r0, r5
  40db2e:	4622      	mov	r2, r4
  40db30:	f7ff ff96 	bl	40da60 <__fputwc>
  40db34:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40db36:	07da      	lsls	r2, r3, #31
  40db38:	4605      	mov	r5, r0
  40db3a:	d402      	bmi.n	40db42 <_fputwc_r+0x42>
  40db3c:	89a3      	ldrh	r3, [r4, #12]
  40db3e:	059b      	lsls	r3, r3, #22
  40db40:	d502      	bpl.n	40db48 <_fputwc_r+0x48>
  40db42:	4628      	mov	r0, r5
  40db44:	b003      	add	sp, #12
  40db46:	bd30      	pop	{r4, r5, pc}
  40db48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40db4a:	f000 fb0b 	bl	40e164 <__retarget_lock_release_recursive>
  40db4e:	4628      	mov	r0, r5
  40db50:	b003      	add	sp, #12
  40db52:	bd30      	pop	{r4, r5, pc}
  40db54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40db56:	9101      	str	r1, [sp, #4]
  40db58:	f000 fb02 	bl	40e160 <__retarget_lock_acquire_recursive>
  40db5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40db60:	9901      	ldr	r1, [sp, #4]
  40db62:	b29a      	uxth	r2, r3
  40db64:	e7d9      	b.n	40db1a <_fputwc_r+0x1a>
  40db66:	bf00      	nop

0040db68 <_malloc_trim_r>:
  40db68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40db6a:	4f24      	ldr	r7, [pc, #144]	; (40dbfc <_malloc_trim_r+0x94>)
  40db6c:	460c      	mov	r4, r1
  40db6e:	4606      	mov	r6, r0
  40db70:	f000 ff2a 	bl	40e9c8 <__malloc_lock>
  40db74:	68bb      	ldr	r3, [r7, #8]
  40db76:	685d      	ldr	r5, [r3, #4]
  40db78:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40db7c:	310f      	adds	r1, #15
  40db7e:	f025 0503 	bic.w	r5, r5, #3
  40db82:	4429      	add	r1, r5
  40db84:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40db88:	f021 010f 	bic.w	r1, r1, #15
  40db8c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40db90:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40db94:	db07      	blt.n	40dba6 <_malloc_trim_r+0x3e>
  40db96:	2100      	movs	r1, #0
  40db98:	4630      	mov	r0, r6
  40db9a:	f001 fbc1 	bl	40f320 <_sbrk_r>
  40db9e:	68bb      	ldr	r3, [r7, #8]
  40dba0:	442b      	add	r3, r5
  40dba2:	4298      	cmp	r0, r3
  40dba4:	d004      	beq.n	40dbb0 <_malloc_trim_r+0x48>
  40dba6:	4630      	mov	r0, r6
  40dba8:	f000 ff14 	bl	40e9d4 <__malloc_unlock>
  40dbac:	2000      	movs	r0, #0
  40dbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40dbb0:	4261      	negs	r1, r4
  40dbb2:	4630      	mov	r0, r6
  40dbb4:	f001 fbb4 	bl	40f320 <_sbrk_r>
  40dbb8:	3001      	adds	r0, #1
  40dbba:	d00d      	beq.n	40dbd8 <_malloc_trim_r+0x70>
  40dbbc:	4b10      	ldr	r3, [pc, #64]	; (40dc00 <_malloc_trim_r+0x98>)
  40dbbe:	68ba      	ldr	r2, [r7, #8]
  40dbc0:	6819      	ldr	r1, [r3, #0]
  40dbc2:	1b2d      	subs	r5, r5, r4
  40dbc4:	f045 0501 	orr.w	r5, r5, #1
  40dbc8:	4630      	mov	r0, r6
  40dbca:	1b09      	subs	r1, r1, r4
  40dbcc:	6055      	str	r5, [r2, #4]
  40dbce:	6019      	str	r1, [r3, #0]
  40dbd0:	f000 ff00 	bl	40e9d4 <__malloc_unlock>
  40dbd4:	2001      	movs	r0, #1
  40dbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40dbd8:	2100      	movs	r1, #0
  40dbda:	4630      	mov	r0, r6
  40dbdc:	f001 fba0 	bl	40f320 <_sbrk_r>
  40dbe0:	68ba      	ldr	r2, [r7, #8]
  40dbe2:	1a83      	subs	r3, r0, r2
  40dbe4:	2b0f      	cmp	r3, #15
  40dbe6:	ddde      	ble.n	40dba6 <_malloc_trim_r+0x3e>
  40dbe8:	4c06      	ldr	r4, [pc, #24]	; (40dc04 <_malloc_trim_r+0x9c>)
  40dbea:	4905      	ldr	r1, [pc, #20]	; (40dc00 <_malloc_trim_r+0x98>)
  40dbec:	6824      	ldr	r4, [r4, #0]
  40dbee:	f043 0301 	orr.w	r3, r3, #1
  40dbf2:	1b00      	subs	r0, r0, r4
  40dbf4:	6053      	str	r3, [r2, #4]
  40dbf6:	6008      	str	r0, [r1, #0]
  40dbf8:	e7d5      	b.n	40dba6 <_malloc_trim_r+0x3e>
  40dbfa:	bf00      	nop
  40dbfc:	20400618 	.word	0x20400618
  40dc00:	2040ca20 	.word	0x2040ca20
  40dc04:	20400a20 	.word	0x20400a20

0040dc08 <_free_r>:
  40dc08:	2900      	cmp	r1, #0
  40dc0a:	d044      	beq.n	40dc96 <_free_r+0x8e>
  40dc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40dc10:	460d      	mov	r5, r1
  40dc12:	4680      	mov	r8, r0
  40dc14:	f000 fed8 	bl	40e9c8 <__malloc_lock>
  40dc18:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40dc1c:	4969      	ldr	r1, [pc, #420]	; (40ddc4 <_free_r+0x1bc>)
  40dc1e:	f027 0301 	bic.w	r3, r7, #1
  40dc22:	f1a5 0408 	sub.w	r4, r5, #8
  40dc26:	18e2      	adds	r2, r4, r3
  40dc28:	688e      	ldr	r6, [r1, #8]
  40dc2a:	6850      	ldr	r0, [r2, #4]
  40dc2c:	42b2      	cmp	r2, r6
  40dc2e:	f020 0003 	bic.w	r0, r0, #3
  40dc32:	d05e      	beq.n	40dcf2 <_free_r+0xea>
  40dc34:	07fe      	lsls	r6, r7, #31
  40dc36:	6050      	str	r0, [r2, #4]
  40dc38:	d40b      	bmi.n	40dc52 <_free_r+0x4a>
  40dc3a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40dc3e:	1be4      	subs	r4, r4, r7
  40dc40:	f101 0e08 	add.w	lr, r1, #8
  40dc44:	68a5      	ldr	r5, [r4, #8]
  40dc46:	4575      	cmp	r5, lr
  40dc48:	443b      	add	r3, r7
  40dc4a:	d06d      	beq.n	40dd28 <_free_r+0x120>
  40dc4c:	68e7      	ldr	r7, [r4, #12]
  40dc4e:	60ef      	str	r7, [r5, #12]
  40dc50:	60bd      	str	r5, [r7, #8]
  40dc52:	1815      	adds	r5, r2, r0
  40dc54:	686d      	ldr	r5, [r5, #4]
  40dc56:	07ed      	lsls	r5, r5, #31
  40dc58:	d53e      	bpl.n	40dcd8 <_free_r+0xd0>
  40dc5a:	f043 0201 	orr.w	r2, r3, #1
  40dc5e:	6062      	str	r2, [r4, #4]
  40dc60:	50e3      	str	r3, [r4, r3]
  40dc62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40dc66:	d217      	bcs.n	40dc98 <_free_r+0x90>
  40dc68:	08db      	lsrs	r3, r3, #3
  40dc6a:	1c58      	adds	r0, r3, #1
  40dc6c:	109a      	asrs	r2, r3, #2
  40dc6e:	684d      	ldr	r5, [r1, #4]
  40dc70:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40dc74:	60a7      	str	r7, [r4, #8]
  40dc76:	2301      	movs	r3, #1
  40dc78:	4093      	lsls	r3, r2
  40dc7a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40dc7e:	432b      	orrs	r3, r5
  40dc80:	3a08      	subs	r2, #8
  40dc82:	60e2      	str	r2, [r4, #12]
  40dc84:	604b      	str	r3, [r1, #4]
  40dc86:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40dc8a:	60fc      	str	r4, [r7, #12]
  40dc8c:	4640      	mov	r0, r8
  40dc8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40dc92:	f000 be9f 	b.w	40e9d4 <__malloc_unlock>
  40dc96:	4770      	bx	lr
  40dc98:	0a5a      	lsrs	r2, r3, #9
  40dc9a:	2a04      	cmp	r2, #4
  40dc9c:	d852      	bhi.n	40dd44 <_free_r+0x13c>
  40dc9e:	099a      	lsrs	r2, r3, #6
  40dca0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40dca4:	00ff      	lsls	r7, r7, #3
  40dca6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40dcaa:	19c8      	adds	r0, r1, r7
  40dcac:	59ca      	ldr	r2, [r1, r7]
  40dcae:	3808      	subs	r0, #8
  40dcb0:	4290      	cmp	r0, r2
  40dcb2:	d04f      	beq.n	40dd54 <_free_r+0x14c>
  40dcb4:	6851      	ldr	r1, [r2, #4]
  40dcb6:	f021 0103 	bic.w	r1, r1, #3
  40dcba:	428b      	cmp	r3, r1
  40dcbc:	d232      	bcs.n	40dd24 <_free_r+0x11c>
  40dcbe:	6892      	ldr	r2, [r2, #8]
  40dcc0:	4290      	cmp	r0, r2
  40dcc2:	d1f7      	bne.n	40dcb4 <_free_r+0xac>
  40dcc4:	68c3      	ldr	r3, [r0, #12]
  40dcc6:	60a0      	str	r0, [r4, #8]
  40dcc8:	60e3      	str	r3, [r4, #12]
  40dcca:	609c      	str	r4, [r3, #8]
  40dccc:	60c4      	str	r4, [r0, #12]
  40dcce:	4640      	mov	r0, r8
  40dcd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40dcd4:	f000 be7e 	b.w	40e9d4 <__malloc_unlock>
  40dcd8:	6895      	ldr	r5, [r2, #8]
  40dcda:	4f3b      	ldr	r7, [pc, #236]	; (40ddc8 <_free_r+0x1c0>)
  40dcdc:	42bd      	cmp	r5, r7
  40dcde:	4403      	add	r3, r0
  40dce0:	d040      	beq.n	40dd64 <_free_r+0x15c>
  40dce2:	68d0      	ldr	r0, [r2, #12]
  40dce4:	60e8      	str	r0, [r5, #12]
  40dce6:	f043 0201 	orr.w	r2, r3, #1
  40dcea:	6085      	str	r5, [r0, #8]
  40dcec:	6062      	str	r2, [r4, #4]
  40dcee:	50e3      	str	r3, [r4, r3]
  40dcf0:	e7b7      	b.n	40dc62 <_free_r+0x5a>
  40dcf2:	07ff      	lsls	r7, r7, #31
  40dcf4:	4403      	add	r3, r0
  40dcf6:	d407      	bmi.n	40dd08 <_free_r+0x100>
  40dcf8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40dcfc:	1aa4      	subs	r4, r4, r2
  40dcfe:	4413      	add	r3, r2
  40dd00:	68a0      	ldr	r0, [r4, #8]
  40dd02:	68e2      	ldr	r2, [r4, #12]
  40dd04:	60c2      	str	r2, [r0, #12]
  40dd06:	6090      	str	r0, [r2, #8]
  40dd08:	4a30      	ldr	r2, [pc, #192]	; (40ddcc <_free_r+0x1c4>)
  40dd0a:	6812      	ldr	r2, [r2, #0]
  40dd0c:	f043 0001 	orr.w	r0, r3, #1
  40dd10:	4293      	cmp	r3, r2
  40dd12:	6060      	str	r0, [r4, #4]
  40dd14:	608c      	str	r4, [r1, #8]
  40dd16:	d3b9      	bcc.n	40dc8c <_free_r+0x84>
  40dd18:	4b2d      	ldr	r3, [pc, #180]	; (40ddd0 <_free_r+0x1c8>)
  40dd1a:	4640      	mov	r0, r8
  40dd1c:	6819      	ldr	r1, [r3, #0]
  40dd1e:	f7ff ff23 	bl	40db68 <_malloc_trim_r>
  40dd22:	e7b3      	b.n	40dc8c <_free_r+0x84>
  40dd24:	4610      	mov	r0, r2
  40dd26:	e7cd      	b.n	40dcc4 <_free_r+0xbc>
  40dd28:	1811      	adds	r1, r2, r0
  40dd2a:	6849      	ldr	r1, [r1, #4]
  40dd2c:	07c9      	lsls	r1, r1, #31
  40dd2e:	d444      	bmi.n	40ddba <_free_r+0x1b2>
  40dd30:	6891      	ldr	r1, [r2, #8]
  40dd32:	68d2      	ldr	r2, [r2, #12]
  40dd34:	60ca      	str	r2, [r1, #12]
  40dd36:	4403      	add	r3, r0
  40dd38:	f043 0001 	orr.w	r0, r3, #1
  40dd3c:	6091      	str	r1, [r2, #8]
  40dd3e:	6060      	str	r0, [r4, #4]
  40dd40:	50e3      	str	r3, [r4, r3]
  40dd42:	e7a3      	b.n	40dc8c <_free_r+0x84>
  40dd44:	2a14      	cmp	r2, #20
  40dd46:	d816      	bhi.n	40dd76 <_free_r+0x16e>
  40dd48:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40dd4c:	00ff      	lsls	r7, r7, #3
  40dd4e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40dd52:	e7aa      	b.n	40dcaa <_free_r+0xa2>
  40dd54:	10aa      	asrs	r2, r5, #2
  40dd56:	2301      	movs	r3, #1
  40dd58:	684d      	ldr	r5, [r1, #4]
  40dd5a:	4093      	lsls	r3, r2
  40dd5c:	432b      	orrs	r3, r5
  40dd5e:	604b      	str	r3, [r1, #4]
  40dd60:	4603      	mov	r3, r0
  40dd62:	e7b0      	b.n	40dcc6 <_free_r+0xbe>
  40dd64:	f043 0201 	orr.w	r2, r3, #1
  40dd68:	614c      	str	r4, [r1, #20]
  40dd6a:	610c      	str	r4, [r1, #16]
  40dd6c:	60e5      	str	r5, [r4, #12]
  40dd6e:	60a5      	str	r5, [r4, #8]
  40dd70:	6062      	str	r2, [r4, #4]
  40dd72:	50e3      	str	r3, [r4, r3]
  40dd74:	e78a      	b.n	40dc8c <_free_r+0x84>
  40dd76:	2a54      	cmp	r2, #84	; 0x54
  40dd78:	d806      	bhi.n	40dd88 <_free_r+0x180>
  40dd7a:	0b1a      	lsrs	r2, r3, #12
  40dd7c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40dd80:	00ff      	lsls	r7, r7, #3
  40dd82:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40dd86:	e790      	b.n	40dcaa <_free_r+0xa2>
  40dd88:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40dd8c:	d806      	bhi.n	40dd9c <_free_r+0x194>
  40dd8e:	0bda      	lsrs	r2, r3, #15
  40dd90:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40dd94:	00ff      	lsls	r7, r7, #3
  40dd96:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40dd9a:	e786      	b.n	40dcaa <_free_r+0xa2>
  40dd9c:	f240 5054 	movw	r0, #1364	; 0x554
  40dda0:	4282      	cmp	r2, r0
  40dda2:	d806      	bhi.n	40ddb2 <_free_r+0x1aa>
  40dda4:	0c9a      	lsrs	r2, r3, #18
  40dda6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40ddaa:	00ff      	lsls	r7, r7, #3
  40ddac:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40ddb0:	e77b      	b.n	40dcaa <_free_r+0xa2>
  40ddb2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40ddb6:	257e      	movs	r5, #126	; 0x7e
  40ddb8:	e777      	b.n	40dcaa <_free_r+0xa2>
  40ddba:	f043 0101 	orr.w	r1, r3, #1
  40ddbe:	6061      	str	r1, [r4, #4]
  40ddc0:	6013      	str	r3, [r2, #0]
  40ddc2:	e763      	b.n	40dc8c <_free_r+0x84>
  40ddc4:	20400618 	.word	0x20400618
  40ddc8:	20400620 	.word	0x20400620
  40ddcc:	20400a24 	.word	0x20400a24
  40ddd0:	2040ca50 	.word	0x2040ca50

0040ddd4 <__sfvwrite_r>:
  40ddd4:	6893      	ldr	r3, [r2, #8]
  40ddd6:	2b00      	cmp	r3, #0
  40ddd8:	d073      	beq.n	40dec2 <__sfvwrite_r+0xee>
  40ddda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ddde:	898b      	ldrh	r3, [r1, #12]
  40dde0:	b083      	sub	sp, #12
  40dde2:	460c      	mov	r4, r1
  40dde4:	0719      	lsls	r1, r3, #28
  40dde6:	9000      	str	r0, [sp, #0]
  40dde8:	4616      	mov	r6, r2
  40ddea:	d526      	bpl.n	40de3a <__sfvwrite_r+0x66>
  40ddec:	6922      	ldr	r2, [r4, #16]
  40ddee:	b322      	cbz	r2, 40de3a <__sfvwrite_r+0x66>
  40ddf0:	f013 0002 	ands.w	r0, r3, #2
  40ddf4:	6835      	ldr	r5, [r6, #0]
  40ddf6:	d02c      	beq.n	40de52 <__sfvwrite_r+0x7e>
  40ddf8:	f04f 0900 	mov.w	r9, #0
  40ddfc:	4fb0      	ldr	r7, [pc, #704]	; (40e0c0 <__sfvwrite_r+0x2ec>)
  40ddfe:	46c8      	mov	r8, r9
  40de00:	46b2      	mov	sl, r6
  40de02:	45b8      	cmp	r8, r7
  40de04:	4643      	mov	r3, r8
  40de06:	464a      	mov	r2, r9
  40de08:	bf28      	it	cs
  40de0a:	463b      	movcs	r3, r7
  40de0c:	9800      	ldr	r0, [sp, #0]
  40de0e:	f1b8 0f00 	cmp.w	r8, #0
  40de12:	d050      	beq.n	40deb6 <__sfvwrite_r+0xe2>
  40de14:	69e1      	ldr	r1, [r4, #28]
  40de16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40de18:	47b0      	blx	r6
  40de1a:	2800      	cmp	r0, #0
  40de1c:	dd58      	ble.n	40ded0 <__sfvwrite_r+0xfc>
  40de1e:	f8da 3008 	ldr.w	r3, [sl, #8]
  40de22:	1a1b      	subs	r3, r3, r0
  40de24:	4481      	add	r9, r0
  40de26:	eba8 0800 	sub.w	r8, r8, r0
  40de2a:	f8ca 3008 	str.w	r3, [sl, #8]
  40de2e:	2b00      	cmp	r3, #0
  40de30:	d1e7      	bne.n	40de02 <__sfvwrite_r+0x2e>
  40de32:	2000      	movs	r0, #0
  40de34:	b003      	add	sp, #12
  40de36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40de3a:	4621      	mov	r1, r4
  40de3c:	9800      	ldr	r0, [sp, #0]
  40de3e:	f7fe fc93 	bl	40c768 <__swsetup_r>
  40de42:	2800      	cmp	r0, #0
  40de44:	f040 8133 	bne.w	40e0ae <__sfvwrite_r+0x2da>
  40de48:	89a3      	ldrh	r3, [r4, #12]
  40de4a:	6835      	ldr	r5, [r6, #0]
  40de4c:	f013 0002 	ands.w	r0, r3, #2
  40de50:	d1d2      	bne.n	40ddf8 <__sfvwrite_r+0x24>
  40de52:	f013 0901 	ands.w	r9, r3, #1
  40de56:	d145      	bne.n	40dee4 <__sfvwrite_r+0x110>
  40de58:	464f      	mov	r7, r9
  40de5a:	9601      	str	r6, [sp, #4]
  40de5c:	b337      	cbz	r7, 40deac <__sfvwrite_r+0xd8>
  40de5e:	059a      	lsls	r2, r3, #22
  40de60:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40de64:	f140 8083 	bpl.w	40df6e <__sfvwrite_r+0x19a>
  40de68:	4547      	cmp	r7, r8
  40de6a:	46c3      	mov	fp, r8
  40de6c:	f0c0 80ab 	bcc.w	40dfc6 <__sfvwrite_r+0x1f2>
  40de70:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40de74:	f040 80ac 	bne.w	40dfd0 <__sfvwrite_r+0x1fc>
  40de78:	6820      	ldr	r0, [r4, #0]
  40de7a:	46ba      	mov	sl, r7
  40de7c:	465a      	mov	r2, fp
  40de7e:	4649      	mov	r1, r9
  40de80:	f000 fd3e 	bl	40e900 <memmove>
  40de84:	68a2      	ldr	r2, [r4, #8]
  40de86:	6823      	ldr	r3, [r4, #0]
  40de88:	eba2 0208 	sub.w	r2, r2, r8
  40de8c:	445b      	add	r3, fp
  40de8e:	60a2      	str	r2, [r4, #8]
  40de90:	6023      	str	r3, [r4, #0]
  40de92:	9a01      	ldr	r2, [sp, #4]
  40de94:	6893      	ldr	r3, [r2, #8]
  40de96:	eba3 030a 	sub.w	r3, r3, sl
  40de9a:	44d1      	add	r9, sl
  40de9c:	eba7 070a 	sub.w	r7, r7, sl
  40dea0:	6093      	str	r3, [r2, #8]
  40dea2:	2b00      	cmp	r3, #0
  40dea4:	d0c5      	beq.n	40de32 <__sfvwrite_r+0x5e>
  40dea6:	89a3      	ldrh	r3, [r4, #12]
  40dea8:	2f00      	cmp	r7, #0
  40deaa:	d1d8      	bne.n	40de5e <__sfvwrite_r+0x8a>
  40deac:	f8d5 9000 	ldr.w	r9, [r5]
  40deb0:	686f      	ldr	r7, [r5, #4]
  40deb2:	3508      	adds	r5, #8
  40deb4:	e7d2      	b.n	40de5c <__sfvwrite_r+0x88>
  40deb6:	f8d5 9000 	ldr.w	r9, [r5]
  40deba:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40debe:	3508      	adds	r5, #8
  40dec0:	e79f      	b.n	40de02 <__sfvwrite_r+0x2e>
  40dec2:	2000      	movs	r0, #0
  40dec4:	4770      	bx	lr
  40dec6:	4621      	mov	r1, r4
  40dec8:	9800      	ldr	r0, [sp, #0]
  40deca:	f7ff fd1f 	bl	40d90c <_fflush_r>
  40dece:	b370      	cbz	r0, 40df2e <__sfvwrite_r+0x15a>
  40ded0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ded4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ded8:	f04f 30ff 	mov.w	r0, #4294967295
  40dedc:	81a3      	strh	r3, [r4, #12]
  40dede:	b003      	add	sp, #12
  40dee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dee4:	4681      	mov	r9, r0
  40dee6:	4633      	mov	r3, r6
  40dee8:	464e      	mov	r6, r9
  40deea:	46a8      	mov	r8, r5
  40deec:	469a      	mov	sl, r3
  40deee:	464d      	mov	r5, r9
  40def0:	b34e      	cbz	r6, 40df46 <__sfvwrite_r+0x172>
  40def2:	b380      	cbz	r0, 40df56 <__sfvwrite_r+0x182>
  40def4:	6820      	ldr	r0, [r4, #0]
  40def6:	6923      	ldr	r3, [r4, #16]
  40def8:	6962      	ldr	r2, [r4, #20]
  40defa:	45b1      	cmp	r9, r6
  40defc:	46cb      	mov	fp, r9
  40defe:	bf28      	it	cs
  40df00:	46b3      	movcs	fp, r6
  40df02:	4298      	cmp	r0, r3
  40df04:	465f      	mov	r7, fp
  40df06:	d904      	bls.n	40df12 <__sfvwrite_r+0x13e>
  40df08:	68a3      	ldr	r3, [r4, #8]
  40df0a:	4413      	add	r3, r2
  40df0c:	459b      	cmp	fp, r3
  40df0e:	f300 80a6 	bgt.w	40e05e <__sfvwrite_r+0x28a>
  40df12:	4593      	cmp	fp, r2
  40df14:	db4b      	blt.n	40dfae <__sfvwrite_r+0x1da>
  40df16:	4613      	mov	r3, r2
  40df18:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40df1a:	69e1      	ldr	r1, [r4, #28]
  40df1c:	9800      	ldr	r0, [sp, #0]
  40df1e:	462a      	mov	r2, r5
  40df20:	47b8      	blx	r7
  40df22:	1e07      	subs	r7, r0, #0
  40df24:	ddd4      	ble.n	40ded0 <__sfvwrite_r+0xfc>
  40df26:	ebb9 0907 	subs.w	r9, r9, r7
  40df2a:	d0cc      	beq.n	40dec6 <__sfvwrite_r+0xf2>
  40df2c:	2001      	movs	r0, #1
  40df2e:	f8da 3008 	ldr.w	r3, [sl, #8]
  40df32:	1bdb      	subs	r3, r3, r7
  40df34:	443d      	add	r5, r7
  40df36:	1bf6      	subs	r6, r6, r7
  40df38:	f8ca 3008 	str.w	r3, [sl, #8]
  40df3c:	2b00      	cmp	r3, #0
  40df3e:	f43f af78 	beq.w	40de32 <__sfvwrite_r+0x5e>
  40df42:	2e00      	cmp	r6, #0
  40df44:	d1d5      	bne.n	40def2 <__sfvwrite_r+0x11e>
  40df46:	f108 0308 	add.w	r3, r8, #8
  40df4a:	e913 0060 	ldmdb	r3, {r5, r6}
  40df4e:	4698      	mov	r8, r3
  40df50:	3308      	adds	r3, #8
  40df52:	2e00      	cmp	r6, #0
  40df54:	d0f9      	beq.n	40df4a <__sfvwrite_r+0x176>
  40df56:	4632      	mov	r2, r6
  40df58:	210a      	movs	r1, #10
  40df5a:	4628      	mov	r0, r5
  40df5c:	f000 fc50 	bl	40e800 <memchr>
  40df60:	2800      	cmp	r0, #0
  40df62:	f000 80a1 	beq.w	40e0a8 <__sfvwrite_r+0x2d4>
  40df66:	3001      	adds	r0, #1
  40df68:	eba0 0905 	sub.w	r9, r0, r5
  40df6c:	e7c2      	b.n	40def4 <__sfvwrite_r+0x120>
  40df6e:	6820      	ldr	r0, [r4, #0]
  40df70:	6923      	ldr	r3, [r4, #16]
  40df72:	4298      	cmp	r0, r3
  40df74:	d802      	bhi.n	40df7c <__sfvwrite_r+0x1a8>
  40df76:	6963      	ldr	r3, [r4, #20]
  40df78:	429f      	cmp	r7, r3
  40df7a:	d25d      	bcs.n	40e038 <__sfvwrite_r+0x264>
  40df7c:	45b8      	cmp	r8, r7
  40df7e:	bf28      	it	cs
  40df80:	46b8      	movcs	r8, r7
  40df82:	4642      	mov	r2, r8
  40df84:	4649      	mov	r1, r9
  40df86:	f000 fcbb 	bl	40e900 <memmove>
  40df8a:	68a3      	ldr	r3, [r4, #8]
  40df8c:	6822      	ldr	r2, [r4, #0]
  40df8e:	eba3 0308 	sub.w	r3, r3, r8
  40df92:	4442      	add	r2, r8
  40df94:	60a3      	str	r3, [r4, #8]
  40df96:	6022      	str	r2, [r4, #0]
  40df98:	b10b      	cbz	r3, 40df9e <__sfvwrite_r+0x1ca>
  40df9a:	46c2      	mov	sl, r8
  40df9c:	e779      	b.n	40de92 <__sfvwrite_r+0xbe>
  40df9e:	4621      	mov	r1, r4
  40dfa0:	9800      	ldr	r0, [sp, #0]
  40dfa2:	f7ff fcb3 	bl	40d90c <_fflush_r>
  40dfa6:	2800      	cmp	r0, #0
  40dfa8:	d192      	bne.n	40ded0 <__sfvwrite_r+0xfc>
  40dfaa:	46c2      	mov	sl, r8
  40dfac:	e771      	b.n	40de92 <__sfvwrite_r+0xbe>
  40dfae:	465a      	mov	r2, fp
  40dfb0:	4629      	mov	r1, r5
  40dfb2:	f000 fca5 	bl	40e900 <memmove>
  40dfb6:	68a2      	ldr	r2, [r4, #8]
  40dfb8:	6823      	ldr	r3, [r4, #0]
  40dfba:	eba2 020b 	sub.w	r2, r2, fp
  40dfbe:	445b      	add	r3, fp
  40dfc0:	60a2      	str	r2, [r4, #8]
  40dfc2:	6023      	str	r3, [r4, #0]
  40dfc4:	e7af      	b.n	40df26 <__sfvwrite_r+0x152>
  40dfc6:	6820      	ldr	r0, [r4, #0]
  40dfc8:	46b8      	mov	r8, r7
  40dfca:	46ba      	mov	sl, r7
  40dfcc:	46bb      	mov	fp, r7
  40dfce:	e755      	b.n	40de7c <__sfvwrite_r+0xa8>
  40dfd0:	6962      	ldr	r2, [r4, #20]
  40dfd2:	6820      	ldr	r0, [r4, #0]
  40dfd4:	6921      	ldr	r1, [r4, #16]
  40dfd6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40dfda:	eba0 0a01 	sub.w	sl, r0, r1
  40dfde:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40dfe2:	f10a 0001 	add.w	r0, sl, #1
  40dfe6:	ea4f 0868 	mov.w	r8, r8, asr #1
  40dfea:	4438      	add	r0, r7
  40dfec:	4540      	cmp	r0, r8
  40dfee:	4642      	mov	r2, r8
  40dff0:	bf84      	itt	hi
  40dff2:	4680      	movhi	r8, r0
  40dff4:	4642      	movhi	r2, r8
  40dff6:	055b      	lsls	r3, r3, #21
  40dff8:	d544      	bpl.n	40e084 <__sfvwrite_r+0x2b0>
  40dffa:	4611      	mov	r1, r2
  40dffc:	9800      	ldr	r0, [sp, #0]
  40dffe:	f000 f933 	bl	40e268 <_malloc_r>
  40e002:	4683      	mov	fp, r0
  40e004:	2800      	cmp	r0, #0
  40e006:	d055      	beq.n	40e0b4 <__sfvwrite_r+0x2e0>
  40e008:	4652      	mov	r2, sl
  40e00a:	6921      	ldr	r1, [r4, #16]
  40e00c:	f7fb fb74 	bl	4096f8 <memcpy>
  40e010:	89a3      	ldrh	r3, [r4, #12]
  40e012:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40e016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e01a:	81a3      	strh	r3, [r4, #12]
  40e01c:	eb0b 000a 	add.w	r0, fp, sl
  40e020:	eba8 030a 	sub.w	r3, r8, sl
  40e024:	f8c4 b010 	str.w	fp, [r4, #16]
  40e028:	f8c4 8014 	str.w	r8, [r4, #20]
  40e02c:	6020      	str	r0, [r4, #0]
  40e02e:	60a3      	str	r3, [r4, #8]
  40e030:	46b8      	mov	r8, r7
  40e032:	46ba      	mov	sl, r7
  40e034:	46bb      	mov	fp, r7
  40e036:	e721      	b.n	40de7c <__sfvwrite_r+0xa8>
  40e038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40e03c:	42b9      	cmp	r1, r7
  40e03e:	bf28      	it	cs
  40e040:	4639      	movcs	r1, r7
  40e042:	464a      	mov	r2, r9
  40e044:	fb91 f1f3 	sdiv	r1, r1, r3
  40e048:	9800      	ldr	r0, [sp, #0]
  40e04a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40e04c:	fb03 f301 	mul.w	r3, r3, r1
  40e050:	69e1      	ldr	r1, [r4, #28]
  40e052:	47b0      	blx	r6
  40e054:	f1b0 0a00 	subs.w	sl, r0, #0
  40e058:	f73f af1b 	bgt.w	40de92 <__sfvwrite_r+0xbe>
  40e05c:	e738      	b.n	40ded0 <__sfvwrite_r+0xfc>
  40e05e:	461a      	mov	r2, r3
  40e060:	4629      	mov	r1, r5
  40e062:	9301      	str	r3, [sp, #4]
  40e064:	f000 fc4c 	bl	40e900 <memmove>
  40e068:	6822      	ldr	r2, [r4, #0]
  40e06a:	9b01      	ldr	r3, [sp, #4]
  40e06c:	9800      	ldr	r0, [sp, #0]
  40e06e:	441a      	add	r2, r3
  40e070:	6022      	str	r2, [r4, #0]
  40e072:	4621      	mov	r1, r4
  40e074:	f7ff fc4a 	bl	40d90c <_fflush_r>
  40e078:	9b01      	ldr	r3, [sp, #4]
  40e07a:	2800      	cmp	r0, #0
  40e07c:	f47f af28 	bne.w	40ded0 <__sfvwrite_r+0xfc>
  40e080:	461f      	mov	r7, r3
  40e082:	e750      	b.n	40df26 <__sfvwrite_r+0x152>
  40e084:	9800      	ldr	r0, [sp, #0]
  40e086:	f000 ffa5 	bl	40efd4 <_realloc_r>
  40e08a:	4683      	mov	fp, r0
  40e08c:	2800      	cmp	r0, #0
  40e08e:	d1c5      	bne.n	40e01c <__sfvwrite_r+0x248>
  40e090:	9d00      	ldr	r5, [sp, #0]
  40e092:	6921      	ldr	r1, [r4, #16]
  40e094:	4628      	mov	r0, r5
  40e096:	f7ff fdb7 	bl	40dc08 <_free_r>
  40e09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e09e:	220c      	movs	r2, #12
  40e0a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40e0a4:	602a      	str	r2, [r5, #0]
  40e0a6:	e715      	b.n	40ded4 <__sfvwrite_r+0x100>
  40e0a8:	f106 0901 	add.w	r9, r6, #1
  40e0ac:	e722      	b.n	40def4 <__sfvwrite_r+0x120>
  40e0ae:	f04f 30ff 	mov.w	r0, #4294967295
  40e0b2:	e6bf      	b.n	40de34 <__sfvwrite_r+0x60>
  40e0b4:	9a00      	ldr	r2, [sp, #0]
  40e0b6:	230c      	movs	r3, #12
  40e0b8:	6013      	str	r3, [r2, #0]
  40e0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e0be:	e709      	b.n	40ded4 <__sfvwrite_r+0x100>
  40e0c0:	7ffffc00 	.word	0x7ffffc00

0040e0c4 <_fwalk_reent>:
  40e0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40e0c8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40e0cc:	d01f      	beq.n	40e10e <_fwalk_reent+0x4a>
  40e0ce:	4688      	mov	r8, r1
  40e0d0:	4606      	mov	r6, r0
  40e0d2:	f04f 0900 	mov.w	r9, #0
  40e0d6:	687d      	ldr	r5, [r7, #4]
  40e0d8:	68bc      	ldr	r4, [r7, #8]
  40e0da:	3d01      	subs	r5, #1
  40e0dc:	d411      	bmi.n	40e102 <_fwalk_reent+0x3e>
  40e0de:	89a3      	ldrh	r3, [r4, #12]
  40e0e0:	2b01      	cmp	r3, #1
  40e0e2:	f105 35ff 	add.w	r5, r5, #4294967295
  40e0e6:	d908      	bls.n	40e0fa <_fwalk_reent+0x36>
  40e0e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40e0ec:	3301      	adds	r3, #1
  40e0ee:	4621      	mov	r1, r4
  40e0f0:	4630      	mov	r0, r6
  40e0f2:	d002      	beq.n	40e0fa <_fwalk_reent+0x36>
  40e0f4:	47c0      	blx	r8
  40e0f6:	ea49 0900 	orr.w	r9, r9, r0
  40e0fa:	1c6b      	adds	r3, r5, #1
  40e0fc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40e100:	d1ed      	bne.n	40e0de <_fwalk_reent+0x1a>
  40e102:	683f      	ldr	r7, [r7, #0]
  40e104:	2f00      	cmp	r7, #0
  40e106:	d1e6      	bne.n	40e0d6 <_fwalk_reent+0x12>
  40e108:	4648      	mov	r0, r9
  40e10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e10e:	46b9      	mov	r9, r7
  40e110:	4648      	mov	r0, r9
  40e112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e116:	bf00      	nop

0040e118 <__locale_mb_cur_max>:
  40e118:	4b04      	ldr	r3, [pc, #16]	; (40e12c <__locale_mb_cur_max+0x14>)
  40e11a:	4a05      	ldr	r2, [pc, #20]	; (40e130 <__locale_mb_cur_max+0x18>)
  40e11c:	681b      	ldr	r3, [r3, #0]
  40e11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40e120:	2b00      	cmp	r3, #0
  40e122:	bf08      	it	eq
  40e124:	4613      	moveq	r3, r2
  40e126:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40e12a:	4770      	bx	lr
  40e12c:	20400078 	.word	0x20400078
  40e130:	204004ac 	.word	0x204004ac

0040e134 <__locale_ctype_ptr_l>:
  40e134:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  40e138:	4770      	bx	lr
  40e13a:	bf00      	nop

0040e13c <_localeconv_r>:
  40e13c:	4a04      	ldr	r2, [pc, #16]	; (40e150 <_localeconv_r+0x14>)
  40e13e:	4b05      	ldr	r3, [pc, #20]	; (40e154 <_localeconv_r+0x18>)
  40e140:	6812      	ldr	r2, [r2, #0]
  40e142:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40e144:	2800      	cmp	r0, #0
  40e146:	bf08      	it	eq
  40e148:	4618      	moveq	r0, r3
  40e14a:	30f0      	adds	r0, #240	; 0xf0
  40e14c:	4770      	bx	lr
  40e14e:	bf00      	nop
  40e150:	20400078 	.word	0x20400078
  40e154:	204004ac 	.word	0x204004ac

0040e158 <__retarget_lock_init_recursive>:
  40e158:	4770      	bx	lr
  40e15a:	bf00      	nop

0040e15c <__retarget_lock_close_recursive>:
  40e15c:	4770      	bx	lr
  40e15e:	bf00      	nop

0040e160 <__retarget_lock_acquire_recursive>:
  40e160:	4770      	bx	lr
  40e162:	bf00      	nop

0040e164 <__retarget_lock_release_recursive>:
  40e164:	4770      	bx	lr
  40e166:	bf00      	nop

0040e168 <__swhatbuf_r>:
  40e168:	b570      	push	{r4, r5, r6, lr}
  40e16a:	460c      	mov	r4, r1
  40e16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e170:	2900      	cmp	r1, #0
  40e172:	b090      	sub	sp, #64	; 0x40
  40e174:	4615      	mov	r5, r2
  40e176:	461e      	mov	r6, r3
  40e178:	db14      	blt.n	40e1a4 <__swhatbuf_r+0x3c>
  40e17a:	aa01      	add	r2, sp, #4
  40e17c:	f001 fbc4 	bl	40f908 <_fstat_r>
  40e180:	2800      	cmp	r0, #0
  40e182:	db0f      	blt.n	40e1a4 <__swhatbuf_r+0x3c>
  40e184:	9a02      	ldr	r2, [sp, #8]
  40e186:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40e18a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40e18e:	fab2 f282 	clz	r2, r2
  40e192:	0952      	lsrs	r2, r2, #5
  40e194:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40e198:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40e19c:	6032      	str	r2, [r6, #0]
  40e19e:	602b      	str	r3, [r5, #0]
  40e1a0:	b010      	add	sp, #64	; 0x40
  40e1a2:	bd70      	pop	{r4, r5, r6, pc}
  40e1a4:	89a2      	ldrh	r2, [r4, #12]
  40e1a6:	2300      	movs	r3, #0
  40e1a8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40e1ac:	6033      	str	r3, [r6, #0]
  40e1ae:	d004      	beq.n	40e1ba <__swhatbuf_r+0x52>
  40e1b0:	2240      	movs	r2, #64	; 0x40
  40e1b2:	4618      	mov	r0, r3
  40e1b4:	602a      	str	r2, [r5, #0]
  40e1b6:	b010      	add	sp, #64	; 0x40
  40e1b8:	bd70      	pop	{r4, r5, r6, pc}
  40e1ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40e1be:	602b      	str	r3, [r5, #0]
  40e1c0:	b010      	add	sp, #64	; 0x40
  40e1c2:	bd70      	pop	{r4, r5, r6, pc}

0040e1c4 <__smakebuf_r>:
  40e1c4:	898a      	ldrh	r2, [r1, #12]
  40e1c6:	0792      	lsls	r2, r2, #30
  40e1c8:	460b      	mov	r3, r1
  40e1ca:	d506      	bpl.n	40e1da <__smakebuf_r+0x16>
  40e1cc:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40e1d0:	2101      	movs	r1, #1
  40e1d2:	601a      	str	r2, [r3, #0]
  40e1d4:	611a      	str	r2, [r3, #16]
  40e1d6:	6159      	str	r1, [r3, #20]
  40e1d8:	4770      	bx	lr
  40e1da:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e1dc:	b083      	sub	sp, #12
  40e1de:	ab01      	add	r3, sp, #4
  40e1e0:	466a      	mov	r2, sp
  40e1e2:	460c      	mov	r4, r1
  40e1e4:	4606      	mov	r6, r0
  40e1e6:	f7ff ffbf 	bl	40e168 <__swhatbuf_r>
  40e1ea:	9900      	ldr	r1, [sp, #0]
  40e1ec:	4605      	mov	r5, r0
  40e1ee:	4630      	mov	r0, r6
  40e1f0:	f000 f83a 	bl	40e268 <_malloc_r>
  40e1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e1f8:	b1d8      	cbz	r0, 40e232 <__smakebuf_r+0x6e>
  40e1fa:	9a01      	ldr	r2, [sp, #4]
  40e1fc:	4f15      	ldr	r7, [pc, #84]	; (40e254 <__smakebuf_r+0x90>)
  40e1fe:	9900      	ldr	r1, [sp, #0]
  40e200:	63f7      	str	r7, [r6, #60]	; 0x3c
  40e202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e206:	81a3      	strh	r3, [r4, #12]
  40e208:	6020      	str	r0, [r4, #0]
  40e20a:	6120      	str	r0, [r4, #16]
  40e20c:	6161      	str	r1, [r4, #20]
  40e20e:	b91a      	cbnz	r2, 40e218 <__smakebuf_r+0x54>
  40e210:	432b      	orrs	r3, r5
  40e212:	81a3      	strh	r3, [r4, #12]
  40e214:	b003      	add	sp, #12
  40e216:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e218:	4630      	mov	r0, r6
  40e21a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40e21e:	f001 fb87 	bl	40f930 <_isatty_r>
  40e222:	b1a0      	cbz	r0, 40e24e <__smakebuf_r+0x8a>
  40e224:	89a3      	ldrh	r3, [r4, #12]
  40e226:	f023 0303 	bic.w	r3, r3, #3
  40e22a:	f043 0301 	orr.w	r3, r3, #1
  40e22e:	b21b      	sxth	r3, r3
  40e230:	e7ee      	b.n	40e210 <__smakebuf_r+0x4c>
  40e232:	059a      	lsls	r2, r3, #22
  40e234:	d4ee      	bmi.n	40e214 <__smakebuf_r+0x50>
  40e236:	f023 0303 	bic.w	r3, r3, #3
  40e23a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40e23e:	f043 0302 	orr.w	r3, r3, #2
  40e242:	2101      	movs	r1, #1
  40e244:	81a3      	strh	r3, [r4, #12]
  40e246:	6022      	str	r2, [r4, #0]
  40e248:	6122      	str	r2, [r4, #16]
  40e24a:	6161      	str	r1, [r4, #20]
  40e24c:	e7e2      	b.n	40e214 <__smakebuf_r+0x50>
  40e24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e252:	e7dd      	b.n	40e210 <__smakebuf_r+0x4c>
  40e254:	0040d961 	.word	0x0040d961

0040e258 <malloc>:
  40e258:	4b02      	ldr	r3, [pc, #8]	; (40e264 <malloc+0xc>)
  40e25a:	4601      	mov	r1, r0
  40e25c:	6818      	ldr	r0, [r3, #0]
  40e25e:	f000 b803 	b.w	40e268 <_malloc_r>
  40e262:	bf00      	nop
  40e264:	20400078 	.word	0x20400078

0040e268 <_malloc_r>:
  40e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e26c:	f101 060b 	add.w	r6, r1, #11
  40e270:	2e16      	cmp	r6, #22
  40e272:	b083      	sub	sp, #12
  40e274:	4605      	mov	r5, r0
  40e276:	f240 809e 	bls.w	40e3b6 <_malloc_r+0x14e>
  40e27a:	f036 0607 	bics.w	r6, r6, #7
  40e27e:	f100 80bd 	bmi.w	40e3fc <_malloc_r+0x194>
  40e282:	42b1      	cmp	r1, r6
  40e284:	f200 80ba 	bhi.w	40e3fc <_malloc_r+0x194>
  40e288:	f000 fb9e 	bl	40e9c8 <__malloc_lock>
  40e28c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40e290:	f0c0 8293 	bcc.w	40e7ba <_malloc_r+0x552>
  40e294:	0a73      	lsrs	r3, r6, #9
  40e296:	f000 80b8 	beq.w	40e40a <_malloc_r+0x1a2>
  40e29a:	2b04      	cmp	r3, #4
  40e29c:	f200 8179 	bhi.w	40e592 <_malloc_r+0x32a>
  40e2a0:	09b3      	lsrs	r3, r6, #6
  40e2a2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40e2a6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40e2aa:	00c3      	lsls	r3, r0, #3
  40e2ac:	4fbf      	ldr	r7, [pc, #764]	; (40e5ac <_malloc_r+0x344>)
  40e2ae:	443b      	add	r3, r7
  40e2b0:	f1a3 0108 	sub.w	r1, r3, #8
  40e2b4:	685c      	ldr	r4, [r3, #4]
  40e2b6:	42a1      	cmp	r1, r4
  40e2b8:	d106      	bne.n	40e2c8 <_malloc_r+0x60>
  40e2ba:	e00c      	b.n	40e2d6 <_malloc_r+0x6e>
  40e2bc:	2a00      	cmp	r2, #0
  40e2be:	f280 80aa 	bge.w	40e416 <_malloc_r+0x1ae>
  40e2c2:	68e4      	ldr	r4, [r4, #12]
  40e2c4:	42a1      	cmp	r1, r4
  40e2c6:	d006      	beq.n	40e2d6 <_malloc_r+0x6e>
  40e2c8:	6863      	ldr	r3, [r4, #4]
  40e2ca:	f023 0303 	bic.w	r3, r3, #3
  40e2ce:	1b9a      	subs	r2, r3, r6
  40e2d0:	2a0f      	cmp	r2, #15
  40e2d2:	ddf3      	ble.n	40e2bc <_malloc_r+0x54>
  40e2d4:	4670      	mov	r0, lr
  40e2d6:	693c      	ldr	r4, [r7, #16]
  40e2d8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40e5c0 <_malloc_r+0x358>
  40e2dc:	4574      	cmp	r4, lr
  40e2de:	f000 81ab 	beq.w	40e638 <_malloc_r+0x3d0>
  40e2e2:	6863      	ldr	r3, [r4, #4]
  40e2e4:	f023 0303 	bic.w	r3, r3, #3
  40e2e8:	1b9a      	subs	r2, r3, r6
  40e2ea:	2a0f      	cmp	r2, #15
  40e2ec:	f300 8190 	bgt.w	40e610 <_malloc_r+0x3a8>
  40e2f0:	2a00      	cmp	r2, #0
  40e2f2:	f8c7 e014 	str.w	lr, [r7, #20]
  40e2f6:	f8c7 e010 	str.w	lr, [r7, #16]
  40e2fa:	f280 809d 	bge.w	40e438 <_malloc_r+0x1d0>
  40e2fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e302:	f080 8161 	bcs.w	40e5c8 <_malloc_r+0x360>
  40e306:	08db      	lsrs	r3, r3, #3
  40e308:	f103 0c01 	add.w	ip, r3, #1
  40e30c:	1099      	asrs	r1, r3, #2
  40e30e:	687a      	ldr	r2, [r7, #4]
  40e310:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40e314:	f8c4 8008 	str.w	r8, [r4, #8]
  40e318:	2301      	movs	r3, #1
  40e31a:	408b      	lsls	r3, r1
  40e31c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40e320:	4313      	orrs	r3, r2
  40e322:	3908      	subs	r1, #8
  40e324:	60e1      	str	r1, [r4, #12]
  40e326:	607b      	str	r3, [r7, #4]
  40e328:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40e32c:	f8c8 400c 	str.w	r4, [r8, #12]
  40e330:	1082      	asrs	r2, r0, #2
  40e332:	2401      	movs	r4, #1
  40e334:	4094      	lsls	r4, r2
  40e336:	429c      	cmp	r4, r3
  40e338:	f200 808b 	bhi.w	40e452 <_malloc_r+0x1ea>
  40e33c:	421c      	tst	r4, r3
  40e33e:	d106      	bne.n	40e34e <_malloc_r+0xe6>
  40e340:	f020 0003 	bic.w	r0, r0, #3
  40e344:	0064      	lsls	r4, r4, #1
  40e346:	421c      	tst	r4, r3
  40e348:	f100 0004 	add.w	r0, r0, #4
  40e34c:	d0fa      	beq.n	40e344 <_malloc_r+0xdc>
  40e34e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40e352:	46cc      	mov	ip, r9
  40e354:	4680      	mov	r8, r0
  40e356:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40e35a:	459c      	cmp	ip, r3
  40e35c:	d107      	bne.n	40e36e <_malloc_r+0x106>
  40e35e:	e16d      	b.n	40e63c <_malloc_r+0x3d4>
  40e360:	2a00      	cmp	r2, #0
  40e362:	f280 817b 	bge.w	40e65c <_malloc_r+0x3f4>
  40e366:	68db      	ldr	r3, [r3, #12]
  40e368:	459c      	cmp	ip, r3
  40e36a:	f000 8167 	beq.w	40e63c <_malloc_r+0x3d4>
  40e36e:	6859      	ldr	r1, [r3, #4]
  40e370:	f021 0103 	bic.w	r1, r1, #3
  40e374:	1b8a      	subs	r2, r1, r6
  40e376:	2a0f      	cmp	r2, #15
  40e378:	ddf2      	ble.n	40e360 <_malloc_r+0xf8>
  40e37a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40e37e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40e382:	9300      	str	r3, [sp, #0]
  40e384:	199c      	adds	r4, r3, r6
  40e386:	4628      	mov	r0, r5
  40e388:	f046 0601 	orr.w	r6, r6, #1
  40e38c:	f042 0501 	orr.w	r5, r2, #1
  40e390:	605e      	str	r6, [r3, #4]
  40e392:	f8c8 c00c 	str.w	ip, [r8, #12]
  40e396:	f8cc 8008 	str.w	r8, [ip, #8]
  40e39a:	617c      	str	r4, [r7, #20]
  40e39c:	613c      	str	r4, [r7, #16]
  40e39e:	f8c4 e00c 	str.w	lr, [r4, #12]
  40e3a2:	f8c4 e008 	str.w	lr, [r4, #8]
  40e3a6:	6065      	str	r5, [r4, #4]
  40e3a8:	505a      	str	r2, [r3, r1]
  40e3aa:	f000 fb13 	bl	40e9d4 <__malloc_unlock>
  40e3ae:	9b00      	ldr	r3, [sp, #0]
  40e3b0:	f103 0408 	add.w	r4, r3, #8
  40e3b4:	e01e      	b.n	40e3f4 <_malloc_r+0x18c>
  40e3b6:	2910      	cmp	r1, #16
  40e3b8:	d820      	bhi.n	40e3fc <_malloc_r+0x194>
  40e3ba:	f000 fb05 	bl	40e9c8 <__malloc_lock>
  40e3be:	2610      	movs	r6, #16
  40e3c0:	2318      	movs	r3, #24
  40e3c2:	2002      	movs	r0, #2
  40e3c4:	4f79      	ldr	r7, [pc, #484]	; (40e5ac <_malloc_r+0x344>)
  40e3c6:	443b      	add	r3, r7
  40e3c8:	f1a3 0208 	sub.w	r2, r3, #8
  40e3cc:	685c      	ldr	r4, [r3, #4]
  40e3ce:	4294      	cmp	r4, r2
  40e3d0:	f000 813d 	beq.w	40e64e <_malloc_r+0x3e6>
  40e3d4:	6863      	ldr	r3, [r4, #4]
  40e3d6:	68e1      	ldr	r1, [r4, #12]
  40e3d8:	68a6      	ldr	r6, [r4, #8]
  40e3da:	f023 0303 	bic.w	r3, r3, #3
  40e3de:	4423      	add	r3, r4
  40e3e0:	4628      	mov	r0, r5
  40e3e2:	685a      	ldr	r2, [r3, #4]
  40e3e4:	60f1      	str	r1, [r6, #12]
  40e3e6:	f042 0201 	orr.w	r2, r2, #1
  40e3ea:	608e      	str	r6, [r1, #8]
  40e3ec:	605a      	str	r2, [r3, #4]
  40e3ee:	f000 faf1 	bl	40e9d4 <__malloc_unlock>
  40e3f2:	3408      	adds	r4, #8
  40e3f4:	4620      	mov	r0, r4
  40e3f6:	b003      	add	sp, #12
  40e3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e3fc:	2400      	movs	r4, #0
  40e3fe:	230c      	movs	r3, #12
  40e400:	4620      	mov	r0, r4
  40e402:	602b      	str	r3, [r5, #0]
  40e404:	b003      	add	sp, #12
  40e406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e40a:	2040      	movs	r0, #64	; 0x40
  40e40c:	f44f 7300 	mov.w	r3, #512	; 0x200
  40e410:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40e414:	e74a      	b.n	40e2ac <_malloc_r+0x44>
  40e416:	4423      	add	r3, r4
  40e418:	68e1      	ldr	r1, [r4, #12]
  40e41a:	685a      	ldr	r2, [r3, #4]
  40e41c:	68a6      	ldr	r6, [r4, #8]
  40e41e:	f042 0201 	orr.w	r2, r2, #1
  40e422:	60f1      	str	r1, [r6, #12]
  40e424:	4628      	mov	r0, r5
  40e426:	608e      	str	r6, [r1, #8]
  40e428:	605a      	str	r2, [r3, #4]
  40e42a:	f000 fad3 	bl	40e9d4 <__malloc_unlock>
  40e42e:	3408      	adds	r4, #8
  40e430:	4620      	mov	r0, r4
  40e432:	b003      	add	sp, #12
  40e434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e438:	4423      	add	r3, r4
  40e43a:	4628      	mov	r0, r5
  40e43c:	685a      	ldr	r2, [r3, #4]
  40e43e:	f042 0201 	orr.w	r2, r2, #1
  40e442:	605a      	str	r2, [r3, #4]
  40e444:	f000 fac6 	bl	40e9d4 <__malloc_unlock>
  40e448:	3408      	adds	r4, #8
  40e44a:	4620      	mov	r0, r4
  40e44c:	b003      	add	sp, #12
  40e44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e452:	68bc      	ldr	r4, [r7, #8]
  40e454:	6863      	ldr	r3, [r4, #4]
  40e456:	f023 0803 	bic.w	r8, r3, #3
  40e45a:	45b0      	cmp	r8, r6
  40e45c:	d304      	bcc.n	40e468 <_malloc_r+0x200>
  40e45e:	eba8 0306 	sub.w	r3, r8, r6
  40e462:	2b0f      	cmp	r3, #15
  40e464:	f300 8085 	bgt.w	40e572 <_malloc_r+0x30a>
  40e468:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40e5c4 <_malloc_r+0x35c>
  40e46c:	4b50      	ldr	r3, [pc, #320]	; (40e5b0 <_malloc_r+0x348>)
  40e46e:	f8d9 2000 	ldr.w	r2, [r9]
  40e472:	681b      	ldr	r3, [r3, #0]
  40e474:	3201      	adds	r2, #1
  40e476:	4433      	add	r3, r6
  40e478:	eb04 0a08 	add.w	sl, r4, r8
  40e47c:	f000 8155 	beq.w	40e72a <_malloc_r+0x4c2>
  40e480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40e484:	330f      	adds	r3, #15
  40e486:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40e48a:	f02b 0b0f 	bic.w	fp, fp, #15
  40e48e:	4659      	mov	r1, fp
  40e490:	4628      	mov	r0, r5
  40e492:	f000 ff45 	bl	40f320 <_sbrk_r>
  40e496:	1c41      	adds	r1, r0, #1
  40e498:	4602      	mov	r2, r0
  40e49a:	f000 80fc 	beq.w	40e696 <_malloc_r+0x42e>
  40e49e:	4582      	cmp	sl, r0
  40e4a0:	f200 80f7 	bhi.w	40e692 <_malloc_r+0x42a>
  40e4a4:	4b43      	ldr	r3, [pc, #268]	; (40e5b4 <_malloc_r+0x34c>)
  40e4a6:	6819      	ldr	r1, [r3, #0]
  40e4a8:	4459      	add	r1, fp
  40e4aa:	6019      	str	r1, [r3, #0]
  40e4ac:	f000 814d 	beq.w	40e74a <_malloc_r+0x4e2>
  40e4b0:	f8d9 0000 	ldr.w	r0, [r9]
  40e4b4:	3001      	adds	r0, #1
  40e4b6:	bf1b      	ittet	ne
  40e4b8:	eba2 0a0a 	subne.w	sl, r2, sl
  40e4bc:	4451      	addne	r1, sl
  40e4be:	f8c9 2000 	streq.w	r2, [r9]
  40e4c2:	6019      	strne	r1, [r3, #0]
  40e4c4:	f012 0107 	ands.w	r1, r2, #7
  40e4c8:	f000 8115 	beq.w	40e6f6 <_malloc_r+0x48e>
  40e4cc:	f1c1 0008 	rsb	r0, r1, #8
  40e4d0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40e4d4:	4402      	add	r2, r0
  40e4d6:	3108      	adds	r1, #8
  40e4d8:	eb02 090b 	add.w	r9, r2, fp
  40e4dc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40e4e0:	eba1 0909 	sub.w	r9, r1, r9
  40e4e4:	4649      	mov	r1, r9
  40e4e6:	4628      	mov	r0, r5
  40e4e8:	9301      	str	r3, [sp, #4]
  40e4ea:	9200      	str	r2, [sp, #0]
  40e4ec:	f000 ff18 	bl	40f320 <_sbrk_r>
  40e4f0:	1c43      	adds	r3, r0, #1
  40e4f2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40e4f6:	f000 8143 	beq.w	40e780 <_malloc_r+0x518>
  40e4fa:	1a80      	subs	r0, r0, r2
  40e4fc:	4448      	add	r0, r9
  40e4fe:	f040 0001 	orr.w	r0, r0, #1
  40e502:	6819      	ldr	r1, [r3, #0]
  40e504:	60ba      	str	r2, [r7, #8]
  40e506:	4449      	add	r1, r9
  40e508:	42bc      	cmp	r4, r7
  40e50a:	6050      	str	r0, [r2, #4]
  40e50c:	6019      	str	r1, [r3, #0]
  40e50e:	d017      	beq.n	40e540 <_malloc_r+0x2d8>
  40e510:	f1b8 0f0f 	cmp.w	r8, #15
  40e514:	f240 80fb 	bls.w	40e70e <_malloc_r+0x4a6>
  40e518:	6860      	ldr	r0, [r4, #4]
  40e51a:	f1a8 020c 	sub.w	r2, r8, #12
  40e51e:	f022 0207 	bic.w	r2, r2, #7
  40e522:	eb04 0e02 	add.w	lr, r4, r2
  40e526:	f000 0001 	and.w	r0, r0, #1
  40e52a:	f04f 0c05 	mov.w	ip, #5
  40e52e:	4310      	orrs	r0, r2
  40e530:	2a0f      	cmp	r2, #15
  40e532:	6060      	str	r0, [r4, #4]
  40e534:	f8ce c004 	str.w	ip, [lr, #4]
  40e538:	f8ce c008 	str.w	ip, [lr, #8]
  40e53c:	f200 8117 	bhi.w	40e76e <_malloc_r+0x506>
  40e540:	4b1d      	ldr	r3, [pc, #116]	; (40e5b8 <_malloc_r+0x350>)
  40e542:	68bc      	ldr	r4, [r7, #8]
  40e544:	681a      	ldr	r2, [r3, #0]
  40e546:	4291      	cmp	r1, r2
  40e548:	bf88      	it	hi
  40e54a:	6019      	strhi	r1, [r3, #0]
  40e54c:	4b1b      	ldr	r3, [pc, #108]	; (40e5bc <_malloc_r+0x354>)
  40e54e:	681a      	ldr	r2, [r3, #0]
  40e550:	4291      	cmp	r1, r2
  40e552:	6862      	ldr	r2, [r4, #4]
  40e554:	bf88      	it	hi
  40e556:	6019      	strhi	r1, [r3, #0]
  40e558:	f022 0203 	bic.w	r2, r2, #3
  40e55c:	4296      	cmp	r6, r2
  40e55e:	eba2 0306 	sub.w	r3, r2, r6
  40e562:	d801      	bhi.n	40e568 <_malloc_r+0x300>
  40e564:	2b0f      	cmp	r3, #15
  40e566:	dc04      	bgt.n	40e572 <_malloc_r+0x30a>
  40e568:	4628      	mov	r0, r5
  40e56a:	f000 fa33 	bl	40e9d4 <__malloc_unlock>
  40e56e:	2400      	movs	r4, #0
  40e570:	e740      	b.n	40e3f4 <_malloc_r+0x18c>
  40e572:	19a2      	adds	r2, r4, r6
  40e574:	f043 0301 	orr.w	r3, r3, #1
  40e578:	f046 0601 	orr.w	r6, r6, #1
  40e57c:	6066      	str	r6, [r4, #4]
  40e57e:	4628      	mov	r0, r5
  40e580:	60ba      	str	r2, [r7, #8]
  40e582:	6053      	str	r3, [r2, #4]
  40e584:	f000 fa26 	bl	40e9d4 <__malloc_unlock>
  40e588:	3408      	adds	r4, #8
  40e58a:	4620      	mov	r0, r4
  40e58c:	b003      	add	sp, #12
  40e58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e592:	2b14      	cmp	r3, #20
  40e594:	d971      	bls.n	40e67a <_malloc_r+0x412>
  40e596:	2b54      	cmp	r3, #84	; 0x54
  40e598:	f200 80a3 	bhi.w	40e6e2 <_malloc_r+0x47a>
  40e59c:	0b33      	lsrs	r3, r6, #12
  40e59e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40e5a2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40e5a6:	00c3      	lsls	r3, r0, #3
  40e5a8:	e680      	b.n	40e2ac <_malloc_r+0x44>
  40e5aa:	bf00      	nop
  40e5ac:	20400618 	.word	0x20400618
  40e5b0:	2040ca50 	.word	0x2040ca50
  40e5b4:	2040ca20 	.word	0x2040ca20
  40e5b8:	2040ca48 	.word	0x2040ca48
  40e5bc:	2040ca4c 	.word	0x2040ca4c
  40e5c0:	20400620 	.word	0x20400620
  40e5c4:	20400a20 	.word	0x20400a20
  40e5c8:	0a5a      	lsrs	r2, r3, #9
  40e5ca:	2a04      	cmp	r2, #4
  40e5cc:	d95b      	bls.n	40e686 <_malloc_r+0x41e>
  40e5ce:	2a14      	cmp	r2, #20
  40e5d0:	f200 80ae 	bhi.w	40e730 <_malloc_r+0x4c8>
  40e5d4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40e5d8:	00c9      	lsls	r1, r1, #3
  40e5da:	325b      	adds	r2, #91	; 0x5b
  40e5dc:	eb07 0c01 	add.w	ip, r7, r1
  40e5e0:	5879      	ldr	r1, [r7, r1]
  40e5e2:	f1ac 0c08 	sub.w	ip, ip, #8
  40e5e6:	458c      	cmp	ip, r1
  40e5e8:	f000 8088 	beq.w	40e6fc <_malloc_r+0x494>
  40e5ec:	684a      	ldr	r2, [r1, #4]
  40e5ee:	f022 0203 	bic.w	r2, r2, #3
  40e5f2:	4293      	cmp	r3, r2
  40e5f4:	d273      	bcs.n	40e6de <_malloc_r+0x476>
  40e5f6:	6889      	ldr	r1, [r1, #8]
  40e5f8:	458c      	cmp	ip, r1
  40e5fa:	d1f7      	bne.n	40e5ec <_malloc_r+0x384>
  40e5fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40e600:	687b      	ldr	r3, [r7, #4]
  40e602:	60e2      	str	r2, [r4, #12]
  40e604:	f8c4 c008 	str.w	ip, [r4, #8]
  40e608:	6094      	str	r4, [r2, #8]
  40e60a:	f8cc 400c 	str.w	r4, [ip, #12]
  40e60e:	e68f      	b.n	40e330 <_malloc_r+0xc8>
  40e610:	19a1      	adds	r1, r4, r6
  40e612:	f046 0c01 	orr.w	ip, r6, #1
  40e616:	f042 0601 	orr.w	r6, r2, #1
  40e61a:	f8c4 c004 	str.w	ip, [r4, #4]
  40e61e:	4628      	mov	r0, r5
  40e620:	6179      	str	r1, [r7, #20]
  40e622:	6139      	str	r1, [r7, #16]
  40e624:	f8c1 e00c 	str.w	lr, [r1, #12]
  40e628:	f8c1 e008 	str.w	lr, [r1, #8]
  40e62c:	604e      	str	r6, [r1, #4]
  40e62e:	50e2      	str	r2, [r4, r3]
  40e630:	f000 f9d0 	bl	40e9d4 <__malloc_unlock>
  40e634:	3408      	adds	r4, #8
  40e636:	e6dd      	b.n	40e3f4 <_malloc_r+0x18c>
  40e638:	687b      	ldr	r3, [r7, #4]
  40e63a:	e679      	b.n	40e330 <_malloc_r+0xc8>
  40e63c:	f108 0801 	add.w	r8, r8, #1
  40e640:	f018 0f03 	tst.w	r8, #3
  40e644:	f10c 0c08 	add.w	ip, ip, #8
  40e648:	f47f ae85 	bne.w	40e356 <_malloc_r+0xee>
  40e64c:	e02d      	b.n	40e6aa <_malloc_r+0x442>
  40e64e:	68dc      	ldr	r4, [r3, #12]
  40e650:	42a3      	cmp	r3, r4
  40e652:	bf08      	it	eq
  40e654:	3002      	addeq	r0, #2
  40e656:	f43f ae3e 	beq.w	40e2d6 <_malloc_r+0x6e>
  40e65a:	e6bb      	b.n	40e3d4 <_malloc_r+0x16c>
  40e65c:	4419      	add	r1, r3
  40e65e:	461c      	mov	r4, r3
  40e660:	684a      	ldr	r2, [r1, #4]
  40e662:	68db      	ldr	r3, [r3, #12]
  40e664:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40e668:	f042 0201 	orr.w	r2, r2, #1
  40e66c:	604a      	str	r2, [r1, #4]
  40e66e:	4628      	mov	r0, r5
  40e670:	60f3      	str	r3, [r6, #12]
  40e672:	609e      	str	r6, [r3, #8]
  40e674:	f000 f9ae 	bl	40e9d4 <__malloc_unlock>
  40e678:	e6bc      	b.n	40e3f4 <_malloc_r+0x18c>
  40e67a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40e67e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40e682:	00c3      	lsls	r3, r0, #3
  40e684:	e612      	b.n	40e2ac <_malloc_r+0x44>
  40e686:	099a      	lsrs	r2, r3, #6
  40e688:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40e68c:	00c9      	lsls	r1, r1, #3
  40e68e:	3238      	adds	r2, #56	; 0x38
  40e690:	e7a4      	b.n	40e5dc <_malloc_r+0x374>
  40e692:	42bc      	cmp	r4, r7
  40e694:	d054      	beq.n	40e740 <_malloc_r+0x4d8>
  40e696:	68bc      	ldr	r4, [r7, #8]
  40e698:	6862      	ldr	r2, [r4, #4]
  40e69a:	f022 0203 	bic.w	r2, r2, #3
  40e69e:	e75d      	b.n	40e55c <_malloc_r+0x2f4>
  40e6a0:	f859 3908 	ldr.w	r3, [r9], #-8
  40e6a4:	4599      	cmp	r9, r3
  40e6a6:	f040 8086 	bne.w	40e7b6 <_malloc_r+0x54e>
  40e6aa:	f010 0f03 	tst.w	r0, #3
  40e6ae:	f100 30ff 	add.w	r0, r0, #4294967295
  40e6b2:	d1f5      	bne.n	40e6a0 <_malloc_r+0x438>
  40e6b4:	687b      	ldr	r3, [r7, #4]
  40e6b6:	ea23 0304 	bic.w	r3, r3, r4
  40e6ba:	607b      	str	r3, [r7, #4]
  40e6bc:	0064      	lsls	r4, r4, #1
  40e6be:	429c      	cmp	r4, r3
  40e6c0:	f63f aec7 	bhi.w	40e452 <_malloc_r+0x1ea>
  40e6c4:	2c00      	cmp	r4, #0
  40e6c6:	f43f aec4 	beq.w	40e452 <_malloc_r+0x1ea>
  40e6ca:	421c      	tst	r4, r3
  40e6cc:	4640      	mov	r0, r8
  40e6ce:	f47f ae3e 	bne.w	40e34e <_malloc_r+0xe6>
  40e6d2:	0064      	lsls	r4, r4, #1
  40e6d4:	421c      	tst	r4, r3
  40e6d6:	f100 0004 	add.w	r0, r0, #4
  40e6da:	d0fa      	beq.n	40e6d2 <_malloc_r+0x46a>
  40e6dc:	e637      	b.n	40e34e <_malloc_r+0xe6>
  40e6de:	468c      	mov	ip, r1
  40e6e0:	e78c      	b.n	40e5fc <_malloc_r+0x394>
  40e6e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40e6e6:	d815      	bhi.n	40e714 <_malloc_r+0x4ac>
  40e6e8:	0bf3      	lsrs	r3, r6, #15
  40e6ea:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40e6ee:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40e6f2:	00c3      	lsls	r3, r0, #3
  40e6f4:	e5da      	b.n	40e2ac <_malloc_r+0x44>
  40e6f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40e6fa:	e6ed      	b.n	40e4d8 <_malloc_r+0x270>
  40e6fc:	687b      	ldr	r3, [r7, #4]
  40e6fe:	1092      	asrs	r2, r2, #2
  40e700:	2101      	movs	r1, #1
  40e702:	fa01 f202 	lsl.w	r2, r1, r2
  40e706:	4313      	orrs	r3, r2
  40e708:	607b      	str	r3, [r7, #4]
  40e70a:	4662      	mov	r2, ip
  40e70c:	e779      	b.n	40e602 <_malloc_r+0x39a>
  40e70e:	2301      	movs	r3, #1
  40e710:	6053      	str	r3, [r2, #4]
  40e712:	e729      	b.n	40e568 <_malloc_r+0x300>
  40e714:	f240 5254 	movw	r2, #1364	; 0x554
  40e718:	4293      	cmp	r3, r2
  40e71a:	d822      	bhi.n	40e762 <_malloc_r+0x4fa>
  40e71c:	0cb3      	lsrs	r3, r6, #18
  40e71e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40e722:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40e726:	00c3      	lsls	r3, r0, #3
  40e728:	e5c0      	b.n	40e2ac <_malloc_r+0x44>
  40e72a:	f103 0b10 	add.w	fp, r3, #16
  40e72e:	e6ae      	b.n	40e48e <_malloc_r+0x226>
  40e730:	2a54      	cmp	r2, #84	; 0x54
  40e732:	d829      	bhi.n	40e788 <_malloc_r+0x520>
  40e734:	0b1a      	lsrs	r2, r3, #12
  40e736:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40e73a:	00c9      	lsls	r1, r1, #3
  40e73c:	326e      	adds	r2, #110	; 0x6e
  40e73e:	e74d      	b.n	40e5dc <_malloc_r+0x374>
  40e740:	4b20      	ldr	r3, [pc, #128]	; (40e7c4 <_malloc_r+0x55c>)
  40e742:	6819      	ldr	r1, [r3, #0]
  40e744:	4459      	add	r1, fp
  40e746:	6019      	str	r1, [r3, #0]
  40e748:	e6b2      	b.n	40e4b0 <_malloc_r+0x248>
  40e74a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40e74e:	2800      	cmp	r0, #0
  40e750:	f47f aeae 	bne.w	40e4b0 <_malloc_r+0x248>
  40e754:	eb08 030b 	add.w	r3, r8, fp
  40e758:	68ba      	ldr	r2, [r7, #8]
  40e75a:	f043 0301 	orr.w	r3, r3, #1
  40e75e:	6053      	str	r3, [r2, #4]
  40e760:	e6ee      	b.n	40e540 <_malloc_r+0x2d8>
  40e762:	207f      	movs	r0, #127	; 0x7f
  40e764:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40e768:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40e76c:	e59e      	b.n	40e2ac <_malloc_r+0x44>
  40e76e:	f104 0108 	add.w	r1, r4, #8
  40e772:	4628      	mov	r0, r5
  40e774:	9300      	str	r3, [sp, #0]
  40e776:	f7ff fa47 	bl	40dc08 <_free_r>
  40e77a:	9b00      	ldr	r3, [sp, #0]
  40e77c:	6819      	ldr	r1, [r3, #0]
  40e77e:	e6df      	b.n	40e540 <_malloc_r+0x2d8>
  40e780:	2001      	movs	r0, #1
  40e782:	f04f 0900 	mov.w	r9, #0
  40e786:	e6bc      	b.n	40e502 <_malloc_r+0x29a>
  40e788:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40e78c:	d805      	bhi.n	40e79a <_malloc_r+0x532>
  40e78e:	0bda      	lsrs	r2, r3, #15
  40e790:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40e794:	00c9      	lsls	r1, r1, #3
  40e796:	3277      	adds	r2, #119	; 0x77
  40e798:	e720      	b.n	40e5dc <_malloc_r+0x374>
  40e79a:	f240 5154 	movw	r1, #1364	; 0x554
  40e79e:	428a      	cmp	r2, r1
  40e7a0:	d805      	bhi.n	40e7ae <_malloc_r+0x546>
  40e7a2:	0c9a      	lsrs	r2, r3, #18
  40e7a4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40e7a8:	00c9      	lsls	r1, r1, #3
  40e7aa:	327c      	adds	r2, #124	; 0x7c
  40e7ac:	e716      	b.n	40e5dc <_malloc_r+0x374>
  40e7ae:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40e7b2:	227e      	movs	r2, #126	; 0x7e
  40e7b4:	e712      	b.n	40e5dc <_malloc_r+0x374>
  40e7b6:	687b      	ldr	r3, [r7, #4]
  40e7b8:	e780      	b.n	40e6bc <_malloc_r+0x454>
  40e7ba:	08f0      	lsrs	r0, r6, #3
  40e7bc:	f106 0308 	add.w	r3, r6, #8
  40e7c0:	e600      	b.n	40e3c4 <_malloc_r+0x15c>
  40e7c2:	bf00      	nop
  40e7c4:	2040ca20 	.word	0x2040ca20

0040e7c8 <__ascii_mbtowc>:
  40e7c8:	b082      	sub	sp, #8
  40e7ca:	b149      	cbz	r1, 40e7e0 <__ascii_mbtowc+0x18>
  40e7cc:	b15a      	cbz	r2, 40e7e6 <__ascii_mbtowc+0x1e>
  40e7ce:	b16b      	cbz	r3, 40e7ec <__ascii_mbtowc+0x24>
  40e7d0:	7813      	ldrb	r3, [r2, #0]
  40e7d2:	600b      	str	r3, [r1, #0]
  40e7d4:	7812      	ldrb	r2, [r2, #0]
  40e7d6:	1c10      	adds	r0, r2, #0
  40e7d8:	bf18      	it	ne
  40e7da:	2001      	movne	r0, #1
  40e7dc:	b002      	add	sp, #8
  40e7de:	4770      	bx	lr
  40e7e0:	a901      	add	r1, sp, #4
  40e7e2:	2a00      	cmp	r2, #0
  40e7e4:	d1f3      	bne.n	40e7ce <__ascii_mbtowc+0x6>
  40e7e6:	4610      	mov	r0, r2
  40e7e8:	b002      	add	sp, #8
  40e7ea:	4770      	bx	lr
  40e7ec:	f06f 0001 	mvn.w	r0, #1
  40e7f0:	e7f4      	b.n	40e7dc <__ascii_mbtowc+0x14>
  40e7f2:	bf00      	nop
	...

0040e800 <memchr>:
  40e800:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40e804:	2a10      	cmp	r2, #16
  40e806:	db2b      	blt.n	40e860 <memchr+0x60>
  40e808:	f010 0f07 	tst.w	r0, #7
  40e80c:	d008      	beq.n	40e820 <memchr+0x20>
  40e80e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40e812:	3a01      	subs	r2, #1
  40e814:	428b      	cmp	r3, r1
  40e816:	d02d      	beq.n	40e874 <memchr+0x74>
  40e818:	f010 0f07 	tst.w	r0, #7
  40e81c:	b342      	cbz	r2, 40e870 <memchr+0x70>
  40e81e:	d1f6      	bne.n	40e80e <memchr+0xe>
  40e820:	b4f0      	push	{r4, r5, r6, r7}
  40e822:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40e826:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40e82a:	f022 0407 	bic.w	r4, r2, #7
  40e82e:	f07f 0700 	mvns.w	r7, #0
  40e832:	2300      	movs	r3, #0
  40e834:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40e838:	3c08      	subs	r4, #8
  40e83a:	ea85 0501 	eor.w	r5, r5, r1
  40e83e:	ea86 0601 	eor.w	r6, r6, r1
  40e842:	fa85 f547 	uadd8	r5, r5, r7
  40e846:	faa3 f587 	sel	r5, r3, r7
  40e84a:	fa86 f647 	uadd8	r6, r6, r7
  40e84e:	faa5 f687 	sel	r6, r5, r7
  40e852:	b98e      	cbnz	r6, 40e878 <memchr+0x78>
  40e854:	d1ee      	bne.n	40e834 <memchr+0x34>
  40e856:	bcf0      	pop	{r4, r5, r6, r7}
  40e858:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40e85c:	f002 0207 	and.w	r2, r2, #7
  40e860:	b132      	cbz	r2, 40e870 <memchr+0x70>
  40e862:	f810 3b01 	ldrb.w	r3, [r0], #1
  40e866:	3a01      	subs	r2, #1
  40e868:	ea83 0301 	eor.w	r3, r3, r1
  40e86c:	b113      	cbz	r3, 40e874 <memchr+0x74>
  40e86e:	d1f8      	bne.n	40e862 <memchr+0x62>
  40e870:	2000      	movs	r0, #0
  40e872:	4770      	bx	lr
  40e874:	3801      	subs	r0, #1
  40e876:	4770      	bx	lr
  40e878:	2d00      	cmp	r5, #0
  40e87a:	bf06      	itte	eq
  40e87c:	4635      	moveq	r5, r6
  40e87e:	3803      	subeq	r0, #3
  40e880:	3807      	subne	r0, #7
  40e882:	f015 0f01 	tst.w	r5, #1
  40e886:	d107      	bne.n	40e898 <memchr+0x98>
  40e888:	3001      	adds	r0, #1
  40e88a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40e88e:	bf02      	ittt	eq
  40e890:	3001      	addeq	r0, #1
  40e892:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40e896:	3001      	addeq	r0, #1
  40e898:	bcf0      	pop	{r4, r5, r6, r7}
  40e89a:	3801      	subs	r0, #1
  40e89c:	4770      	bx	lr
  40e89e:	bf00      	nop

0040e8a0 <memcmp>:
  40e8a0:	2a03      	cmp	r2, #3
  40e8a2:	b470      	push	{r4, r5, r6}
  40e8a4:	d922      	bls.n	40e8ec <memcmp+0x4c>
  40e8a6:	ea40 0301 	orr.w	r3, r0, r1
  40e8aa:	079b      	lsls	r3, r3, #30
  40e8ac:	d011      	beq.n	40e8d2 <memcmp+0x32>
  40e8ae:	7803      	ldrb	r3, [r0, #0]
  40e8b0:	780c      	ldrb	r4, [r1, #0]
  40e8b2:	42a3      	cmp	r3, r4
  40e8b4:	d11d      	bne.n	40e8f2 <memcmp+0x52>
  40e8b6:	440a      	add	r2, r1
  40e8b8:	3101      	adds	r1, #1
  40e8ba:	e005      	b.n	40e8c8 <memcmp+0x28>
  40e8bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40e8c0:	f811 4b01 	ldrb.w	r4, [r1], #1
  40e8c4:	42a3      	cmp	r3, r4
  40e8c6:	d114      	bne.n	40e8f2 <memcmp+0x52>
  40e8c8:	4291      	cmp	r1, r2
  40e8ca:	d1f7      	bne.n	40e8bc <memcmp+0x1c>
  40e8cc:	2000      	movs	r0, #0
  40e8ce:	bc70      	pop	{r4, r5, r6}
  40e8d0:	4770      	bx	lr
  40e8d2:	680d      	ldr	r5, [r1, #0]
  40e8d4:	6806      	ldr	r6, [r0, #0]
  40e8d6:	42ae      	cmp	r6, r5
  40e8d8:	460c      	mov	r4, r1
  40e8da:	4603      	mov	r3, r0
  40e8dc:	f101 0104 	add.w	r1, r1, #4
  40e8e0:	f100 0004 	add.w	r0, r0, #4
  40e8e4:	d108      	bne.n	40e8f8 <memcmp+0x58>
  40e8e6:	3a04      	subs	r2, #4
  40e8e8:	2a03      	cmp	r2, #3
  40e8ea:	d8f2      	bhi.n	40e8d2 <memcmp+0x32>
  40e8ec:	2a00      	cmp	r2, #0
  40e8ee:	d1de      	bne.n	40e8ae <memcmp+0xe>
  40e8f0:	e7ec      	b.n	40e8cc <memcmp+0x2c>
  40e8f2:	1b18      	subs	r0, r3, r4
  40e8f4:	bc70      	pop	{r4, r5, r6}
  40e8f6:	4770      	bx	lr
  40e8f8:	4621      	mov	r1, r4
  40e8fa:	4618      	mov	r0, r3
  40e8fc:	e7d7      	b.n	40e8ae <memcmp+0xe>
  40e8fe:	bf00      	nop

0040e900 <memmove>:
  40e900:	4288      	cmp	r0, r1
  40e902:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e904:	d90d      	bls.n	40e922 <memmove+0x22>
  40e906:	188b      	adds	r3, r1, r2
  40e908:	4298      	cmp	r0, r3
  40e90a:	d20a      	bcs.n	40e922 <memmove+0x22>
  40e90c:	1884      	adds	r4, r0, r2
  40e90e:	2a00      	cmp	r2, #0
  40e910:	d051      	beq.n	40e9b6 <memmove+0xb6>
  40e912:	4622      	mov	r2, r4
  40e914:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40e918:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40e91c:	4299      	cmp	r1, r3
  40e91e:	d1f9      	bne.n	40e914 <memmove+0x14>
  40e920:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e922:	2a0f      	cmp	r2, #15
  40e924:	d948      	bls.n	40e9b8 <memmove+0xb8>
  40e926:	ea41 0300 	orr.w	r3, r1, r0
  40e92a:	079b      	lsls	r3, r3, #30
  40e92c:	d146      	bne.n	40e9bc <memmove+0xbc>
  40e92e:	f100 0410 	add.w	r4, r0, #16
  40e932:	f101 0310 	add.w	r3, r1, #16
  40e936:	4615      	mov	r5, r2
  40e938:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40e93c:	f844 6c10 	str.w	r6, [r4, #-16]
  40e940:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40e944:	f844 6c0c 	str.w	r6, [r4, #-12]
  40e948:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40e94c:	f844 6c08 	str.w	r6, [r4, #-8]
  40e950:	3d10      	subs	r5, #16
  40e952:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40e956:	f844 6c04 	str.w	r6, [r4, #-4]
  40e95a:	2d0f      	cmp	r5, #15
  40e95c:	f103 0310 	add.w	r3, r3, #16
  40e960:	f104 0410 	add.w	r4, r4, #16
  40e964:	d8e8      	bhi.n	40e938 <memmove+0x38>
  40e966:	f1a2 0310 	sub.w	r3, r2, #16
  40e96a:	f023 030f 	bic.w	r3, r3, #15
  40e96e:	f002 0e0f 	and.w	lr, r2, #15
  40e972:	3310      	adds	r3, #16
  40e974:	f1be 0f03 	cmp.w	lr, #3
  40e978:	4419      	add	r1, r3
  40e97a:	4403      	add	r3, r0
  40e97c:	d921      	bls.n	40e9c2 <memmove+0xc2>
  40e97e:	1f1e      	subs	r6, r3, #4
  40e980:	460d      	mov	r5, r1
  40e982:	4674      	mov	r4, lr
  40e984:	3c04      	subs	r4, #4
  40e986:	f855 7b04 	ldr.w	r7, [r5], #4
  40e98a:	f846 7f04 	str.w	r7, [r6, #4]!
  40e98e:	2c03      	cmp	r4, #3
  40e990:	d8f8      	bhi.n	40e984 <memmove+0x84>
  40e992:	f1ae 0404 	sub.w	r4, lr, #4
  40e996:	f024 0403 	bic.w	r4, r4, #3
  40e99a:	3404      	adds	r4, #4
  40e99c:	4421      	add	r1, r4
  40e99e:	4423      	add	r3, r4
  40e9a0:	f002 0203 	and.w	r2, r2, #3
  40e9a4:	b162      	cbz	r2, 40e9c0 <memmove+0xc0>
  40e9a6:	3b01      	subs	r3, #1
  40e9a8:	440a      	add	r2, r1
  40e9aa:	f811 4b01 	ldrb.w	r4, [r1], #1
  40e9ae:	f803 4f01 	strb.w	r4, [r3, #1]!
  40e9b2:	428a      	cmp	r2, r1
  40e9b4:	d1f9      	bne.n	40e9aa <memmove+0xaa>
  40e9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e9b8:	4603      	mov	r3, r0
  40e9ba:	e7f3      	b.n	40e9a4 <memmove+0xa4>
  40e9bc:	4603      	mov	r3, r0
  40e9be:	e7f2      	b.n	40e9a6 <memmove+0xa6>
  40e9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e9c2:	4672      	mov	r2, lr
  40e9c4:	e7ee      	b.n	40e9a4 <memmove+0xa4>
  40e9c6:	bf00      	nop

0040e9c8 <__malloc_lock>:
  40e9c8:	4801      	ldr	r0, [pc, #4]	; (40e9d0 <__malloc_lock+0x8>)
  40e9ca:	f7ff bbc9 	b.w	40e160 <__retarget_lock_acquire_recursive>
  40e9ce:	bf00      	nop
  40e9d0:	20410a40 	.word	0x20410a40

0040e9d4 <__malloc_unlock>:
  40e9d4:	4801      	ldr	r0, [pc, #4]	; (40e9dc <__malloc_unlock+0x8>)
  40e9d6:	f7ff bbc5 	b.w	40e164 <__retarget_lock_release_recursive>
  40e9da:	bf00      	nop
  40e9dc:	20410a40 	.word	0x20410a40

0040e9e0 <_Balloc>:
  40e9e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40e9e2:	b570      	push	{r4, r5, r6, lr}
  40e9e4:	4605      	mov	r5, r0
  40e9e6:	460c      	mov	r4, r1
  40e9e8:	b14b      	cbz	r3, 40e9fe <_Balloc+0x1e>
  40e9ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40e9ee:	b180      	cbz	r0, 40ea12 <_Balloc+0x32>
  40e9f0:	6802      	ldr	r2, [r0, #0]
  40e9f2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40e9f6:	2300      	movs	r3, #0
  40e9f8:	6103      	str	r3, [r0, #16]
  40e9fa:	60c3      	str	r3, [r0, #12]
  40e9fc:	bd70      	pop	{r4, r5, r6, pc}
  40e9fe:	2221      	movs	r2, #33	; 0x21
  40ea00:	2104      	movs	r1, #4
  40ea02:	f000 fedd 	bl	40f7c0 <_calloc_r>
  40ea06:	64e8      	str	r0, [r5, #76]	; 0x4c
  40ea08:	4603      	mov	r3, r0
  40ea0a:	2800      	cmp	r0, #0
  40ea0c:	d1ed      	bne.n	40e9ea <_Balloc+0xa>
  40ea0e:	2000      	movs	r0, #0
  40ea10:	bd70      	pop	{r4, r5, r6, pc}
  40ea12:	2101      	movs	r1, #1
  40ea14:	fa01 f604 	lsl.w	r6, r1, r4
  40ea18:	1d72      	adds	r2, r6, #5
  40ea1a:	4628      	mov	r0, r5
  40ea1c:	0092      	lsls	r2, r2, #2
  40ea1e:	f000 fecf 	bl	40f7c0 <_calloc_r>
  40ea22:	2800      	cmp	r0, #0
  40ea24:	d0f3      	beq.n	40ea0e <_Balloc+0x2e>
  40ea26:	6044      	str	r4, [r0, #4]
  40ea28:	6086      	str	r6, [r0, #8]
  40ea2a:	e7e4      	b.n	40e9f6 <_Balloc+0x16>

0040ea2c <_Bfree>:
  40ea2c:	b131      	cbz	r1, 40ea3c <_Bfree+0x10>
  40ea2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40ea30:	684a      	ldr	r2, [r1, #4]
  40ea32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40ea36:	6008      	str	r0, [r1, #0]
  40ea38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40ea3c:	4770      	bx	lr
  40ea3e:	bf00      	nop

0040ea40 <__multadd>:
  40ea40:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ea42:	690c      	ldr	r4, [r1, #16]
  40ea44:	b083      	sub	sp, #12
  40ea46:	460d      	mov	r5, r1
  40ea48:	4606      	mov	r6, r0
  40ea4a:	f101 0e14 	add.w	lr, r1, #20
  40ea4e:	2700      	movs	r7, #0
  40ea50:	f8de 0000 	ldr.w	r0, [lr]
  40ea54:	b281      	uxth	r1, r0
  40ea56:	fb02 3301 	mla	r3, r2, r1, r3
  40ea5a:	0c01      	lsrs	r1, r0, #16
  40ea5c:	0c18      	lsrs	r0, r3, #16
  40ea5e:	fb02 0101 	mla	r1, r2, r1, r0
  40ea62:	b29b      	uxth	r3, r3
  40ea64:	3701      	adds	r7, #1
  40ea66:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40ea6a:	42bc      	cmp	r4, r7
  40ea6c:	f84e 3b04 	str.w	r3, [lr], #4
  40ea70:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40ea74:	dcec      	bgt.n	40ea50 <__multadd+0x10>
  40ea76:	b13b      	cbz	r3, 40ea88 <__multadd+0x48>
  40ea78:	68aa      	ldr	r2, [r5, #8]
  40ea7a:	4294      	cmp	r4, r2
  40ea7c:	da07      	bge.n	40ea8e <__multadd+0x4e>
  40ea7e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40ea82:	3401      	adds	r4, #1
  40ea84:	6153      	str	r3, [r2, #20]
  40ea86:	612c      	str	r4, [r5, #16]
  40ea88:	4628      	mov	r0, r5
  40ea8a:	b003      	add	sp, #12
  40ea8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ea8e:	6869      	ldr	r1, [r5, #4]
  40ea90:	9301      	str	r3, [sp, #4]
  40ea92:	3101      	adds	r1, #1
  40ea94:	4630      	mov	r0, r6
  40ea96:	f7ff ffa3 	bl	40e9e0 <_Balloc>
  40ea9a:	692a      	ldr	r2, [r5, #16]
  40ea9c:	3202      	adds	r2, #2
  40ea9e:	f105 010c 	add.w	r1, r5, #12
  40eaa2:	4607      	mov	r7, r0
  40eaa4:	0092      	lsls	r2, r2, #2
  40eaa6:	300c      	adds	r0, #12
  40eaa8:	f7fa fe26 	bl	4096f8 <memcpy>
  40eaac:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40eaae:	6869      	ldr	r1, [r5, #4]
  40eab0:	9b01      	ldr	r3, [sp, #4]
  40eab2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40eab6:	6028      	str	r0, [r5, #0]
  40eab8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40eabc:	463d      	mov	r5, r7
  40eabe:	e7de      	b.n	40ea7e <__multadd+0x3e>

0040eac0 <__hi0bits>:
  40eac0:	0c02      	lsrs	r2, r0, #16
  40eac2:	0412      	lsls	r2, r2, #16
  40eac4:	4603      	mov	r3, r0
  40eac6:	b9b2      	cbnz	r2, 40eaf6 <__hi0bits+0x36>
  40eac8:	0403      	lsls	r3, r0, #16
  40eaca:	2010      	movs	r0, #16
  40eacc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40ead0:	bf04      	itt	eq
  40ead2:	021b      	lsleq	r3, r3, #8
  40ead4:	3008      	addeq	r0, #8
  40ead6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40eada:	bf04      	itt	eq
  40eadc:	011b      	lsleq	r3, r3, #4
  40eade:	3004      	addeq	r0, #4
  40eae0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40eae4:	bf04      	itt	eq
  40eae6:	009b      	lsleq	r3, r3, #2
  40eae8:	3002      	addeq	r0, #2
  40eaea:	2b00      	cmp	r3, #0
  40eaec:	db02      	blt.n	40eaf4 <__hi0bits+0x34>
  40eaee:	005b      	lsls	r3, r3, #1
  40eaf0:	d403      	bmi.n	40eafa <__hi0bits+0x3a>
  40eaf2:	2020      	movs	r0, #32
  40eaf4:	4770      	bx	lr
  40eaf6:	2000      	movs	r0, #0
  40eaf8:	e7e8      	b.n	40eacc <__hi0bits+0xc>
  40eafa:	3001      	adds	r0, #1
  40eafc:	4770      	bx	lr
  40eafe:	bf00      	nop

0040eb00 <__lo0bits>:
  40eb00:	6803      	ldr	r3, [r0, #0]
  40eb02:	f013 0207 	ands.w	r2, r3, #7
  40eb06:	4601      	mov	r1, r0
  40eb08:	d007      	beq.n	40eb1a <__lo0bits+0x1a>
  40eb0a:	07da      	lsls	r2, r3, #31
  40eb0c:	d421      	bmi.n	40eb52 <__lo0bits+0x52>
  40eb0e:	0798      	lsls	r0, r3, #30
  40eb10:	d421      	bmi.n	40eb56 <__lo0bits+0x56>
  40eb12:	089b      	lsrs	r3, r3, #2
  40eb14:	600b      	str	r3, [r1, #0]
  40eb16:	2002      	movs	r0, #2
  40eb18:	4770      	bx	lr
  40eb1a:	b298      	uxth	r0, r3
  40eb1c:	b198      	cbz	r0, 40eb46 <__lo0bits+0x46>
  40eb1e:	4610      	mov	r0, r2
  40eb20:	f013 0fff 	tst.w	r3, #255	; 0xff
  40eb24:	bf04      	itt	eq
  40eb26:	0a1b      	lsreq	r3, r3, #8
  40eb28:	3008      	addeq	r0, #8
  40eb2a:	071a      	lsls	r2, r3, #28
  40eb2c:	bf04      	itt	eq
  40eb2e:	091b      	lsreq	r3, r3, #4
  40eb30:	3004      	addeq	r0, #4
  40eb32:	079a      	lsls	r2, r3, #30
  40eb34:	bf04      	itt	eq
  40eb36:	089b      	lsreq	r3, r3, #2
  40eb38:	3002      	addeq	r0, #2
  40eb3a:	07da      	lsls	r2, r3, #31
  40eb3c:	d407      	bmi.n	40eb4e <__lo0bits+0x4e>
  40eb3e:	085b      	lsrs	r3, r3, #1
  40eb40:	d104      	bne.n	40eb4c <__lo0bits+0x4c>
  40eb42:	2020      	movs	r0, #32
  40eb44:	4770      	bx	lr
  40eb46:	0c1b      	lsrs	r3, r3, #16
  40eb48:	2010      	movs	r0, #16
  40eb4a:	e7e9      	b.n	40eb20 <__lo0bits+0x20>
  40eb4c:	3001      	adds	r0, #1
  40eb4e:	600b      	str	r3, [r1, #0]
  40eb50:	4770      	bx	lr
  40eb52:	2000      	movs	r0, #0
  40eb54:	4770      	bx	lr
  40eb56:	085b      	lsrs	r3, r3, #1
  40eb58:	600b      	str	r3, [r1, #0]
  40eb5a:	2001      	movs	r0, #1
  40eb5c:	4770      	bx	lr
  40eb5e:	bf00      	nop

0040eb60 <__i2b>:
  40eb60:	b510      	push	{r4, lr}
  40eb62:	460c      	mov	r4, r1
  40eb64:	2101      	movs	r1, #1
  40eb66:	f7ff ff3b 	bl	40e9e0 <_Balloc>
  40eb6a:	2201      	movs	r2, #1
  40eb6c:	6144      	str	r4, [r0, #20]
  40eb6e:	6102      	str	r2, [r0, #16]
  40eb70:	bd10      	pop	{r4, pc}
  40eb72:	bf00      	nop

0040eb74 <__multiply>:
  40eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40eb78:	690c      	ldr	r4, [r1, #16]
  40eb7a:	6915      	ldr	r5, [r2, #16]
  40eb7c:	42ac      	cmp	r4, r5
  40eb7e:	b083      	sub	sp, #12
  40eb80:	468b      	mov	fp, r1
  40eb82:	4616      	mov	r6, r2
  40eb84:	da04      	bge.n	40eb90 <__multiply+0x1c>
  40eb86:	4622      	mov	r2, r4
  40eb88:	46b3      	mov	fp, r6
  40eb8a:	462c      	mov	r4, r5
  40eb8c:	460e      	mov	r6, r1
  40eb8e:	4615      	mov	r5, r2
  40eb90:	f8db 3008 	ldr.w	r3, [fp, #8]
  40eb94:	f8db 1004 	ldr.w	r1, [fp, #4]
  40eb98:	eb04 0805 	add.w	r8, r4, r5
  40eb9c:	4598      	cmp	r8, r3
  40eb9e:	bfc8      	it	gt
  40eba0:	3101      	addgt	r1, #1
  40eba2:	f7ff ff1d 	bl	40e9e0 <_Balloc>
  40eba6:	f100 0914 	add.w	r9, r0, #20
  40ebaa:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40ebae:	45d1      	cmp	r9, sl
  40ebb0:	9000      	str	r0, [sp, #0]
  40ebb2:	d205      	bcs.n	40ebc0 <__multiply+0x4c>
  40ebb4:	464b      	mov	r3, r9
  40ebb6:	2100      	movs	r1, #0
  40ebb8:	f843 1b04 	str.w	r1, [r3], #4
  40ebbc:	459a      	cmp	sl, r3
  40ebbe:	d8fb      	bhi.n	40ebb8 <__multiply+0x44>
  40ebc0:	f106 0c14 	add.w	ip, r6, #20
  40ebc4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40ebc8:	f10b 0b14 	add.w	fp, fp, #20
  40ebcc:	459c      	cmp	ip, r3
  40ebce:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40ebd2:	d24c      	bcs.n	40ec6e <__multiply+0xfa>
  40ebd4:	f8cd a004 	str.w	sl, [sp, #4]
  40ebd8:	469a      	mov	sl, r3
  40ebda:	f8dc 5000 	ldr.w	r5, [ip]
  40ebde:	b2af      	uxth	r7, r5
  40ebe0:	b1ef      	cbz	r7, 40ec1e <__multiply+0xaa>
  40ebe2:	2100      	movs	r1, #0
  40ebe4:	464d      	mov	r5, r9
  40ebe6:	465e      	mov	r6, fp
  40ebe8:	460c      	mov	r4, r1
  40ebea:	f856 2b04 	ldr.w	r2, [r6], #4
  40ebee:	6828      	ldr	r0, [r5, #0]
  40ebf0:	b293      	uxth	r3, r2
  40ebf2:	b281      	uxth	r1, r0
  40ebf4:	fb07 1303 	mla	r3, r7, r3, r1
  40ebf8:	0c12      	lsrs	r2, r2, #16
  40ebfa:	0c01      	lsrs	r1, r0, #16
  40ebfc:	4423      	add	r3, r4
  40ebfe:	fb07 1102 	mla	r1, r7, r2, r1
  40ec02:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40ec06:	b29b      	uxth	r3, r3
  40ec08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40ec0c:	45b6      	cmp	lr, r6
  40ec0e:	f845 3b04 	str.w	r3, [r5], #4
  40ec12:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40ec16:	d8e8      	bhi.n	40ebea <__multiply+0x76>
  40ec18:	602c      	str	r4, [r5, #0]
  40ec1a:	f8dc 5000 	ldr.w	r5, [ip]
  40ec1e:	0c2d      	lsrs	r5, r5, #16
  40ec20:	d01d      	beq.n	40ec5e <__multiply+0xea>
  40ec22:	f8d9 3000 	ldr.w	r3, [r9]
  40ec26:	4648      	mov	r0, r9
  40ec28:	461c      	mov	r4, r3
  40ec2a:	4659      	mov	r1, fp
  40ec2c:	2200      	movs	r2, #0
  40ec2e:	880e      	ldrh	r6, [r1, #0]
  40ec30:	0c24      	lsrs	r4, r4, #16
  40ec32:	fb05 4406 	mla	r4, r5, r6, r4
  40ec36:	4422      	add	r2, r4
  40ec38:	b29b      	uxth	r3, r3
  40ec3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40ec3e:	f840 3b04 	str.w	r3, [r0], #4
  40ec42:	f851 3b04 	ldr.w	r3, [r1], #4
  40ec46:	6804      	ldr	r4, [r0, #0]
  40ec48:	0c1b      	lsrs	r3, r3, #16
  40ec4a:	b2a6      	uxth	r6, r4
  40ec4c:	fb05 6303 	mla	r3, r5, r3, r6
  40ec50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40ec54:	458e      	cmp	lr, r1
  40ec56:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40ec5a:	d8e8      	bhi.n	40ec2e <__multiply+0xba>
  40ec5c:	6003      	str	r3, [r0, #0]
  40ec5e:	f10c 0c04 	add.w	ip, ip, #4
  40ec62:	45e2      	cmp	sl, ip
  40ec64:	f109 0904 	add.w	r9, r9, #4
  40ec68:	d8b7      	bhi.n	40ebda <__multiply+0x66>
  40ec6a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40ec6e:	f1b8 0f00 	cmp.w	r8, #0
  40ec72:	dd0b      	ble.n	40ec8c <__multiply+0x118>
  40ec74:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40ec78:	f1aa 0a04 	sub.w	sl, sl, #4
  40ec7c:	b11b      	cbz	r3, 40ec86 <__multiply+0x112>
  40ec7e:	e005      	b.n	40ec8c <__multiply+0x118>
  40ec80:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40ec84:	b913      	cbnz	r3, 40ec8c <__multiply+0x118>
  40ec86:	f1b8 0801 	subs.w	r8, r8, #1
  40ec8a:	d1f9      	bne.n	40ec80 <__multiply+0x10c>
  40ec8c:	9800      	ldr	r0, [sp, #0]
  40ec8e:	f8c0 8010 	str.w	r8, [r0, #16]
  40ec92:	b003      	add	sp, #12
  40ec94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ec98 <__pow5mult>:
  40ec98:	f012 0303 	ands.w	r3, r2, #3
  40ec9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40eca0:	4614      	mov	r4, r2
  40eca2:	4607      	mov	r7, r0
  40eca4:	d12e      	bne.n	40ed04 <__pow5mult+0x6c>
  40eca6:	460d      	mov	r5, r1
  40eca8:	10a4      	asrs	r4, r4, #2
  40ecaa:	d01c      	beq.n	40ece6 <__pow5mult+0x4e>
  40ecac:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40ecae:	b396      	cbz	r6, 40ed16 <__pow5mult+0x7e>
  40ecb0:	07e3      	lsls	r3, r4, #31
  40ecb2:	f04f 0800 	mov.w	r8, #0
  40ecb6:	d406      	bmi.n	40ecc6 <__pow5mult+0x2e>
  40ecb8:	1064      	asrs	r4, r4, #1
  40ecba:	d014      	beq.n	40ece6 <__pow5mult+0x4e>
  40ecbc:	6830      	ldr	r0, [r6, #0]
  40ecbe:	b1a8      	cbz	r0, 40ecec <__pow5mult+0x54>
  40ecc0:	4606      	mov	r6, r0
  40ecc2:	07e3      	lsls	r3, r4, #31
  40ecc4:	d5f8      	bpl.n	40ecb8 <__pow5mult+0x20>
  40ecc6:	4632      	mov	r2, r6
  40ecc8:	4629      	mov	r1, r5
  40ecca:	4638      	mov	r0, r7
  40eccc:	f7ff ff52 	bl	40eb74 <__multiply>
  40ecd0:	b1b5      	cbz	r5, 40ed00 <__pow5mult+0x68>
  40ecd2:	686a      	ldr	r2, [r5, #4]
  40ecd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ecd6:	1064      	asrs	r4, r4, #1
  40ecd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ecdc:	6029      	str	r1, [r5, #0]
  40ecde:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40ece2:	4605      	mov	r5, r0
  40ece4:	d1ea      	bne.n	40ecbc <__pow5mult+0x24>
  40ece6:	4628      	mov	r0, r5
  40ece8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ecec:	4632      	mov	r2, r6
  40ecee:	4631      	mov	r1, r6
  40ecf0:	4638      	mov	r0, r7
  40ecf2:	f7ff ff3f 	bl	40eb74 <__multiply>
  40ecf6:	6030      	str	r0, [r6, #0]
  40ecf8:	f8c0 8000 	str.w	r8, [r0]
  40ecfc:	4606      	mov	r6, r0
  40ecfe:	e7e0      	b.n	40ecc2 <__pow5mult+0x2a>
  40ed00:	4605      	mov	r5, r0
  40ed02:	e7d9      	b.n	40ecb8 <__pow5mult+0x20>
  40ed04:	1e5a      	subs	r2, r3, #1
  40ed06:	4d0b      	ldr	r5, [pc, #44]	; (40ed34 <__pow5mult+0x9c>)
  40ed08:	2300      	movs	r3, #0
  40ed0a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40ed0e:	f7ff fe97 	bl	40ea40 <__multadd>
  40ed12:	4605      	mov	r5, r0
  40ed14:	e7c8      	b.n	40eca8 <__pow5mult+0x10>
  40ed16:	2101      	movs	r1, #1
  40ed18:	4638      	mov	r0, r7
  40ed1a:	f7ff fe61 	bl	40e9e0 <_Balloc>
  40ed1e:	f240 2171 	movw	r1, #625	; 0x271
  40ed22:	2201      	movs	r2, #1
  40ed24:	2300      	movs	r3, #0
  40ed26:	6141      	str	r1, [r0, #20]
  40ed28:	6102      	str	r2, [r0, #16]
  40ed2a:	4606      	mov	r6, r0
  40ed2c:	64b8      	str	r0, [r7, #72]	; 0x48
  40ed2e:	6003      	str	r3, [r0, #0]
  40ed30:	e7be      	b.n	40ecb0 <__pow5mult+0x18>
  40ed32:	bf00      	nop
  40ed34:	00411e88 	.word	0x00411e88

0040ed38 <__lshift>:
  40ed38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ed3c:	4691      	mov	r9, r2
  40ed3e:	690a      	ldr	r2, [r1, #16]
  40ed40:	688b      	ldr	r3, [r1, #8]
  40ed42:	ea4f 1469 	mov.w	r4, r9, asr #5
  40ed46:	eb04 0802 	add.w	r8, r4, r2
  40ed4a:	f108 0501 	add.w	r5, r8, #1
  40ed4e:	429d      	cmp	r5, r3
  40ed50:	460e      	mov	r6, r1
  40ed52:	4607      	mov	r7, r0
  40ed54:	6849      	ldr	r1, [r1, #4]
  40ed56:	dd04      	ble.n	40ed62 <__lshift+0x2a>
  40ed58:	005b      	lsls	r3, r3, #1
  40ed5a:	429d      	cmp	r5, r3
  40ed5c:	f101 0101 	add.w	r1, r1, #1
  40ed60:	dcfa      	bgt.n	40ed58 <__lshift+0x20>
  40ed62:	4638      	mov	r0, r7
  40ed64:	f7ff fe3c 	bl	40e9e0 <_Balloc>
  40ed68:	2c00      	cmp	r4, #0
  40ed6a:	f100 0314 	add.w	r3, r0, #20
  40ed6e:	dd06      	ble.n	40ed7e <__lshift+0x46>
  40ed70:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40ed74:	2100      	movs	r1, #0
  40ed76:	f843 1b04 	str.w	r1, [r3], #4
  40ed7a:	429a      	cmp	r2, r3
  40ed7c:	d1fb      	bne.n	40ed76 <__lshift+0x3e>
  40ed7e:	6934      	ldr	r4, [r6, #16]
  40ed80:	f106 0114 	add.w	r1, r6, #20
  40ed84:	f019 091f 	ands.w	r9, r9, #31
  40ed88:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40ed8c:	d01d      	beq.n	40edca <__lshift+0x92>
  40ed8e:	f1c9 0c20 	rsb	ip, r9, #32
  40ed92:	2200      	movs	r2, #0
  40ed94:	680c      	ldr	r4, [r1, #0]
  40ed96:	fa04 f409 	lsl.w	r4, r4, r9
  40ed9a:	4314      	orrs	r4, r2
  40ed9c:	f843 4b04 	str.w	r4, [r3], #4
  40eda0:	f851 2b04 	ldr.w	r2, [r1], #4
  40eda4:	458e      	cmp	lr, r1
  40eda6:	fa22 f20c 	lsr.w	r2, r2, ip
  40edaa:	d8f3      	bhi.n	40ed94 <__lshift+0x5c>
  40edac:	601a      	str	r2, [r3, #0]
  40edae:	b10a      	cbz	r2, 40edb4 <__lshift+0x7c>
  40edb0:	f108 0502 	add.w	r5, r8, #2
  40edb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40edb6:	6872      	ldr	r2, [r6, #4]
  40edb8:	3d01      	subs	r5, #1
  40edba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40edbe:	6105      	str	r5, [r0, #16]
  40edc0:	6031      	str	r1, [r6, #0]
  40edc2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40edc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40edca:	3b04      	subs	r3, #4
  40edcc:	f851 2b04 	ldr.w	r2, [r1], #4
  40edd0:	f843 2f04 	str.w	r2, [r3, #4]!
  40edd4:	458e      	cmp	lr, r1
  40edd6:	d8f9      	bhi.n	40edcc <__lshift+0x94>
  40edd8:	e7ec      	b.n	40edb4 <__lshift+0x7c>
  40edda:	bf00      	nop

0040eddc <__mcmp>:
  40eddc:	b430      	push	{r4, r5}
  40edde:	690b      	ldr	r3, [r1, #16]
  40ede0:	4605      	mov	r5, r0
  40ede2:	6900      	ldr	r0, [r0, #16]
  40ede4:	1ac0      	subs	r0, r0, r3
  40ede6:	d10f      	bne.n	40ee08 <__mcmp+0x2c>
  40ede8:	009b      	lsls	r3, r3, #2
  40edea:	3514      	adds	r5, #20
  40edec:	3114      	adds	r1, #20
  40edee:	4419      	add	r1, r3
  40edf0:	442b      	add	r3, r5
  40edf2:	e001      	b.n	40edf8 <__mcmp+0x1c>
  40edf4:	429d      	cmp	r5, r3
  40edf6:	d207      	bcs.n	40ee08 <__mcmp+0x2c>
  40edf8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40edfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40ee00:	4294      	cmp	r4, r2
  40ee02:	d0f7      	beq.n	40edf4 <__mcmp+0x18>
  40ee04:	d302      	bcc.n	40ee0c <__mcmp+0x30>
  40ee06:	2001      	movs	r0, #1
  40ee08:	bc30      	pop	{r4, r5}
  40ee0a:	4770      	bx	lr
  40ee0c:	f04f 30ff 	mov.w	r0, #4294967295
  40ee10:	e7fa      	b.n	40ee08 <__mcmp+0x2c>
  40ee12:	bf00      	nop

0040ee14 <__mdiff>:
  40ee14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ee18:	690f      	ldr	r7, [r1, #16]
  40ee1a:	460e      	mov	r6, r1
  40ee1c:	6911      	ldr	r1, [r2, #16]
  40ee1e:	1a7f      	subs	r7, r7, r1
  40ee20:	2f00      	cmp	r7, #0
  40ee22:	4690      	mov	r8, r2
  40ee24:	d117      	bne.n	40ee56 <__mdiff+0x42>
  40ee26:	0089      	lsls	r1, r1, #2
  40ee28:	f106 0514 	add.w	r5, r6, #20
  40ee2c:	f102 0e14 	add.w	lr, r2, #20
  40ee30:	186b      	adds	r3, r5, r1
  40ee32:	4471      	add	r1, lr
  40ee34:	e001      	b.n	40ee3a <__mdiff+0x26>
  40ee36:	429d      	cmp	r5, r3
  40ee38:	d25c      	bcs.n	40eef4 <__mdiff+0xe0>
  40ee3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40ee3e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40ee42:	42a2      	cmp	r2, r4
  40ee44:	d0f7      	beq.n	40ee36 <__mdiff+0x22>
  40ee46:	d25e      	bcs.n	40ef06 <__mdiff+0xf2>
  40ee48:	4633      	mov	r3, r6
  40ee4a:	462c      	mov	r4, r5
  40ee4c:	4646      	mov	r6, r8
  40ee4e:	4675      	mov	r5, lr
  40ee50:	4698      	mov	r8, r3
  40ee52:	2701      	movs	r7, #1
  40ee54:	e005      	b.n	40ee62 <__mdiff+0x4e>
  40ee56:	db58      	blt.n	40ef0a <__mdiff+0xf6>
  40ee58:	f106 0514 	add.w	r5, r6, #20
  40ee5c:	f108 0414 	add.w	r4, r8, #20
  40ee60:	2700      	movs	r7, #0
  40ee62:	6871      	ldr	r1, [r6, #4]
  40ee64:	f7ff fdbc 	bl	40e9e0 <_Balloc>
  40ee68:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ee6c:	6936      	ldr	r6, [r6, #16]
  40ee6e:	60c7      	str	r7, [r0, #12]
  40ee70:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40ee74:	46a6      	mov	lr, r4
  40ee76:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40ee7a:	f100 0414 	add.w	r4, r0, #20
  40ee7e:	2300      	movs	r3, #0
  40ee80:	f85e 1b04 	ldr.w	r1, [lr], #4
  40ee84:	f855 8b04 	ldr.w	r8, [r5], #4
  40ee88:	b28a      	uxth	r2, r1
  40ee8a:	fa13 f388 	uxtah	r3, r3, r8
  40ee8e:	0c09      	lsrs	r1, r1, #16
  40ee90:	1a9a      	subs	r2, r3, r2
  40ee92:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40ee96:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ee9a:	b292      	uxth	r2, r2
  40ee9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40eea0:	45f4      	cmp	ip, lr
  40eea2:	f844 2b04 	str.w	r2, [r4], #4
  40eea6:	ea4f 4323 	mov.w	r3, r3, asr #16
  40eeaa:	d8e9      	bhi.n	40ee80 <__mdiff+0x6c>
  40eeac:	42af      	cmp	r7, r5
  40eeae:	d917      	bls.n	40eee0 <__mdiff+0xcc>
  40eeb0:	46a4      	mov	ip, r4
  40eeb2:	46ae      	mov	lr, r5
  40eeb4:	f85e 2b04 	ldr.w	r2, [lr], #4
  40eeb8:	fa13 f382 	uxtah	r3, r3, r2
  40eebc:	1419      	asrs	r1, r3, #16
  40eebe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40eec2:	b29b      	uxth	r3, r3
  40eec4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40eec8:	4577      	cmp	r7, lr
  40eeca:	f84c 2b04 	str.w	r2, [ip], #4
  40eece:	ea4f 4321 	mov.w	r3, r1, asr #16
  40eed2:	d8ef      	bhi.n	40eeb4 <__mdiff+0xa0>
  40eed4:	43ed      	mvns	r5, r5
  40eed6:	442f      	add	r7, r5
  40eed8:	f027 0703 	bic.w	r7, r7, #3
  40eedc:	3704      	adds	r7, #4
  40eede:	443c      	add	r4, r7
  40eee0:	3c04      	subs	r4, #4
  40eee2:	b922      	cbnz	r2, 40eeee <__mdiff+0xda>
  40eee4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40eee8:	3e01      	subs	r6, #1
  40eeea:	2b00      	cmp	r3, #0
  40eeec:	d0fa      	beq.n	40eee4 <__mdiff+0xd0>
  40eeee:	6106      	str	r6, [r0, #16]
  40eef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eef4:	2100      	movs	r1, #0
  40eef6:	f7ff fd73 	bl	40e9e0 <_Balloc>
  40eefa:	2201      	movs	r2, #1
  40eefc:	2300      	movs	r3, #0
  40eefe:	6102      	str	r2, [r0, #16]
  40ef00:	6143      	str	r3, [r0, #20]
  40ef02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ef06:	4674      	mov	r4, lr
  40ef08:	e7ab      	b.n	40ee62 <__mdiff+0x4e>
  40ef0a:	4633      	mov	r3, r6
  40ef0c:	f106 0414 	add.w	r4, r6, #20
  40ef10:	f102 0514 	add.w	r5, r2, #20
  40ef14:	4616      	mov	r6, r2
  40ef16:	2701      	movs	r7, #1
  40ef18:	4698      	mov	r8, r3
  40ef1a:	e7a2      	b.n	40ee62 <__mdiff+0x4e>

0040ef1c <__d2b>:
  40ef1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ef20:	b082      	sub	sp, #8
  40ef22:	2101      	movs	r1, #1
  40ef24:	461c      	mov	r4, r3
  40ef26:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40ef2a:	4615      	mov	r5, r2
  40ef2c:	9e08      	ldr	r6, [sp, #32]
  40ef2e:	f7ff fd57 	bl	40e9e0 <_Balloc>
  40ef32:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40ef36:	4680      	mov	r8, r0
  40ef38:	b10f      	cbz	r7, 40ef3e <__d2b+0x22>
  40ef3a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40ef3e:	9401      	str	r4, [sp, #4]
  40ef40:	b31d      	cbz	r5, 40ef8a <__d2b+0x6e>
  40ef42:	a802      	add	r0, sp, #8
  40ef44:	f840 5d08 	str.w	r5, [r0, #-8]!
  40ef48:	f7ff fdda 	bl	40eb00 <__lo0bits>
  40ef4c:	2800      	cmp	r0, #0
  40ef4e:	d134      	bne.n	40efba <__d2b+0x9e>
  40ef50:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ef54:	f8c8 2014 	str.w	r2, [r8, #20]
  40ef58:	2b00      	cmp	r3, #0
  40ef5a:	bf0c      	ite	eq
  40ef5c:	2101      	moveq	r1, #1
  40ef5e:	2102      	movne	r1, #2
  40ef60:	f8c8 3018 	str.w	r3, [r8, #24]
  40ef64:	f8c8 1010 	str.w	r1, [r8, #16]
  40ef68:	b9df      	cbnz	r7, 40efa2 <__d2b+0x86>
  40ef6a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40ef6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40ef72:	6030      	str	r0, [r6, #0]
  40ef74:	6918      	ldr	r0, [r3, #16]
  40ef76:	f7ff fda3 	bl	40eac0 <__hi0bits>
  40ef7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ef7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40ef80:	6018      	str	r0, [r3, #0]
  40ef82:	4640      	mov	r0, r8
  40ef84:	b002      	add	sp, #8
  40ef86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ef8a:	a801      	add	r0, sp, #4
  40ef8c:	f7ff fdb8 	bl	40eb00 <__lo0bits>
  40ef90:	9b01      	ldr	r3, [sp, #4]
  40ef92:	f8c8 3014 	str.w	r3, [r8, #20]
  40ef96:	2101      	movs	r1, #1
  40ef98:	3020      	adds	r0, #32
  40ef9a:	f8c8 1010 	str.w	r1, [r8, #16]
  40ef9e:	2f00      	cmp	r7, #0
  40efa0:	d0e3      	beq.n	40ef6a <__d2b+0x4e>
  40efa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40efa4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40efa8:	4407      	add	r7, r0
  40efaa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40efae:	6037      	str	r7, [r6, #0]
  40efb0:	6018      	str	r0, [r3, #0]
  40efb2:	4640      	mov	r0, r8
  40efb4:	b002      	add	sp, #8
  40efb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40efba:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40efbe:	f1c0 0220 	rsb	r2, r0, #32
  40efc2:	fa03 f202 	lsl.w	r2, r3, r2
  40efc6:	430a      	orrs	r2, r1
  40efc8:	40c3      	lsrs	r3, r0
  40efca:	9301      	str	r3, [sp, #4]
  40efcc:	f8c8 2014 	str.w	r2, [r8, #20]
  40efd0:	e7c2      	b.n	40ef58 <__d2b+0x3c>
  40efd2:	bf00      	nop

0040efd4 <_realloc_r>:
  40efd4:	2900      	cmp	r1, #0
  40efd6:	f000 8095 	beq.w	40f104 <_realloc_r+0x130>
  40efda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40efde:	460d      	mov	r5, r1
  40efe0:	4616      	mov	r6, r2
  40efe2:	b083      	sub	sp, #12
  40efe4:	4680      	mov	r8, r0
  40efe6:	f106 070b 	add.w	r7, r6, #11
  40efea:	f7ff fced 	bl	40e9c8 <__malloc_lock>
  40efee:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40eff2:	2f16      	cmp	r7, #22
  40eff4:	f02e 0403 	bic.w	r4, lr, #3
  40eff8:	f1a5 0908 	sub.w	r9, r5, #8
  40effc:	d83c      	bhi.n	40f078 <_realloc_r+0xa4>
  40effe:	2210      	movs	r2, #16
  40f000:	4617      	mov	r7, r2
  40f002:	42be      	cmp	r6, r7
  40f004:	d83d      	bhi.n	40f082 <_realloc_r+0xae>
  40f006:	4294      	cmp	r4, r2
  40f008:	da43      	bge.n	40f092 <_realloc_r+0xbe>
  40f00a:	4bc4      	ldr	r3, [pc, #784]	; (40f31c <_realloc_r+0x348>)
  40f00c:	6899      	ldr	r1, [r3, #8]
  40f00e:	eb09 0004 	add.w	r0, r9, r4
  40f012:	4288      	cmp	r0, r1
  40f014:	f000 80b4 	beq.w	40f180 <_realloc_r+0x1ac>
  40f018:	6843      	ldr	r3, [r0, #4]
  40f01a:	f023 0101 	bic.w	r1, r3, #1
  40f01e:	4401      	add	r1, r0
  40f020:	6849      	ldr	r1, [r1, #4]
  40f022:	07c9      	lsls	r1, r1, #31
  40f024:	d54c      	bpl.n	40f0c0 <_realloc_r+0xec>
  40f026:	f01e 0f01 	tst.w	lr, #1
  40f02a:	f000 809b 	beq.w	40f164 <_realloc_r+0x190>
  40f02e:	4631      	mov	r1, r6
  40f030:	4640      	mov	r0, r8
  40f032:	f7ff f919 	bl	40e268 <_malloc_r>
  40f036:	4606      	mov	r6, r0
  40f038:	2800      	cmp	r0, #0
  40f03a:	d03a      	beq.n	40f0b2 <_realloc_r+0xde>
  40f03c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40f040:	f023 0301 	bic.w	r3, r3, #1
  40f044:	444b      	add	r3, r9
  40f046:	f1a0 0208 	sub.w	r2, r0, #8
  40f04a:	429a      	cmp	r2, r3
  40f04c:	f000 8121 	beq.w	40f292 <_realloc_r+0x2be>
  40f050:	1f22      	subs	r2, r4, #4
  40f052:	2a24      	cmp	r2, #36	; 0x24
  40f054:	f200 8107 	bhi.w	40f266 <_realloc_r+0x292>
  40f058:	2a13      	cmp	r2, #19
  40f05a:	f200 80db 	bhi.w	40f214 <_realloc_r+0x240>
  40f05e:	4603      	mov	r3, r0
  40f060:	462a      	mov	r2, r5
  40f062:	6811      	ldr	r1, [r2, #0]
  40f064:	6019      	str	r1, [r3, #0]
  40f066:	6851      	ldr	r1, [r2, #4]
  40f068:	6059      	str	r1, [r3, #4]
  40f06a:	6892      	ldr	r2, [r2, #8]
  40f06c:	609a      	str	r2, [r3, #8]
  40f06e:	4629      	mov	r1, r5
  40f070:	4640      	mov	r0, r8
  40f072:	f7fe fdc9 	bl	40dc08 <_free_r>
  40f076:	e01c      	b.n	40f0b2 <_realloc_r+0xde>
  40f078:	f027 0707 	bic.w	r7, r7, #7
  40f07c:	2f00      	cmp	r7, #0
  40f07e:	463a      	mov	r2, r7
  40f080:	dabf      	bge.n	40f002 <_realloc_r+0x2e>
  40f082:	2600      	movs	r6, #0
  40f084:	230c      	movs	r3, #12
  40f086:	4630      	mov	r0, r6
  40f088:	f8c8 3000 	str.w	r3, [r8]
  40f08c:	b003      	add	sp, #12
  40f08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f092:	462e      	mov	r6, r5
  40f094:	1be3      	subs	r3, r4, r7
  40f096:	2b0f      	cmp	r3, #15
  40f098:	d81e      	bhi.n	40f0d8 <_realloc_r+0x104>
  40f09a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40f09e:	f003 0301 	and.w	r3, r3, #1
  40f0a2:	4323      	orrs	r3, r4
  40f0a4:	444c      	add	r4, r9
  40f0a6:	f8c9 3004 	str.w	r3, [r9, #4]
  40f0aa:	6863      	ldr	r3, [r4, #4]
  40f0ac:	f043 0301 	orr.w	r3, r3, #1
  40f0b0:	6063      	str	r3, [r4, #4]
  40f0b2:	4640      	mov	r0, r8
  40f0b4:	f7ff fc8e 	bl	40e9d4 <__malloc_unlock>
  40f0b8:	4630      	mov	r0, r6
  40f0ba:	b003      	add	sp, #12
  40f0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f0c0:	f023 0303 	bic.w	r3, r3, #3
  40f0c4:	18e1      	adds	r1, r4, r3
  40f0c6:	4291      	cmp	r1, r2
  40f0c8:	db1f      	blt.n	40f10a <_realloc_r+0x136>
  40f0ca:	68c3      	ldr	r3, [r0, #12]
  40f0cc:	6882      	ldr	r2, [r0, #8]
  40f0ce:	462e      	mov	r6, r5
  40f0d0:	60d3      	str	r3, [r2, #12]
  40f0d2:	460c      	mov	r4, r1
  40f0d4:	609a      	str	r2, [r3, #8]
  40f0d6:	e7dd      	b.n	40f094 <_realloc_r+0xc0>
  40f0d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40f0dc:	eb09 0107 	add.w	r1, r9, r7
  40f0e0:	f002 0201 	and.w	r2, r2, #1
  40f0e4:	444c      	add	r4, r9
  40f0e6:	f043 0301 	orr.w	r3, r3, #1
  40f0ea:	4317      	orrs	r7, r2
  40f0ec:	f8c9 7004 	str.w	r7, [r9, #4]
  40f0f0:	604b      	str	r3, [r1, #4]
  40f0f2:	6863      	ldr	r3, [r4, #4]
  40f0f4:	f043 0301 	orr.w	r3, r3, #1
  40f0f8:	3108      	adds	r1, #8
  40f0fa:	6063      	str	r3, [r4, #4]
  40f0fc:	4640      	mov	r0, r8
  40f0fe:	f7fe fd83 	bl	40dc08 <_free_r>
  40f102:	e7d6      	b.n	40f0b2 <_realloc_r+0xde>
  40f104:	4611      	mov	r1, r2
  40f106:	f7ff b8af 	b.w	40e268 <_malloc_r>
  40f10a:	f01e 0f01 	tst.w	lr, #1
  40f10e:	d18e      	bne.n	40f02e <_realloc_r+0x5a>
  40f110:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40f114:	eba9 0a01 	sub.w	sl, r9, r1
  40f118:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f11c:	f021 0103 	bic.w	r1, r1, #3
  40f120:	440b      	add	r3, r1
  40f122:	4423      	add	r3, r4
  40f124:	4293      	cmp	r3, r2
  40f126:	db25      	blt.n	40f174 <_realloc_r+0x1a0>
  40f128:	68c2      	ldr	r2, [r0, #12]
  40f12a:	6881      	ldr	r1, [r0, #8]
  40f12c:	4656      	mov	r6, sl
  40f12e:	60ca      	str	r2, [r1, #12]
  40f130:	6091      	str	r1, [r2, #8]
  40f132:	f8da 100c 	ldr.w	r1, [sl, #12]
  40f136:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40f13a:	1f22      	subs	r2, r4, #4
  40f13c:	2a24      	cmp	r2, #36	; 0x24
  40f13e:	60c1      	str	r1, [r0, #12]
  40f140:	6088      	str	r0, [r1, #8]
  40f142:	f200 8094 	bhi.w	40f26e <_realloc_r+0x29a>
  40f146:	2a13      	cmp	r2, #19
  40f148:	d96f      	bls.n	40f22a <_realloc_r+0x256>
  40f14a:	6829      	ldr	r1, [r5, #0]
  40f14c:	f8ca 1008 	str.w	r1, [sl, #8]
  40f150:	6869      	ldr	r1, [r5, #4]
  40f152:	f8ca 100c 	str.w	r1, [sl, #12]
  40f156:	2a1b      	cmp	r2, #27
  40f158:	f200 80a2 	bhi.w	40f2a0 <_realloc_r+0x2cc>
  40f15c:	3508      	adds	r5, #8
  40f15e:	f10a 0210 	add.w	r2, sl, #16
  40f162:	e063      	b.n	40f22c <_realloc_r+0x258>
  40f164:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40f168:	eba9 0a03 	sub.w	sl, r9, r3
  40f16c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f170:	f021 0103 	bic.w	r1, r1, #3
  40f174:	1863      	adds	r3, r4, r1
  40f176:	4293      	cmp	r3, r2
  40f178:	f6ff af59 	blt.w	40f02e <_realloc_r+0x5a>
  40f17c:	4656      	mov	r6, sl
  40f17e:	e7d8      	b.n	40f132 <_realloc_r+0x15e>
  40f180:	6841      	ldr	r1, [r0, #4]
  40f182:	f021 0b03 	bic.w	fp, r1, #3
  40f186:	44a3      	add	fp, r4
  40f188:	f107 0010 	add.w	r0, r7, #16
  40f18c:	4583      	cmp	fp, r0
  40f18e:	da56      	bge.n	40f23e <_realloc_r+0x26a>
  40f190:	f01e 0f01 	tst.w	lr, #1
  40f194:	f47f af4b 	bne.w	40f02e <_realloc_r+0x5a>
  40f198:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40f19c:	eba9 0a01 	sub.w	sl, r9, r1
  40f1a0:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f1a4:	f021 0103 	bic.w	r1, r1, #3
  40f1a8:	448b      	add	fp, r1
  40f1aa:	4558      	cmp	r0, fp
  40f1ac:	dce2      	bgt.n	40f174 <_realloc_r+0x1a0>
  40f1ae:	4656      	mov	r6, sl
  40f1b0:	f8da 100c 	ldr.w	r1, [sl, #12]
  40f1b4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40f1b8:	1f22      	subs	r2, r4, #4
  40f1ba:	2a24      	cmp	r2, #36	; 0x24
  40f1bc:	60c1      	str	r1, [r0, #12]
  40f1be:	6088      	str	r0, [r1, #8]
  40f1c0:	f200 808f 	bhi.w	40f2e2 <_realloc_r+0x30e>
  40f1c4:	2a13      	cmp	r2, #19
  40f1c6:	f240 808a 	bls.w	40f2de <_realloc_r+0x30a>
  40f1ca:	6829      	ldr	r1, [r5, #0]
  40f1cc:	f8ca 1008 	str.w	r1, [sl, #8]
  40f1d0:	6869      	ldr	r1, [r5, #4]
  40f1d2:	f8ca 100c 	str.w	r1, [sl, #12]
  40f1d6:	2a1b      	cmp	r2, #27
  40f1d8:	f200 808a 	bhi.w	40f2f0 <_realloc_r+0x31c>
  40f1dc:	3508      	adds	r5, #8
  40f1de:	f10a 0210 	add.w	r2, sl, #16
  40f1e2:	6829      	ldr	r1, [r5, #0]
  40f1e4:	6011      	str	r1, [r2, #0]
  40f1e6:	6869      	ldr	r1, [r5, #4]
  40f1e8:	6051      	str	r1, [r2, #4]
  40f1ea:	68a9      	ldr	r1, [r5, #8]
  40f1ec:	6091      	str	r1, [r2, #8]
  40f1ee:	eb0a 0107 	add.w	r1, sl, r7
  40f1f2:	ebab 0207 	sub.w	r2, fp, r7
  40f1f6:	f042 0201 	orr.w	r2, r2, #1
  40f1fa:	6099      	str	r1, [r3, #8]
  40f1fc:	604a      	str	r2, [r1, #4]
  40f1fe:	f8da 3004 	ldr.w	r3, [sl, #4]
  40f202:	f003 0301 	and.w	r3, r3, #1
  40f206:	431f      	orrs	r7, r3
  40f208:	4640      	mov	r0, r8
  40f20a:	f8ca 7004 	str.w	r7, [sl, #4]
  40f20e:	f7ff fbe1 	bl	40e9d4 <__malloc_unlock>
  40f212:	e751      	b.n	40f0b8 <_realloc_r+0xe4>
  40f214:	682b      	ldr	r3, [r5, #0]
  40f216:	6003      	str	r3, [r0, #0]
  40f218:	686b      	ldr	r3, [r5, #4]
  40f21a:	6043      	str	r3, [r0, #4]
  40f21c:	2a1b      	cmp	r2, #27
  40f21e:	d82d      	bhi.n	40f27c <_realloc_r+0x2a8>
  40f220:	f100 0308 	add.w	r3, r0, #8
  40f224:	f105 0208 	add.w	r2, r5, #8
  40f228:	e71b      	b.n	40f062 <_realloc_r+0x8e>
  40f22a:	4632      	mov	r2, r6
  40f22c:	6829      	ldr	r1, [r5, #0]
  40f22e:	6011      	str	r1, [r2, #0]
  40f230:	6869      	ldr	r1, [r5, #4]
  40f232:	6051      	str	r1, [r2, #4]
  40f234:	68a9      	ldr	r1, [r5, #8]
  40f236:	6091      	str	r1, [r2, #8]
  40f238:	461c      	mov	r4, r3
  40f23a:	46d1      	mov	r9, sl
  40f23c:	e72a      	b.n	40f094 <_realloc_r+0xc0>
  40f23e:	eb09 0107 	add.w	r1, r9, r7
  40f242:	ebab 0b07 	sub.w	fp, fp, r7
  40f246:	f04b 0201 	orr.w	r2, fp, #1
  40f24a:	6099      	str	r1, [r3, #8]
  40f24c:	604a      	str	r2, [r1, #4]
  40f24e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40f252:	f003 0301 	and.w	r3, r3, #1
  40f256:	431f      	orrs	r7, r3
  40f258:	4640      	mov	r0, r8
  40f25a:	f845 7c04 	str.w	r7, [r5, #-4]
  40f25e:	f7ff fbb9 	bl	40e9d4 <__malloc_unlock>
  40f262:	462e      	mov	r6, r5
  40f264:	e728      	b.n	40f0b8 <_realloc_r+0xe4>
  40f266:	4629      	mov	r1, r5
  40f268:	f7ff fb4a 	bl	40e900 <memmove>
  40f26c:	e6ff      	b.n	40f06e <_realloc_r+0x9a>
  40f26e:	4629      	mov	r1, r5
  40f270:	4630      	mov	r0, r6
  40f272:	461c      	mov	r4, r3
  40f274:	46d1      	mov	r9, sl
  40f276:	f7ff fb43 	bl	40e900 <memmove>
  40f27a:	e70b      	b.n	40f094 <_realloc_r+0xc0>
  40f27c:	68ab      	ldr	r3, [r5, #8]
  40f27e:	6083      	str	r3, [r0, #8]
  40f280:	68eb      	ldr	r3, [r5, #12]
  40f282:	60c3      	str	r3, [r0, #12]
  40f284:	2a24      	cmp	r2, #36	; 0x24
  40f286:	d017      	beq.n	40f2b8 <_realloc_r+0x2e4>
  40f288:	f100 0310 	add.w	r3, r0, #16
  40f28c:	f105 0210 	add.w	r2, r5, #16
  40f290:	e6e7      	b.n	40f062 <_realloc_r+0x8e>
  40f292:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40f296:	f023 0303 	bic.w	r3, r3, #3
  40f29a:	441c      	add	r4, r3
  40f29c:	462e      	mov	r6, r5
  40f29e:	e6f9      	b.n	40f094 <_realloc_r+0xc0>
  40f2a0:	68a9      	ldr	r1, [r5, #8]
  40f2a2:	f8ca 1010 	str.w	r1, [sl, #16]
  40f2a6:	68e9      	ldr	r1, [r5, #12]
  40f2a8:	f8ca 1014 	str.w	r1, [sl, #20]
  40f2ac:	2a24      	cmp	r2, #36	; 0x24
  40f2ae:	d00c      	beq.n	40f2ca <_realloc_r+0x2f6>
  40f2b0:	3510      	adds	r5, #16
  40f2b2:	f10a 0218 	add.w	r2, sl, #24
  40f2b6:	e7b9      	b.n	40f22c <_realloc_r+0x258>
  40f2b8:	692b      	ldr	r3, [r5, #16]
  40f2ba:	6103      	str	r3, [r0, #16]
  40f2bc:	696b      	ldr	r3, [r5, #20]
  40f2be:	6143      	str	r3, [r0, #20]
  40f2c0:	f105 0218 	add.w	r2, r5, #24
  40f2c4:	f100 0318 	add.w	r3, r0, #24
  40f2c8:	e6cb      	b.n	40f062 <_realloc_r+0x8e>
  40f2ca:	692a      	ldr	r2, [r5, #16]
  40f2cc:	f8ca 2018 	str.w	r2, [sl, #24]
  40f2d0:	696a      	ldr	r2, [r5, #20]
  40f2d2:	f8ca 201c 	str.w	r2, [sl, #28]
  40f2d6:	3518      	adds	r5, #24
  40f2d8:	f10a 0220 	add.w	r2, sl, #32
  40f2dc:	e7a6      	b.n	40f22c <_realloc_r+0x258>
  40f2de:	4632      	mov	r2, r6
  40f2e0:	e77f      	b.n	40f1e2 <_realloc_r+0x20e>
  40f2e2:	4629      	mov	r1, r5
  40f2e4:	4630      	mov	r0, r6
  40f2e6:	9301      	str	r3, [sp, #4]
  40f2e8:	f7ff fb0a 	bl	40e900 <memmove>
  40f2ec:	9b01      	ldr	r3, [sp, #4]
  40f2ee:	e77e      	b.n	40f1ee <_realloc_r+0x21a>
  40f2f0:	68a9      	ldr	r1, [r5, #8]
  40f2f2:	f8ca 1010 	str.w	r1, [sl, #16]
  40f2f6:	68e9      	ldr	r1, [r5, #12]
  40f2f8:	f8ca 1014 	str.w	r1, [sl, #20]
  40f2fc:	2a24      	cmp	r2, #36	; 0x24
  40f2fe:	d003      	beq.n	40f308 <_realloc_r+0x334>
  40f300:	3510      	adds	r5, #16
  40f302:	f10a 0218 	add.w	r2, sl, #24
  40f306:	e76c      	b.n	40f1e2 <_realloc_r+0x20e>
  40f308:	692a      	ldr	r2, [r5, #16]
  40f30a:	f8ca 2018 	str.w	r2, [sl, #24]
  40f30e:	696a      	ldr	r2, [r5, #20]
  40f310:	f8ca 201c 	str.w	r2, [sl, #28]
  40f314:	3518      	adds	r5, #24
  40f316:	f10a 0220 	add.w	r2, sl, #32
  40f31a:	e762      	b.n	40f1e2 <_realloc_r+0x20e>
  40f31c:	20400618 	.word	0x20400618

0040f320 <_sbrk_r>:
  40f320:	b538      	push	{r3, r4, r5, lr}
  40f322:	4c07      	ldr	r4, [pc, #28]	; (40f340 <_sbrk_r+0x20>)
  40f324:	2300      	movs	r3, #0
  40f326:	4605      	mov	r5, r0
  40f328:	4608      	mov	r0, r1
  40f32a:	6023      	str	r3, [r4, #0]
  40f32c:	f7f9 fc0c 	bl	408b48 <_sbrk>
  40f330:	1c43      	adds	r3, r0, #1
  40f332:	d000      	beq.n	40f336 <_sbrk_r+0x16>
  40f334:	bd38      	pop	{r3, r4, r5, pc}
  40f336:	6823      	ldr	r3, [r4, #0]
  40f338:	2b00      	cmp	r3, #0
  40f33a:	d0fb      	beq.n	40f334 <_sbrk_r+0x14>
  40f33c:	602b      	str	r3, [r5, #0]
  40f33e:	bd38      	pop	{r3, r4, r5, pc}
  40f340:	20410a54 	.word	0x20410a54

0040f344 <__sread>:
  40f344:	b510      	push	{r4, lr}
  40f346:	460c      	mov	r4, r1
  40f348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f34c:	f000 fb18 	bl	40f980 <_read_r>
  40f350:	2800      	cmp	r0, #0
  40f352:	db03      	blt.n	40f35c <__sread+0x18>
  40f354:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40f356:	4403      	add	r3, r0
  40f358:	6523      	str	r3, [r4, #80]	; 0x50
  40f35a:	bd10      	pop	{r4, pc}
  40f35c:	89a3      	ldrh	r3, [r4, #12]
  40f35e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40f362:	81a3      	strh	r3, [r4, #12]
  40f364:	bd10      	pop	{r4, pc}
  40f366:	bf00      	nop

0040f368 <__swrite>:
  40f368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f36c:	4616      	mov	r6, r2
  40f36e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40f372:	461f      	mov	r7, r3
  40f374:	05d3      	lsls	r3, r2, #23
  40f376:	460c      	mov	r4, r1
  40f378:	4605      	mov	r5, r0
  40f37a:	d507      	bpl.n	40f38c <__swrite+0x24>
  40f37c:	2200      	movs	r2, #0
  40f37e:	2302      	movs	r3, #2
  40f380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f384:	f000 fae6 	bl	40f954 <_lseek_r>
  40f388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f38c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40f390:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40f394:	81a2      	strh	r2, [r4, #12]
  40f396:	463b      	mov	r3, r7
  40f398:	4632      	mov	r2, r6
  40f39a:	4628      	mov	r0, r5
  40f39c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40f3a0:	f000 b996 	b.w	40f6d0 <_write_r>

0040f3a4 <__sseek>:
  40f3a4:	b510      	push	{r4, lr}
  40f3a6:	460c      	mov	r4, r1
  40f3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f3ac:	f000 fad2 	bl	40f954 <_lseek_r>
  40f3b0:	89a3      	ldrh	r3, [r4, #12]
  40f3b2:	1c42      	adds	r2, r0, #1
  40f3b4:	bf0e      	itee	eq
  40f3b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40f3ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40f3be:	6520      	strne	r0, [r4, #80]	; 0x50
  40f3c0:	81a3      	strh	r3, [r4, #12]
  40f3c2:	bd10      	pop	{r4, pc}

0040f3c4 <__sclose>:
  40f3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f3c8:	f000 ba2a 	b.w	40f820 <_close_r>

0040f3cc <strchr>:
  40f3cc:	b2c9      	uxtb	r1, r1
  40f3ce:	2900      	cmp	r1, #0
  40f3d0:	d041      	beq.n	40f456 <strchr+0x8a>
  40f3d2:	0782      	lsls	r2, r0, #30
  40f3d4:	b4f0      	push	{r4, r5, r6, r7}
  40f3d6:	d067      	beq.n	40f4a8 <strchr+0xdc>
  40f3d8:	7803      	ldrb	r3, [r0, #0]
  40f3da:	2b00      	cmp	r3, #0
  40f3dc:	d068      	beq.n	40f4b0 <strchr+0xe4>
  40f3de:	4299      	cmp	r1, r3
  40f3e0:	d037      	beq.n	40f452 <strchr+0x86>
  40f3e2:	1c43      	adds	r3, r0, #1
  40f3e4:	e004      	b.n	40f3f0 <strchr+0x24>
  40f3e6:	f813 0b01 	ldrb.w	r0, [r3], #1
  40f3ea:	b390      	cbz	r0, 40f452 <strchr+0x86>
  40f3ec:	4281      	cmp	r1, r0
  40f3ee:	d02f      	beq.n	40f450 <strchr+0x84>
  40f3f0:	079a      	lsls	r2, r3, #30
  40f3f2:	461c      	mov	r4, r3
  40f3f4:	d1f7      	bne.n	40f3e6 <strchr+0x1a>
  40f3f6:	6825      	ldr	r5, [r4, #0]
  40f3f8:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  40f3fc:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  40f400:	ea83 0605 	eor.w	r6, r3, r5
  40f404:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40f408:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  40f40c:	ea20 0006 	bic.w	r0, r0, r6
  40f410:	ea22 0205 	bic.w	r2, r2, r5
  40f414:	4302      	orrs	r2, r0
  40f416:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40f41a:	d111      	bne.n	40f440 <strchr+0x74>
  40f41c:	4620      	mov	r0, r4
  40f41e:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40f422:	ea83 0706 	eor.w	r7, r3, r6
  40f426:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40f42a:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  40f42e:	ea25 0507 	bic.w	r5, r5, r7
  40f432:	ea22 0206 	bic.w	r2, r2, r6
  40f436:	432a      	orrs	r2, r5
  40f438:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40f43c:	d0ef      	beq.n	40f41e <strchr+0x52>
  40f43e:	4604      	mov	r4, r0
  40f440:	7820      	ldrb	r0, [r4, #0]
  40f442:	b918      	cbnz	r0, 40f44c <strchr+0x80>
  40f444:	e005      	b.n	40f452 <strchr+0x86>
  40f446:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40f44a:	b110      	cbz	r0, 40f452 <strchr+0x86>
  40f44c:	4281      	cmp	r1, r0
  40f44e:	d1fa      	bne.n	40f446 <strchr+0x7a>
  40f450:	4620      	mov	r0, r4
  40f452:	bcf0      	pop	{r4, r5, r6, r7}
  40f454:	4770      	bx	lr
  40f456:	0783      	lsls	r3, r0, #30
  40f458:	d024      	beq.n	40f4a4 <strchr+0xd8>
  40f45a:	7803      	ldrb	r3, [r0, #0]
  40f45c:	2b00      	cmp	r3, #0
  40f45e:	d0f9      	beq.n	40f454 <strchr+0x88>
  40f460:	1c43      	adds	r3, r0, #1
  40f462:	e003      	b.n	40f46c <strchr+0xa0>
  40f464:	7802      	ldrb	r2, [r0, #0]
  40f466:	3301      	adds	r3, #1
  40f468:	2a00      	cmp	r2, #0
  40f46a:	d0f3      	beq.n	40f454 <strchr+0x88>
  40f46c:	0799      	lsls	r1, r3, #30
  40f46e:	4618      	mov	r0, r3
  40f470:	d1f8      	bne.n	40f464 <strchr+0x98>
  40f472:	6819      	ldr	r1, [r3, #0]
  40f474:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40f478:	ea22 0201 	bic.w	r2, r2, r1
  40f47c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40f480:	d108      	bne.n	40f494 <strchr+0xc8>
  40f482:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40f486:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40f48a:	ea22 0201 	bic.w	r2, r2, r1
  40f48e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40f492:	d0f6      	beq.n	40f482 <strchr+0xb6>
  40f494:	781a      	ldrb	r2, [r3, #0]
  40f496:	4618      	mov	r0, r3
  40f498:	b142      	cbz	r2, 40f4ac <strchr+0xe0>
  40f49a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40f49e:	2b00      	cmp	r3, #0
  40f4a0:	d1fb      	bne.n	40f49a <strchr+0xce>
  40f4a2:	4770      	bx	lr
  40f4a4:	4603      	mov	r3, r0
  40f4a6:	e7e4      	b.n	40f472 <strchr+0xa6>
  40f4a8:	4604      	mov	r4, r0
  40f4aa:	e7a4      	b.n	40f3f6 <strchr+0x2a>
  40f4ac:	4618      	mov	r0, r3
  40f4ae:	4770      	bx	lr
  40f4b0:	4618      	mov	r0, r3
  40f4b2:	e7ce      	b.n	40f452 <strchr+0x86>

0040f4b4 <__ssprint_r>:
  40f4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f4b8:	6893      	ldr	r3, [r2, #8]
  40f4ba:	b083      	sub	sp, #12
  40f4bc:	4690      	mov	r8, r2
  40f4be:	2b00      	cmp	r3, #0
  40f4c0:	d070      	beq.n	40f5a4 <__ssprint_r+0xf0>
  40f4c2:	4682      	mov	sl, r0
  40f4c4:	460c      	mov	r4, r1
  40f4c6:	6817      	ldr	r7, [r2, #0]
  40f4c8:	688d      	ldr	r5, [r1, #8]
  40f4ca:	6808      	ldr	r0, [r1, #0]
  40f4cc:	e042      	b.n	40f554 <__ssprint_r+0xa0>
  40f4ce:	89a3      	ldrh	r3, [r4, #12]
  40f4d0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40f4d4:	d02e      	beq.n	40f534 <__ssprint_r+0x80>
  40f4d6:	6965      	ldr	r5, [r4, #20]
  40f4d8:	6921      	ldr	r1, [r4, #16]
  40f4da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40f4de:	eba0 0b01 	sub.w	fp, r0, r1
  40f4e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40f4e6:	f10b 0001 	add.w	r0, fp, #1
  40f4ea:	106d      	asrs	r5, r5, #1
  40f4ec:	4430      	add	r0, r6
  40f4ee:	42a8      	cmp	r0, r5
  40f4f0:	462a      	mov	r2, r5
  40f4f2:	bf84      	itt	hi
  40f4f4:	4605      	movhi	r5, r0
  40f4f6:	462a      	movhi	r2, r5
  40f4f8:	055b      	lsls	r3, r3, #21
  40f4fa:	d538      	bpl.n	40f56e <__ssprint_r+0xba>
  40f4fc:	4611      	mov	r1, r2
  40f4fe:	4650      	mov	r0, sl
  40f500:	f7fe feb2 	bl	40e268 <_malloc_r>
  40f504:	2800      	cmp	r0, #0
  40f506:	d03c      	beq.n	40f582 <__ssprint_r+0xce>
  40f508:	465a      	mov	r2, fp
  40f50a:	6921      	ldr	r1, [r4, #16]
  40f50c:	9001      	str	r0, [sp, #4]
  40f50e:	f7fa f8f3 	bl	4096f8 <memcpy>
  40f512:	89a2      	ldrh	r2, [r4, #12]
  40f514:	9b01      	ldr	r3, [sp, #4]
  40f516:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40f51a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40f51e:	81a2      	strh	r2, [r4, #12]
  40f520:	eba5 020b 	sub.w	r2, r5, fp
  40f524:	eb03 000b 	add.w	r0, r3, fp
  40f528:	6165      	str	r5, [r4, #20]
  40f52a:	6123      	str	r3, [r4, #16]
  40f52c:	6020      	str	r0, [r4, #0]
  40f52e:	60a2      	str	r2, [r4, #8]
  40f530:	4635      	mov	r5, r6
  40f532:	46b3      	mov	fp, r6
  40f534:	465a      	mov	r2, fp
  40f536:	4649      	mov	r1, r9
  40f538:	f7ff f9e2 	bl	40e900 <memmove>
  40f53c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40f540:	68a2      	ldr	r2, [r4, #8]
  40f542:	6820      	ldr	r0, [r4, #0]
  40f544:	1b55      	subs	r5, r2, r5
  40f546:	4458      	add	r0, fp
  40f548:	1b9e      	subs	r6, r3, r6
  40f54a:	60a5      	str	r5, [r4, #8]
  40f54c:	6020      	str	r0, [r4, #0]
  40f54e:	f8c8 6008 	str.w	r6, [r8, #8]
  40f552:	b33e      	cbz	r6, 40f5a4 <__ssprint_r+0xf0>
  40f554:	687e      	ldr	r6, [r7, #4]
  40f556:	463b      	mov	r3, r7
  40f558:	3708      	adds	r7, #8
  40f55a:	2e00      	cmp	r6, #0
  40f55c:	d0fa      	beq.n	40f554 <__ssprint_r+0xa0>
  40f55e:	42ae      	cmp	r6, r5
  40f560:	f8d3 9000 	ldr.w	r9, [r3]
  40f564:	46ab      	mov	fp, r5
  40f566:	d2b2      	bcs.n	40f4ce <__ssprint_r+0x1a>
  40f568:	4635      	mov	r5, r6
  40f56a:	46b3      	mov	fp, r6
  40f56c:	e7e2      	b.n	40f534 <__ssprint_r+0x80>
  40f56e:	4650      	mov	r0, sl
  40f570:	f7ff fd30 	bl	40efd4 <_realloc_r>
  40f574:	4603      	mov	r3, r0
  40f576:	2800      	cmp	r0, #0
  40f578:	d1d2      	bne.n	40f520 <__ssprint_r+0x6c>
  40f57a:	6921      	ldr	r1, [r4, #16]
  40f57c:	4650      	mov	r0, sl
  40f57e:	f7fe fb43 	bl	40dc08 <_free_r>
  40f582:	230c      	movs	r3, #12
  40f584:	f8ca 3000 	str.w	r3, [sl]
  40f588:	89a3      	ldrh	r3, [r4, #12]
  40f58a:	2200      	movs	r2, #0
  40f58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f590:	f04f 30ff 	mov.w	r0, #4294967295
  40f594:	81a3      	strh	r3, [r4, #12]
  40f596:	f8c8 2008 	str.w	r2, [r8, #8]
  40f59a:	f8c8 2004 	str.w	r2, [r8, #4]
  40f59e:	b003      	add	sp, #12
  40f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f5a4:	2000      	movs	r0, #0
  40f5a6:	f8c8 0004 	str.w	r0, [r8, #4]
  40f5aa:	b003      	add	sp, #12
  40f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040f5b0 <__swbuf_r>:
  40f5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f5b2:	460d      	mov	r5, r1
  40f5b4:	4614      	mov	r4, r2
  40f5b6:	4606      	mov	r6, r0
  40f5b8:	b110      	cbz	r0, 40f5c0 <__swbuf_r+0x10>
  40f5ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f5bc:	2b00      	cmp	r3, #0
  40f5be:	d04b      	beq.n	40f658 <__swbuf_r+0xa8>
  40f5c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f5c4:	69a3      	ldr	r3, [r4, #24]
  40f5c6:	60a3      	str	r3, [r4, #8]
  40f5c8:	b291      	uxth	r1, r2
  40f5ca:	0708      	lsls	r0, r1, #28
  40f5cc:	d539      	bpl.n	40f642 <__swbuf_r+0x92>
  40f5ce:	6923      	ldr	r3, [r4, #16]
  40f5d0:	2b00      	cmp	r3, #0
  40f5d2:	d036      	beq.n	40f642 <__swbuf_r+0x92>
  40f5d4:	b2ed      	uxtb	r5, r5
  40f5d6:	0489      	lsls	r1, r1, #18
  40f5d8:	462f      	mov	r7, r5
  40f5da:	d515      	bpl.n	40f608 <__swbuf_r+0x58>
  40f5dc:	6822      	ldr	r2, [r4, #0]
  40f5de:	6961      	ldr	r1, [r4, #20]
  40f5e0:	1ad3      	subs	r3, r2, r3
  40f5e2:	428b      	cmp	r3, r1
  40f5e4:	da1c      	bge.n	40f620 <__swbuf_r+0x70>
  40f5e6:	3301      	adds	r3, #1
  40f5e8:	68a1      	ldr	r1, [r4, #8]
  40f5ea:	1c50      	adds	r0, r2, #1
  40f5ec:	3901      	subs	r1, #1
  40f5ee:	60a1      	str	r1, [r4, #8]
  40f5f0:	6020      	str	r0, [r4, #0]
  40f5f2:	7015      	strb	r5, [r2, #0]
  40f5f4:	6962      	ldr	r2, [r4, #20]
  40f5f6:	429a      	cmp	r2, r3
  40f5f8:	d01a      	beq.n	40f630 <__swbuf_r+0x80>
  40f5fa:	89a3      	ldrh	r3, [r4, #12]
  40f5fc:	07db      	lsls	r3, r3, #31
  40f5fe:	d501      	bpl.n	40f604 <__swbuf_r+0x54>
  40f600:	2d0a      	cmp	r5, #10
  40f602:	d015      	beq.n	40f630 <__swbuf_r+0x80>
  40f604:	4638      	mov	r0, r7
  40f606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f608:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40f60a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40f60e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40f612:	81a2      	strh	r2, [r4, #12]
  40f614:	6822      	ldr	r2, [r4, #0]
  40f616:	6661      	str	r1, [r4, #100]	; 0x64
  40f618:	6961      	ldr	r1, [r4, #20]
  40f61a:	1ad3      	subs	r3, r2, r3
  40f61c:	428b      	cmp	r3, r1
  40f61e:	dbe2      	blt.n	40f5e6 <__swbuf_r+0x36>
  40f620:	4621      	mov	r1, r4
  40f622:	4630      	mov	r0, r6
  40f624:	f7fe f972 	bl	40d90c <_fflush_r>
  40f628:	b940      	cbnz	r0, 40f63c <__swbuf_r+0x8c>
  40f62a:	6822      	ldr	r2, [r4, #0]
  40f62c:	2301      	movs	r3, #1
  40f62e:	e7db      	b.n	40f5e8 <__swbuf_r+0x38>
  40f630:	4621      	mov	r1, r4
  40f632:	4630      	mov	r0, r6
  40f634:	f7fe f96a 	bl	40d90c <_fflush_r>
  40f638:	2800      	cmp	r0, #0
  40f63a:	d0e3      	beq.n	40f604 <__swbuf_r+0x54>
  40f63c:	f04f 37ff 	mov.w	r7, #4294967295
  40f640:	e7e0      	b.n	40f604 <__swbuf_r+0x54>
  40f642:	4621      	mov	r1, r4
  40f644:	4630      	mov	r0, r6
  40f646:	f7fd f88f 	bl	40c768 <__swsetup_r>
  40f64a:	2800      	cmp	r0, #0
  40f64c:	d1f6      	bne.n	40f63c <__swbuf_r+0x8c>
  40f64e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f652:	6923      	ldr	r3, [r4, #16]
  40f654:	b291      	uxth	r1, r2
  40f656:	e7bd      	b.n	40f5d4 <__swbuf_r+0x24>
  40f658:	f7fe f9b0 	bl	40d9bc <__sinit>
  40f65c:	e7b0      	b.n	40f5c0 <__swbuf_r+0x10>
  40f65e:	bf00      	nop

0040f660 <_wcrtomb_r>:
  40f660:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f662:	4606      	mov	r6, r0
  40f664:	b085      	sub	sp, #20
  40f666:	461f      	mov	r7, r3
  40f668:	b189      	cbz	r1, 40f68e <_wcrtomb_r+0x2e>
  40f66a:	4c10      	ldr	r4, [pc, #64]	; (40f6ac <_wcrtomb_r+0x4c>)
  40f66c:	4d10      	ldr	r5, [pc, #64]	; (40f6b0 <_wcrtomb_r+0x50>)
  40f66e:	6824      	ldr	r4, [r4, #0]
  40f670:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40f672:	2c00      	cmp	r4, #0
  40f674:	bf08      	it	eq
  40f676:	462c      	moveq	r4, r5
  40f678:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40f67c:	47a0      	blx	r4
  40f67e:	1c43      	adds	r3, r0, #1
  40f680:	d103      	bne.n	40f68a <_wcrtomb_r+0x2a>
  40f682:	2200      	movs	r2, #0
  40f684:	238a      	movs	r3, #138	; 0x8a
  40f686:	603a      	str	r2, [r7, #0]
  40f688:	6033      	str	r3, [r6, #0]
  40f68a:	b005      	add	sp, #20
  40f68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f68e:	460c      	mov	r4, r1
  40f690:	4906      	ldr	r1, [pc, #24]	; (40f6ac <_wcrtomb_r+0x4c>)
  40f692:	4a07      	ldr	r2, [pc, #28]	; (40f6b0 <_wcrtomb_r+0x50>)
  40f694:	6809      	ldr	r1, [r1, #0]
  40f696:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40f698:	2900      	cmp	r1, #0
  40f69a:	bf08      	it	eq
  40f69c:	4611      	moveq	r1, r2
  40f69e:	4622      	mov	r2, r4
  40f6a0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40f6a4:	a901      	add	r1, sp, #4
  40f6a6:	47a0      	blx	r4
  40f6a8:	e7e9      	b.n	40f67e <_wcrtomb_r+0x1e>
  40f6aa:	bf00      	nop
  40f6ac:	20400078 	.word	0x20400078
  40f6b0:	204004ac 	.word	0x204004ac

0040f6b4 <__ascii_wctomb>:
  40f6b4:	b121      	cbz	r1, 40f6c0 <__ascii_wctomb+0xc>
  40f6b6:	2aff      	cmp	r2, #255	; 0xff
  40f6b8:	d804      	bhi.n	40f6c4 <__ascii_wctomb+0x10>
  40f6ba:	700a      	strb	r2, [r1, #0]
  40f6bc:	2001      	movs	r0, #1
  40f6be:	4770      	bx	lr
  40f6c0:	4608      	mov	r0, r1
  40f6c2:	4770      	bx	lr
  40f6c4:	238a      	movs	r3, #138	; 0x8a
  40f6c6:	6003      	str	r3, [r0, #0]
  40f6c8:	f04f 30ff 	mov.w	r0, #4294967295
  40f6cc:	4770      	bx	lr
  40f6ce:	bf00      	nop

0040f6d0 <_write_r>:
  40f6d0:	b570      	push	{r4, r5, r6, lr}
  40f6d2:	460d      	mov	r5, r1
  40f6d4:	4c08      	ldr	r4, [pc, #32]	; (40f6f8 <_write_r+0x28>)
  40f6d6:	4611      	mov	r1, r2
  40f6d8:	4606      	mov	r6, r0
  40f6da:	461a      	mov	r2, r3
  40f6dc:	4628      	mov	r0, r5
  40f6de:	2300      	movs	r3, #0
  40f6e0:	6023      	str	r3, [r4, #0]
  40f6e2:	f7f8 faf5 	bl	407cd0 <_write>
  40f6e6:	1c43      	adds	r3, r0, #1
  40f6e8:	d000      	beq.n	40f6ec <_write_r+0x1c>
  40f6ea:	bd70      	pop	{r4, r5, r6, pc}
  40f6ec:	6823      	ldr	r3, [r4, #0]
  40f6ee:	2b00      	cmp	r3, #0
  40f6f0:	d0fb      	beq.n	40f6ea <_write_r+0x1a>
  40f6f2:	6033      	str	r3, [r6, #0]
  40f6f4:	bd70      	pop	{r4, r5, r6, pc}
  40f6f6:	bf00      	nop
  40f6f8:	20410a54 	.word	0x20410a54

0040f6fc <__register_exitproc>:
  40f6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40f700:	4d2c      	ldr	r5, [pc, #176]	; (40f7b4 <__register_exitproc+0xb8>)
  40f702:	4606      	mov	r6, r0
  40f704:	6828      	ldr	r0, [r5, #0]
  40f706:	4698      	mov	r8, r3
  40f708:	460f      	mov	r7, r1
  40f70a:	4691      	mov	r9, r2
  40f70c:	f7fe fd28 	bl	40e160 <__retarget_lock_acquire_recursive>
  40f710:	4b29      	ldr	r3, [pc, #164]	; (40f7b8 <__register_exitproc+0xbc>)
  40f712:	681c      	ldr	r4, [r3, #0]
  40f714:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40f718:	2b00      	cmp	r3, #0
  40f71a:	d03e      	beq.n	40f79a <__register_exitproc+0x9e>
  40f71c:	685a      	ldr	r2, [r3, #4]
  40f71e:	2a1f      	cmp	r2, #31
  40f720:	dc1c      	bgt.n	40f75c <__register_exitproc+0x60>
  40f722:	f102 0e01 	add.w	lr, r2, #1
  40f726:	b176      	cbz	r6, 40f746 <__register_exitproc+0x4a>
  40f728:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40f72c:	2401      	movs	r4, #1
  40f72e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40f732:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40f736:	4094      	lsls	r4, r2
  40f738:	4320      	orrs	r0, r4
  40f73a:	2e02      	cmp	r6, #2
  40f73c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40f740:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40f744:	d023      	beq.n	40f78e <__register_exitproc+0x92>
  40f746:	3202      	adds	r2, #2
  40f748:	f8c3 e004 	str.w	lr, [r3, #4]
  40f74c:	6828      	ldr	r0, [r5, #0]
  40f74e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40f752:	f7fe fd07 	bl	40e164 <__retarget_lock_release_recursive>
  40f756:	2000      	movs	r0, #0
  40f758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f75c:	4b17      	ldr	r3, [pc, #92]	; (40f7bc <__register_exitproc+0xc0>)
  40f75e:	b30b      	cbz	r3, 40f7a4 <__register_exitproc+0xa8>
  40f760:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40f764:	f7fe fd78 	bl	40e258 <malloc>
  40f768:	4603      	mov	r3, r0
  40f76a:	b1d8      	cbz	r0, 40f7a4 <__register_exitproc+0xa8>
  40f76c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40f770:	6002      	str	r2, [r0, #0]
  40f772:	2100      	movs	r1, #0
  40f774:	6041      	str	r1, [r0, #4]
  40f776:	460a      	mov	r2, r1
  40f778:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40f77c:	f04f 0e01 	mov.w	lr, #1
  40f780:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40f784:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40f788:	2e00      	cmp	r6, #0
  40f78a:	d0dc      	beq.n	40f746 <__register_exitproc+0x4a>
  40f78c:	e7cc      	b.n	40f728 <__register_exitproc+0x2c>
  40f78e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40f792:	430c      	orrs	r4, r1
  40f794:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40f798:	e7d5      	b.n	40f746 <__register_exitproc+0x4a>
  40f79a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40f79e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40f7a2:	e7bb      	b.n	40f71c <__register_exitproc+0x20>
  40f7a4:	6828      	ldr	r0, [r5, #0]
  40f7a6:	f7fe fcdd 	bl	40e164 <__retarget_lock_release_recursive>
  40f7aa:	f04f 30ff 	mov.w	r0, #4294967295
  40f7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f7b2:	bf00      	nop
  40f7b4:	204004a8 	.word	0x204004a8
  40f7b8:	00411cf0 	.word	0x00411cf0
  40f7bc:	0040e259 	.word	0x0040e259

0040f7c0 <_calloc_r>:
  40f7c0:	b510      	push	{r4, lr}
  40f7c2:	fb02 f101 	mul.w	r1, r2, r1
  40f7c6:	f7fe fd4f 	bl	40e268 <_malloc_r>
  40f7ca:	4604      	mov	r4, r0
  40f7cc:	b1d8      	cbz	r0, 40f806 <_calloc_r+0x46>
  40f7ce:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40f7d2:	f022 0203 	bic.w	r2, r2, #3
  40f7d6:	3a04      	subs	r2, #4
  40f7d8:	2a24      	cmp	r2, #36	; 0x24
  40f7da:	d818      	bhi.n	40f80e <_calloc_r+0x4e>
  40f7dc:	2a13      	cmp	r2, #19
  40f7de:	d914      	bls.n	40f80a <_calloc_r+0x4a>
  40f7e0:	2300      	movs	r3, #0
  40f7e2:	2a1b      	cmp	r2, #27
  40f7e4:	6003      	str	r3, [r0, #0]
  40f7e6:	6043      	str	r3, [r0, #4]
  40f7e8:	d916      	bls.n	40f818 <_calloc_r+0x58>
  40f7ea:	2a24      	cmp	r2, #36	; 0x24
  40f7ec:	6083      	str	r3, [r0, #8]
  40f7ee:	60c3      	str	r3, [r0, #12]
  40f7f0:	bf11      	iteee	ne
  40f7f2:	f100 0210 	addne.w	r2, r0, #16
  40f7f6:	6103      	streq	r3, [r0, #16]
  40f7f8:	6143      	streq	r3, [r0, #20]
  40f7fa:	f100 0218 	addeq.w	r2, r0, #24
  40f7fe:	2300      	movs	r3, #0
  40f800:	6013      	str	r3, [r2, #0]
  40f802:	6053      	str	r3, [r2, #4]
  40f804:	6093      	str	r3, [r2, #8]
  40f806:	4620      	mov	r0, r4
  40f808:	bd10      	pop	{r4, pc}
  40f80a:	4602      	mov	r2, r0
  40f80c:	e7f7      	b.n	40f7fe <_calloc_r+0x3e>
  40f80e:	2100      	movs	r1, #0
  40f810:	f7fa f80c 	bl	40982c <memset>
  40f814:	4620      	mov	r0, r4
  40f816:	bd10      	pop	{r4, pc}
  40f818:	f100 0208 	add.w	r2, r0, #8
  40f81c:	e7ef      	b.n	40f7fe <_calloc_r+0x3e>
  40f81e:	bf00      	nop

0040f820 <_close_r>:
  40f820:	b538      	push	{r3, r4, r5, lr}
  40f822:	4c07      	ldr	r4, [pc, #28]	; (40f840 <_close_r+0x20>)
  40f824:	2300      	movs	r3, #0
  40f826:	4605      	mov	r5, r0
  40f828:	4608      	mov	r0, r1
  40f82a:	6023      	str	r3, [r4, #0]
  40f82c:	f7f9 f9a8 	bl	408b80 <_close>
  40f830:	1c43      	adds	r3, r0, #1
  40f832:	d000      	beq.n	40f836 <_close_r+0x16>
  40f834:	bd38      	pop	{r3, r4, r5, pc}
  40f836:	6823      	ldr	r3, [r4, #0]
  40f838:	2b00      	cmp	r3, #0
  40f83a:	d0fb      	beq.n	40f834 <_close_r+0x14>
  40f83c:	602b      	str	r3, [r5, #0]
  40f83e:	bd38      	pop	{r3, r4, r5, pc}
  40f840:	20410a54 	.word	0x20410a54

0040f844 <_fclose_r>:
  40f844:	b570      	push	{r4, r5, r6, lr}
  40f846:	b159      	cbz	r1, 40f860 <_fclose_r+0x1c>
  40f848:	4605      	mov	r5, r0
  40f84a:	460c      	mov	r4, r1
  40f84c:	b110      	cbz	r0, 40f854 <_fclose_r+0x10>
  40f84e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f850:	2b00      	cmp	r3, #0
  40f852:	d03c      	beq.n	40f8ce <_fclose_r+0x8a>
  40f854:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40f856:	07d8      	lsls	r0, r3, #31
  40f858:	d505      	bpl.n	40f866 <_fclose_r+0x22>
  40f85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f85e:	b92b      	cbnz	r3, 40f86c <_fclose_r+0x28>
  40f860:	2600      	movs	r6, #0
  40f862:	4630      	mov	r0, r6
  40f864:	bd70      	pop	{r4, r5, r6, pc}
  40f866:	89a3      	ldrh	r3, [r4, #12]
  40f868:	0599      	lsls	r1, r3, #22
  40f86a:	d53c      	bpl.n	40f8e6 <_fclose_r+0xa2>
  40f86c:	4621      	mov	r1, r4
  40f86e:	4628      	mov	r0, r5
  40f870:	f7fd ffac 	bl	40d7cc <__sflush_r>
  40f874:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40f876:	4606      	mov	r6, r0
  40f878:	b133      	cbz	r3, 40f888 <_fclose_r+0x44>
  40f87a:	69e1      	ldr	r1, [r4, #28]
  40f87c:	4628      	mov	r0, r5
  40f87e:	4798      	blx	r3
  40f880:	2800      	cmp	r0, #0
  40f882:	bfb8      	it	lt
  40f884:	f04f 36ff 	movlt.w	r6, #4294967295
  40f888:	89a3      	ldrh	r3, [r4, #12]
  40f88a:	061a      	lsls	r2, r3, #24
  40f88c:	d422      	bmi.n	40f8d4 <_fclose_r+0x90>
  40f88e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40f890:	b141      	cbz	r1, 40f8a4 <_fclose_r+0x60>
  40f892:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40f896:	4299      	cmp	r1, r3
  40f898:	d002      	beq.n	40f8a0 <_fclose_r+0x5c>
  40f89a:	4628      	mov	r0, r5
  40f89c:	f7fe f9b4 	bl	40dc08 <_free_r>
  40f8a0:	2300      	movs	r3, #0
  40f8a2:	6323      	str	r3, [r4, #48]	; 0x30
  40f8a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40f8a6:	b121      	cbz	r1, 40f8b2 <_fclose_r+0x6e>
  40f8a8:	4628      	mov	r0, r5
  40f8aa:	f7fe f9ad 	bl	40dc08 <_free_r>
  40f8ae:	2300      	movs	r3, #0
  40f8b0:	6463      	str	r3, [r4, #68]	; 0x44
  40f8b2:	f7fe f8af 	bl	40da14 <__sfp_lock_acquire>
  40f8b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40f8b8:	2200      	movs	r2, #0
  40f8ba:	07db      	lsls	r3, r3, #31
  40f8bc:	81a2      	strh	r2, [r4, #12]
  40f8be:	d50e      	bpl.n	40f8de <_fclose_r+0x9a>
  40f8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f8c2:	f7fe fc4b 	bl	40e15c <__retarget_lock_close_recursive>
  40f8c6:	f7fe f8ab 	bl	40da20 <__sfp_lock_release>
  40f8ca:	4630      	mov	r0, r6
  40f8cc:	bd70      	pop	{r4, r5, r6, pc}
  40f8ce:	f7fe f875 	bl	40d9bc <__sinit>
  40f8d2:	e7bf      	b.n	40f854 <_fclose_r+0x10>
  40f8d4:	6921      	ldr	r1, [r4, #16]
  40f8d6:	4628      	mov	r0, r5
  40f8d8:	f7fe f996 	bl	40dc08 <_free_r>
  40f8dc:	e7d7      	b.n	40f88e <_fclose_r+0x4a>
  40f8de:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f8e0:	f7fe fc40 	bl	40e164 <__retarget_lock_release_recursive>
  40f8e4:	e7ec      	b.n	40f8c0 <_fclose_r+0x7c>
  40f8e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f8e8:	f7fe fc3a 	bl	40e160 <__retarget_lock_acquire_recursive>
  40f8ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f8f0:	2b00      	cmp	r3, #0
  40f8f2:	d1bb      	bne.n	40f86c <_fclose_r+0x28>
  40f8f4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40f8f6:	f016 0601 	ands.w	r6, r6, #1
  40f8fa:	d1b1      	bne.n	40f860 <_fclose_r+0x1c>
  40f8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f8fe:	f7fe fc31 	bl	40e164 <__retarget_lock_release_recursive>
  40f902:	4630      	mov	r0, r6
  40f904:	bd70      	pop	{r4, r5, r6, pc}
  40f906:	bf00      	nop

0040f908 <_fstat_r>:
  40f908:	b538      	push	{r3, r4, r5, lr}
  40f90a:	460b      	mov	r3, r1
  40f90c:	4c07      	ldr	r4, [pc, #28]	; (40f92c <_fstat_r+0x24>)
  40f90e:	4605      	mov	r5, r0
  40f910:	4611      	mov	r1, r2
  40f912:	4618      	mov	r0, r3
  40f914:	2300      	movs	r3, #0
  40f916:	6023      	str	r3, [r4, #0]
  40f918:	f7f9 f935 	bl	408b86 <_fstat>
  40f91c:	1c43      	adds	r3, r0, #1
  40f91e:	d000      	beq.n	40f922 <_fstat_r+0x1a>
  40f920:	bd38      	pop	{r3, r4, r5, pc}
  40f922:	6823      	ldr	r3, [r4, #0]
  40f924:	2b00      	cmp	r3, #0
  40f926:	d0fb      	beq.n	40f920 <_fstat_r+0x18>
  40f928:	602b      	str	r3, [r5, #0]
  40f92a:	bd38      	pop	{r3, r4, r5, pc}
  40f92c:	20410a54 	.word	0x20410a54

0040f930 <_isatty_r>:
  40f930:	b538      	push	{r3, r4, r5, lr}
  40f932:	4c07      	ldr	r4, [pc, #28]	; (40f950 <_isatty_r+0x20>)
  40f934:	2300      	movs	r3, #0
  40f936:	4605      	mov	r5, r0
  40f938:	4608      	mov	r0, r1
  40f93a:	6023      	str	r3, [r4, #0]
  40f93c:	f7f9 f928 	bl	408b90 <_isatty>
  40f940:	1c43      	adds	r3, r0, #1
  40f942:	d000      	beq.n	40f946 <_isatty_r+0x16>
  40f944:	bd38      	pop	{r3, r4, r5, pc}
  40f946:	6823      	ldr	r3, [r4, #0]
  40f948:	2b00      	cmp	r3, #0
  40f94a:	d0fb      	beq.n	40f944 <_isatty_r+0x14>
  40f94c:	602b      	str	r3, [r5, #0]
  40f94e:	bd38      	pop	{r3, r4, r5, pc}
  40f950:	20410a54 	.word	0x20410a54

0040f954 <_lseek_r>:
  40f954:	b570      	push	{r4, r5, r6, lr}
  40f956:	460d      	mov	r5, r1
  40f958:	4c08      	ldr	r4, [pc, #32]	; (40f97c <_lseek_r+0x28>)
  40f95a:	4611      	mov	r1, r2
  40f95c:	4606      	mov	r6, r0
  40f95e:	461a      	mov	r2, r3
  40f960:	4628      	mov	r0, r5
  40f962:	2300      	movs	r3, #0
  40f964:	6023      	str	r3, [r4, #0]
  40f966:	f7f9 f915 	bl	408b94 <_lseek>
  40f96a:	1c43      	adds	r3, r0, #1
  40f96c:	d000      	beq.n	40f970 <_lseek_r+0x1c>
  40f96e:	bd70      	pop	{r4, r5, r6, pc}
  40f970:	6823      	ldr	r3, [r4, #0]
  40f972:	2b00      	cmp	r3, #0
  40f974:	d0fb      	beq.n	40f96e <_lseek_r+0x1a>
  40f976:	6033      	str	r3, [r6, #0]
  40f978:	bd70      	pop	{r4, r5, r6, pc}
  40f97a:	bf00      	nop
  40f97c:	20410a54 	.word	0x20410a54

0040f980 <_read_r>:
  40f980:	b570      	push	{r4, r5, r6, lr}
  40f982:	460d      	mov	r5, r1
  40f984:	4c08      	ldr	r4, [pc, #32]	; (40f9a8 <_read_r+0x28>)
  40f986:	4611      	mov	r1, r2
  40f988:	4606      	mov	r6, r0
  40f98a:	461a      	mov	r2, r3
  40f98c:	4628      	mov	r0, r5
  40f98e:	2300      	movs	r3, #0
  40f990:	6023      	str	r3, [r4, #0]
  40f992:	f7f8 f97f 	bl	407c94 <_read>
  40f996:	1c43      	adds	r3, r0, #1
  40f998:	d000      	beq.n	40f99c <_read_r+0x1c>
  40f99a:	bd70      	pop	{r4, r5, r6, pc}
  40f99c:	6823      	ldr	r3, [r4, #0]
  40f99e:	2b00      	cmp	r3, #0
  40f9a0:	d0fb      	beq.n	40f99a <_read_r+0x1a>
  40f9a2:	6033      	str	r3, [r6, #0]
  40f9a4:	bd70      	pop	{r4, r5, r6, pc}
  40f9a6:	bf00      	nop
  40f9a8:	20410a54 	.word	0x20410a54

0040f9ac <__aeabi_drsub>:
  40f9ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40f9b0:	e002      	b.n	40f9b8 <__adddf3>
  40f9b2:	bf00      	nop

0040f9b4 <__aeabi_dsub>:
  40f9b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040f9b8 <__adddf3>:
  40f9b8:	b530      	push	{r4, r5, lr}
  40f9ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40f9be:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40f9c2:	ea94 0f05 	teq	r4, r5
  40f9c6:	bf08      	it	eq
  40f9c8:	ea90 0f02 	teqeq	r0, r2
  40f9cc:	bf1f      	itttt	ne
  40f9ce:	ea54 0c00 	orrsne.w	ip, r4, r0
  40f9d2:	ea55 0c02 	orrsne.w	ip, r5, r2
  40f9d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40f9da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40f9de:	f000 80e2 	beq.w	40fba6 <__adddf3+0x1ee>
  40f9e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40f9e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40f9ea:	bfb8      	it	lt
  40f9ec:	426d      	neglt	r5, r5
  40f9ee:	dd0c      	ble.n	40fa0a <__adddf3+0x52>
  40f9f0:	442c      	add	r4, r5
  40f9f2:	ea80 0202 	eor.w	r2, r0, r2
  40f9f6:	ea81 0303 	eor.w	r3, r1, r3
  40f9fa:	ea82 0000 	eor.w	r0, r2, r0
  40f9fe:	ea83 0101 	eor.w	r1, r3, r1
  40fa02:	ea80 0202 	eor.w	r2, r0, r2
  40fa06:	ea81 0303 	eor.w	r3, r1, r3
  40fa0a:	2d36      	cmp	r5, #54	; 0x36
  40fa0c:	bf88      	it	hi
  40fa0e:	bd30      	pophi	{r4, r5, pc}
  40fa10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40fa14:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40fa18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40fa1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40fa20:	d002      	beq.n	40fa28 <__adddf3+0x70>
  40fa22:	4240      	negs	r0, r0
  40fa24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40fa28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40fa2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40fa30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40fa34:	d002      	beq.n	40fa3c <__adddf3+0x84>
  40fa36:	4252      	negs	r2, r2
  40fa38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40fa3c:	ea94 0f05 	teq	r4, r5
  40fa40:	f000 80a7 	beq.w	40fb92 <__adddf3+0x1da>
  40fa44:	f1a4 0401 	sub.w	r4, r4, #1
  40fa48:	f1d5 0e20 	rsbs	lr, r5, #32
  40fa4c:	db0d      	blt.n	40fa6a <__adddf3+0xb2>
  40fa4e:	fa02 fc0e 	lsl.w	ip, r2, lr
  40fa52:	fa22 f205 	lsr.w	r2, r2, r5
  40fa56:	1880      	adds	r0, r0, r2
  40fa58:	f141 0100 	adc.w	r1, r1, #0
  40fa5c:	fa03 f20e 	lsl.w	r2, r3, lr
  40fa60:	1880      	adds	r0, r0, r2
  40fa62:	fa43 f305 	asr.w	r3, r3, r5
  40fa66:	4159      	adcs	r1, r3
  40fa68:	e00e      	b.n	40fa88 <__adddf3+0xd0>
  40fa6a:	f1a5 0520 	sub.w	r5, r5, #32
  40fa6e:	f10e 0e20 	add.w	lr, lr, #32
  40fa72:	2a01      	cmp	r2, #1
  40fa74:	fa03 fc0e 	lsl.w	ip, r3, lr
  40fa78:	bf28      	it	cs
  40fa7a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40fa7e:	fa43 f305 	asr.w	r3, r3, r5
  40fa82:	18c0      	adds	r0, r0, r3
  40fa84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40fa88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40fa8c:	d507      	bpl.n	40fa9e <__adddf3+0xe6>
  40fa8e:	f04f 0e00 	mov.w	lr, #0
  40fa92:	f1dc 0c00 	rsbs	ip, ip, #0
  40fa96:	eb7e 0000 	sbcs.w	r0, lr, r0
  40fa9a:	eb6e 0101 	sbc.w	r1, lr, r1
  40fa9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40faa2:	d31b      	bcc.n	40fadc <__adddf3+0x124>
  40faa4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40faa8:	d30c      	bcc.n	40fac4 <__adddf3+0x10c>
  40faaa:	0849      	lsrs	r1, r1, #1
  40faac:	ea5f 0030 	movs.w	r0, r0, rrx
  40fab0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40fab4:	f104 0401 	add.w	r4, r4, #1
  40fab8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40fabc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40fac0:	f080 809a 	bcs.w	40fbf8 <__adddf3+0x240>
  40fac4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40fac8:	bf08      	it	eq
  40faca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40face:	f150 0000 	adcs.w	r0, r0, #0
  40fad2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40fad6:	ea41 0105 	orr.w	r1, r1, r5
  40fada:	bd30      	pop	{r4, r5, pc}
  40fadc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40fae0:	4140      	adcs	r0, r0
  40fae2:	eb41 0101 	adc.w	r1, r1, r1
  40fae6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40faea:	f1a4 0401 	sub.w	r4, r4, #1
  40faee:	d1e9      	bne.n	40fac4 <__adddf3+0x10c>
  40faf0:	f091 0f00 	teq	r1, #0
  40faf4:	bf04      	itt	eq
  40faf6:	4601      	moveq	r1, r0
  40faf8:	2000      	moveq	r0, #0
  40fafa:	fab1 f381 	clz	r3, r1
  40fafe:	bf08      	it	eq
  40fb00:	3320      	addeq	r3, #32
  40fb02:	f1a3 030b 	sub.w	r3, r3, #11
  40fb06:	f1b3 0220 	subs.w	r2, r3, #32
  40fb0a:	da0c      	bge.n	40fb26 <__adddf3+0x16e>
  40fb0c:	320c      	adds	r2, #12
  40fb0e:	dd08      	ble.n	40fb22 <__adddf3+0x16a>
  40fb10:	f102 0c14 	add.w	ip, r2, #20
  40fb14:	f1c2 020c 	rsb	r2, r2, #12
  40fb18:	fa01 f00c 	lsl.w	r0, r1, ip
  40fb1c:	fa21 f102 	lsr.w	r1, r1, r2
  40fb20:	e00c      	b.n	40fb3c <__adddf3+0x184>
  40fb22:	f102 0214 	add.w	r2, r2, #20
  40fb26:	bfd8      	it	le
  40fb28:	f1c2 0c20 	rsble	ip, r2, #32
  40fb2c:	fa01 f102 	lsl.w	r1, r1, r2
  40fb30:	fa20 fc0c 	lsr.w	ip, r0, ip
  40fb34:	bfdc      	itt	le
  40fb36:	ea41 010c 	orrle.w	r1, r1, ip
  40fb3a:	4090      	lslle	r0, r2
  40fb3c:	1ae4      	subs	r4, r4, r3
  40fb3e:	bfa2      	ittt	ge
  40fb40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40fb44:	4329      	orrge	r1, r5
  40fb46:	bd30      	popge	{r4, r5, pc}
  40fb48:	ea6f 0404 	mvn.w	r4, r4
  40fb4c:	3c1f      	subs	r4, #31
  40fb4e:	da1c      	bge.n	40fb8a <__adddf3+0x1d2>
  40fb50:	340c      	adds	r4, #12
  40fb52:	dc0e      	bgt.n	40fb72 <__adddf3+0x1ba>
  40fb54:	f104 0414 	add.w	r4, r4, #20
  40fb58:	f1c4 0220 	rsb	r2, r4, #32
  40fb5c:	fa20 f004 	lsr.w	r0, r0, r4
  40fb60:	fa01 f302 	lsl.w	r3, r1, r2
  40fb64:	ea40 0003 	orr.w	r0, r0, r3
  40fb68:	fa21 f304 	lsr.w	r3, r1, r4
  40fb6c:	ea45 0103 	orr.w	r1, r5, r3
  40fb70:	bd30      	pop	{r4, r5, pc}
  40fb72:	f1c4 040c 	rsb	r4, r4, #12
  40fb76:	f1c4 0220 	rsb	r2, r4, #32
  40fb7a:	fa20 f002 	lsr.w	r0, r0, r2
  40fb7e:	fa01 f304 	lsl.w	r3, r1, r4
  40fb82:	ea40 0003 	orr.w	r0, r0, r3
  40fb86:	4629      	mov	r1, r5
  40fb88:	bd30      	pop	{r4, r5, pc}
  40fb8a:	fa21 f004 	lsr.w	r0, r1, r4
  40fb8e:	4629      	mov	r1, r5
  40fb90:	bd30      	pop	{r4, r5, pc}
  40fb92:	f094 0f00 	teq	r4, #0
  40fb96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40fb9a:	bf06      	itte	eq
  40fb9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40fba0:	3401      	addeq	r4, #1
  40fba2:	3d01      	subne	r5, #1
  40fba4:	e74e      	b.n	40fa44 <__adddf3+0x8c>
  40fba6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40fbaa:	bf18      	it	ne
  40fbac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40fbb0:	d029      	beq.n	40fc06 <__adddf3+0x24e>
  40fbb2:	ea94 0f05 	teq	r4, r5
  40fbb6:	bf08      	it	eq
  40fbb8:	ea90 0f02 	teqeq	r0, r2
  40fbbc:	d005      	beq.n	40fbca <__adddf3+0x212>
  40fbbe:	ea54 0c00 	orrs.w	ip, r4, r0
  40fbc2:	bf04      	itt	eq
  40fbc4:	4619      	moveq	r1, r3
  40fbc6:	4610      	moveq	r0, r2
  40fbc8:	bd30      	pop	{r4, r5, pc}
  40fbca:	ea91 0f03 	teq	r1, r3
  40fbce:	bf1e      	ittt	ne
  40fbd0:	2100      	movne	r1, #0
  40fbd2:	2000      	movne	r0, #0
  40fbd4:	bd30      	popne	{r4, r5, pc}
  40fbd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40fbda:	d105      	bne.n	40fbe8 <__adddf3+0x230>
  40fbdc:	0040      	lsls	r0, r0, #1
  40fbde:	4149      	adcs	r1, r1
  40fbe0:	bf28      	it	cs
  40fbe2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40fbe6:	bd30      	pop	{r4, r5, pc}
  40fbe8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40fbec:	bf3c      	itt	cc
  40fbee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40fbf2:	bd30      	popcc	{r4, r5, pc}
  40fbf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40fbf8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40fbfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40fc00:	f04f 0000 	mov.w	r0, #0
  40fc04:	bd30      	pop	{r4, r5, pc}
  40fc06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40fc0a:	bf1a      	itte	ne
  40fc0c:	4619      	movne	r1, r3
  40fc0e:	4610      	movne	r0, r2
  40fc10:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40fc14:	bf1c      	itt	ne
  40fc16:	460b      	movne	r3, r1
  40fc18:	4602      	movne	r2, r0
  40fc1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40fc1e:	bf06      	itte	eq
  40fc20:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40fc24:	ea91 0f03 	teqeq	r1, r3
  40fc28:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40fc2c:	bd30      	pop	{r4, r5, pc}
  40fc2e:	bf00      	nop

0040fc30 <__aeabi_ui2d>:
  40fc30:	f090 0f00 	teq	r0, #0
  40fc34:	bf04      	itt	eq
  40fc36:	2100      	moveq	r1, #0
  40fc38:	4770      	bxeq	lr
  40fc3a:	b530      	push	{r4, r5, lr}
  40fc3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40fc40:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40fc44:	f04f 0500 	mov.w	r5, #0
  40fc48:	f04f 0100 	mov.w	r1, #0
  40fc4c:	e750      	b.n	40faf0 <__adddf3+0x138>
  40fc4e:	bf00      	nop

0040fc50 <__aeabi_i2d>:
  40fc50:	f090 0f00 	teq	r0, #0
  40fc54:	bf04      	itt	eq
  40fc56:	2100      	moveq	r1, #0
  40fc58:	4770      	bxeq	lr
  40fc5a:	b530      	push	{r4, r5, lr}
  40fc5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40fc60:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40fc64:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40fc68:	bf48      	it	mi
  40fc6a:	4240      	negmi	r0, r0
  40fc6c:	f04f 0100 	mov.w	r1, #0
  40fc70:	e73e      	b.n	40faf0 <__adddf3+0x138>
  40fc72:	bf00      	nop

0040fc74 <__aeabi_f2d>:
  40fc74:	0042      	lsls	r2, r0, #1
  40fc76:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40fc7a:	ea4f 0131 	mov.w	r1, r1, rrx
  40fc7e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40fc82:	bf1f      	itttt	ne
  40fc84:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40fc88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40fc8c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40fc90:	4770      	bxne	lr
  40fc92:	f092 0f00 	teq	r2, #0
  40fc96:	bf14      	ite	ne
  40fc98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40fc9c:	4770      	bxeq	lr
  40fc9e:	b530      	push	{r4, r5, lr}
  40fca0:	f44f 7460 	mov.w	r4, #896	; 0x380
  40fca4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40fca8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40fcac:	e720      	b.n	40faf0 <__adddf3+0x138>
  40fcae:	bf00      	nop

0040fcb0 <__aeabi_ul2d>:
  40fcb0:	ea50 0201 	orrs.w	r2, r0, r1
  40fcb4:	bf08      	it	eq
  40fcb6:	4770      	bxeq	lr
  40fcb8:	b530      	push	{r4, r5, lr}
  40fcba:	f04f 0500 	mov.w	r5, #0
  40fcbe:	e00a      	b.n	40fcd6 <__aeabi_l2d+0x16>

0040fcc0 <__aeabi_l2d>:
  40fcc0:	ea50 0201 	orrs.w	r2, r0, r1
  40fcc4:	bf08      	it	eq
  40fcc6:	4770      	bxeq	lr
  40fcc8:	b530      	push	{r4, r5, lr}
  40fcca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40fcce:	d502      	bpl.n	40fcd6 <__aeabi_l2d+0x16>
  40fcd0:	4240      	negs	r0, r0
  40fcd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40fcd6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40fcda:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40fcde:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40fce2:	f43f aedc 	beq.w	40fa9e <__adddf3+0xe6>
  40fce6:	f04f 0203 	mov.w	r2, #3
  40fcea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40fcee:	bf18      	it	ne
  40fcf0:	3203      	addne	r2, #3
  40fcf2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40fcf6:	bf18      	it	ne
  40fcf8:	3203      	addne	r2, #3
  40fcfa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40fcfe:	f1c2 0320 	rsb	r3, r2, #32
  40fd02:	fa00 fc03 	lsl.w	ip, r0, r3
  40fd06:	fa20 f002 	lsr.w	r0, r0, r2
  40fd0a:	fa01 fe03 	lsl.w	lr, r1, r3
  40fd0e:	ea40 000e 	orr.w	r0, r0, lr
  40fd12:	fa21 f102 	lsr.w	r1, r1, r2
  40fd16:	4414      	add	r4, r2
  40fd18:	e6c1      	b.n	40fa9e <__adddf3+0xe6>
  40fd1a:	bf00      	nop

0040fd1c <__aeabi_dmul>:
  40fd1c:	b570      	push	{r4, r5, r6, lr}
  40fd1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40fd22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40fd26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40fd2a:	bf1d      	ittte	ne
  40fd2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40fd30:	ea94 0f0c 	teqne	r4, ip
  40fd34:	ea95 0f0c 	teqne	r5, ip
  40fd38:	f000 f8de 	bleq	40fef8 <__aeabi_dmul+0x1dc>
  40fd3c:	442c      	add	r4, r5
  40fd3e:	ea81 0603 	eor.w	r6, r1, r3
  40fd42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40fd46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40fd4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40fd4e:	bf18      	it	ne
  40fd50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40fd54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40fd58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40fd5c:	d038      	beq.n	40fdd0 <__aeabi_dmul+0xb4>
  40fd5e:	fba0 ce02 	umull	ip, lr, r0, r2
  40fd62:	f04f 0500 	mov.w	r5, #0
  40fd66:	fbe1 e502 	umlal	lr, r5, r1, r2
  40fd6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40fd6e:	fbe0 e503 	umlal	lr, r5, r0, r3
  40fd72:	f04f 0600 	mov.w	r6, #0
  40fd76:	fbe1 5603 	umlal	r5, r6, r1, r3
  40fd7a:	f09c 0f00 	teq	ip, #0
  40fd7e:	bf18      	it	ne
  40fd80:	f04e 0e01 	orrne.w	lr, lr, #1
  40fd84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40fd88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40fd8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40fd90:	d204      	bcs.n	40fd9c <__aeabi_dmul+0x80>
  40fd92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40fd96:	416d      	adcs	r5, r5
  40fd98:	eb46 0606 	adc.w	r6, r6, r6
  40fd9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40fda0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40fda4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40fda8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40fdac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40fdb0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40fdb4:	bf88      	it	hi
  40fdb6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40fdba:	d81e      	bhi.n	40fdfa <__aeabi_dmul+0xde>
  40fdbc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40fdc0:	bf08      	it	eq
  40fdc2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40fdc6:	f150 0000 	adcs.w	r0, r0, #0
  40fdca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40fdce:	bd70      	pop	{r4, r5, r6, pc}
  40fdd0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40fdd4:	ea46 0101 	orr.w	r1, r6, r1
  40fdd8:	ea40 0002 	orr.w	r0, r0, r2
  40fddc:	ea81 0103 	eor.w	r1, r1, r3
  40fde0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40fde4:	bfc2      	ittt	gt
  40fde6:	ebd4 050c 	rsbsgt	r5, r4, ip
  40fdea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40fdee:	bd70      	popgt	{r4, r5, r6, pc}
  40fdf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40fdf4:	f04f 0e00 	mov.w	lr, #0
  40fdf8:	3c01      	subs	r4, #1
  40fdfa:	f300 80ab 	bgt.w	40ff54 <__aeabi_dmul+0x238>
  40fdfe:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40fe02:	bfde      	ittt	le
  40fe04:	2000      	movle	r0, #0
  40fe06:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40fe0a:	bd70      	pople	{r4, r5, r6, pc}
  40fe0c:	f1c4 0400 	rsb	r4, r4, #0
  40fe10:	3c20      	subs	r4, #32
  40fe12:	da35      	bge.n	40fe80 <__aeabi_dmul+0x164>
  40fe14:	340c      	adds	r4, #12
  40fe16:	dc1b      	bgt.n	40fe50 <__aeabi_dmul+0x134>
  40fe18:	f104 0414 	add.w	r4, r4, #20
  40fe1c:	f1c4 0520 	rsb	r5, r4, #32
  40fe20:	fa00 f305 	lsl.w	r3, r0, r5
  40fe24:	fa20 f004 	lsr.w	r0, r0, r4
  40fe28:	fa01 f205 	lsl.w	r2, r1, r5
  40fe2c:	ea40 0002 	orr.w	r0, r0, r2
  40fe30:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40fe34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40fe38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40fe3c:	fa21 f604 	lsr.w	r6, r1, r4
  40fe40:	eb42 0106 	adc.w	r1, r2, r6
  40fe44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40fe48:	bf08      	it	eq
  40fe4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40fe4e:	bd70      	pop	{r4, r5, r6, pc}
  40fe50:	f1c4 040c 	rsb	r4, r4, #12
  40fe54:	f1c4 0520 	rsb	r5, r4, #32
  40fe58:	fa00 f304 	lsl.w	r3, r0, r4
  40fe5c:	fa20 f005 	lsr.w	r0, r0, r5
  40fe60:	fa01 f204 	lsl.w	r2, r1, r4
  40fe64:	ea40 0002 	orr.w	r0, r0, r2
  40fe68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40fe6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40fe70:	f141 0100 	adc.w	r1, r1, #0
  40fe74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40fe78:	bf08      	it	eq
  40fe7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40fe7e:	bd70      	pop	{r4, r5, r6, pc}
  40fe80:	f1c4 0520 	rsb	r5, r4, #32
  40fe84:	fa00 f205 	lsl.w	r2, r0, r5
  40fe88:	ea4e 0e02 	orr.w	lr, lr, r2
  40fe8c:	fa20 f304 	lsr.w	r3, r0, r4
  40fe90:	fa01 f205 	lsl.w	r2, r1, r5
  40fe94:	ea43 0302 	orr.w	r3, r3, r2
  40fe98:	fa21 f004 	lsr.w	r0, r1, r4
  40fe9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40fea0:	fa21 f204 	lsr.w	r2, r1, r4
  40fea4:	ea20 0002 	bic.w	r0, r0, r2
  40fea8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40feac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40feb0:	bf08      	it	eq
  40feb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40feb6:	bd70      	pop	{r4, r5, r6, pc}
  40feb8:	f094 0f00 	teq	r4, #0
  40febc:	d10f      	bne.n	40fede <__aeabi_dmul+0x1c2>
  40febe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40fec2:	0040      	lsls	r0, r0, #1
  40fec4:	eb41 0101 	adc.w	r1, r1, r1
  40fec8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40fecc:	bf08      	it	eq
  40fece:	3c01      	subeq	r4, #1
  40fed0:	d0f7      	beq.n	40fec2 <__aeabi_dmul+0x1a6>
  40fed2:	ea41 0106 	orr.w	r1, r1, r6
  40fed6:	f095 0f00 	teq	r5, #0
  40feda:	bf18      	it	ne
  40fedc:	4770      	bxne	lr
  40fede:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40fee2:	0052      	lsls	r2, r2, #1
  40fee4:	eb43 0303 	adc.w	r3, r3, r3
  40fee8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40feec:	bf08      	it	eq
  40feee:	3d01      	subeq	r5, #1
  40fef0:	d0f7      	beq.n	40fee2 <__aeabi_dmul+0x1c6>
  40fef2:	ea43 0306 	orr.w	r3, r3, r6
  40fef6:	4770      	bx	lr
  40fef8:	ea94 0f0c 	teq	r4, ip
  40fefc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ff00:	bf18      	it	ne
  40ff02:	ea95 0f0c 	teqne	r5, ip
  40ff06:	d00c      	beq.n	40ff22 <__aeabi_dmul+0x206>
  40ff08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ff0c:	bf18      	it	ne
  40ff0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ff12:	d1d1      	bne.n	40feb8 <__aeabi_dmul+0x19c>
  40ff14:	ea81 0103 	eor.w	r1, r1, r3
  40ff18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ff1c:	f04f 0000 	mov.w	r0, #0
  40ff20:	bd70      	pop	{r4, r5, r6, pc}
  40ff22:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ff26:	bf06      	itte	eq
  40ff28:	4610      	moveq	r0, r2
  40ff2a:	4619      	moveq	r1, r3
  40ff2c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ff30:	d019      	beq.n	40ff66 <__aeabi_dmul+0x24a>
  40ff32:	ea94 0f0c 	teq	r4, ip
  40ff36:	d102      	bne.n	40ff3e <__aeabi_dmul+0x222>
  40ff38:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40ff3c:	d113      	bne.n	40ff66 <__aeabi_dmul+0x24a>
  40ff3e:	ea95 0f0c 	teq	r5, ip
  40ff42:	d105      	bne.n	40ff50 <__aeabi_dmul+0x234>
  40ff44:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40ff48:	bf1c      	itt	ne
  40ff4a:	4610      	movne	r0, r2
  40ff4c:	4619      	movne	r1, r3
  40ff4e:	d10a      	bne.n	40ff66 <__aeabi_dmul+0x24a>
  40ff50:	ea81 0103 	eor.w	r1, r1, r3
  40ff54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ff58:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ff5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ff60:	f04f 0000 	mov.w	r0, #0
  40ff64:	bd70      	pop	{r4, r5, r6, pc}
  40ff66:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ff6a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40ff6e:	bd70      	pop	{r4, r5, r6, pc}

0040ff70 <__aeabi_ddiv>:
  40ff70:	b570      	push	{r4, r5, r6, lr}
  40ff72:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ff76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ff7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ff7e:	bf1d      	ittte	ne
  40ff80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ff84:	ea94 0f0c 	teqne	r4, ip
  40ff88:	ea95 0f0c 	teqne	r5, ip
  40ff8c:	f000 f8a7 	bleq	4100de <__aeabi_ddiv+0x16e>
  40ff90:	eba4 0405 	sub.w	r4, r4, r5
  40ff94:	ea81 0e03 	eor.w	lr, r1, r3
  40ff98:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ff9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ffa0:	f000 8088 	beq.w	4100b4 <__aeabi_ddiv+0x144>
  40ffa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ffa8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40ffac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40ffb0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40ffb4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40ffb8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40ffbc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40ffc0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40ffc4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ffc8:	429d      	cmp	r5, r3
  40ffca:	bf08      	it	eq
  40ffcc:	4296      	cmpeq	r6, r2
  40ffce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40ffd2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40ffd6:	d202      	bcs.n	40ffde <__aeabi_ddiv+0x6e>
  40ffd8:	085b      	lsrs	r3, r3, #1
  40ffda:	ea4f 0232 	mov.w	r2, r2, rrx
  40ffde:	1ab6      	subs	r6, r6, r2
  40ffe0:	eb65 0503 	sbc.w	r5, r5, r3
  40ffe4:	085b      	lsrs	r3, r3, #1
  40ffe6:	ea4f 0232 	mov.w	r2, r2, rrx
  40ffea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40ffee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40fff2:	ebb6 0e02 	subs.w	lr, r6, r2
  40fff6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40fffa:	bf22      	ittt	cs
  40fffc:	1ab6      	subcs	r6, r6, r2
  40fffe:	4675      	movcs	r5, lr
  410000:	ea40 000c 	orrcs.w	r0, r0, ip
  410004:	085b      	lsrs	r3, r3, #1
  410006:	ea4f 0232 	mov.w	r2, r2, rrx
  41000a:	ebb6 0e02 	subs.w	lr, r6, r2
  41000e:	eb75 0e03 	sbcs.w	lr, r5, r3
  410012:	bf22      	ittt	cs
  410014:	1ab6      	subcs	r6, r6, r2
  410016:	4675      	movcs	r5, lr
  410018:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  41001c:	085b      	lsrs	r3, r3, #1
  41001e:	ea4f 0232 	mov.w	r2, r2, rrx
  410022:	ebb6 0e02 	subs.w	lr, r6, r2
  410026:	eb75 0e03 	sbcs.w	lr, r5, r3
  41002a:	bf22      	ittt	cs
  41002c:	1ab6      	subcs	r6, r6, r2
  41002e:	4675      	movcs	r5, lr
  410030:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  410034:	085b      	lsrs	r3, r3, #1
  410036:	ea4f 0232 	mov.w	r2, r2, rrx
  41003a:	ebb6 0e02 	subs.w	lr, r6, r2
  41003e:	eb75 0e03 	sbcs.w	lr, r5, r3
  410042:	bf22      	ittt	cs
  410044:	1ab6      	subcs	r6, r6, r2
  410046:	4675      	movcs	r5, lr
  410048:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  41004c:	ea55 0e06 	orrs.w	lr, r5, r6
  410050:	d018      	beq.n	410084 <__aeabi_ddiv+0x114>
  410052:	ea4f 1505 	mov.w	r5, r5, lsl #4
  410056:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  41005a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  41005e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  410062:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  410066:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  41006a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  41006e:	d1c0      	bne.n	40fff2 <__aeabi_ddiv+0x82>
  410070:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  410074:	d10b      	bne.n	41008e <__aeabi_ddiv+0x11e>
  410076:	ea41 0100 	orr.w	r1, r1, r0
  41007a:	f04f 0000 	mov.w	r0, #0
  41007e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  410082:	e7b6      	b.n	40fff2 <__aeabi_ddiv+0x82>
  410084:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  410088:	bf04      	itt	eq
  41008a:	4301      	orreq	r1, r0
  41008c:	2000      	moveq	r0, #0
  41008e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  410092:	bf88      	it	hi
  410094:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  410098:	f63f aeaf 	bhi.w	40fdfa <__aeabi_dmul+0xde>
  41009c:	ebb5 0c03 	subs.w	ip, r5, r3
  4100a0:	bf04      	itt	eq
  4100a2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4100a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4100aa:	f150 0000 	adcs.w	r0, r0, #0
  4100ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4100b2:	bd70      	pop	{r4, r5, r6, pc}
  4100b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4100b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4100bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4100c0:	bfc2      	ittt	gt
  4100c2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4100c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4100ca:	bd70      	popgt	{r4, r5, r6, pc}
  4100cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4100d0:	f04f 0e00 	mov.w	lr, #0
  4100d4:	3c01      	subs	r4, #1
  4100d6:	e690      	b.n	40fdfa <__aeabi_dmul+0xde>
  4100d8:	ea45 0e06 	orr.w	lr, r5, r6
  4100dc:	e68d      	b.n	40fdfa <__aeabi_dmul+0xde>
  4100de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4100e2:	ea94 0f0c 	teq	r4, ip
  4100e6:	bf08      	it	eq
  4100e8:	ea95 0f0c 	teqeq	r5, ip
  4100ec:	f43f af3b 	beq.w	40ff66 <__aeabi_dmul+0x24a>
  4100f0:	ea94 0f0c 	teq	r4, ip
  4100f4:	d10a      	bne.n	41010c <__aeabi_ddiv+0x19c>
  4100f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4100fa:	f47f af34 	bne.w	40ff66 <__aeabi_dmul+0x24a>
  4100fe:	ea95 0f0c 	teq	r5, ip
  410102:	f47f af25 	bne.w	40ff50 <__aeabi_dmul+0x234>
  410106:	4610      	mov	r0, r2
  410108:	4619      	mov	r1, r3
  41010a:	e72c      	b.n	40ff66 <__aeabi_dmul+0x24a>
  41010c:	ea95 0f0c 	teq	r5, ip
  410110:	d106      	bne.n	410120 <__aeabi_ddiv+0x1b0>
  410112:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  410116:	f43f aefd 	beq.w	40ff14 <__aeabi_dmul+0x1f8>
  41011a:	4610      	mov	r0, r2
  41011c:	4619      	mov	r1, r3
  41011e:	e722      	b.n	40ff66 <__aeabi_dmul+0x24a>
  410120:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  410124:	bf18      	it	ne
  410126:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41012a:	f47f aec5 	bne.w	40feb8 <__aeabi_dmul+0x19c>
  41012e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  410132:	f47f af0d 	bne.w	40ff50 <__aeabi_dmul+0x234>
  410136:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  41013a:	f47f aeeb 	bne.w	40ff14 <__aeabi_dmul+0x1f8>
  41013e:	e712      	b.n	40ff66 <__aeabi_dmul+0x24a>

00410140 <__gedf2>:
  410140:	f04f 3cff 	mov.w	ip, #4294967295
  410144:	e006      	b.n	410154 <__cmpdf2+0x4>
  410146:	bf00      	nop

00410148 <__ledf2>:
  410148:	f04f 0c01 	mov.w	ip, #1
  41014c:	e002      	b.n	410154 <__cmpdf2+0x4>
  41014e:	bf00      	nop

00410150 <__cmpdf2>:
  410150:	f04f 0c01 	mov.w	ip, #1
  410154:	f84d cd04 	str.w	ip, [sp, #-4]!
  410158:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  41015c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  410160:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  410164:	bf18      	it	ne
  410166:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  41016a:	d01b      	beq.n	4101a4 <__cmpdf2+0x54>
  41016c:	b001      	add	sp, #4
  41016e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  410172:	bf0c      	ite	eq
  410174:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  410178:	ea91 0f03 	teqne	r1, r3
  41017c:	bf02      	ittt	eq
  41017e:	ea90 0f02 	teqeq	r0, r2
  410182:	2000      	moveq	r0, #0
  410184:	4770      	bxeq	lr
  410186:	f110 0f00 	cmn.w	r0, #0
  41018a:	ea91 0f03 	teq	r1, r3
  41018e:	bf58      	it	pl
  410190:	4299      	cmppl	r1, r3
  410192:	bf08      	it	eq
  410194:	4290      	cmpeq	r0, r2
  410196:	bf2c      	ite	cs
  410198:	17d8      	asrcs	r0, r3, #31
  41019a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  41019e:	f040 0001 	orr.w	r0, r0, #1
  4101a2:	4770      	bx	lr
  4101a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4101a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4101ac:	d102      	bne.n	4101b4 <__cmpdf2+0x64>
  4101ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4101b2:	d107      	bne.n	4101c4 <__cmpdf2+0x74>
  4101b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4101b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4101bc:	d1d6      	bne.n	41016c <__cmpdf2+0x1c>
  4101be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4101c2:	d0d3      	beq.n	41016c <__cmpdf2+0x1c>
  4101c4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4101c8:	4770      	bx	lr
  4101ca:	bf00      	nop

004101cc <__aeabi_cdrcmple>:
  4101cc:	4684      	mov	ip, r0
  4101ce:	4610      	mov	r0, r2
  4101d0:	4662      	mov	r2, ip
  4101d2:	468c      	mov	ip, r1
  4101d4:	4619      	mov	r1, r3
  4101d6:	4663      	mov	r3, ip
  4101d8:	e000      	b.n	4101dc <__aeabi_cdcmpeq>
  4101da:	bf00      	nop

004101dc <__aeabi_cdcmpeq>:
  4101dc:	b501      	push	{r0, lr}
  4101de:	f7ff ffb7 	bl	410150 <__cmpdf2>
  4101e2:	2800      	cmp	r0, #0
  4101e4:	bf48      	it	mi
  4101e6:	f110 0f00 	cmnmi.w	r0, #0
  4101ea:	bd01      	pop	{r0, pc}

004101ec <__aeabi_dcmpeq>:
  4101ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4101f0:	f7ff fff4 	bl	4101dc <__aeabi_cdcmpeq>
  4101f4:	bf0c      	ite	eq
  4101f6:	2001      	moveq	r0, #1
  4101f8:	2000      	movne	r0, #0
  4101fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4101fe:	bf00      	nop

00410200 <__aeabi_dcmplt>:
  410200:	f84d ed08 	str.w	lr, [sp, #-8]!
  410204:	f7ff ffea 	bl	4101dc <__aeabi_cdcmpeq>
  410208:	bf34      	ite	cc
  41020a:	2001      	movcc	r0, #1
  41020c:	2000      	movcs	r0, #0
  41020e:	f85d fb08 	ldr.w	pc, [sp], #8
  410212:	bf00      	nop

00410214 <__aeabi_dcmple>:
  410214:	f84d ed08 	str.w	lr, [sp, #-8]!
  410218:	f7ff ffe0 	bl	4101dc <__aeabi_cdcmpeq>
  41021c:	bf94      	ite	ls
  41021e:	2001      	movls	r0, #1
  410220:	2000      	movhi	r0, #0
  410222:	f85d fb08 	ldr.w	pc, [sp], #8
  410226:	bf00      	nop

00410228 <__aeabi_dcmpge>:
  410228:	f84d ed08 	str.w	lr, [sp, #-8]!
  41022c:	f7ff ffce 	bl	4101cc <__aeabi_cdrcmple>
  410230:	bf94      	ite	ls
  410232:	2001      	movls	r0, #1
  410234:	2000      	movhi	r0, #0
  410236:	f85d fb08 	ldr.w	pc, [sp], #8
  41023a:	bf00      	nop

0041023c <__aeabi_dcmpgt>:
  41023c:	f84d ed08 	str.w	lr, [sp, #-8]!
  410240:	f7ff ffc4 	bl	4101cc <__aeabi_cdrcmple>
  410244:	bf34      	ite	cc
  410246:	2001      	movcc	r0, #1
  410248:	2000      	movcs	r0, #0
  41024a:	f85d fb08 	ldr.w	pc, [sp], #8
  41024e:	bf00      	nop

00410250 <__aeabi_dcmpun>:
  410250:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  410254:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  410258:	d102      	bne.n	410260 <__aeabi_dcmpun+0x10>
  41025a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  41025e:	d10a      	bne.n	410276 <__aeabi_dcmpun+0x26>
  410260:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  410264:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  410268:	d102      	bne.n	410270 <__aeabi_dcmpun+0x20>
  41026a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  41026e:	d102      	bne.n	410276 <__aeabi_dcmpun+0x26>
  410270:	f04f 0000 	mov.w	r0, #0
  410274:	4770      	bx	lr
  410276:	f04f 0001 	mov.w	r0, #1
  41027a:	4770      	bx	lr

0041027c <__aeabi_d2iz>:
  41027c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  410280:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  410284:	d215      	bcs.n	4102b2 <__aeabi_d2iz+0x36>
  410286:	d511      	bpl.n	4102ac <__aeabi_d2iz+0x30>
  410288:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  41028c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  410290:	d912      	bls.n	4102b8 <__aeabi_d2iz+0x3c>
  410292:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  410296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  41029a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  41029e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4102a2:	fa23 f002 	lsr.w	r0, r3, r2
  4102a6:	bf18      	it	ne
  4102a8:	4240      	negne	r0, r0
  4102aa:	4770      	bx	lr
  4102ac:	f04f 0000 	mov.w	r0, #0
  4102b0:	4770      	bx	lr
  4102b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4102b6:	d105      	bne.n	4102c4 <__aeabi_d2iz+0x48>
  4102b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4102bc:	bf08      	it	eq
  4102be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4102c2:	4770      	bx	lr
  4102c4:	f04f 0000 	mov.w	r0, #0
  4102c8:	4770      	bx	lr
  4102ca:	bf00      	nop

004102cc <__aeabi_uldivmod>:
  4102cc:	b953      	cbnz	r3, 4102e4 <__aeabi_uldivmod+0x18>
  4102ce:	b94a      	cbnz	r2, 4102e4 <__aeabi_uldivmod+0x18>
  4102d0:	2900      	cmp	r1, #0
  4102d2:	bf08      	it	eq
  4102d4:	2800      	cmpeq	r0, #0
  4102d6:	bf1c      	itt	ne
  4102d8:	f04f 31ff 	movne.w	r1, #4294967295
  4102dc:	f04f 30ff 	movne.w	r0, #4294967295
  4102e0:	f000 b97a 	b.w	4105d8 <__aeabi_idiv0>
  4102e4:	f1ad 0c08 	sub.w	ip, sp, #8
  4102e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4102ec:	f000 f806 	bl	4102fc <__udivmoddi4>
  4102f0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4102f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4102f8:	b004      	add	sp, #16
  4102fa:	4770      	bx	lr

004102fc <__udivmoddi4>:
  4102fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  410300:	468c      	mov	ip, r1
  410302:	460d      	mov	r5, r1
  410304:	4604      	mov	r4, r0
  410306:	9e08      	ldr	r6, [sp, #32]
  410308:	2b00      	cmp	r3, #0
  41030a:	d151      	bne.n	4103b0 <__udivmoddi4+0xb4>
  41030c:	428a      	cmp	r2, r1
  41030e:	4617      	mov	r7, r2
  410310:	d96d      	bls.n	4103ee <__udivmoddi4+0xf2>
  410312:	fab2 fe82 	clz	lr, r2
  410316:	f1be 0f00 	cmp.w	lr, #0
  41031a:	d00b      	beq.n	410334 <__udivmoddi4+0x38>
  41031c:	f1ce 0c20 	rsb	ip, lr, #32
  410320:	fa01 f50e 	lsl.w	r5, r1, lr
  410324:	fa20 fc0c 	lsr.w	ip, r0, ip
  410328:	fa02 f70e 	lsl.w	r7, r2, lr
  41032c:	ea4c 0c05 	orr.w	ip, ip, r5
  410330:	fa00 f40e 	lsl.w	r4, r0, lr
  410334:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  410338:	0c25      	lsrs	r5, r4, #16
  41033a:	fbbc f8fa 	udiv	r8, ip, sl
  41033e:	fa1f f987 	uxth.w	r9, r7
  410342:	fb0a cc18 	mls	ip, sl, r8, ip
  410346:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  41034a:	fb08 f309 	mul.w	r3, r8, r9
  41034e:	42ab      	cmp	r3, r5
  410350:	d90a      	bls.n	410368 <__udivmoddi4+0x6c>
  410352:	19ed      	adds	r5, r5, r7
  410354:	f108 32ff 	add.w	r2, r8, #4294967295
  410358:	f080 8123 	bcs.w	4105a2 <__udivmoddi4+0x2a6>
  41035c:	42ab      	cmp	r3, r5
  41035e:	f240 8120 	bls.w	4105a2 <__udivmoddi4+0x2a6>
  410362:	f1a8 0802 	sub.w	r8, r8, #2
  410366:	443d      	add	r5, r7
  410368:	1aed      	subs	r5, r5, r3
  41036a:	b2a4      	uxth	r4, r4
  41036c:	fbb5 f0fa 	udiv	r0, r5, sl
  410370:	fb0a 5510 	mls	r5, sl, r0, r5
  410374:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  410378:	fb00 f909 	mul.w	r9, r0, r9
  41037c:	45a1      	cmp	r9, r4
  41037e:	d909      	bls.n	410394 <__udivmoddi4+0x98>
  410380:	19e4      	adds	r4, r4, r7
  410382:	f100 33ff 	add.w	r3, r0, #4294967295
  410386:	f080 810a 	bcs.w	41059e <__udivmoddi4+0x2a2>
  41038a:	45a1      	cmp	r9, r4
  41038c:	f240 8107 	bls.w	41059e <__udivmoddi4+0x2a2>
  410390:	3802      	subs	r0, #2
  410392:	443c      	add	r4, r7
  410394:	eba4 0409 	sub.w	r4, r4, r9
  410398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  41039c:	2100      	movs	r1, #0
  41039e:	2e00      	cmp	r6, #0
  4103a0:	d061      	beq.n	410466 <__udivmoddi4+0x16a>
  4103a2:	fa24 f40e 	lsr.w	r4, r4, lr
  4103a6:	2300      	movs	r3, #0
  4103a8:	6034      	str	r4, [r6, #0]
  4103aa:	6073      	str	r3, [r6, #4]
  4103ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4103b0:	428b      	cmp	r3, r1
  4103b2:	d907      	bls.n	4103c4 <__udivmoddi4+0xc8>
  4103b4:	2e00      	cmp	r6, #0
  4103b6:	d054      	beq.n	410462 <__udivmoddi4+0x166>
  4103b8:	2100      	movs	r1, #0
  4103ba:	e886 0021 	stmia.w	r6, {r0, r5}
  4103be:	4608      	mov	r0, r1
  4103c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4103c4:	fab3 f183 	clz	r1, r3
  4103c8:	2900      	cmp	r1, #0
  4103ca:	f040 808e 	bne.w	4104ea <__udivmoddi4+0x1ee>
  4103ce:	42ab      	cmp	r3, r5
  4103d0:	d302      	bcc.n	4103d8 <__udivmoddi4+0xdc>
  4103d2:	4282      	cmp	r2, r0
  4103d4:	f200 80fa 	bhi.w	4105cc <__udivmoddi4+0x2d0>
  4103d8:	1a84      	subs	r4, r0, r2
  4103da:	eb65 0503 	sbc.w	r5, r5, r3
  4103de:	2001      	movs	r0, #1
  4103e0:	46ac      	mov	ip, r5
  4103e2:	2e00      	cmp	r6, #0
  4103e4:	d03f      	beq.n	410466 <__udivmoddi4+0x16a>
  4103e6:	e886 1010 	stmia.w	r6, {r4, ip}
  4103ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4103ee:	b912      	cbnz	r2, 4103f6 <__udivmoddi4+0xfa>
  4103f0:	2701      	movs	r7, #1
  4103f2:	fbb7 f7f2 	udiv	r7, r7, r2
  4103f6:	fab7 fe87 	clz	lr, r7
  4103fa:	f1be 0f00 	cmp.w	lr, #0
  4103fe:	d134      	bne.n	41046a <__udivmoddi4+0x16e>
  410400:	1beb      	subs	r3, r5, r7
  410402:	0c3a      	lsrs	r2, r7, #16
  410404:	fa1f fc87 	uxth.w	ip, r7
  410408:	2101      	movs	r1, #1
  41040a:	fbb3 f8f2 	udiv	r8, r3, r2
  41040e:	0c25      	lsrs	r5, r4, #16
  410410:	fb02 3318 	mls	r3, r2, r8, r3
  410414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  410418:	fb0c f308 	mul.w	r3, ip, r8
  41041c:	42ab      	cmp	r3, r5
  41041e:	d907      	bls.n	410430 <__udivmoddi4+0x134>
  410420:	19ed      	adds	r5, r5, r7
  410422:	f108 30ff 	add.w	r0, r8, #4294967295
  410426:	d202      	bcs.n	41042e <__udivmoddi4+0x132>
  410428:	42ab      	cmp	r3, r5
  41042a:	f200 80d1 	bhi.w	4105d0 <__udivmoddi4+0x2d4>
  41042e:	4680      	mov	r8, r0
  410430:	1aed      	subs	r5, r5, r3
  410432:	b2a3      	uxth	r3, r4
  410434:	fbb5 f0f2 	udiv	r0, r5, r2
  410438:	fb02 5510 	mls	r5, r2, r0, r5
  41043c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  410440:	fb0c fc00 	mul.w	ip, ip, r0
  410444:	45a4      	cmp	ip, r4
  410446:	d907      	bls.n	410458 <__udivmoddi4+0x15c>
  410448:	19e4      	adds	r4, r4, r7
  41044a:	f100 33ff 	add.w	r3, r0, #4294967295
  41044e:	d202      	bcs.n	410456 <__udivmoddi4+0x15a>
  410450:	45a4      	cmp	ip, r4
  410452:	f200 80b8 	bhi.w	4105c6 <__udivmoddi4+0x2ca>
  410456:	4618      	mov	r0, r3
  410458:	eba4 040c 	sub.w	r4, r4, ip
  41045c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  410460:	e79d      	b.n	41039e <__udivmoddi4+0xa2>
  410462:	4631      	mov	r1, r6
  410464:	4630      	mov	r0, r6
  410466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41046a:	f1ce 0420 	rsb	r4, lr, #32
  41046e:	fa05 f30e 	lsl.w	r3, r5, lr
  410472:	fa07 f70e 	lsl.w	r7, r7, lr
  410476:	fa20 f804 	lsr.w	r8, r0, r4
  41047a:	0c3a      	lsrs	r2, r7, #16
  41047c:	fa25 f404 	lsr.w	r4, r5, r4
  410480:	ea48 0803 	orr.w	r8, r8, r3
  410484:	fbb4 f1f2 	udiv	r1, r4, r2
  410488:	ea4f 4518 	mov.w	r5, r8, lsr #16
  41048c:	fb02 4411 	mls	r4, r2, r1, r4
  410490:	fa1f fc87 	uxth.w	ip, r7
  410494:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  410498:	fb01 f30c 	mul.w	r3, r1, ip
  41049c:	42ab      	cmp	r3, r5
  41049e:	fa00 f40e 	lsl.w	r4, r0, lr
  4104a2:	d909      	bls.n	4104b8 <__udivmoddi4+0x1bc>
  4104a4:	19ed      	adds	r5, r5, r7
  4104a6:	f101 30ff 	add.w	r0, r1, #4294967295
  4104aa:	f080 808a 	bcs.w	4105c2 <__udivmoddi4+0x2c6>
  4104ae:	42ab      	cmp	r3, r5
  4104b0:	f240 8087 	bls.w	4105c2 <__udivmoddi4+0x2c6>
  4104b4:	3902      	subs	r1, #2
  4104b6:	443d      	add	r5, r7
  4104b8:	1aeb      	subs	r3, r5, r3
  4104ba:	fa1f f588 	uxth.w	r5, r8
  4104be:	fbb3 f0f2 	udiv	r0, r3, r2
  4104c2:	fb02 3310 	mls	r3, r2, r0, r3
  4104c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4104ca:	fb00 f30c 	mul.w	r3, r0, ip
  4104ce:	42ab      	cmp	r3, r5
  4104d0:	d907      	bls.n	4104e2 <__udivmoddi4+0x1e6>
  4104d2:	19ed      	adds	r5, r5, r7
  4104d4:	f100 38ff 	add.w	r8, r0, #4294967295
  4104d8:	d26f      	bcs.n	4105ba <__udivmoddi4+0x2be>
  4104da:	42ab      	cmp	r3, r5
  4104dc:	d96d      	bls.n	4105ba <__udivmoddi4+0x2be>
  4104de:	3802      	subs	r0, #2
  4104e0:	443d      	add	r5, r7
  4104e2:	1aeb      	subs	r3, r5, r3
  4104e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4104e8:	e78f      	b.n	41040a <__udivmoddi4+0x10e>
  4104ea:	f1c1 0720 	rsb	r7, r1, #32
  4104ee:	fa22 f807 	lsr.w	r8, r2, r7
  4104f2:	408b      	lsls	r3, r1
  4104f4:	fa05 f401 	lsl.w	r4, r5, r1
  4104f8:	ea48 0303 	orr.w	r3, r8, r3
  4104fc:	fa20 fe07 	lsr.w	lr, r0, r7
  410500:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  410504:	40fd      	lsrs	r5, r7
  410506:	ea4e 0e04 	orr.w	lr, lr, r4
  41050a:	fbb5 f9fc 	udiv	r9, r5, ip
  41050e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  410512:	fb0c 5519 	mls	r5, ip, r9, r5
  410516:	fa1f f883 	uxth.w	r8, r3
  41051a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  41051e:	fb09 f408 	mul.w	r4, r9, r8
  410522:	42ac      	cmp	r4, r5
  410524:	fa02 f201 	lsl.w	r2, r2, r1
  410528:	fa00 fa01 	lsl.w	sl, r0, r1
  41052c:	d908      	bls.n	410540 <__udivmoddi4+0x244>
  41052e:	18ed      	adds	r5, r5, r3
  410530:	f109 30ff 	add.w	r0, r9, #4294967295
  410534:	d243      	bcs.n	4105be <__udivmoddi4+0x2c2>
  410536:	42ac      	cmp	r4, r5
  410538:	d941      	bls.n	4105be <__udivmoddi4+0x2c2>
  41053a:	f1a9 0902 	sub.w	r9, r9, #2
  41053e:	441d      	add	r5, r3
  410540:	1b2d      	subs	r5, r5, r4
  410542:	fa1f fe8e 	uxth.w	lr, lr
  410546:	fbb5 f0fc 	udiv	r0, r5, ip
  41054a:	fb0c 5510 	mls	r5, ip, r0, r5
  41054e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  410552:	fb00 f808 	mul.w	r8, r0, r8
  410556:	45a0      	cmp	r8, r4
  410558:	d907      	bls.n	41056a <__udivmoddi4+0x26e>
  41055a:	18e4      	adds	r4, r4, r3
  41055c:	f100 35ff 	add.w	r5, r0, #4294967295
  410560:	d229      	bcs.n	4105b6 <__udivmoddi4+0x2ba>
  410562:	45a0      	cmp	r8, r4
  410564:	d927      	bls.n	4105b6 <__udivmoddi4+0x2ba>
  410566:	3802      	subs	r0, #2
  410568:	441c      	add	r4, r3
  41056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  41056e:	eba4 0408 	sub.w	r4, r4, r8
  410572:	fba0 8902 	umull	r8, r9, r0, r2
  410576:	454c      	cmp	r4, r9
  410578:	46c6      	mov	lr, r8
  41057a:	464d      	mov	r5, r9
  41057c:	d315      	bcc.n	4105aa <__udivmoddi4+0x2ae>
  41057e:	d012      	beq.n	4105a6 <__udivmoddi4+0x2aa>
  410580:	b156      	cbz	r6, 410598 <__udivmoddi4+0x29c>
  410582:	ebba 030e 	subs.w	r3, sl, lr
  410586:	eb64 0405 	sbc.w	r4, r4, r5
  41058a:	fa04 f707 	lsl.w	r7, r4, r7
  41058e:	40cb      	lsrs	r3, r1
  410590:	431f      	orrs	r7, r3
  410592:	40cc      	lsrs	r4, r1
  410594:	6037      	str	r7, [r6, #0]
  410596:	6074      	str	r4, [r6, #4]
  410598:	2100      	movs	r1, #0
  41059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41059e:	4618      	mov	r0, r3
  4105a0:	e6f8      	b.n	410394 <__udivmoddi4+0x98>
  4105a2:	4690      	mov	r8, r2
  4105a4:	e6e0      	b.n	410368 <__udivmoddi4+0x6c>
  4105a6:	45c2      	cmp	sl, r8
  4105a8:	d2ea      	bcs.n	410580 <__udivmoddi4+0x284>
  4105aa:	ebb8 0e02 	subs.w	lr, r8, r2
  4105ae:	eb69 0503 	sbc.w	r5, r9, r3
  4105b2:	3801      	subs	r0, #1
  4105b4:	e7e4      	b.n	410580 <__udivmoddi4+0x284>
  4105b6:	4628      	mov	r0, r5
  4105b8:	e7d7      	b.n	41056a <__udivmoddi4+0x26e>
  4105ba:	4640      	mov	r0, r8
  4105bc:	e791      	b.n	4104e2 <__udivmoddi4+0x1e6>
  4105be:	4681      	mov	r9, r0
  4105c0:	e7be      	b.n	410540 <__udivmoddi4+0x244>
  4105c2:	4601      	mov	r1, r0
  4105c4:	e778      	b.n	4104b8 <__udivmoddi4+0x1bc>
  4105c6:	3802      	subs	r0, #2
  4105c8:	443c      	add	r4, r7
  4105ca:	e745      	b.n	410458 <__udivmoddi4+0x15c>
  4105cc:	4608      	mov	r0, r1
  4105ce:	e708      	b.n	4103e2 <__udivmoddi4+0xe6>
  4105d0:	f1a8 0802 	sub.w	r8, r8, #2
  4105d4:	443d      	add	r5, r7
  4105d6:	e72b      	b.n	410430 <__udivmoddi4+0x134>

004105d8 <__aeabi_idiv0>:
  4105d8:	4770      	bx	lr
  4105da:	bf00      	nop

004105dc <mmc_trans_multipliers>:
  4105dc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  4105ec:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  4105fc:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  41060c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0041061c <sd_mmc_trans_units>:
  41061c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00410638 <sd_trans_multipliers>:
  410638:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  410648:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  410658:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  410668:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00410678 <LfnOfs>:
  410678:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

00410688 <excvt.5681>:
  410688:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  410698:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  4106a8:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  4106b8:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  4106c8:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  4106d8:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  4106e8:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  4106f8:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  410708:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  410718:	5d5b 0000                                   []..

0041071c <Tbl>:
  41071c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  41072c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  41073c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  41074c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  41075c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  41076c:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  41077c:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  41078c:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  41079c:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  4107ac:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  4107bc:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  4107cc:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  4107dc:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  4107ec:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  4107fc:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  41080c:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0041081c <tbl_lower.5431>:
  41081c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  41082c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  41083c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  41084c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  41085c:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  41086c:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  41087c:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  41088c:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  41089c:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  4108ac:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  4108bc:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  4108cc:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  4108dc:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  4108ec:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  4108fc:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  41090c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  41091c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  41092c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  41093c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  41094c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  41095c:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  41096c:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  41097c:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  41098c:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  41099c:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  4109ac:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  4109bc:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  4109cc:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  4109dc:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  4109ec:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

004109fc <tbl_upper.5432>:
  4109fc:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  410a0c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  410a1c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  410a2c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  410a3c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  410a4c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  410a5c:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  410a6c:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  410a7c:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  410a8c:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  410a9c:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  410aac:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  410abc:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  410acc:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  410adc:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  410aec:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  410afc:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  410b0c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  410b1c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  410b2c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  410b3c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  410b4c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  410b5c:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  410b6c:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  410b7c:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  410b8c:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  410b9c:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  410bac:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  410bbc:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  410bcc:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  410bdc:	4449 454c 0000 0000 6d54 5172 0000 0000     IDLE....TmrQ....
  410bec:	6d54 2072 7653 0063                         Tmr Svc.

00410bf4 <__FUNCTION__.11949>:
  410bf4:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  410c04:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  410c14:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  410c24:	204c 6f63 6d6d 6e61 2164 000a               L command!..

00410c30 <__FUNCTION__.9901>:
  410c30:	6968 5f66 6573 646e 0000 0000               hif_send....

00410c3c <__FUNCTION__.9911>:
  410c3c:	6968 5f66 7369 0072                         hif_isr.

00410c44 <__FUNCTION__.9917>:
  410c44:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00410c54 <__FUNCTION__.9932>:
  410c54:	6968 5f66 6572 6563 7669 0065               hif_receive.

00410c60 <__FUNCTION__.9947>:
  410c60:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
  410c70:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
  410c80:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
  410c90:	6961 0a6c 0000 0000 6828 6669 2029 6461     ail.....(hif) ad
  410ca0:	7264 7365 2073 7562 2073 6166 6c69 000a     dress bus fail..
  410cb0:	6828 6669 2029 6f43 7272 7075 6574 2064     (hif) Corrupted 
  410cc0:	6170 6b63 7465 5320 7a69 2065 203d 7525     packet Size = %u
  410cd0:	3c20 204c 203d 7525 202c 2047 203d 7525      <L = %u, G = %u
  410ce0:	202c 504f 3d20 2520 3230 3e58 000a 0000     , OP = %02X>....
  410cf0:	6828 6669 2029 6e69 6176 696c 2064 7267     (hif) invalid gr
  410d00:	756f 2070 4449 000a 6828 6669 2029 6f68     oup ID..(hif) ho
  410d10:	7473 6120 7070 6420 6469 276e 2074 6573     st app didn't se
  410d20:	2074 5852 4420 6e6f 0a65 0000 6828 6669     t RX Done...(hif
  410d30:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
  410d40:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
  410d50:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
  410d60:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
  410d70:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
  410d80:	6828 6669 2029 4146 4c49 7420 206f 6177     (hif) FAIL to wa
  410d90:	656b 7075 7420 6568 6320 6968 0a70 0000     keup the chip...
  410da0:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
  410db0:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
  410dc0:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
  410dd0:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
  410de0:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
  410df0:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
  410e00:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
  410e10:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
  410e20:	6666 7265 7320 7a69 2065 253c 3e64 253c     ffer size <%d><%
  410e30:	3e64 000a 5041 2050 6552 7571 7365 6574     d>..APP Requeste
  410e40:	2064 6441 7264 7365 2073 6562 6f79 646e     d Address beyond
  410e50:	7420 6568 7220 6365 7669 6465 6220 6675      the recived buf
  410e60:	6566 2072 6461 7264 7365 2073 6e61 2064     fer address and 
  410e70:	656c 676e 6874 000a 5247 2070 203f 6425     length..GRp ? %d
  410e80:	000a 0000 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
  410e90:	7720 6b61 7075 7420 6568 6320 6968 0a70      wakup the chip.
  410ea0:	0000 0000                                   ....

00410ea4 <__FUNCTION__.9874>:
  410ea4:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00410eb0 <__FUNCTION__.9898>:
  410eb0:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00410ec0 <__FUNCTION__.9926>:
  410ec0:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  410ed0:	735f 0063 4128 5050 2829 4e49 4f46 0029     _sc.(APP)(INFO).
  410ee0:	6f43 666e 696c 7463 6465 4920 2050 2022     Conflicted IP " 
  410ef0:	7525 252e 2e75 7525 252e 2075 2022 000a     %u.%u.%u.%u " ..
  410f00:	4552 2051 6f4e 2074 6564 6966 656e 2064     REQ Not defined 
  410f10:	6425 000a 654b 2079 7369 6e20 746f 7620     %d..Key is not v
  410f20:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
  410f30:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
  410f40:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
  410f50:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
  410f60:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
  410f70:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
  410f80:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
  410f90:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
  410fa0:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
  410fb0:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
  410fc0:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
  410fd0:	2520 2e75 7525 252e 0a75 0000 694d 206e      %u.%u.%u...Min 
  410fe0:	7264 7669 7265 7620 7265 3a20 2520 2e75     driver ver : %u.
  410ff0:	7525 252e 0a75 0000 7543 7272 6420 6972     %u.%u...Curr dri
  411000:	6576 2072 6576 3a72 2520 2e75 7525 252e     ver ver: %u.%u.%
  411010:	0a75 0000 694d 6d73 7461 6863 4620 7269     u...Mismatch Fir
  411020:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...

00411030 <__FUNCTION__.9711>:
  411030:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.

00411040 <__FUNCTION__.9805>:
  411040:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
  411050:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  411060:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  411070:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  411080:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  411090:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  4110a0:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  4110b0:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  4110c0:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  4110d0:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  4110e0:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  4110f0:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  411100:	000a 0000 6572 3a67 7825 2f20 2520 2078     ....reg:%x / %x 
  411110:	000a 0000                                   ....

00411114 <__FUNCTION__.9792>:
  411114:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00411120 <__FUNCTION__.9799>:
  411120:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
  411130:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
  411140:	645f 6965 696e 2074 6166 6c69 000a 0000     _deinit fail....
  411150:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
  411160:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
  411170:	6c69 000a 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
  411180:	6166 6c69 6920 696e 2074 7562 0a73 0000     fail init bus...
  411190:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
  4111a0:	6920 746e 7265 7572 7470 2e73 0a2e 0000      interrupts.....
  4111b0:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  4111c0:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  4111d0:	4920 2044 6c25 0a78 0000 0000                ID %lx.....

004111dc <__FUNCTION__.9176>:
  4111dc:	7073 5f69 6d63 0064                         spi_cmd.

004111e4 <__FUNCTION__.9184>:
  4111e4:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

004111f0 <__FUNCTION__.9200>:
  4111f0:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00411200 <__FUNCTION__.9215>:
  411200:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00411210 <__FUNCTION__.9225>:
  411210:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00411220 <__FUNCTION__.9233>:
  411220:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00411230 <__FUNCTION__.9242>:
  411230:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00411240 <__FUNCTION__.9250>:
  411240:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0041124c <__FUNCTION__.9267>:
  41124c:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00411258 <crc7_syndrome_table>:
  411258:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  411268:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  411278:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  411288:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  411298:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  4112a8:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  4112b8:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  4112c8:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  4112d8:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  4112e8:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  4112f8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  411308:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  411318:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  411328:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  411338:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  411348:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
  411358:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  411368:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  411378:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  411388:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  411398:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  4113a8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4113b8:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  4113c8:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  4113d8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4113e8:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  4113f8:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  411408:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  411418:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  411428:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  411438:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  411448:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  411458:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  411468:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  411478:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  411488:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  411498:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  4114a8:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  4114b8:	7220 6165 2e64 2e2e 000a 0000 6e5b 696d      read.......[nmi
  4114c8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  4114d8:	2c64 7720 6972 6574 6220 6f6c 6b63 2820     d, write block (
  4114e8:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
  4114f8:	7320 6970 5d20 203a 6146 6c69 6465 6320      spi ]: Failed c
  411508:	646d 7220 7365 6f70 736e 2c65 7720 6972     md response, wri
  411518:	6574 6220 6f6c 6b63 2820 3025 7838 2e29     te block (%08x).
  411528:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  411538:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  411548:	6320 646d 7720 6972 6574 202c 7562 2073      cmd write, bus 
  411558:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  411568:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  411578:	6174 6220 6f6c 6b63 7720 6972 6574 202c     ta block write, 
  411588:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  411598:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4115a8:	2064 6164 6174 6220 6f6c 6b63 6320 6372     d data block crc
  4115b8:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  4115c8:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  4115d8:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  4115e8:	6164 6174 7720 6972 6574 2e2e 0a2e 0000     data write......
  4115f8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  411608:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
  411618:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  411628:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  411638:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
  411648:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  411658:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  411668:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  411678:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
  411688:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  411698:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  4116a8:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
  4116b8:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
  4116c8:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  4116d8:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
  4116e8:	2e2e 0a2e 0000 0000 6e5b 696d 7320 6970     ........[nmi spi
  4116f8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  411708:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
  411718:	7375 6520 7272 726f 2e2e 0a2e 0000 0000     us error........
  411728:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  411738:	2064 6d63 2c64 7220 6165 2064 6572 2067     d cmd, read reg 
  411748:	2528 3830 2978 2e2e 0a2e 0000 6e5b 696d     (%08x)......[nmi
  411758:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  411768:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  411778:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  411788:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  411798:	2064 6164 6174 7220 6165 2e64 2e2e 000a     d data read.....
  4117a8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  4117b8:	2064 6d63 2c64 7720 6972 6574 7220 6765     d cmd, write reg
  4117c8:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
  4117d8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  4117e8:	2064 6572 7073 6e6f 6573 202c 7277 7469     d response, writ
  4117f8:	2065 6572 2067 2528 3830 2978 2e2e 0a2e     e reg (%08x)....
  411808:	0000 0000 4528 5252 2952 7543 7272 6e65     ....(ERRR)Curren
  411818:	2074 253c 3e64 000a 2d2d 5720 4e49 3143     t <%d>..-- WINC1
  411828:	3035 2030 6577 7461 6568 2072 6c63 6569     500 weather clie
  411838:	746e 6520 6178 706d 656c 2d20 0d2d 2d0a     nt example --..-
  411848:	202d 4153 454d 3037 582d 4c50 2044 2d2d     - SAME70-XPLD --
  411858:	0a0d 2d2d 4320 6d6f 6970 656c 3a64 4a20     ..-- Compiled: J
  411868:	6e75 3120 2033 3032 3931 3220 3a30 3335     un 13 2019 20:53
  411878:	303a 2031 2d2d 0a0d 0000 0000 6957 6966     :01 --......Wifi
  411888:	0000 0000 6146 6c69 6465 7420 206f 7263     ....Failed to cr
  411898:	6165 6574 5720 6669 2069 6174 6b73 0a0d     eate Wifi task..
  4118a8:	0000 0000 6473 0000 6143 6472 6920 736e     ....sd..Card ins
  4118b8:	6174 6c6c 4620 4941 0a4c 000d 6c50 6165     tall FAIL...Plea
  4118c8:	6573 7520 706e 756c 2067 6e61 2064 6572     se unplug and re
  4118d8:	702d 756c 2067 6874 2065 6163 6472 0a2e     -plug the card..
  4118e8:	000d 0000 6f4d 6e75 2074 6964 6b73 2820     ....Mount disk (
  4118f8:	5f66 6f6d 6e75 2974 2e2e 0d2e 000a 0000     f_mount)........
  411908:	465b 4941 204c 4f4d 4e55 5d54 7220 7365     [FAIL MOUNT] res
  411918:	2520 0d64 000a 0000 002f 0000 742e 7478      %d...../....txt
  411928:	0000 0000 6c50 6165 6573 7020 756c 2067     ....Please plug 
  411938:	6e61 5320 2c44 4d20 434d 6f20 2072 4453     an SD, MMC or SD
  411948:	4f49 6320 7261 2064 6e69 7320 6f6c 2e74     IO card in slot.
  411958:	0d0a 0000 465b 4941 204c 504f 4e45 205d     ....[FAIL OPEN] 
  411968:	6572 2073 6425 0a0d 0000 0000 6572 6f73     res %d......reso
  411978:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
  411988:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
  411998:	2e64 6425 0a0d 0a0d 0000 0000 6425 252e     d.%d........%d.%
  4119a8:	2e64 6425 252e 0064 6f73 6b63 7465 6d5f     d.%d.%d.socket_m
  4119b8:	6773 635f 6e6f 656e 7463 000a 4547 2054     sg_connect..GET 
  4119c8:	642f 6c65 7465 4165 6c6c 4820 5454 2f50     /deleteAll HTTP/
  4119d8:	2e31 0d31 680a 736f 3a74 6520 626d 7261     1.1..host: embar
  4119e8:	6163 6f64 2d73 6162 6b63 6e65 2e64 6568     cados-backend.he
  4119f8:	6f72 756b 7061 2e70 6f63 0d6d 410a 6363     rokuapp.com..Acc
  411a08:	7065 3a74 2a20 2a2f 0a0d 0a0d 0000 0000     ept: */*........
  411a18:	4547 2054 722f 6365 6965 6576 312f 4820     GET /receive/1 H
  411a28:	5454 2f50 2e31 0d31 680a 736f 3a74 6520     TTP/1.1..host: e
  411a38:	626d 7261 6163 6f64 2d73 6162 6b63 6e65     mbarcados-backen
  411a48:	2e64 6568 6f72 756b 7061 2e70 6f63 0d6d     d.herokuapp.com.
  411a58:	410a 6363 7065 3a74 2a20 2a2f 0a0d 0a0d     .Accept: */*....
  411a68:	0000 0000 6573 646e 0a20 0000 6f73 6b63     ....send ...sock
  411a78:	7465 635f 3a62 6320 6e6f 656e 7463 6520     et_cb: connect e
  411a88:	7272 726f 0d21 000a 756d 6973 4e63 6d61     rror!...musicNam
  411a98:	3a65 0000 414e 454d 4220 4645 524f 3a45     e:..NAME BEFORE:
  411aa8:	2520 0073 6f73 6b63 7465 635f 3a62 7220      %s.socket_cb: r
  411ab8:	6365 2076 7265 6f72 2172 0a0d 0000 0000     ecv error!......
  411ac8:	4547 2054 6e2f 7765 252f 2073 5448 5054     GET /new/%s HTTP
  411ad8:	312f 312e 0a0d 6f68 7473 203a 6d65 6162     /1.1..host: emba
  411ae8:	6372 6461 736f 622d 6361 656b 646e 682e     rcados-backend.h
  411af8:	7265 6b6f 6175 7070 632e 6d6f 0a0d 6341     erokuapp.com..Ac
  411b08:	6563 7470 203a 2f2a 0d2a 0d0a 000a 0000     cept: */*.......
  411b18:	0a0c 2d0d 202d 4453 4d2f 434d 532f 4944     ...-- SD/MMC/SDI
  411b28:	204f 6143 6472 4520 6178 706d 656c 6f20     O Card Example o
  411b38:	206e 6146 4674 2073 2d2d 0d0a 0000 0000     n FatFs --......
  411b48:	3032 353a 3a33 3130 0000 0000 754a 206e     20:53:01....Jun 
  411b58:	3331 3220 3130 0039 2d2d 4320 6d6f 6970     13 2019.-- Compi
  411b68:	656c 3a64 2520 2073 7325 2d20 0a2d 000d     led: %s %s --...
  411b78:	3a30 7325 0000 0000 414e 454d 4120 5446     0:%s....NAME AFT
  411b88:	5245 203a 7325 0a0d 0000 0000 4f44 454e     ER: %s......DONE
  411b98:	5220 4145 4944 474e 0a0d 0000 616d 6e69      READING....main
  411ba8:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
  411bb8:	6163 6c6c 6520 7272 726f 2821 6425 0d29     call error!(%d).
  411bc8:	000a 0000 4544 4353 4255 4152 0000 0000     ....DESCUBRA....
  411bd8:	616d 6e69 203a 6f63 6e6e 6365 6974 676e     main: connecting
  411be8:	7420 206f 6957 6946 4120 2050 7325 2e2e      to WiFi AP %s..
  411bf8:	0d2e 000a 6167 7073 7261 697a 686e 316f     ....gasparzinho1
  411c08:	3639 0032 6f73 6b63 7465 6920 696e 2074     962.socket init 
  411c18:	000a 0000 616d 6e69 203a 6166 6c69 6465     ....main: failed
  411c28:	7420 206f 7263 6165 6574 5420 5043 6320      to create TCP c
  411c38:	696c 6e65 2074 6f73 6b63 7465 6520 7272     lient socket err
  411c48:	726f 0d21 000a 0000 6f73 6b63 7465 6320     or!.....socket c
  411c58:	6e6f 656e 7463 6e69 0a67 0000 7265 6f72     onnecting...erro
  411c68:	0a72 0000 7473 6361 206b 766f 7265 6c66     r...stack overfl
  411c78:	776f 2520 2078 7325 0a0d 0000 6977 6966     ow %x %s....wifi
  411c88:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
  411c98:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
  411ca8:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
  411cb8:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
  411cc8:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
  411cd8:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
  411ce8:	7525 0a0d 0000 0000                         %u......

00411cf0 <_global_impure_ptr>:
  411cf0:	0080 2040 4e49 0046 6e69 0066 414e 004e     ..@ INF.inf.NAN.
  411d00:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  411d10:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  411d20:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  411d30:	296c 0000 0030 0000                         l)..0...

00411d38 <blanks.7223>:
  411d38:	2020 2020 2020 2020 2020 2020 2020 2020                     

00411d48 <zeroes.7224>:
  411d48:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00411d58 <blanks.7217>:
  411d58:	2020 2020 2020 2020 2020 2020 2020 2020                     

00411d68 <zeroes.7218>:
  411d68:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  411d78:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  411d88:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00411d98 <__mprec_bigtens>:
  411d98:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  411da8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  411db8:	bf3c 7f73 4fdd 7515                         <.s..O.u

00411dc0 <__mprec_tens>:
  411dc0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  411dd0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  411de0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  411df0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  411e00:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  411e10:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  411e20:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  411e30:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  411e40:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  411e50:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  411e60:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  411e70:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  411e80:	9db4 79d9 7843 44ea                         ...yCx.D

00411e88 <p05.6055>:
  411e88:	0005 0000 0019 0000 007d 0000               ........}...

00411e94 <_ctype_>:
  411e94:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  411ea4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  411eb4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  411ec4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  411ed4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  411ee4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  411ef4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  411f04:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  411f14:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00411f98 <_init>:
  411f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411f9a:	bf00      	nop
  411f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  411f9e:	bc08      	pop	{r3}
  411fa0:	469e      	mov	lr, r3
  411fa2:	4770      	bx	lr

00411fa4 <__init_array_start>:
  411fa4:	0040c831 	.word	0x0040c831

00411fa8 <__frame_dummy_init_array_entry>:
  411fa8:	00400165                                e.@.

00411fac <_fini>:
  411fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411fae:	bf00      	nop
  411fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  411fb2:	bc08      	pop	{r3}
  411fb4:	469e      	mov	lr, r3
  411fb6:	4770      	bx	lr

00411fb8 <__fini_array_start>:
  411fb8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <uxCriticalNesting>:
20400030:	aaaa aaaa                                   ....

20400034 <egstrNmBusCapabilities>:
20400034:	1000 0000                                   ....

20400038 <clk_status_reg_adr>:
20400038:	000f 0000                                   ....

2040003c <g_interrupt_enabled>:
2040003c:	0001 0000                                   ....

20400040 <SystemCoreClock>:
20400040:	0900 003d                                   ..=.

20400044 <gau8MacAddr>:
20400044:	0042 1361 74f9 0000                         B.a..t..

2040004c <server_host_name>:
2040004c:	7468 7074 2f3a 652f 626d 7261 6163 6f64     http://embarcado
2040005c:	2d73 6162 6b63 6e65 2e64 6568 6f72 756b     s-backend.heroku
2040006c:	7061 2e70 6f63 006d                         app.com.

20400074 <tcp_client_socket>:
20400074:	00ff 0000                                   ....

20400078 <_impure_ptr>:
20400078:	0080 2040 0000 0000                         ..@ ....

20400080 <impure_data>:
20400080:	0000 0000 036c 2040 03d4 2040 043c 2040     ....l.@ ..@ <.@ 
	...
20400128:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400138:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004a8 <__atexit_recursive_mutex>:
204004a8:	0a30 2041                                   0.A 

204004ac <__global_locale>:
204004ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040050c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040052c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040054c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040056c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040058c:	f6b5 0040 e7c9 0040 0000 0000 1e94 0041     ..@...@.......A.
2040059c:	1d94 0041 1a68 0041 1a68 0041 1a68 0041     ..A.h.A.h.A.h.A.
204005ac:	1a68 0041 1a68 0041 1a68 0041 1a68 0041     h.A.h.A.h.A.h.A.
204005bc:	1a68 0041 1a68 0041 ffff ffff ffff ffff     h.A.h.A.........
204005cc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005f4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20400618 <__malloc_av_>:
	...
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 
204009d0:	09c8 2040 09c8 2040 09d0 2040 09d0 2040     ..@ ..@ ..@ ..@ 
204009e0:	09d8 2040 09d8 2040 09e0 2040 09e0 2040     ..@ ..@ ..@ ..@ 
204009f0:	09e8 2040 09e8 2040 09f0 2040 09f0 2040     ..@ ..@ ..@ ..@ 
20400a00:	09f8 2040 09f8 2040 0a00 2040 0a00 2040     ..@ ..@ ..@ ..@ 
20400a10:	0a08 2040 0a08 2040 0a10 2040 0a10 2040     ..@ ..@ ..@ ..@ 

20400a20 <__malloc_sbrk_base>:
20400a20:	ffff ffff                                   ....

20400a24 <__malloc_trim_threshold>:
20400a24:	0000 0002                                   ....
